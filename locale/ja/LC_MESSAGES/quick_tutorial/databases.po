# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../quick_tutorial/databases.rst:5
msgid "19: Databases Using SQLAlchemy"
msgstr "19: SQLAlchemyを使用したデータベース(19: Databases Using SQLAlchemy)"

#: ../../quick_tutorial/databases.rst:7
msgid "Store and retrieve data using the SQLAlchemy ORM atop the SQLite database."
msgstr "SQLAlchemy ORMを使用してSQLiteデータベース上のデータを格納および取得します。"

#: ../../quick_tutorial/databases.rst:11
msgid "Background"
msgstr "背景(Background)"

#: ../../quick_tutorial/databases.rst:13
msgid ""
"Our Pyramid-based wiki application now needs database-backed storage of "
"pages. This frequently means an SQL database. The Pyramid community "
"strongly supports the :ref:`SQLAlchemy <sqla:index_toplevel>` project and"
" its :ref:`object-relational mapper (ORM) <sqla:ormtutorial_toplevel>` as"
" a convenient, Pythonic way to interface to databases."
msgstr ""
"Pyramidベースのwikiアプリケーションでデータベースに基づいたページの格納が"
"必要になりました。これはSQLデータベースのことを意味します。Pyramidコミュニ"
"ティは、:ref:`SQLAlchemy <sqla:index_toplevel>` プロジェクトと"
"その :ref:`object-relational mapper (ORM) <sqla:ormtutorial_toplevel>` "
"をパイソニックなデータベースへのインタフェースとして強くサポートしています。"


#: ../../quick_tutorial/databases.rst:19
msgid ""
"In this step we hook up SQLAlchemy to a SQLite database table, providing "
"storage and retrieval for the wiki pages in the previous step."
msgstr ""
"今回のステップではSQLAlchemyをSQLiteデータベーステーブルに接続して、"
"前回の手順でwikiページの格納と検索を行います。"

#: ../../quick_tutorial/databases.rst:24
msgid ""
"The ``pyramid-cookiecutter-alchemy`` cookiecutter is really helpful for "
"getting an SQLAlchemy project going, including generation of the console "
"script. Since we want to see all the decisions, we will forgo convenience"
" in this tutorial, and wire it up ourselves."
msgstr ""
" ``pyramid-cookiecutter-alchemy`` cookiecutterは"
"コンソールスクリプトでSQLAlchemyを含むプロジェクトの生成するのに本当に便利です。"
"すべての設定を見たいのでチュートリアルでは利便性を失いますが自分自身で設定していきます。"

#: ../../quick_tutorial/databases.rst:31
msgid "Objectives"
msgstr "目的(Objectives)"

#: ../../quick_tutorial/databases.rst:33
msgid "Store pages in SQLite by using SQLAlchemy models."
msgstr "SQLAlchemyのモデルを使用してSQLiteにページを格納します。"

#: ../../quick_tutorial/databases.rst:35
msgid "Use SQLAlchemy queries to list/add/view/edit pages."
msgstr "SQLAlchemyのクエリを使用してページの一覧・追加・表示・編集を行います。"

#: ../../quick_tutorial/databases.rst:37
msgid ""
"Provide a database-initialize command by writing a Pyramid *console "
"script* which can be run from the command line."
msgstr ""
"コマンドラインから実行できるPyramidコンソールスクリプトを作成して、"
"database-initializeコマンドを提供します"

#: ../../quick_tutorial/databases.rst:42
msgid "Steps"
msgstr "手順(Steps)"

#: ../../quick_tutorial/databases.rst:44
msgid "We are going to use the forms step as our starting point:"
msgstr "フォ―ムを出発点にして使用します:"

#: ../../quick_tutorial/databases.rst:50
msgid ""
"We need to add some dependencies in ``databases/setup.py`` as well as an "
"\"entry point\" for the command-line script:"
msgstr ""
"依存関係を追加する ``databases/setup.py``  とともに「エントリポイント」のコマンド"
"ラインスクリプトを追加する必要があります:"

#: ../../quick_tutorial/databases.rst:58
msgid ""
"We aren't yet doing ``$VENV/bin/pip install -e .`` as we will change it "
"later."
msgstr ""
"後で変更するために、``$VENV/bin/pip install -e .``　はここでは行いません。"


#: ../../quick_tutorial/databases.rst:61
msgid ""
"Our configuration file at ``databases/development.ini`` wires together "
"some new pieces:"
msgstr ""
"設定ファイル（ ``databases/development.ini`` ）は一緒にいくつかの部品をつなぎます："

#: ../../quick_tutorial/databases.rst:67
msgid ""
"This engine configuration now needs to be read into the application "
"through changes in ``databases/tutorial/__init__.py``:"
msgstr ""
"エンジンの設定  ``databases/tutorial/__init__.py``　)は以下の変更を"
"とおしてアプリケーションに読み込む必要があります:"

#: ../../quick_tutorial/databases.rst:73
msgid ""
"Make a command-line script at ``databases/tutorial/initialize_db.py`` to "
"initialize the database:"
msgstr ""
"以下のコマンドラインスクリプト( ``databases/tutorial/initialize_db.py`` )"
"を使用して、データベースを初期化します:"

#: ../../quick_tutorial/databases.rst:79
msgid "Since ``setup.py`` changed, we now run it:"
msgstr "``setup.py`` は変更されるので実行します:"

#: ../../quick_tutorial/databases.rst:85
msgid "The script references some models in ``databases/tutorial/models.py``:"
msgstr "スクリプトは、以下のモデル(  ``databases/tutorial/models.py`` )を参照しています:"

#: ../../quick_tutorial/databases.rst:90
msgid "Let's run this console script, thus producing our database and table:"
msgstr "コンソールスクリプトを実行してデータベースとテーブルを生成しましょう:"

#: ../../quick_tutorial/databases.rst:119
msgid ""
"With our data now driven by SQLAlchemy queries, we need to update our "
"``databases/tutorial/views.py``:"
msgstr ""
"データがSQLAlchemyクエリによって駆動されたので、以下のファイル"
"（ ``databases/tutorial/views.py`` ）を更新する必要があります:"

#: ../../quick_tutorial/databases.rst:125
msgid ""
"Our tests in ``databases/tutorial/tests.py`` changed to include "
"SQLAlchemy bootstrapping:"
msgstr ""
"``databases/tutorial/tests.py`` のテストにはSQLAlchemyのブートストラップが含まれています:"

#: ../../quick_tutorial/databases.rst:131
msgid "Run the tests in your package using ``py.test``:"
msgstr "``py.test`` パッケージを使用してテストを実行します:"

#: ../../quick_tutorial/databases.rst:139
msgid "Run your Pyramid application with:"
msgstr "Pyramidアプリケーションを実行します:"

#: ../../quick_tutorial/databases.rst:145
msgid "Open http://localhost:6543/ in a browser."
msgstr "ブラウザで http://localhost:6543/  を開きます。"

#: ../../quick_tutorial/databases.rst:149
msgid "Analysis"
msgstr "分析(Analysis)"

#: ../../quick_tutorial/databases.rst:151
msgid ""
"Let's start with the dependencies. We made the decision to use "
"``SQLAlchemy`` to talk to our database. We also, though, installed "
"``pyramid_tm`` and ``zope.sqlalchemy``. Why?"
msgstr ""
"依存関係についてから始めましょう。 ``SQLAlchemy`` を使用してデータベース"
"と会話することにしました。同時に ``pyramid_tm`` と ``zope.sqlalchemy`` も"
"インストールしました。どうして？
"

#: ../../quick_tutorial/databases.rst:155
msgid ""
"Pyramid has a strong orientation towards support for ``transactions``. "
"Specifically, you can install a transaction manager into your application"
" either as middleware or a Pyramid \"tween\". Then, just before you "
"return the response, all transaction-aware parts of your application are "
"executed."
msgstr ""
"Pyramid は、トランザクションのサポートに関して強い志向を持っています。"
"具体的にはアプリケーションにミドルウェアまたはPyramid \"tween\" として"
"トランザクションマネージャをインストールができます。"
"次にレスポンスを返す直前に、アプリケーションのすべてのトランザクションの"
"対応する部分が実行されます。"

#: ../../quick_tutorial/databases.rst:160
msgid ""
"This means Pyramid view code usually doesn't manage transactions. If your"
" view code or a template generates an error, the transaction manager "
"aborts the transaction. This is a very liberating way to write code."
msgstr ""
"これはPyramidのビューのコードは通常トランザクションを管理しないことを意味しています。"
"ビューのコードまたはテンプレートでエラーが発生した場合は"
"トランザクションマネージャはトランザクションを中止します。"
"これはコードを書くための非常に解放的な方法です。"

#: ../../quick_tutorial/databases.rst:164
msgid ""
"The ``pyramid_tm`` package provides a \"tween\" that is configured in the"
" ``development.ini`` configuration file. That installs it. We then need a"
" package that makes SQLAlchemy, and thus the RDBMS transaction manager, "
"integrate with the Pyramid transaction manager. That's what "
"``zope.sqlalchemy`` does."
msgstr ""
"``pyramid_tm`` パッケージは構成ファイル ``development.ini``  で構成された"
"「 \"tween\" 」を提供します。\"tween\" をインストールします。"
"次にSQLAlchemyつまりはRDBMSトランザクションマネージャを"
"Pyramidのトランザクションマネージャと統合するパッケージが必要です。"
"これが ``zope.sqlalchemy`` の役割です。"

#: ../../quick_tutorial/databases.rst:170
msgid ""
"Where do we point at the location on disk for the SQLite file? In the "
"configuration file. This lets consumers of our package change the "
"location in a safe (non-code) way. That is, in configuration. This "
"configuration-oriented approach isn't required in Pyramid; you can still "
"make such statements in your ``__init__.py`` or some companion module."
msgstr ""
"SQLiteファイルはディスク内のどこにありますでしょうか？"
"設定ファイル内にあります。"
"これによりコンシューマーはパッケージを安全な（コードではない）方法で"
"場所を変更できます。すなわ設定のことです。"
"この構成指向のアプローチはPyramidでは必須ではありません。"
" ``__init__.py`` や他のコンパニオンモジュールでもこの​​ようなステートメントを作成できます。"

#: ../../quick_tutorial/databases.rst:176
msgid ""
"The ``initialize_tutorial_db`` is a nice example of framework support. "
"You point your setup at the location of some ``[console_scripts]``, and "
"these get generated into your virtual environment's ``bin`` directory. "
"Our console script follows the pattern of being fed a configuration file "
"with all the bootstrapping. It then opens SQLAlchemy and creates the root"
" of the wiki, which also makes the SQLite file. Note the ``with "
"transaction.manager`` part that puts the work in the scope of a "
"transaction, as we aren't inside a web request where this is done "
"automatically."
msgstr ""
"``initialize_tutorial_db`` はフレームワークをサポートする好例です。"
"いくつかの ``[console_scripts]`` の場所の設定に関しては仮想環境"
"の ``bin`` ディレクトリに生成されます。コンソールスクリプトは"
"すべてのブートストラップを含む設定ファイルが入力されるパターンに従います。"
"次にSQLAlchemyを開き、SQLiteファイルを作成するwikiのルートを作成します。"
"トランザクションのスコープ内に作業を置く ``with transaction.manager`` の"
"パーツに注意してください。"
"これはトランザクションが自動的に行われるWebリクエスト内にないためです。"


#: ../../quick_tutorial/databases.rst:185
msgid ""
"The ``models.py`` does a little bit of extra work to hook up SQLAlchemy "
"into the Pyramid transaction manager. It then declares the model for a "
"``Page``."
msgstr ""
"``models.py`` はSQLAlchemyをPyramidのトランザクションマネージャーに"
"接続するために少し追加作業を行います。その後、``Page``　モデルを宣言します。"

#: ../../quick_tutorial/databases.rst:188
msgid ""
"Our views have changes primarily around replacing our dummy dictionary-"
"of-dictionaries data with proper database support: list the rows, add a "
"row, edit a row, and delete a row."
msgstr ""
"ビューではダミー辞書データを適切なデータベースサポート"
"（行の一覧表示、行の追加、行の編集、および行の削除）に置き換えるところ主な変更です。"

#: ../../quick_tutorial/databases.rst:194
msgid "Extra credit"
msgstr "エクストラクレジット(Extra credit)"

#: ../../quick_tutorial/databases.rst:196
msgid "Why all this code? Why can't I just type two lines and have magic ensue?"
msgstr "なぜこのコードはすべて？ なぜ2行を入力して魔法を続けられないのですか？"

#: ../../quick_tutorial/databases.rst:198
msgid "Give a try at a button that deletes a wiki page."
msgstr "Wikiページを作成するボタンの実装にチャレンジしてみてください。"

