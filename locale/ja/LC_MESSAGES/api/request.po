# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/request.rst:4
msgid ":mod:`pyramid.request`"
msgstr ""

#: of pyramid.request.Request:1
msgid ""
"A subclass of the :term:`WebOb` Request class.  An instance of this class"
" is created by the :term:`router` and is provided to a view callable (and"
" to other subsystems) as the ``request`` argument."
msgstr ""

#: of pyramid.request.Request:6
msgid ""
"The documentation below (save for the ``add_response_callback`` and "
"``add_finished_callback`` methods, which are defined in this subclass "
"itself, and the attributes ``context``, ``registry``, ``root``, "
"``subpath``, ``traversed``, ``view_name``, ``virtual_root`` , and "
"``virtual_root_path``, each of which is added to the request by the "
":term:`router` at request ingress time) are autogenerated from the WebOb "
"source code used when this documentation was generated."
msgstr ""

#: of pyramid.request.Request:14
msgid ""
"Due to technical constraints, we can't yet display the WebOb version "
"number from which this documentation is autogenerated, but it will be the"
" 'prevailing WebOb version' at the time of the release of this "
":app:`Pyramid` version.  See https://webob.org/ for further information."
msgstr ""

#: ../../api/request.rst:21
msgid ""
"The :term:`context` will be available as the ``context`` attribute of the"
" :term:`request` object.  It will be the context object implied by the "
"current request.  See :ref:`traversal_chapter` for information about "
"context objects."
msgstr ""

#: ../../api/request.rst:28
msgid ""
"The :term:`application registry` will be available as the ``registry`` "
"attribute of the :term:`request` object.  See :ref:`zca_chapter` for more"
" information about the application registry."
msgstr ""

#: ../../api/request.rst:35
msgid ""
"The :term:`root` object will be available as the ``root`` attribute of "
"the :term:`request` object.  It will be the resource object at which "
"traversal started (the root).  See :ref:`traversal_chapter` for "
"information about root objects."
msgstr ""

#: ../../api/request.rst:42
msgid ""
"The traversal :term:`subpath` will be available as the ``subpath`` "
"attribute of the :term:`request` object.  It will be a sequence "
"containing zero or more elements (which will be Unicode objects).  See "
":ref:`traversal_chapter` for information about the subpath."
msgstr ""

#: ../../api/request.rst:50
msgid ""
"The \"traversal path\" will be available as the ``traversed`` attribute "
"of the :term:`request` object.  It will be a sequence representing the "
"ordered set of names that were used to traverse to the :term:`context`, "
"not including the view name or subpath.  If there is a virtual root "
"associated with the request, the virtual root path is included within the"
" traversal path.  See :ref:`traversal_chapter` for more information."
msgstr ""

#: ../../api/request.rst:60
msgid ""
"The :term:`view name` will be available as the ``view_name`` attribute of"
" the :term:`request` object.  It will be a single string (possibly the "
"empty string if we're rendering a default view).  See "
":ref:`traversal_chapter` for information about view names."
msgstr ""

#: ../../api/request.rst:68
msgid ""
"The :term:`virtual root` will be available as the ``virtual_root`` "
"attribute of the :term:`request` object.  It will be the virtual root "
"object implied by the current request. See :ref:`vhosting_chapter` for "
"more information about virtual roots."
msgstr ""

#: ../../api/request.rst:76
msgid ""
"The  :term:`virtual  root`  *path*  will be  available  as  the "
"``virtual_root_path`` attribute  of the :term:`request` object. It will  "
"be a  sequence representing the  ordered set  of names that were  used to"
"  traverse to the  virtual root  object.  See :ref:`vhosting_chapter`  "
"for  more  information  about  virtual roots."
msgstr ""

#: ../../api/request.rst:85
msgid ""
"If an exception was raised by a :term:`root factory` or a :term:`view "
"callable`, or at various other points where :app:`Pyramid` executes user-"
"defined code during the processing of a request, the exception object "
"which was caught will be available as the ``exception`` attribute of the "
"request within a :term:`exception view`, a :term:`response callback` or a"
" :term:`finished callback`.  If no exception occurred, the value of "
"``request.exception`` will be ``None`` within response and finished "
"callbacks."
msgstr ""

#: ../../api/request.rst:97
msgid ""
"If an exception was raised by a :term:`root factory` or a :term:`view "
"callable`, or at various other points where :app:`Pyramid` executes user-"
"defined code during the processing of a request, result of "
"``sys.exc_info()`` will be available as the ``exc_info`` attribute of the"
" request within a :term:`exception view`, a :term:`response callback` or "
"a :term:`finished callback`.  If no exception occurred, the value of "
"``request.exc_info`` will be ``None`` within response and finished "
"callbacks."
msgstr ""

#: ../../api/request.rst:108
msgid ""
"This attribute is actually a \"reified\" property which returns an "
"instance of the :class:`pyramid.response.Response` class.  The response "
"object returned does not exist until this attribute is accessed.  Once it"
" is accessed, subsequent accesses to this request object will return the "
"same :class:`~pyramid.response.Response` object."
msgstr ""

#: ../../api/request.rst:114
msgid ""
"The ``request.response`` API can is used by renderers.  A render obtains "
"the response object it will return from a view that uses that renderer by"
" accessing ``request.response``.  Therefore, it's possible to use the "
"``request.response`` API to set up a response object with \"the right\" "
"attributes (e.g. by calling ``request.response.set_cookie(...)`` or "
"``request.response.content_type = 'text/plain'``, etc) within a view that"
" uses a renderer.  For example, within a view that uses a "
":term:`renderer`::"
msgstr ""

#: ../../api/request.rst:127
msgid ""
"Mutations to this response object will be preserved in the response sent "
"to the client after rendering.  For more information about using "
"``request.response`` in conjunction with a renderer, see "
":ref:`request_response_attr`."
msgstr ""

#: ../../api/request.rst:132
msgid ""
"Non-renderer code can also make use of request.response instead of "
"creating a response \"by hand\".  For example, in view code::"
msgstr ""

#: ../../api/request.rst:140
msgid ""
"Note that the response in this circumstance is not \"global\"; it still "
"must be returned from the view code if a renderer is not used."
msgstr ""

#: ../../api/request.rst:145
msgid ""
"If a :term:`session factory` has been configured, this attribute will "
"represent the current user's :term:`session` object.  If a session "
"factory *has not* been configured, requesting the ``request.session`` "
"attribute will cause a :class:`pyramid.exceptions.ConfigurationError` to "
"be raised."
msgstr ""

#: ../../api/request.rst:153
msgid ""
"If a :term:`route` has matched during this request, this attribute will "
"be a dictionary containing the values matched by the URL pattern "
"associated with the route.  If a route has not matched during this "
"request, the value of this attribute will be ``None``. See "
":ref:`matchdict`."
msgstr ""

#: ../../api/request.rst:161
msgid ""
"If a :term:`route` has matched during this request, this attribute will "
"be an object representing the route matched by the URL pattern associated"
" with the route.  If a route has not matched during this request, the "
"value of this attribute will be ``None``. See :ref:`matched_route`."
msgstr ""

#: ../../api/request.rst:171
msgid ""
"A property which returns the :term:`userid` of the currently "
"authenticated user or ``None`` if there is no :term:`authentication "
"policy` in effect or there is no currently authenticated user.  This "
"differs from :attr:`~pyramid.request.Request.unauthenticated_userid`, "
"because the effective authentication policy will have ensured that a "
"record associated with the :term:`userid` exists in persistent storage; "
"if it has not, this value will be ``None``."
msgstr ""

#: ../../api/request.rst:183
msgid ""
"A property which returns a value which represents the *claimed* (not "
"verified) :term:`userid` of the credentials present in the request. "
"``None`` if there is no :term:`authentication policy` in effect or there "
"is no user data associated with the current request.  This differs from "
":attr:`~pyramid.request.Request.authenticated_userid`, because the "
"effective authentication policy will not ensure that a record associated "
"with the :term:`userid` exists in persistent storage. Even if the "
":term:`userid` does not exist in persistent storage, this value will be "
"the value of the :term:`userid` *claimed* by the request data."
msgstr ""

#: ../../api/request.rst:198
msgid ""
"A property which returns the list of 'effective' :term:`principal` "
"identifiers for this request.  This list typically includes the "
":term:`userid` of the currently authenticated user if a user is currently"
" authenticated, but this depends on the :term:`authentication policy` in "
"effect.  If no :term:`authentication policy` is in effect, this will "
"return a sequence containing only the :attr:`pyramid.security.Everyone` "
"principal."
msgstr ""

#: ../../api/request.rst:210
msgid ""
"Obtain a response object from the Pyramid application based on "
"information in the ``request`` object provided.  The ``request`` object "
"must be an object that implements the Pyramid request interface (such as "
"a :class:`pyramid.request.Request` instance).  If ``use_tweens`` is "
"``True``, the request will be sent to the :term:`tween` in the tween "
"stack closest to the request ingress.  If ``use_tweens`` is ``False``, "
"the request will be sent to the main router handler, and no tweens will "
"be invoked."
msgstr ""

#: ../../api/request.rst:219
msgid "This function also:"
msgstr ""

#: ../../api/request.rst:221
msgid ""
"manages the threadlocal stack (so that "
":func:`~pyramid.threadlocal.get_current_request` and "
":func:`~pyramid.threadlocal.get_current_registry` work during a request)"
msgstr ""

#: ../../api/request.rst:226
msgid ""
"Adds a ``registry`` attribute (the current Pyramid registry) and a "
"``invoke_subrequest`` attribute (a callable) to the request object it's "
"handed."
msgstr ""

#: ../../api/request.rst:230
msgid ""
"sets request extensions (such as those added via "
":meth:`~pyramid.config.Configurator.add_request_method` or "
":meth:`~pyramid.config.Configurator.set_request_property`) on the request"
" it's passed."
msgstr ""

#: ../../api/request.rst:235
msgid ""
"causes a :class:`~pyramid.events.NewRequest` event to be sent at the "
"beginning of request processing."
msgstr ""

#: ../../api/request.rst:238
msgid ""
"causes a :class:`~pyramid.events.ContextFound` event to be sent when a "
"context resource is found."
msgstr ""

#: ../../api/request.rst:241
msgid ""
"Ensures that the user implied by the request passed has the necessary "
"authorization to invoke view callable before calling it."
msgstr ""

#: ../../api/request.rst:244
msgid ""
"Calls any :term:`response callback` functions defined within the "
"request's lifetime if a response is obtained from the Pyramid "
"application."
msgstr ""

#: ../../api/request.rst:248
msgid ""
"causes a :class:`~pyramid.events.NewResponse` event to be sent if a "
"response is obtained."
msgstr ""

#: ../../api/request.rst:251
msgid ""
"Calls any :term:`finished callback` functions defined within the "
"request's lifetime."
msgstr ""

#: ../../api/request.rst:254
msgid ""
"``invoke_subrequest`` isn't *actually* a method of the Request object; "
"it's a callable added when the Pyramid router is invoked, or when a "
"subrequest is invoked.  This means that it's not available for use on a "
"request provided by e.g. the ``pshell`` environment."
msgstr ""

#: ../../api/request.rst:261
msgid "See also :ref:`subrequest_chapter`."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:1
msgid ""
"Executes an exception view related to the request it's called upon. The "
"arguments it takes are these:"
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:4
msgid "``exc_info``"
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:6
msgid ""
"If provided, should be a 3-tuple in the form provided by "
"``sys.exc_info()``.  If not provided, ``sys.exc_info()`` will be called "
"to obtain the current interpreter exception information.  Default: "
"``None``."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:11
msgid "``request``"
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:13
msgid ""
"If the request to be used is not the same one as the instance that this "
"method is called upon, it may be passed here.  Default: ``None``."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:17
msgid "``secure``"
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:19
msgid ""
"If the exception view should not be rendered if the current user does not"
" have the appropriate permission, this should be ``True``. Default: "
"``True``."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:23
msgid "``reraise``"
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:25
msgid ""
"A boolean indicating whether the original error should be reraised if a "
":term:`response` object could not be created. If ``False`` then an "
":class:`pyramid.httpexceptions.HTTPNotFound`` exception will be raised. "
"Default: ``False``."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:30
msgid ""
"If a response is generated then ``request.exception`` and "
"``request.exc_info`` will be left at the values used to render the "
"response. Otherwise the previous values for ``request.exception`` and "
"``request.exc_info`` will be restored."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:37
msgid ""
"The ``request.exception`` and ``request.exc_info`` properties will "
"reflect the exception used to render the response where previously they "
"were reset to the values prior to invoking the method."
msgstr ""

#: of pyramid.request.Request.invoke_exception_view:42
msgid "Also added the ``reraise`` argument."
msgstr ""

#: of pyramid.request.Request.has_permission:1
msgid ""
"Given a permission and an optional context, returns an instance of "
":data:`pyramid.security.Allowed` if the permission is granted to this "
"request with the provided context, or the context already associated with"
" the request.  Otherwise, returns an instance of "
":data:`pyramid.security.Denied`.  This method delegates to the current "
"authentication and authorization policies.  Returns "
":data:`pyramid.security.Allowed` unconditionally if no authentication "
"policy has been registered for this request.  If ``context`` is not "
"supplied or is supplied as ``None``, the context used is the "
"``request.context`` attribute."
msgstr ""

#: of pyramid.request.Request.has_permission
msgid "パラメータ"
msgstr ""

#: of pyramid.request.Request.has_permission:12
msgid "Does this request have the given permission?"
msgstr ""

#: of pyramid.request.Request.has_permission:14
msgid "A resource object or ``None``"
msgstr ""

#: of pyramid.request.Request.has_permission
msgid "戻り値"
msgstr ""

#: of pyramid.request.Request.has_permission:16
msgid ""
"Either :class:`pyramid.security.Allowed` or "
":class:`pyramid.security.Denied`."
msgstr ""

#: of pyramid.request.Request.add_response_callback:1
msgid ""
"Add a callback to the set of callbacks to be called by the :term:`router`"
" at a point after a :term:`response` object is successfully created.  "
":app:`Pyramid` does not have a global response object: this functionality"
" allows an application to register an action to be performed against the "
"response once one is created."
msgstr ""

#: of pyramid.request.Request.add_response_callback:8
msgid ""
"A 'callback' is a callable which accepts two positional parameters: "
"``request`` and ``response``.  For example:"
msgstr ""

#: of pyramid.request.Request.add_response_callback:19
msgid ""
"Response callbacks are called in the order they're added (first-to-most-"
"recently-added).  No response callback is called if an exception happens "
"in application code, or if the response object returned by :term:`view` "
"code is invalid."
msgstr ""

#: of pyramid.request.Request.add_response_callback:24
msgid ""
"All response callbacks are called *after* the tweens and *before* the "
":class:`pyramid.events.NewResponse` event is sent."
msgstr ""

#: of pyramid.request.Request.add_response_callback:27
msgid ""
"Errors raised by callbacks are not handled specially.  They will be "
"propagated to the caller of the :app:`Pyramid` router application."
msgstr ""

#: of pyramid.request.Request.add_response_callback:33
msgid "See also :ref:`using_response_callbacks`."
msgstr ""

#: of pyramid.request.Request.add_finished_callback:1
msgid ""
"Add a callback to the set of callbacks to be called unconditionally by "
"the :term:`router` at the very end of request processing."
msgstr ""

#: of pyramid.request.Request.add_finished_callback:5
msgid ""
"``callback`` is a callable which accepts a single positional parameter: "
"``request``.  For example:"
msgstr ""

#: of pyramid.request.Request.add_finished_callback:21
msgid ""
"Finished callbacks are called in the order they're added ( first- to "
"most-recently- added).  Finished callbacks (unlike response callbacks) "
"are *always* called, even if an exception happens in application code "
"that prevents a response from being generated."
msgstr ""

#: of pyramid.request.Request.add_finished_callback:27
msgid ""
"The set of finished callbacks associated with a request are called *very "
"late* in the processing of that request; they are essentially the last "
"thing called by the :term:`router`. They are called after response "
"processing has already occurred in a top-level ``finally:`` block within "
"the router request processing code.  As a result, mutations performed to "
"the ``request`` provided to a finished callback will have no meaningful "
"effect, because response processing will have already occurred, and the "
"request's scope will expire almost immediately after all finished "
"callbacks have been processed."
msgstr ""

#: of pyramid.request.Request.add_finished_callback:38
msgid ""
"Errors raised by finished callbacks are not handled specially. They will "
"be propagated to the caller of the :app:`Pyramid` router application."
msgstr ""

#: of pyramid.request.Request.add_finished_callback:44
msgid "See also :ref:`using_finished_callbacks`."
msgstr ""

#: of pyramid.request.Request.route_url:1
msgid ""
"Generates a fully qualified URL for a named :app:`Pyramid` :term:`route "
"configuration`."
msgstr ""

#: of pyramid.request.Request.route_url:4
msgid ""
"Use the route's ``name`` as the first positional argument. Additional "
"positional arguments (``*elements``) are appended to the URL as path "
"segments after it is generated."
msgstr ""

#: of pyramid.request.Request.route_url:8
msgid ""
"Use keyword arguments to supply values which match any dynamic path "
"elements in the route definition.  Raises a :exc:`KeyError` exception if "
"the URL cannot be generated for any reason (not enough arguments, for "
"example)."
msgstr ""

#: of pyramid.request.Request.route_url:13
msgid ""
"For example, if you've defined a route named \"foobar\" with the path "
"``{foo}/{bar}/*traverse``::"
msgstr ""

#: of pyramid.request.Request.route_url:30
msgid ""
"Values replacing ``:segment`` arguments can be passed as strings or "
"Unicode objects.  They will be encoded to UTF-8 and URL-quoted before "
"being placed into the generated URL."
msgstr ""

#: of pyramid.request.Request.route_url:34
msgid ""
"Values replacing ``*remainder`` arguments can be passed as strings *or* "
"tuples of Unicode/string values.  If a tuple is passed as a "
"``*remainder`` replacement value, its values are URL-quoted and encoded "
"to UTF-8.  The resulting strings are joined with slashes and rendered "
"into the URL.  If a string is passed as a ``*remainder`` replacement "
"value, it is tacked on to the URL after being URL-quoted-except-for-"
"embedded-slashes."
msgstr ""

#: of pyramid.request.Request.route_url:42
msgid ""
"If ``_query`` is provided, it will be used to compose a query string that"
" will be tacked on to the end of the URL.  The value of ``_query`` may be"
" a sequence of two-tuples *or* a data structure with an ``.items()`` "
"method that returns a sequence of two-tuples (presumably a dictionary). "
"This data structure will be turned into a query string per the "
"documentation of the :func:`pyramid.url.urlencode` function.  This will "
"produce a query string in the ``x-www-form-urlencoded`` format.  A "
"non-``x-www-form-urlencoded`` query string may be used by passing a "
"*string* value as ``_query`` in which case it will be URL-quoted (e.g. "
"query=\"foo bar\" will become \"foo%20bar\").  However, the result will "
"not need to be in ``k=v`` form as required by ``x-www-form-urlencoded``."
"  After the query data is turned into a query string, a leading ``?`` is "
"prepended, and the resulting string is appended to the generated URL."
msgstr ""

#: of pyramid.request.Request.route_url:60
msgid ""
"Python data structures that are passed as ``_query`` which are sequences "
"or dictionaries are turned into a string under the same rules as when run"
" through :func:`urllib.urlencode` with the ``doseq`` argument equal to "
"``True``.  This means that sequences can be passed as values, and a k=v "
"pair will be placed into the query string for each value."
msgstr ""

#: of pyramid.request.Request.route_url:67
msgid ""
"If a keyword argument ``_anchor`` is present, its string representation "
"will be quoted per :rfc:`3986#section-3.5` and used as a named anchor in "
"the generated URL (e.g. if ``_anchor`` is passed as ``foo`` and the route"
" URL is ``http://example.com/route/url``, the resulting generated URL "
"will be ``http://example.com/route/url#foo``)."
msgstr ""

#: of pyramid.request.Request.route_url:76
msgid ""
"If ``_anchor`` is passed as a string, it should be UTF-8 encoded. If "
"``_anchor`` is passed as a Unicode object, it will be converted to UTF-8 "
"before being appended to the URL."
msgstr ""

#: of pyramid.request.Request.route_url:80
msgid ""
"If both ``_anchor`` and ``_query`` are specified, the anchor element will"
" always follow the query element, e.g. ``http://example.com?foo=1#bar``."
msgstr ""

#: of pyramid.request.Request.route_url:84
msgid ""
"If any of the keyword arguments ``_scheme``, ``_host``, or ``_port`` is "
"passed and is non-``None``, the provided value will replace the named "
"portion in the generated URL.  For example, if you pass "
"``_host='foo.com'``, and the URL that would have been generated without "
"the host replacement is ``http://example.com/a``, the result will be "
"``http://foo.com/a``."
msgstr ""

#: of pyramid.request.Request.route_url:91
msgid ""
"Note that if ``_scheme`` is passed as ``https``, and ``_port`` is not "
"passed, the ``_port`` value is assumed to have been passed as ``443``.  "
"Likewise, if ``_scheme`` is passed as ``http`` and ``_port`` is not "
"passed, the ``_port`` value is assumed to have been passed as ``80``. To "
"avoid this behavior, always explicitly pass ``_port`` whenever you pass "
"``_scheme``."
msgstr ""

#: of pyramid.request.Request.route_url:98
msgid ""
"If a keyword ``_app_url`` is present, it will be used as the "
"protocol/hostname/port/leading path prefix of the generated URL. For "
"example, using an ``_app_url`` of ``http://example.com:8080/foo`` would "
"cause the URL ``http://example.com:8080/foo/fleeb/flub`` to be returned "
"from this function if the expansion of the route pattern associated with "
"the ``route_name`` expanded to ``/fleeb/flub``.  If ``_app_url`` is not "
"specified, the result of ``request.application_url`` will be used as the "
"prefix (the default)."
msgstr ""

#: of pyramid.request.Request.route_url:109
msgid ""
"If both ``_app_url`` and any of ``_scheme``, ``_host``, or ``_port`` are "
"passed, ``_app_url`` takes precedence and any values passed for "
"``_scheme``, ``_host``, and ``_port`` will be ignored."
msgstr ""

#: of pyramid.request.Request.route_url:113
msgid ""
"This function raises a :exc:`KeyError` if the URL cannot be generated due"
" to missing replacement names.  Extra replacement names are ignored."
msgstr ""

#: of pyramid.request.Request.route_url:117
msgid ""
"If the route object which matches the ``route_name`` argument has a "
":term:`pregenerator`, the ``*elements`` and ``**kw`` arguments passed to "
"this function might be augmented or changed."
msgstr ""

#: of pyramid.request.Request.route_url:121
msgid ""
"Allow the ``_query`` option to be a string to enable alternative "
"encodings."
msgstr ""

#: of pyramid.request.Request.route_url:125
msgid ""
"The ``_anchor`` option will be escaped instead of using its raw string "
"representation."
msgstr ""

#: of pyramid.request.Request.route_url:128
msgid ""
"If ``_query`` or ``_anchor`` are falsey (such as ``None`` or an empty "
"string) they will not be included in the generated url."
msgstr ""

#: of pyramid.request.Request.route_path:1
msgid ""
"Generates a path (aka a 'relative URL', a URL minus the host, scheme, and"
" port) for a named :app:`Pyramid` :term:`route configuration`."
msgstr ""

#: of pyramid.request.Request.route_path:4
msgid ""
"This function accepts the same argument as "
":meth:`pyramid.request.Request.route_url` and performs the same duty. It "
"just omits the host, port, and scheme information in the return value; "
"only the script_name, path, query parameters, and anchor data are present"
" in the returned string."
msgstr ""

#: of pyramid.request.Request.route_path:10
msgid ""
"For example, if you've defined a route named 'foobar' with the path "
"``/{foo}/{bar}``, this call to ``route_path``::"
msgstr ""

#: of pyramid.request.Request.current_route_path:16
#: pyramid.request.Request.route_path:15
msgid "Will return the string ``/1/2``."
msgstr ""

#: of pyramid.request.Request.route_path:19
msgid ""
"Calling ``request.route_path('route')`` is the same as calling "
"``request.route_url('route', _app_url=request.script_name)``. "
":meth:`pyramid.request.Request.route_path` is, in fact, implemented in "
"terms of :meth:`pyramid.request.Request.route_url` in just this way. As a"
" result, any ``_app_url`` passed within the ``**kw`` values to "
"``route_path`` will be ignored."
msgstr ""

#: of pyramid.request.Request.current_route_url:1
msgid ""
"Generates a fully qualified URL for a named :app:`Pyramid` :term:`route "
"configuration` based on the 'current route'."
msgstr ""

#: of pyramid.request.Request.current_route_url:4
msgid ""
"This function supplements :meth:`pyramid.request.Request.route_url`. It "
"presents an easy way to generate a URL for the 'current route' (defined "
"as the route which matched when the request was generated)."
msgstr ""

#: of pyramid.request.Request.current_route_url:9
msgid ""
"The arguments to this method have the same meaning as those with the same"
" names passed to :meth:`pyramid.request.Request.route_url`.  It also "
"understands an extra argument which ``route_url`` does not named "
"``_route_name``."
msgstr ""

#: of pyramid.request.Request.current_route_url:14
msgid ""
"The route name used to generate a URL is taken from either the "
"``_route_name`` keyword argument or the name of the route which is "
"currently associated with the request if ``_route_name`` was not passed."
"  Keys and values from the current request :term:`matchdict` are combined"
" with the ``kw`` arguments to form a set of defaults named ``newkw``.  "
"Then ``request.route_url(route_name, *elements, **newkw)`` is called, "
"returning a URL."
msgstr ""

#: of pyramid.request.Request.current_route_url:22
msgid "Examples follow."
msgstr ""

#: of pyramid.request.Request.current_route_url:24
msgid ""
"If the 'current route' has the route pattern ``/foo/{page}`` and the "
"current url path is ``/foo/1`` , the matchdict will be ``{'page':'1'}``."
"  The result of ``request.current_route_url()`` in this situation will be"
" ``/foo/1``."
msgstr ""

#: of pyramid.request.Request.current_route_url:29
msgid ""
"If the 'current route' has the route pattern ``/foo/{page}`` and the "
"current url path is ``/foo/1``, the matchdict will be ``{'page':'1'}``.  "
"The result of ``request.current_route_url(page='2')`` in this situation "
"will be ``/foo/2``."
msgstr ""

#: of pyramid.request.Request.current_route_url:35
msgid ""
"Usage of the ``_route_name`` keyword argument: if our routing table "
"defines routes ``/foo/{action}`` named 'foo' and ``/foo/{action}/{page}``"
" named ``fooaction``, and the current url pattern is ``/foo/view`` (which"
" has matched the ``/foo/{action}`` route), we may want to use the "
"matchdict args to generate a URL to the ``fooaction`` route.  In this "
"scenario, ``request.current_route_url(_route_name='fooaction', "
"page='5')`` Will return string like: ``/foo/view/5``."
msgstr ""

#: of pyramid.request.Request.current_route_path:1
msgid ""
"Generates a path (aka a 'relative URL', a URL minus the host, scheme, and"
" port) for the :app:`Pyramid` :term:`route configuration` matched by the "
"current request."
msgstr ""

#: of pyramid.request.Request.current_route_path:5
msgid ""
"This function accepts the same argument as "
":meth:`pyramid.request.Request.current_route_url` and performs the same "
"duty.  It just omits the host, port, and scheme information in the return"
" value; only the script_name, path, query parameters, and anchor data are"
" present in the returned string."
msgstr ""

#: of pyramid.request.Request.current_route_path:11
msgid ""
"For example, if the route matched by the current request has the pattern "
"``/{foo}/{bar}``, this call to ``current_route_path``::"
msgstr ""

#: of pyramid.request.Request.current_route_path:20
msgid ""
"Calling ``request.current_route_path('route')`` is the same as calling "
"``request.current_route_url('route', _app_url=request.script_name)``. "
":meth:`pyramid.request.Request.current_route_path` is, in fact, "
"implemented in terms of :meth:`pyramid.request.Request.current_route_url`"
" in just this way. As a result, any ``_app_url`` passed within the "
"``**kw`` values to ``current_route_path`` will be ignored."
msgstr ""

#: of pyramid.request.Request.static_url:1
msgid ""
"Generates a fully qualified URL for a static :term:`asset`. The asset "
"must live within a location defined via the "
":meth:`pyramid.config.Configurator.add_static_view` :term:`configuration "
"declaration` (see :ref:`static_assets_section`)."
msgstr ""

#: of pyramid.request.Request.static_path:10
#: pyramid.request.Request.static_url:6
msgid "Example::"
msgstr ""

#: of pyramid.request.Request.static_url:13
msgid ""
"The ``path`` argument points at a file or directory on disk which a URL "
"should be generated for.  The ``path`` may be either a relative path "
"(e.g. ``static/foo.css``) or an absolute path (e.g. "
"``/abspath/to/static/foo.css``) or a :term:`asset specification` (e.g. "
"``mypackage:static/foo.css``)."
msgstr ""

#: of pyramid.request.Request.static_url:19
msgid ""
"The purpose of the ``**kw`` argument is the same as the purpose of the "
":meth:`pyramid.request.Request.route_url` ``**kw`` argument.  See the "
"documentation for that function to understand the arguments which you can"
" provide to it.  However, typically, you don't need to pass anything as "
"``*kw`` when generating a static asset URL."
msgstr ""

#: of pyramid.request.Request.static_url:25
msgid ""
"This function raises a :exc:`ValueError` if a static view definition "
"cannot be found which matches the path specification."
msgstr ""

#: of pyramid.request.Request.static_path:1
msgid ""
"Generates a path (aka a 'relative URL', a URL minus the host, scheme, and"
" port) for a static resource."
msgstr ""

#: of pyramid.request.Request.static_path:4
msgid ""
"This function accepts the same argument as "
":meth:`pyramid.request.Request.static_url` and performs the same duty.  "
"It just omits the host, port, and scheme information in the return value;"
" only the script_name, path, query parameters, and anchor data are "
"present in the returned string."
msgstr ""

#: of pyramid.request.Request.static_path:18
msgid ""
"Calling ``request.static_path(apath)`` is the same as calling "
"``request.static_url(apath, _app_url=request.script_name)``. "
":meth:`pyramid.request.Request.static_path` is, in fact, implemented in "
"terms of :meth:`pyramid.request.Request.static_url` in just this way. As "
"a result, any ``_app_url`` passed within the ``**kw`` values to "
"``static_path`` will be ignored."
msgstr ""

#: of pyramid.request.Request.resource_url:1
msgid ""
"Generate a string representing the absolute URL of the :term:`resource` "
"object based on the ``wsgi.url_scheme``, ``HTTP_HOST`` or ``SERVER_NAME``"
" in the request, plus any ``SCRIPT_NAME``.  The overall result of this "
"method is always a UTF-8 encoded string."
msgstr ""

#: of pyramid.request.Request.resource_url:7
msgid "Examples::"
msgstr ""

#: of pyramid.request.Request.resource_url:29
msgid ""
"Any positional arguments passed in as ``elements`` must be strings "
"Unicode objects, or integer objects.  These will be joined by slashes and"
" appended to the generated resource URL.  Each of the elements passed in "
"is URL-quoted before being appended; if any element is Unicode, it will "
"converted to a UTF-8 bytestring before being URL-quoted. If any element "
"is an integer, it will be converted to its string representation before "
"being URL-quoted."
msgstr ""

#: of pyramid.request.Request.resource_url:37
msgid ""
"if no ``elements`` arguments are specified, the resource URL will end "
"with a trailing slash.  If any ``elements`` are used, the generated URL "
"will *not* end in a trailing slash."
msgstr ""

#: of pyramid.request.Request.resource_url:42
msgid ""
"If ``query`` is provided, it will be used to compose a query string that "
"will be tacked on to the end of the URL.  The value of ``query`` may be a"
" sequence of two-tuples *or* a data structure with an ``.items()`` method"
" that returns a sequence of two-tuples (presumably a dictionary). This "
"data structure will be turned into a query string per the documentation "
"of the :func:`pyramid.url.urlencode` function.  This will produce a query"
" string in the ``x-www-form-urlencoded`` format.  A non-``x-www-form-"
"urlencoded`` query string may be used by passing a *string* value as "
"``query`` in which case it will be URL-quoted (e.g. query=\"foo bar\" "
"will become \"foo%20bar\").  However, the result will not need to be in "
"``k=v`` form as required by ``x-www-form-urlencoded``.  After the query "
"data is turned into a query string, a leading ``?`` is prepended, and the"
" resulting string is appended to the generated URL."
msgstr ""

#: of pyramid.request.Request.resource_url:60
msgid ""
"Python data structures that are passed as ``query`` which are sequences "
"or dictionaries are turned into a string under the same rules as when run"
" through :func:`urllib.urlencode` with the ``doseq`` argument equal to "
"``True``.  This means that sequences can be passed as values, and a k=v "
"pair will be placed into the query string for each value."
msgstr ""

#: of pyramid.request.Request.resource_url:67
msgid ""
"If a keyword argument ``anchor`` is present, its string representation "
"will be used as a named anchor in the generated URL (e.g. if ``anchor`` "
"is passed as ``foo`` and the resource URL is "
"``http://example.com/resource/url``, the resulting generated URL will be "
"``http://example.com/resource/url#foo``)."
msgstr ""

#: of pyramid.request.Request.resource_url:75
msgid ""
"If ``anchor`` is passed as a string, it should be UTF-8 encoded. If "
"``anchor`` is passed as a Unicode object, it will be converted to UTF-8 "
"before being appended to the URL."
msgstr ""

#: of pyramid.request.Request.resource_url:79
msgid ""
"If both ``anchor`` and ``query`` are specified, the anchor element will "
"always follow the query element, e.g. ``http://example.com?foo=1#bar``."
msgstr ""

#: of pyramid.request.Request.resource_url:83
msgid ""
"If any of the keyword arguments ``scheme``, ``host``, or ``port`` is "
"passed and is non-``None``, the provided value will replace the named "
"portion in the generated URL.  For example, if you pass "
"``host='foo.com'``, and the URL that would have been generated without "
"the host replacement is ``http://example.com/a``, the result will be "
"``http://foo.com/a``."
msgstr ""

#: of pyramid.request.Request.resource_url:90
msgid ""
"If ``scheme`` is passed as ``https``, and an explicit ``port`` is not "
"passed, the ``port`` value is assumed to have been passed as ``443``. "
"Likewise, if ``scheme`` is passed as ``http`` and ``port`` is not passed,"
" the ``port`` value is assumed to have been passed as ``80``. To avoid "
"this behavior, always explicitly pass ``port`` whenever you pass "
"``scheme``."
msgstr ""

#: of pyramid.request.Request.resource_url:97
msgid ""
"If a keyword argument ``app_url`` is passed and is not ``None``, it "
"should be a string that will be used as the port/hostname/initial path "
"portion of the generated URL instead of the default request application "
"URL.  For example, if ``app_url='http://foo'``, then the resulting url of"
" a resource that has a path of ``/baz/bar`` will be "
"``http://foo/baz/bar``.  If you want to generate completely relative URLs"
" with no leading scheme, host, port, or initial path, you can pass "
"``app_url=''``.  Passing ``app_url=''`` when the resource path is "
"``/baz/bar`` will return ``/baz/bar``."
msgstr ""

#: of pyramid.request.Request.resource_url:107
msgid ""
"If ``app_url`` is passed and any of ``scheme``, ``port``, or ``host`` are"
" also passed, ``app_url`` will take precedence and the values passed for "
"``scheme``, ``host``, and/or ``port`` will be ignored."
msgstr ""

#: of pyramid.request.Request.resource_url:111
msgid ""
"If the ``resource`` passed in has a ``__resource_url__`` method, it will "
"be used to generate the URL (scheme, host, port, path) for the base "
"resource which is operated upon by this function."
msgstr ""

#: of pyramid.request.Request.resource_url:117
msgid "See also :ref:`overriding_resource_url_generation`."
msgstr ""

#: of pyramid.request.Request.resource_url:119
msgid ""
"If ``route_name`` is passed, this function will delegate its URL "
"production to the ``route_url`` function.  Calling "
"``resource_url(someresource, 'element1', 'element2', query={'a':1}, "
"route_name='blogentry')`` is roughly equivalent to doing::"
msgstr ""

#: of pyramid.request.Request.resource_url:133
msgid ""
"It is only sensible to pass ``route_name`` if the route being named has a"
" ``*remainder`` stararg value such as ``*traverse``.  The remainder value"
" will be ignored in the output otherwise."
msgstr ""

#: of pyramid.request.Request.resource_url:137
msgid ""
"By default, the resource path value will be passed as the name "
"``traverse`` when ``route_url`` is called.  You can influence this by "
"passing a different ``route_remainder_name`` value if the route has a "
"different ``*stararg`` value at its end.  For example if the route "
"pattern you want to replace has a ``*subpath`` stararg ala "
"``/foo*subpath``::"
msgstr ""

#: of pyramid.request.Request.resource_url:150
msgid ""
"If ``route_name`` is passed, it is also permissible to pass ``route_kw``,"
" which will passed as additional keyword arguments to ``route_url``.  "
"Saying ``resource_url(someresource, 'element1', 'element2', "
"route_name='blogentry', route_kw={'id':'4'}, _query={'a':'1'})`` is "
"roughly equivalent to::"
msgstr ""

#: of pyramid.request.Request.resource_url:165
msgid ""
"If ``route_kw`` or ``route_remainder_name`` is passed, but ``route_name``"
" is not passed, both ``route_kw`` and ``route_remainder_name`` will be "
"ignored.  If ``route_name`` is passed, the ``__resource_url__`` method of"
" the resource passed is ignored unconditionally.  This feature is "
"incompatible with resources which generate their own URLs."
msgstr ""

#: of pyramid.request.Request.resource_url:174
msgid ""
"If the :term:`resource` used is the result of a :term:`traversal`, it "
"must be :term:`location`-aware.  The resource can also be the context of "
"a :term:`URL dispatch`; contexts found this way do not need to be "
"location-aware."
msgstr ""

#: of pyramid.request.Request.resource_url:181
msgid ""
"If a 'virtual root path' is present in the request environment (the value"
" of the WSGI environ key ``HTTP_X_VHM_ROOT``), and the resource was "
"obtained via :term:`traversal`, the URL path will not include the virtual"
" root prefix (it will be stripped off the left hand side of the generated"
" URL)."
msgstr ""

#: of pyramid.request.Request.resource_url:189
msgid ""
"For backwards compatibility purposes, this method is also aliased as the "
"``model_url`` method of request."
msgstr ""

#: of pyramid.request.Request.resource_url:192
msgid "Added the ``app_url`` keyword argument."
msgstr ""

#: of pyramid.request.Request.resource_url:195
msgid "Allow the ``query`` option to be a string to enable alternative encodings."
msgstr ""

#: of pyramid.request.Request.resource_url:199
msgid ""
"The ``anchor`` option will be escaped instead of using its raw string "
"representation."
msgstr ""

#: of pyramid.request.Request.resource_url:202
msgid ""
"Added the ``route_name``, ``route_kw``, and ``route_remainder_name`` "
"keyword arguments."
msgstr ""

#: of pyramid.request.Request.resource_url:205
msgid ""
"If ``query`` or ``anchor`` are falsey (such as ``None`` or an empty "
"string) they will not be included in the generated url."
msgstr ""

#: of pyramid.request.Request.resource_path:1
msgid ""
"Generates a path (aka a 'relative URL', a URL minus the host, scheme, and"
" port) for a :term:`resource`."
msgstr ""

#: of pyramid.request.Request.resource_path:4
msgid ""
"This function accepts the same argument as "
":meth:`pyramid.request.Request.resource_url` and performs the same duty."
"  It just omits the host, port, and scheme information in the return "
"value; only the script_name, path, query parameters, and anchor data are "
"present in the returned string."
msgstr ""

#: of pyramid.request.Request.resource_path:12
msgid ""
"Calling ``request.resource_path(resource)`` is the same as calling "
"``request.resource_path(resource, app_url=request.script_name)``. "
":meth:`pyramid.request.Request.resource_path` is, in fact, implemented in"
" terms of :meth:`pyramid.request.Request.resource_url` in just this way. "
"As a result, any ``app_url`` passed within the ``**kw`` values to "
"``route_path`` will be ignored.  ``scheme``, ``host``, and ``port`` are "
"also ignored."
msgstr ""

#: ../../api/request.rst:289
msgid ""
"This property will return the JSON-decoded variant of the request body.  "
"If the request body is not well-formed JSON, or there is no body "
"associated with this request, this property will raise an exception."
msgstr ""

#: ../../api/request.rst:296
msgid "See also :ref:`request_json_body`."
msgstr ""

#: ../../api/request.rst:300
msgid "Add a callable or a property descriptor to the request instance."
msgstr ""

#: ../../api/request.rst:302
msgid ""
"Properties, unlike attributes, are lazily evaluated by executing an "
"underlying callable when accessed. They can be useful for adding features"
" to an object without any cost if those features go unused."
msgstr ""

#: ../../api/request.rst:307
msgid ""
"A property may also be reified via the :class:`pyramid.decorator.reify` "
"decorator by setting ``reify=True``, allowing the result of the "
"evaluation to be cached. Thus the value of the property is only computed "
"once for the lifetime of the object."
msgstr ""

#: ../../api/request.rst:313
msgid ""
"``callable`` can either be a callable that accepts the request as its "
"single positional parameter, or it can be a property descriptor."
msgstr ""

#: ../../api/request.rst:317
msgid ""
"If the ``callable`` is a property descriptor a ``ValueError`` will be "
"raised if ``name`` is ``None`` or ``reify`` is ``True``."
msgstr ""

#: ../../api/request.rst:320
msgid ""
"If ``name`` is None, the name of the property will be computed from the "
"name of the ``callable``."
msgstr ""

#: ../../api/request.rst:344
msgid ""
"The subscriber doesn't actually connect to the database, it just provides"
" the API which, when accessed via ``request.db``, will create the "
"connection. Thanks to reify, only one connection is made per-request even"
" if ``request.db`` is accessed many times."
msgstr ""

#: ../../api/request.rst:349
msgid ""
"This pattern provides a way to augment the ``request`` object without "
"having to subclass it, which can be useful for extension authors."
msgstr ""

#: ../../api/request.rst:357
msgid ""
"A :term:`localizer` which will use the current locale name to translate "
"values."
msgstr ""

#: ../../api/request.rst:364
msgid ""
"The locale name of the current request as computed by the :term:`locale "
"negotiator`."
msgstr ""

#: of pyramid.request.Request.GET:1
msgid "Return a MultiDict containing all the variables from the QUERY_STRING."
msgstr ""

#: of pyramid.request.Request.POST:1
msgid ""
"Return a MultiDict containing all the variables from a form request. "
"Returns an empty dict-like object for non-form requests."
msgstr ""

#: of pyramid.request.Request.POST:4
msgid ""
"Form requests are typically POST requests, however any other requests "
"with an appropriate Content-Type are also supported."
msgstr ""

#: of pyramid.request.Request.accept:1
msgid "Property representing the ``Accept`` header."
msgstr ""

#: of pyramid.request.Request.accept:3
msgid "(:rfc:`RFC 7231, section 5.3.2 <7231#section-5.3.2>`)"
msgstr ""

#: of pyramid.request.Request.accept:5 pyramid.request.Request.accept_charset:5
#: pyramid.request.Request.accept_encoding:5
#: pyramid.request.Request.accept_language:5
msgid ""
"The header value in the request environ is parsed and a new object "
"representing the header is created every time we *get* the value of the "
"property. (*set* and *del* change the header value in the request "
"environ, and do not involve parsing.)"
msgstr ""

#: of pyramid.request.Request.accept_charset:1
msgid "Property representing the ``Accept-Charset`` header."
msgstr ""

#: of pyramid.request.Request.accept_charset:3
msgid "(:rfc:`RFC 7231, section 5.3.3 <7231#section-5.3.3>`)"
msgstr ""

#: of pyramid.request.Request.accept_encoding:1
msgid "Property representing the ``Accept-Encoding`` header."
msgstr ""

#: of pyramid.request.Request.accept_encoding:3
msgid "(:rfc:`RFC 7231, section 5.3.4 <7231#section-5.3.4>`)"
msgstr ""

#: of pyramid.request.Request.accept_language:1
msgid "Property representing the ``Accept-Language`` header."
msgstr ""

#: of pyramid.request.Request.accept_language:3
msgid "(:rfc:`RFC 7231, section 5.3.5 <7231#section-5.3.5>`)"
msgstr ""

#: of pyramid.request.Request.application_url:1
msgid "The URL including SCRIPT_NAME (no PATH_INFO or query string)"
msgstr ""

#: of pyramid.request.Request.as_bytes:1
msgid ""
"Return HTTP bytes representing this request. If skip_body is True, "
"exclude the body. If skip_body is an integer larger than one, skip body "
"only if its length is bigger than that number."
msgstr ""

#: of pyramid.request.Request.authorization:1
msgid ""
"Gets and sets the ``Authorization`` header (`HTTP spec section 14.8 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8>`_).  "
"Converts it using ``parse_auth`` and ``serialize_auth``."
msgstr ""

#: of pyramid.request.Request.blank:1
msgid ""
"Create a blank request environ (and Request wrapper) with the given path "
"(path should be urlencoded), and any keys from environ."
msgstr ""

#: of pyramid.request.Request.blank:5
msgid "The path will become path_info, with any query string split off and used."
msgstr ""

#: of pyramid.request.Request.blank:8
msgid ""
"All necessary keys will be added to the environ, but the values you pass "
"in will take precedence.  If you pass in base_url then wsgi.url_scheme, "
"HTTP_HOST, and SCRIPT_NAME will be filled in from that value."
msgstr ""

#: of pyramid.request.Request.blank:13
msgid "Any extra keyword will be passed to ``__init__``."
msgstr ""

#: of pyramid.request.Request.body:1
msgid "Return the content of the request body."
msgstr ""

#: of pyramid.request.Request.body_file:1
msgid ""
"Input stream of the request (wsgi.input). Setting this property resets "
"the content_length and seekable flag (unlike setting req.body_file_raw)."
msgstr ""

#: of pyramid.request.Request.body_file_raw:1
msgid "Gets and sets the ``wsgi.input`` key in the environment."
msgstr ""

#: of pyramid.request.Request.body_file_seekable:1
msgid ""
"Get the body of the request (wsgi.input) as a seekable file-like object. "
"Middleware and routing applications should use this attribute over "
".body_file."
msgstr ""

#: of pyramid.request.Request.body_file_seekable:5
msgid "If you access this value, CONTENT_LENGTH will also be updated."
msgstr ""

#: of pyramid.request.Request.cache_control:1
msgid ""
"Get/set/modify the Cache-Control header (`HTTP spec section 14.9 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9>`_)"
msgstr ""

#: of pyramid.request.Request.call_application:1
msgid ""
"Call the given WSGI application, returning ``(status_string, headerlist, "
"app_iter)``"
msgstr ""

#: of pyramid.request.Request.call_application:4
msgid "Be sure to call ``app_iter.close()`` if it's there."
msgstr ""

#: of pyramid.request.Request.call_application:6
msgid ""
"If catch_exc_info is true, then returns ``(status_string, headerlist, "
"app_iter, exc_info)``, where the fourth item may be None, but won't be if"
" there was an exception.  If you don't do this and there was an "
"exception, the exception will be raised directly."
msgstr ""

#: of pyramid.request.Request.client_addr:1
msgid ""
"The effective client IP address as a string.  If the "
"``HTTP_X_FORWARDED_FOR`` header exists in the WSGI environ, this "
"attribute returns the client IP address present in that header (e.g. if "
"the header value is ``192.168.1.1, 192.168.1.2``, the value will be "
"``192.168.1.1``). If no ``HTTP_X_FORWARDED_FOR`` header is present in the"
" environ at all, this attribute will return the value of the "
"``REMOTE_ADDR`` header.  If the ``REMOTE_ADDR`` header is unset, this "
"attribute will return the value ``None``."
msgstr ""

#: of pyramid.request.Request.client_addr:12
msgid ""
"It is possible for user agents to put someone else's IP or just any "
"string in ``HTTP_X_FORWARDED_FOR`` as it is a normal HTTP header. Forward"
" proxies can also provide incorrect values (private IP addresses etc).  "
"You cannot \"blindly\" trust the result of this method to provide you "
"with valid data unless you're certain that ``HTTP_X_FORWARDED_FOR`` has "
"the correct values.  The WSGI server must be behind a trusted proxy for "
"this to be true."
msgstr ""

#: of pyramid.request.Request.content_length:1
msgid ""
"Gets and sets the ``Content-Length`` header (`HTTP spec section 14.13 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13>`_).  "
"Converts it using int."
msgstr ""

#: of pyramid.request.Request.content_type:1
msgid ""
"Return the content type, but leaving off any parameters (like charset, "
"but also things like the type in ``application/atom+xml; type=entry``)"
msgstr ""

#: of pyramid.request.Request.content_type:5
msgid ""
"If you set this property, you can include parameters, or if you don't "
"include any parameters in the value then existing parameters will be "
"preserved."
msgstr ""

#: of pyramid.request.Request.cookies:1
msgid "Return a dictionary of cookies as found in the request."
msgstr ""

#: of pyramid.request.Request.copy:1
msgid "Copy the request and environment object."
msgstr ""

#: of pyramid.request.Request.copy:3
msgid "This only does a shallow copy, except of wsgi.input"
msgstr ""

#: of pyramid.request.Request.copy_body:1
msgid ""
"Copies the body, in cases where it might be shared with another request "
"object and that is not desired."
msgstr ""

#: of pyramid.request.Request.copy_body:4
msgid ""
"This copies the body either into a BytesIO object (through setting "
"req.body) or a temporary file."
msgstr ""

#: of pyramid.request.Request.copy_get:1
msgid ""
"Copies the request and environment object, but turning this request into "
"a GET along the way.  If this was a POST request (or any other verb) then"
" it becomes GET, and the request body is thrown away."
msgstr ""

#: of pyramid.request.Request.date:1
msgid ""
"Gets and sets the ``Date`` header (`HTTP spec section 14.8 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8>`_).  "
"Converts it using HTTP date."
msgstr ""

#: of pyramid.request.Request.domain:1
msgid "Returns the domain portion of the host value.  Equivalent to:"
msgstr ""

#: of pyramid.request.Request.domain:9
msgid ""
"This will be equivalent to the domain portion of the ``HTTP_HOST`` value "
"in the environment if it exists, or the ``SERVER_NAME`` value in the "
"environment if it doesn't.  For example, if the environment contains an "
"``HTTP_HOST`` value of ``foo.example.com:8000``, ``request.domain`` will "
"return ``foo.example.com``."
msgstr ""

#: of pyramid.request.Request.domain:15
msgid ""
"Note that this value cannot be *set* on the request.  To set the host "
"value use :meth:`webob.request.Request.host` instead."
msgstr ""

#: of pyramid.request.Request.from_bytes:1
msgid ""
"Create a request from HTTP bytes data. If the bytes contain extra data "
"after the request, raise a ValueError."
msgstr ""

#: of pyramid.request.Request.from_file:1
msgid ""
"Read a request from a file-like object (it must implement ``.read(size)``"
" and ``.readline()``)."
msgstr ""

#: of pyramid.request.Request.from_file:4
msgid ""
"It will read up to the end of the request, not the end of the file "
"(unless the request is a POST or PUT and has no Content-Length, in that "
"case, the entire file is read)."
msgstr ""

#: of pyramid.request.Request.from_file:8
msgid ""
"This reads the request as represented by ``str(req)``; it may not read "
"every valid HTTP request properly."
msgstr ""

#: of pyramid.request.Request.get_response:1 pyramid.request.Request.send:1
msgid ""
"Like ``.call_application(application)``, except returns a response object"
" with ``.status``, ``.headers``, and ``.body`` attributes."
msgstr ""

#: of pyramid.request.Request.get_response:5 pyramid.request.Request.send:5
msgid ""
"This will use ``self.ResponseClass`` to figure out the class of the "
"response object to return."
msgstr ""

#: of pyramid.request.Request.get_response:8 pyramid.request.Request.send:8
msgid ""
"If ``application`` is not given, this will send the request to "
"``self.make_default_send_app()``"
msgstr ""

#: of pyramid.request.Request.headers:1
msgid "All the request headers as a case-insensitive dictionary-like object."
msgstr ""

#: of pyramid.request.Request.host:1
msgid "Host name provided in HTTP_HOST, with fall-back to SERVER_NAME"
msgstr ""

#: of pyramid.request.Request.host_port:1
msgid ""
"The effective server port number as a string.  If the ``HTTP_HOST`` "
"header exists in the WSGI environ, this attribute returns the port number"
" present in that header. If the ``HTTP_HOST`` header exists but contains "
"no explicit port number: if the WSGI url scheme is \"https\" , this "
"attribute returns \"443\", if the WSGI url scheme is \"http\", this "
"attribute returns \"80\" .  If no ``HTTP_HOST`` header is present in the "
"environ at all, this attribute will return the value of the "
"``SERVER_PORT`` header (which is guaranteed to be present)."
msgstr ""

#: of pyramid.request.Request.host_url:1
msgid "The URL through the host (no path)"
msgstr ""

#: of pyramid.request.Request.http_version:1
msgid "Gets and sets the ``SERVER_PROTOCOL`` key in the environment."
msgstr ""

#: of pyramid.request.Request.if_match:1
msgid ""
"Gets and sets the ``If-Match`` header (`HTTP spec section 14.24 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24>`_).  "
"Converts it as a Etag."
msgstr ""

#: of pyramid.request.Request.if_modified_since:1
msgid ""
"Gets and sets the ``If-Modified-Since`` header (`HTTP spec section 14.25 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25>`_).  "
"Converts it using HTTP date."
msgstr ""

#: of pyramid.request.Request.if_none_match:1
msgid ""
"Gets and sets the ``If-None-Match`` header (`HTTP spec section 14.26 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26>`_).  "
"Converts it as a Etag."
msgstr ""

#: of pyramid.request.Request.if_range:1
msgid ""
"Gets and sets the ``If-Range`` header (`HTTP spec section 14.27 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.27>`_).  "
"Converts it using IfRange object."
msgstr ""

#: of pyramid.request.Request.if_unmodified_since:1
msgid ""
"Gets and sets the ``If-Unmodified-Since`` header (`HTTP spec section "
"14.28 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.28>`_).  "
"Converts it using HTTP date."
msgstr ""

#: of pyramid.request.Request.is_body_readable:1
msgid ""
"webob.is_body_readable is a flag that tells us that we can read the input"
" stream even though CONTENT_LENGTH is missing."
msgstr ""

#: of pyramid.request.Request.is_body_seekable:1
msgid "Gets and sets the ``webob.is_body_seekable`` key in the environment."
msgstr ""

#: of pyramid.request.Request.is_response:1
msgid ""
"Return ``True`` if the object passed as ``ob`` is a valid response "
"object, ``False`` otherwise."
msgstr ""

#: of pyramid.request.Request.is_xhr:1
msgid "Is X-Requested-With header present and equal to ``XMLHttpRequest``?"
msgstr ""

#: of pyramid.request.Request.is_xhr:3
msgid ""
"Note: this isn't set by every XMLHttpRequest request, it is only set if "
"you are using a Javascript library that sets it (or you set the header "
"yourself manually).  Currently Prototype and jQuery are known to set this"
" header."
msgstr ""

#: of pyramid.request.Request.json:1 pyramid.request.Request.json_body:1
msgid "Access the body of the request as JSON"
msgstr ""

#: of pyramid.request.Request.localizer:1
msgid "Convenience property to return a localizer"
msgstr ""

#: of pyramid.request.Request.make_body_seekable:1
msgid ""
"This forces ``environ['wsgi.input']`` to be seekable. That means that, "
"the content is copied into a BytesIO or temporary file and flagged as "
"seekable, so that it will not be unnecessarily copied again."
msgstr ""

#: of pyramid.request.Request.make_body_seekable:6
msgid ""
"After calling this method the .body_file is always seeked to the start of"
" file and .content_length is not None."
msgstr ""

#: of pyramid.request.Request.make_body_seekable:9
msgid ""
"The choice to copy to BytesIO is made from "
"``self.request_body_tempfile_limit``"
msgstr ""

#: of pyramid.request.Request.make_tempfile:1
msgid ""
"Create a tempfile to store big request body. This API is not stable yet. "
"A 'size' argument might be added."
msgstr ""

#: of pyramid.request.Request.max_forwards:1
msgid ""
"Gets and sets the ``Max-Forwards`` header (`HTTP spec section 14.31 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.31>`_).  "
"Converts it using int."
msgstr ""

#: of pyramid.request.Request.method:1
msgid "Gets and sets the ``REQUEST_METHOD`` key in the environment."
msgstr ""

#: of pyramid.request.Request.params:1
msgid ""
"A dictionary-like object containing both the parameters from the query "
"string and request body."
msgstr ""

#: of pyramid.request.Request.path:1
msgid "The path of the request, without host or query string"
msgstr ""

#: of pyramid.request.Request.path_info:1 pyramid.request.Request.upath_info:1
msgid "Gets and sets the ``PATH_INFO`` key in the environment."
msgstr ""

#: of pyramid.request.Request.path_info_peek:1
msgid ""
"Returns the next segment on PATH_INFO, or None if there is no next "
"segment.  Doesn't modify the environment."
msgstr ""

#: of pyramid.request.Request.path_info_pop:1
msgid ""
"'Pops' off the next segment of PATH_INFO, pushing it onto SCRIPT_NAME, "
"and returning the popped segment.  Returns None if there is nothing left "
"on PATH_INFO."
msgstr ""

#: of pyramid.request.Request.path_info_pop:5
msgid ""
"Does not return ``''`` when there's an empty segment (like "
"``/path//path``); these segments are just ignored."
msgstr ""

#: of pyramid.request.Request.path_info_pop:8
msgid ""
"Optional ``pattern`` argument is a regexp to match the return value "
"before returning. If there is no match, no changes are made to the "
"request and None is returned."
msgstr ""

#: of pyramid.request.Request.path_qs:1
msgid "The path of the request, without host but with query string"
msgstr ""

#: of pyramid.request.Request.path_url:1
msgid "The URL including SCRIPT_NAME and PATH_INFO, but not QUERY_STRING"
msgstr ""

#: of pyramid.request.Request.pragma:1
msgid ""
"Gets and sets the ``Pragma`` header (`HTTP spec section 14.32 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32>`_)."
msgstr ""

#: of pyramid.request.Request.query_string:1
msgid "Gets and sets the ``QUERY_STRING`` key in the environment."
msgstr ""

#: of pyramid.request.Request.range:1
msgid ""
"Gets and sets the ``Range`` header (`HTTP spec section 14.35 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35>`_).  "
"Converts it using Range object."
msgstr ""

#: of pyramid.request.Request.referer:1 pyramid.request.Request.referrer:1
msgid ""
"Gets and sets the ``Referer`` header (`HTTP spec section 14.36 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.36>`_)."
msgstr ""

#: of pyramid.request.Request.relative_url:1
msgid "Resolve other_url relative to the request URL."
msgstr ""

#: of pyramid.request.Request.relative_url:3
msgid ""
"If ``to_application`` is True, then resolve it relative to the URL with "
"only SCRIPT_NAME"
msgstr ""

#: of pyramid.request.Request.remote_addr:1
msgid "Gets and sets the ``REMOTE_ADDR`` key in the environment."
msgstr ""

#: of pyramid.request.Request.remote_user:1
msgid "Gets and sets the ``REMOTE_USER`` key in the environment."
msgstr ""

#: of pyramid.request.Request.remove_conditional_headers:1
msgid "Remove headers that make the request conditional."
msgstr ""

#: of pyramid.request.Request.remove_conditional_headers:3
msgid ""
"These headers can cause the response to be 304 Not Modified, which in "
"some cases you may not want to be possible."
msgstr ""

#: of pyramid.request.Request.remove_conditional_headers:6
msgid ""
"This does not remove headers like If-Match, which are used for conflict "
"detection."
msgstr ""

#: of pyramid.request.Request.response:1
msgid ""
"This attribute is actually a \"reified\" property which returns an "
"instance of the :class:`pyramid.response.Response`. class.  The response "
"object returned does not exist until this attribute is accessed.  "
"Subsequent accesses will return the same Response object."
msgstr ""

#: of pyramid.request.Request.response:6
msgid ""
"The ``request.response`` API is used by renderers.  A render obtains the "
"response object it will return from a view that uses that renderer by "
"accessing ``request.response``.  Therefore, it's possible to use the "
"``request.response`` API to set up a response object with \"the right\" "
"attributes (e.g. by calling ``request.response.set_cookie()``) within a "
"view that uses a renderer.  Mutations to this response object will be "
"preserved in the response sent to the client."
msgstr ""

#: of pyramid.request.Request.scheme:1
msgid "Gets and sets the ``wsgi.url_scheme`` key in the environment."
msgstr ""

#: of pyramid.request.Request.script_name:1
#: pyramid.request.Request.uscript_name:1
msgid "Gets and sets the ``SCRIPT_NAME`` key in the environment."
msgstr ""

#: of pyramid.request.Request.server_name:1
msgid "Gets and sets the ``SERVER_NAME`` key in the environment."
msgstr ""

#: of pyramid.request.Request.server_port:1
msgid ""
"Gets and sets the ``SERVER_PORT`` key in the environment.  Converts it "
"using int."
msgstr ""

#: of pyramid.request.Request.session:1
msgid ""
"Obtain the :term:`session` object associated with this request.  If a "
":term:`session factory` has not been registered during application "
"configuration, a :class:`pyramid.exceptions.ConfigurationError` will be "
"raised"
msgstr ""

#: of pyramid.request.Request.text:1
msgid "Get/set the text value of the body"
msgstr ""

#: of pyramid.request.Request.url:1
msgid "The full request URL, including QUERY_STRING"
msgstr ""

#: of pyramid.request.Request.url_encoding:1
msgid "Gets and sets the ``webob.url_encoding`` key in the environment."
msgstr ""

#: of pyramid.request.Request.urlargs:1
msgid "Return any *positional* variables matched in the URL."
msgstr ""

#: of pyramid.request.Request.urlargs:3 pyramid.request.Request.urlvars:3
msgid ""
"Takes values from ``environ['wsgiorg.routing_args']``. Systems like "
"``routes`` set this value."
msgstr ""

#: of pyramid.request.Request.urlvars:1
msgid "Return any *named* variables matched in the URL."
msgstr ""

#: of pyramid.request.Request.user_agent:1
msgid ""
"Gets and sets the ``User-Agent`` header (`HTTP spec section 14.43 "
"<http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43>`_)."
msgstr ""

#: ../../api/request.rst:371
msgid ""
"For information about the API of a :term:`multidict` structure (such as "
"that used as ``request.GET``, ``request.POST``, and ``request.params``), "
"see :class:`pyramid.interfaces.IMultiDict`."
msgstr ""

#: of pyramid.request.apply_request_extensions:1
msgid ""
"Apply request extensions (methods and properties) to an instance of "
":class:`pyramid.interfaces.IRequest`. This method is dependent on the "
"``request`` containing a properly initialized registry."
msgstr ""

#: of pyramid.request.apply_request_extensions:5
msgid ""
"After invoking this method, the ``request`` should have the methods and "
"properties that were defined using "
":meth:`pyramid.config.Configurator.add_request_method`."
msgstr ""

