# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
# https://github.com/pylonsproject-jp/pyramid/edit/doc-ja/docs/narr/advconfig.rst
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../narr/advconfig.rst:7
msgid "Advanced Configuration"
msgstr "高度な設定(Advanced Configuration)"

#: ../../narr/advconfig.rst:9
msgid ""
"To support application extensibility, the :app:`Pyramid` "
":term:`Configurator` by default detects configuration conflicts and "
"allows you to include configuration imperatively from other packages or "
"modules.  It also by default performs configuration in two separate "
"phases.  This allows you to ignore relative configuration statement "
"ordering in some circumstances."
msgstr ""
"アプリケーションの拡張性をサポートするために、 :app:`Pyramid` の "
":term:`Configurator` は、デフォルトで設定の衝突を検知し、他のパッケージ"
"やモジュールから設定を命令的に取り込むことを可能にします。さらにそれは"
"デフォルトで、分離された 2 つのフェーズで設定を行ないます。これは、いくつかの"
"状況で相対的な設定命令の順序をオーバーライドすることを可能にします。"

#: ../../narr/advconfig.rst:21
msgid "Conflict Detection"
msgstr "衝突検知(Conflict Detection)"

#: ../../narr/advconfig.rst:23
msgid ""
"Here's a familiar example of one of the simplest :app:`Pyramid` "
"applications, configured imperatively:"
msgstr ""
"これは、おなじみの最も単純な :app:`Pyramid` アプリケーションの一例で、"
"命令的に設定されています:"

#: ../../narr/advconfig.rst:43
msgid ""
"When you start this application, all will be OK.  However, what happens "
"if we try to add another view to the configuration with the same set of "
":term:`predicate` arguments as one we've already added?"
msgstr ""
"このアプリケーションを開始する時、すべては問題なく動くでしょう。"
"しかし、既に追加されているビューと同じ :term:`predicate` 引数のセットで"
"別のビューを設定に追加しようとした場合、何が起こるでしょうか。"

#: ../../narr/advconfig.rst:72
msgid ""
"The application now has two conflicting view configuration statements.  "
"When we try to start it again, it won't start.  Instead we'll receive a "
"traceback that ends something like this:"
msgstr ""
"アプリケーションは今度は2つの衝突するビュー設定命令を持っています。"
"再びアプリケーションを開始しようとした時、それは開始しません。代わりに、"
"以下のような結果に終わるトレースバックを受け取るでしょう:"

#: ../../narr/advconfig.rst:94
msgid "This traceback is trying to tell us:"
msgstr "トレースバックは、以下のことを伝えようとしています:"

#: ../../narr/advconfig.rst:96
msgid ""
"We've got conflicting information for a set of view configuration "
"statements (The ``For:`` line)."
msgstr ""
"ビュー設定命令に関する衝突情報を受け取っています (``For:`` の行)"

#: ../../narr/advconfig.rst:99
msgid ""
"There are two statements which conflict, shown beneath the ``For:`` line:"
" ``config.add_view(hello_world. 'hello')`` on line 14 of ``app.py``, and "
"``config.add_view(goodbye_world, 'hello')`` on line 17 of ``app.py``."
msgstr ""
"2つの衝突する文があり、 ``For:`` 文の行の下に記されてます:"
" ``app.py`` の 14 行目にある ``config.add_view(hello_world. 'hello')`` と、"
" ``app.py`` の 17 行目にある ``config.add_view(goodbye_world, 'hello')`` 。"


#: ../../narr/advconfig.rst:103
msgid ""
"These two configuration statements are in conflict because we've tried to"
" tell the system that the set of :term:`predicate` values for both view "
"configurations are exactly the same.  Both the ``hello_world`` and "
"``goodbye_world`` views are configured to respond under the same set of "
"circumstances.  This circumstance, the :term:`view name` represented by "
"the ``name=`` predicate, is ``hello``."
msgstr ""
"システムに両方のビューの設定に対して :term:`predicate` の値が同じだと"
"伝えようとしたので、これらの2つの設定命令は衝突した状態にあります。"
"``hello_world`` と ``goodbye_world`` の両方のビューが、同じ状況の下で "
"応答するように設定されています。その状況とは、 :term:`view name` "
"(``name=`` 述語によって表わされている) が ``hello`` であることです。"

#: ../../narr/advconfig.rst:110
msgid ""
"This presents an ambiguity that :app:`Pyramid` cannot resolve. Rather "
"than allowing the circumstance to go unreported, by default Pyramid "
"raises a :exc:`ConfigurationConflictError` error and prevents the "
"application from running."
msgstr ""
"これは :app:`Pyramid` が解決できない曖昧性を示しています。この状況を"
"報告せずに許可するのではなく、デフォルトで Pyramid は "
":exc:`ConfigurationConflictError` エラーを上げて、アプリケーションの"
"作動を停止します。"


#: ../../narr/advconfig.rst:115
msgid ""
"Conflict detection happens for any kind of configuration: imperative "
"configuration or configuration that results from the execution of a "
":term:`scan`."
msgstr ""
"衝突検知はあらゆる種類の設定に対して起こります: 命令的な設定、あるいは "
":term:`scan` の実行に起因する設定。"

#: ../../narr/advconfig.rst:122
msgid "Manually Resolving Conflicts"
msgstr "手作業による問題解決(Manually Resolving Conflicts))"

#: ../../narr/advconfig.rst:124
msgid ""
"There are a number of ways to manually resolve conflicts: by changing "
"registrations to not conflict, by strategically using "
":meth:`pyramid.config.Configurator.commit`, or by using an "
"\"autocommitting\" configurator."
msgstr ""
"手作業で衝突を解決する多くの方法があります: 衝突しないように登録を変更する"
"ことによって、 :meth:`pyramid.config.Configurator.commit` を戦略的に"
"使用することによって解決、または "autocommitting" configurator の使用によって解決します　。"

#: ../../narr/advconfig.rst:130
msgid "The Right Thing"
msgstr "正しいやり方(The Right Thing)"

#: ../../narr/advconfig.rst:132
msgid ""
"The most correct way to resolve conflicts is to \"do the needful\": "
"change your configuration code to not have conflicting configuration "
"statements.  The details of how this is done depends entirely on the "
"configuration statements made by your application.  Use the detail "
"provided in the :exc:`ConfigurationConflictError` to track down the "
"offending conflicts and modify your configuration code accordingly."
msgstr ""
"衝突を解決する最も正確な方法は「必要なことを行う」ことです: 衝突する"
"設定命令をなくすために設定コードを変更してください。これがどのように終わるかの"
"詳細は、完全にアプリケーションで行っている設定命令に依存します。 "
":exc:`ConfigurationConflictError` の中で提供されている詳細を使用して、"
"問題となっている衝突を特定して、それに従って設定コードを修正してください。"

#: ../../narr/advconfig.rst:139
msgid ""
"If you're getting a conflict while trying to extend an existing "
"application, and that application has a function which performs "
"configuration like this one:"
msgstr ""
"既存のアプリケーションを拡張しようとする間に衝突が発生していて、その"
"アプリケーションには以下のような設定を行なう関数がある場合:"

#: ../../narr/advconfig.rst:148
msgid ""
"Don't call this function directly with ``config`` as an argument.  "
"Instead, use :meth:`pyramid.config.Configurator.include`:"
msgstr ""
"``config`` を引数としてこの関数を直接呼び出さないでください。代わりに、"
":meth:`pyramid.config.Configuration.include` を使用してください:"

#: ../../narr/advconfig.rst:156
msgid ""
"Using :meth:`~pyramid.config.Configurator.include` instead of calling the"
" function directly provides a modicum of automated conflict resolution, "
"with the configuration statements you define in the calling code "
"overriding those of the included function."
msgstr ""
"関数を直接呼び出す代わりに :meth:`~pyramid.config.Configuration.include` "
"を使用すると、呼び出し側のコードに定義されている設定ステートメントが"
"include された関数の設定をオーバーライドするので、自動的な衝突の解決が"
"ある程度行われます。"


#: ../../narr/advconfig.rst:163
msgid ""
"See also :ref:`automatic_conflict_resolution` and "
":ref:`including_configuration`."
msgstr ""
" :ref:`automatic_conflict_resolution` と "
":ref:`including_configuration` も参照してください。"

#: ../../narr/advconfig.rst:167
msgid "Using ``config.commit()``"
msgstr "``config.commit()`` の使用( Using ``config.commit()`` )"

#: ../../narr/advconfig.rst:169
msgid ""
"You can manually commit a configuration by using the "
":meth:`~pyramid.config.Configurator.commit` method between configuration "
"calls. For example, we prevent conflicts from occurring in the "
"application we examined previously as the result of adding a ``commit``."
"  Here's the application that generates conflicts:"
msgstr ""
"設定呼び出しの間で :meth:`~pyramid.config.Configurator.commit` メソッド"
"を使用することによって、設定を手動でコミットできます。"
"例えば、 ``commit`` を加えた結果、以前に検討したアプリケーションで衝突が"
"発生することを防ぎます。衝突を生成するアプリケーションです:"

#: ../../narr/advconfig.rst:200
msgid ""
"We can prevent the two ``add_view`` calls from conflicting by issuing a "
"call to :meth:`~pyramid.config.Configurator.commit` between them:"
msgstr ""
"2つの ``add_view`` 呼び出しの間に "
":meth:`~pyramid.config.Configurator.commit` の呼び出しを行うことで、
"それらの衝突を防げます:

#: ../../narr/advconfig.rst:231
msgid ""
"In the above example we've issued a call to "
":meth:`~pyramid.config.Configurator.commit` between the two ``add_view`` "
"calls. :meth:`~pyramid.config.Configurator.commit` will execute any "
"pending configuration statements."
msgstr ""
"上記の例において、2つの ``add_view`` 呼び出しの間で "
":meth:`~pyramid.config.Configurator.commit` の呼び出しを行いました。 "
":meth:`~pyramid.config.Configurator.commit` はすべての待機中の"
"設定命令を実行します。"

#: ../../narr/advconfig.rst:236
msgid ""
"Calling :meth:`~pyramid.config.Configurator.commit` is safe at any time."
"  It executes all pending configuration actions and leaves the "
"configuration action list \"clean\"."
msgstr ""
":meth:`~pyramid.config.Configurator.commit` の呼び出しは常に安全です。"
"それは、すべての待機中の設定アクションを実行して、設定アクションのリストを"
"「クリーン」にします。"

#: ../../narr/advconfig.rst:240
msgid ""
"Note that :meth:`~pyramid.config.Configurator.commit` has no effect when "
"you're using an *autocommitting* configurator (see "
":ref:`autocommitting_configurator`)."
msgstr ""
"*autocommitting* な configurator を使用している場合、 "
":meth:`~pyramid.config.Configurator.commit` の効果がないことに注意"
"してください (:ref:`autocommitting_configurator` を参照)。"

#: ../../narr/advconfig.rst:246
msgid "Using an Autocommitting Configurator"
msgstr "autocommitting な Configurator の使用(Using an Autocommitting Configurator)"

#: ../../narr/advconfig.rst:248
msgid ""
"You can also use a heavy hammer to circumvent conflict detection by using"
" a configurator constructor parameter: ``autocommit=True``.  For example:"
msgstr ""
"configurator のコンストラクタにパラメーター *autocommit=True* を使用"
"することによって、衝突検知を回避するための重いハンマーを使用することも"
"できます。例えば:"

#: ../../narr/advconfig.rst:259
msgid ""
"When the ``autocommit`` parameter passed to the Configurator is ``True``,"
" conflict detection (and :ref:`twophase_config`) is disabled.  "
"Configuration statements will be executed immediately, and succeeding "
"statements will override preceding ones."
msgstr ""
"Configurator に渡された ``autocommit`` パラメーターが ``True`` の場合、"
"衝突検知 (そして :ref:`twophase_config`) は無効になります。設定命令は直ちに"
"実行されるようになり、後続の設定が前のものをオーバーライドします。"

#: ../../narr/advconfig.rst:264
msgid ""
":meth:`~pyramid.config.Configurator.commit` has no effect when "
"``autocommit`` is ``True``."
msgstr ""
"``autocommit`` が ``True`` の場合、 "
":meth:`~pyramid.config.Configurator.commit` は効果がありません。"

#: ../../narr/advconfig.rst:267
msgid ""
"If you use a Configurator in code that performs unit testing, it's "
"usually a good idea to use an autocommitting Configurator, because you "
"are usually unconcerned about conflict detection or two-phase "
"configuration in test code."
msgstr ""
"ユニットテストを行なうコードの中で Configurator を使用する際、"
"通常テストコード中の衝突検知や2フェーズ設定に関心がないので、"
"autocommitting Configurator を使用することは通常よい考えです。"

#: ../../narr/advconfig.rst:274
msgid "Automatic Conflict Resolution"
msgstr "自動的な衝突の解決(Automatic Conflict Resolution)"

#: ../../narr/advconfig.rst:276
msgid ""
"If your code uses the :meth:`~pyramid.config.Configurator.include` method"
" to include external configuration, some conflicts are automatically "
"resolved. Configuration statements that are made as the result of an "
"\"include\" will be overridden by configuration statements that happen "
"within the caller of the \"include\" method."
msgstr ""
"あなたのコードが :meth:`~pyramid.config.Configurator.include` メソッドを"
"使用して外部設定をインクルードする場合、いくつかの衝突は自動的に解決されます。"
"「インクルード」の結果作られる設定命令は、「インクルード」メソッドの"
"呼び出し元で起こる設定命令によってオーバーライドされます。"

#: ../../narr/advconfig.rst:282
msgid ""
"Automatic conflict resolution supports this goal.  If a user wants to "
"reuse a Pyramid application, and they want to customize the configuration"
" of this application without hacking its code \"from outside\", they can "
"\"include\" a configuration function from the package and override only "
"some of its configuration statements within the code that does the "
"include.  No conflicts will be generated by configuration statements "
"within the code that does the including, even if configuration statements"
" in the included code would conflict if it was moved \"up\" to the "
"calling code."
msgstr ""
"自動的な衝突の解決は以下のゴールをサポートします: Pyramid アプリケーション"
"を再利用したいと思ったユーザが、そのコードをハックせずに「外部から」"
"このアプリケーションの設定をカスタマイズしたければ、パッケージから"
"設定関数を「インクルード」して、その設定命令のうちのいくつかだけを"
"インクルードを行うコード内でオーバーライドできること。もしインクルード"
"されたコード中の設定命令を呼び出し元のコードまで移動させた場合に衝突が"
"起きるとしても、インクルードを行うコード内の設定命令によって衝突は生成"
"されません。"

#: ../../narr/advconfig.rst:292
msgid "Methods Which Provide Conflict Detection"
msgstr "衝突検知を提供しているメソッド(Methods Which Provide Conflict Detection)"

#: ../../narr/advconfig.rst:294
msgid ""
"These are the methods of the configurator which provide conflict "
"detection:"
msgstr "衝突検知を提供する configurator のメソッドです:"

#: ../../narr/advconfig.rst:296
msgid ""
":meth:`~pyramid.config.Configurator.add_view`, "
":meth:`~pyramid.config.Configurator.add_route`, "
":meth:`~pyramid.config.Configurator.add_renderer`, "
":meth:`~pyramid.config.Configurator.add_request_method`, "
":meth:`~pyramid.config.Configurator.set_request_factory`, "
":meth:`~pyramid.config.Configurator.set_session_factory`, "
":meth:`~pyramid.config.Configurator.set_request_property`, "
":meth:`~pyramid.config.Configurator.set_root_factory`, "
":meth:`~pyramid.config.Configurator.set_view_mapper`, "
":meth:`~pyramid.config.Configurator.set_authentication_policy`, "
":meth:`~pyramid.config.Configurator.set_authorization_policy`, "
":meth:`~pyramid.config.Configurator.set_locale_negotiator`, "
":meth:`~pyramid.config.Configurator.set_default_permission`, "
":meth:`~pyramid.config.Configurator.add_traverser`, "
":meth:`~pyramid.config.Configurator.add_resource_url_adapter`, and "
":meth:`~pyramid.config.Configurator.add_response_adapter`."
msgstr ""
":meth:`~pyramid.config.Configurator.add_view`, "
":meth:`~pyramid.config.Configurator.add_route`, "
":meth:`~pyramid.config.Configurator.add_renderer`, "
":meth:`~pyramid.config.Configurator.add_request_method`, "
":meth:`~pyramid.config.Configurator.set_request_factory`, "
":meth:`~pyramid.config.Configurator.set_session_factory`, "
":meth:`~pyramid.config.Configurator.set_request_property`, "
":meth:`~pyramid.config.Configurator.set_root_factory`, "
":meth:`~pyramid.config.Configurator.set_view_mapper`, "
":meth:`~pyramid.config.Configurator.set_authentication_policy`, "
":meth:`~pyramid.config.Configurator.set_authorization_policy`, "
":meth:`~pyramid.config.Configurator.set_locale_negotiator`, "
":meth:`~pyramid.config.Configurator.set_default_permission`, "
":meth:`~pyramid.config.Configurator.add_traverser`, "
":meth:`~pyramid.config.Configurator.add_resource_url_adapter`, and "
":meth:`~pyramid.config.Configurator.add_response_adapter`"

#: ../../narr/advconfig.rst:313
msgid ""
":meth:`~pyramid.config.Configurator.add_static_view` also indirectly "
"provides conflict detection, because it's implemented in terms of the "
"conflict-aware ``add_route`` and ``add_view`` methods."
msgstr ""
":meth:`~pyramid.config.Configurator.add_static_view` は、衝突を考慮する "
"``add_route`` および ``add_view`` メソッドによって実装されているため、"
"さらに間接的な衝突検知を提供します。"

#: ../../narr/advconfig.rst:323
msgid "Including Configuration from External Sources"
msgstr "外部ソースからの設定インクルード(Including Configuration from External Sources)"

#: ../../narr/advconfig.rst:325
msgid ""
"Some application programmers will factor their configuration code in such"
" a way that it is easy to reuse and override configuration statements.  "
"For example, such a developer might factor out a function used to add "
"routes to their application:"
msgstr ""
"一部のアプリケーションプログラマは、設定命令を再利用およびオーバーライド"
"することが簡単であるのと同じ方法で設定コードを分解するでしょう。"
"例えば、そのような開発者は、 route をアプリケーションに追加するために"
"使用される関数を分解するかもしれません:"

#: ../../narr/advconfig.rst:336
msgid ""
"Rather than calling this function directly with ``config`` as an "
"argument, instead use :meth:`pyramid.config.Configurator.include`:"
msgstr ""
"``config`` を引数としてこの関数を直接呼ぶのではなく、"
"代わりに、 :meth:`pyramid.config.Configuration.include` を使用します:"

#: ../../narr/advconfig.rst:344
msgid ""
"Using ``include`` rather than calling the function directly will allow "
":ref:`automatic_conflict_resolution` to work."
msgstr ""
"関数を直接呼ぶのではなく ``include`` を使用することで、 "
":ref:`automatic_conflict_resolution` が働くようになるでしょう。"

#: ../../narr/advconfig.rst:347
msgid ""
":meth:`~pyramid.config.Configurator.include` can also accept a "
":term:`module` as an argument:"
msgstr ""
":meth:`~pyramid.config.Configuration.include` は、引数として :term:`module` "
"を受け取ることもできます:"

#: ../../narr/advconfig.rst:357
msgid ""
"For this to work properly, the ``myapp`` module must contain a callable "
"with the special name ``includeme``, which should perform configuration "
"(like the ``add_routes`` callable we showed above as an example)."
msgstr ""
"適切に動作するためには、 ``myapp`` モジュールに特殊名 ``includeme`` "
"を持つ callable が含まれている必要があります。それは (例として上に示した "
"``add_routes`` callable と同じように) 設定を行ないます。"

#: ../../narr/advconfig.rst:361
msgid ""
":meth:`~pyramid.config.Configurator.include` can also accept a "
":term:`dotted Python name` to a function or a module."
msgstr ""
":meth:`~pyramid.config.Configuration.include` はさらに、関数または"
"モジュールに対する :term:`dotted Python name` を受け取ることもできます。"

#: ../../narr/advconfig.rst:364
msgid ""
"See :ref:`the_include_tag` for a declarative alternative to the "
":meth:`~pyramid.config.Configurator.include` method."
msgstr ""
":meth:`~pyramid.config.Configurator.include` メソッドの宣言的な"
"代替物については、 :ref:`the_include_tag` を参照してください"

#: ../../narr/advconfig.rst:370
msgid "Two-Phase Configuration"
msgstr "2フェーズ設定(Two-Phase Configuration)"

#: ../../narr/advconfig.rst:372
msgid ""
"When a non-autocommitting :term:`Configurator` is used to do "
"configuration (the default), configuration execution happens in two "
"phases.  In the first phase, \"eager\" configuration actions (actions "
"that must happen before all others, such as registering a renderer) are "
"executed, and *discriminators* are computed for each of the actions that "
"depend on the result of the eager actions.  In the second phase, the "
"discriminators of all actions are compared to do conflict detection."
msgstr ""
"設定を行うために autocommitting でない :term:`Configurator` が使用される"
"場合 (デフォルト)、設定の実行は2つのフェーズで起こります。第1フェーズでは、"
"「eager」 設定アクション (レンダラーの登録のような、他のものよりも先に"
"起こる必要のあるアクション) が実行されます。そして、 eager アクションの"
"結果に依存する各々のアクションのために *識別子* (discriminator) が計算"
"されます。第2フェーズでは、衝突検知を行うためにすべてのアクションの"
"識別子が比較されます。"

#: ../../narr/advconfig.rst:380
msgid ""
"Due to this, for configuration methods that have no internal ordering "
"constraints, execution order of configuration method calls is not "
"important. For example, the relative ordering of "
":meth:`~pyramid.config.Configurator.add_view` and "
":meth:`~pyramid.config.Configurator.add_renderer` is unimportant when a "
"non-autocommitting configurator is used.  This code snippet:"
msgstr ""
"これにより、内部的な順序の制約がない設定メソッドについては、設定メソッド"
"呼び出しの実行順序は重要ではありません。例えば、 autocommitting でない"
"configurator が使用される場合、"
":meth:`~pyramid.config.Configurator.add_view` と "
":meth:`~pyramid.config.Configurator.add_renderer` の相対順序は重要では"
"ありません。コードスニペットは:"

#: ../../narr/advconfig.rst:393
msgid "Has the same result as:"
msgstr "以下と同じ結果になります:"

#: ../../narr/advconfig.rst:401
msgid ""
"Even though the view statement depends on the registration of a custom "
"renderer, due to two-phase configuration, the order in which the "
"configuration statements are issued is not important.  ``add_view`` will "
"be able to find the ``.rn`` renderer even if ``add_renderer`` is called "
"after ``add_view``."
msgstr ""
"たとえビュー命令がカスタムレンダラーの登録に依存しても、"
"2フェーズの設定により、設定命令が実行される順序は重要ではありません。"
"``add_renderer`` が ``add_view`` の後で呼ばれても、 "
"``add_view`` は ``.rn`` レンダラーを見つけることができるでしょう。"

#: ../../narr/advconfig.rst:406
msgid ""
"The same is untrue when you use an *autocommitting* configurator (see "
":ref:`autocommitting_configurator`).  When an autocommitting configurator"
" is used, two-phase configuration is disabled, and configuration "
"statements must be ordered in dependency order."
msgstr ""
"*autocommitting* な configurator を使用する場合、同じことは真ではありません"
"( :ref:`autocommitting_configurator` を参照)。 autocommitting な"
"configurator が使用されている場合、 2フェーズの設定は無効になります。"
"また、設定命令は依存関係の順番で並べられなければなりません。"

#: ../../narr/advconfig.rst:411
msgid ""
"Some configuration methods, such as "
":meth:`~pyramid.config.Configurator.add_route` have internal ordering "
"constraints: the routes they imply require relative ordering.  Such "
"ordering constraints are not absolved by two-phase configuration.  Routes"
" are still added in configuration execution order."
msgstr ""
":meth:`~pyramid.config.Configurator.add_route` のようないくつかの設定"
"メソッドには内部的な順序の制約があります: それらが関係する route には"
"相対順序が必要です。そのような順序制約は、2フェーズの設定によって免除"
"されません。 route は、依然として設定実行順に追加されます。"

#: ../../narr/advconfig.rst:418
msgid "More Information"
msgstr "さらに詳しい情報(More Information)"

#: ../../narr/advconfig.rst:420
msgid ""
"For more information, see the article :ref:`A Whirlwind Tour of Advanced "
"Configuration Tactics <cookbook:whirlwind-adv-conf>` in the Pyramid "
"Community Cookbook."
msgstr ""
"詳細は Pyramid Community Cookbook の :ref:`A Whirlwind Tour of Advanced " 
"Configuration Tactics <cookbook:whirlwind-adv-conf>` "
"を参照してください。"
