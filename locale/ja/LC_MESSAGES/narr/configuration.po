# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../narr/configuration.rst:7
msgid "Application Configuration"
msgstr ""

#: ../../narr/configuration.rst:9
msgid ""
"Most people already understand \"configuration\" as settings that "
"influence the operation of an application.  For instance, it's easy to "
"think of the values in a ``.ini`` file parsed at application startup time"
" as \"configuration\". However, if you're reasonably open-minded, it's "
"easy to think of *code* as configuration too.  Since Pyramid, like most "
"other web application platforms, is a *framework*, it calls into code "
"that you write (as opposed to a *library*, which is code that exists "
"purely for you to call).  The act of plugging application code that "
"you've written into :app:`Pyramid` is also referred to within this "
"documentation as \"configuration\"; you are configuring :app:`Pyramid` to"
" call the code that makes up your application."
msgstr ""

#: ../../narr/configuration.rst:21
msgid ""
"For information on ``.ini`` files for Pyramid applications see the "
":ref:`startup_chapter` chapter."
msgstr ""

#: ../../narr/configuration.rst:24
msgid ""
"There are two ways to configure a :app:`Pyramid` application: "
":term:`imperative configuration` and :term:`declarative configuration`.  "
"Both are described below."
msgstr ""

#: ../../narr/configuration.rst:33
msgid "Imperative Configuration"
msgstr ""

#: ../../narr/configuration.rst:35
msgid ""
"\"Imperative configuration\" just means configuration done by Python "
"statements, one after the next.  Here's one of the simplest "
":app:`Pyramid` applications, configured imperatively:"
msgstr ""

#: ../../narr/configuration.rst:56
msgid ""
"We won't talk much about what this application does yet.  Just note that "
"the configuration statements take place underneath the ``if __name__ == "
"'__main__':`` stanza in the form of method calls on a "
":term:`Configurator` object (e.g., ``config.add_view(...)``).  These "
"statements take place one after the other, and are executed in order, so "
"the full power of Python, including conditionals, can be employed in this"
" mode of configuration."
msgstr ""

#: ../../narr/configuration.rst:71
msgid "Declarative Configuration"
msgstr ""

#: ../../narr/configuration.rst:73
msgid ""
"It's sometimes painful to have all configuration done by imperative code,"
" because often the code for a single application may live in many files."
"  If the configuration is centralized in one place, you'll need to have "
"at least two files open at once to see the \"big picture\": the file that"
" represents the configuration, and the file that contains the "
"implementation objects referenced by the configuration.  To avoid this, "
":app:`Pyramid` allows you to insert :term:`configuration decoration` "
"statements very close to code that is referred to by the declaration "
"itself.  For example:"
msgstr ""

#: ../../narr/configuration.rst:92
msgid ""
"The mere existence of configuration decoration doesn't cause any "
"configuration registration to be performed.  Before it has any effect on "
"the configuration of a :app:`Pyramid` application, a configuration "
"decoration within application code must be found through a process known "
"as a :term:`scan`."
msgstr ""

#: ../../narr/configuration.rst:97
msgid ""
"For example, the :class:`pyramid.view.view_config` decorator in the code "
"example above adds an attribute to the ``hello`` function, making it "
"available for a :term:`scan` to find it later."
msgstr ""

#: ../../narr/configuration.rst:101
msgid ""
"A :term:`scan` of a :term:`module` or a :term:`package` and its "
"subpackages for decorations happens when the "
":meth:`pyramid.config.Configurator.scan` method is invoked: scanning "
"implies searching for configuration declarations in a package and its "
"subpackages.  For example:"
msgstr ""

#: ../../narr/configuration.rst:125
msgid ""
"The scanning machinery imports each module and subpackage in a package or"
" module recursively, looking for special attributes attached to objects "
"defined within a module.  These special attributes are typically attached"
" to code via the use of a :term:`decorator`.  For example, the "
":class:`~pyramid.view.view_config` decorator can be attached to a "
"function or instance method."
msgstr ""

#: ../../narr/configuration.rst:132
msgid ""
"Once scanning is invoked, and :term:`configuration decoration` is found "
"by the scanner, a set of calls are made to a :term:`Configurator` on your"
" behalf. These calls replace the need to add imperative configuration "
"statements that don't live near the code being configured."
msgstr ""

#: ../../narr/configuration.rst:137
msgid ""
"The combination of :term:`configuration decoration` and the invocation of"
" a :term:`scan` is collectively known as :term:`declarative "
"configuration`."
msgstr ""

#: ../../narr/configuration.rst:140
msgid ""
"In the example above, the scanner translates the arguments to "
":class:`~pyramid.view.view_config` into a call to the "
":meth:`pyramid.config.Configurator.add_view` method, effectively:"
msgstr ""

#: ../../narr/configuration.rst:149
msgid "Summary"
msgstr ""

#: ../../narr/configuration.rst:151
msgid ""
"There are two ways to configure a :app:`Pyramid` application: "
"declaratively and imperatively.  You can choose the mode with which "
"you're most comfortable; both are completely equivalent.  Examples in "
"this documentation will use both modes interchangeably."
msgstr ""

