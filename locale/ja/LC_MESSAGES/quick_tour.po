# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../quick_tour.rst:6
msgid "Quick Tour of Pyramid"
msgstr ""

#: ../../quick_tour.rst:8
msgid ""
"Pyramid lets you start small and finish big.  This *Quick Tour* of "
"Pyramid is for those who want to evaluate Pyramid, whether you are new to"
" Python web frameworks, or a pro in a hurry. For more detailed treatment "
"of each topic, give the :ref:`quick_tutorial` a try."
msgstr ""

#: ../../quick_tour.rst:13
msgid ""
"If you would prefer to cut and paste the example code in this tour you "
"may browse the source code located in the `Pyramid repository in the "
"directory \"docs/quick_tour\" <https://github.com/Pylons/pyramid/>`. If "
"you have downloaded the source code, you will find the tour in the same "
"location."
msgstr ""

#: ../../quick_tour.rst:16
msgid "Installation"
msgstr ""

#: ../../quick_tour.rst:18
msgid ""
"Once you have a standard Python environment setup, getting started with "
"Pyramid is a breeze. Unfortunately \"standard\" is not so simple in "
"Python. For this Quick Tour, it means `Python "
"<https://www.python.org/downloads/>`_, `venv "
"<https://packaging.python.org/en/latest/projects/#venv>`_ (or `virtualenv"
" for Python 2.7 "
"<https://packaging.python.org/en/latest/projects/#virtualenv>`_), `pip "
"<https://packaging.python.org/en/latest/projects/#pip>`_, and `setuptools"
" <https://packaging.python.org/en/latest/projects/#easy-install>`_."
msgstr ""

#: ../../quick_tour.rst:26
msgid ""
"To save a little bit of typing and to be certain that we use the modules,"
" scripts, and packages installed in our virtual environment, we'll set an"
" environment variable, too."
msgstr ""

#: ../../quick_tour.rst:30
msgid "As an example, for Python 3.6+ on Linux:"
msgstr ""

#: ../../quick_tour.rst:43
msgid "For Windows:"
msgstr ""

#: ../../quick_tour.rst:56
msgid ""
"Of course Pyramid runs fine on Python 2.7+, as do the examples in this "
"*Quick Tour*. We're showing Python 3 for simplicity. (Pyramid had "
"production support for Python 3 in October 2011.) Also for simplicity, "
"the remaining examples will show only UNIX commands."
msgstr ""

#: ../../quick_tour.rst:61
msgid ""
"See also: :ref:`Quick Tutorial section on Requirements "
"<qtut_requirements>`, :ref:`installing_unix`, :ref:`Before You Install "
"<installing_chapter>`, :ref:`Why use $VENV/bin/pip instead of source "
"bin/activate, then pip <venv-bin-pip-vs-source-bin-activate>`, and "
":ref:`Installing Pyramid on a Windows System <installing_windows>`."
msgstr ""

#: ../../quick_tour.rst:70
msgid "Hello World"
msgstr ""

#: ../../quick_tour.rst:72
msgid ""
"Microframeworks have shown that learning starts best from a very small "
"first step. Here's a tiny application in Pyramid:"
msgstr ""

#: ../../quick_tour.rst:79
msgid "This simple example is easy to run. Save this as ``app.py`` and run it:"
msgstr ""

#: ../../quick_tour.rst:85
msgid ""
"Next open http://localhost:6543/ in a browser, and you will see the "
"``Hello World!`` message."
msgstr ""

#: ../../quick_tour.rst:88
msgid ""
"New to Python web programming? If so, some lines in the module merit "
"explanation:"
msgstr ""

#: ../../quick_tour.rst:91
msgid ""
"*Line 10*. ``if __name__ == '__main__':`` is Python's way of saying "
"\"Start here when running from the command line\"."
msgstr ""

#: ../../quick_tour.rst:94
msgid ""
"*Lines 11-13*. Use Pyramid's :term:`configurator` in a :term:`context "
"manager` to connect :term:`view` code to a particular URL :term:`route`."
msgstr ""

#: ../../quick_tour.rst:97
msgid "*Lines 6-7*. Implement the view code that generates the :term:`response`."
msgstr ""

#: ../../quick_tour.rst:99
msgid "*Lines 14-16*. Publish a :term:`WSGI` app using an HTTP server."
msgstr ""

#: ../../quick_tour.rst:101
msgid ""
"As shown in this example, the :term:`configurator` plays a central role "
"in Pyramid development. Building an application from loosely-coupled "
"parts via :doc:`../narr/configuration` is a central idea in Pyramid, one "
"that we will revisit regurlarly in this *Quick Tour*."
msgstr ""

#: ../../quick_tour.rst:106
msgid ""
"See also: :ref:`Quick Tutorial Hello World <qtut_hello_world>`, "
":ref:`firstapp_chapter`, and :ref:`Todo List Application in One File "
"<cookbook:single-file-tutorial>`."
msgstr ""

#: ../../quick_tour.rst:113
msgid "Handling web requests and responses"
msgstr ""

#: ../../quick_tour.rst:115
msgid ""
"Developing for the web means processing web requests. As this is a "
"critical part of a web application, web developers need a robust, mature "
"set of software for web requests."
msgstr ""

#: ../../quick_tour.rst:119
msgid ""
"Pyramid has always fit nicely into the existing world of Python web "
"development (virtual environments, packaging, cookiecutters, one of the "
"first to embrace Python 3, etc.). Pyramid turned to the well-regarded "
":term:`WebOb` Python library for request and response handling. In our "
"example above, Pyramid hands ``hello_world`` a ``request`` that is "
":ref:`based on WebOb <webob_chapter>`."
msgstr ""

#: ../../quick_tour.rst:125
msgid "Let's see some features of requests and responses in action:"
msgstr ""

#: ../../quick_tour.rst:131
msgid ""
"In this Pyramid view, we get the URL being visited from ``request.url``. "
"Also if you visited http://localhost:6543/?name=alice in a browser, the "
"name is included in the body of the response:"
msgstr ""

#: ../../quick_tour.rst:139
msgid "Finally we set the response's content type, and return the Response."
msgstr ""

#: ../../quick_tour.rst:141
msgid ""
"See also: :ref:`Quick Tutorial Request and Response "
"<qtut_request_response>` and :ref:`webob_chapter`."
msgstr ""

#: ../../quick_tour.rst:147
msgid "Views"
msgstr ""

#: ../../quick_tour.rst:149
msgid ""
"For the examples above, the ``hello_world`` function is a \"view\". In "
"Pyramid views are the primary way to accept web requests and return "
"responses."
msgstr ""

#: ../../quick_tour.rst:152
msgid "So far our examples place everything in one file:"
msgstr ""

#: ../../quick_tour.rst:154
msgid "the view function"
msgstr ""

#: ../../quick_tour.rst:156
msgid "its registration with the configurator"
msgstr ""

#: ../../quick_tour.rst:158
msgid "the route to map it to an URL"
msgstr ""

#: ../../quick_tour.rst:160
msgid "the WSGI application launcher"
msgstr ""

#: ../../quick_tour.rst:162
msgid ""
"Let's move the views out to their own ``views.py`` module and change the "
"``app.py`` to scan that module, looking for decorators that set up the "
"views."
msgstr ""

#: ../../quick_tour.rst:165
msgid "First our revised ``app.py``:"
msgstr ""

#: ../../quick_tour.rst:171
msgid ""
"We added some more routes, but we also removed the view code. Our views "
"and their registrations (via decorators) are now in a module "
"``views.py``, which is scanned via ``config.scan('views')``."
msgstr ""

#: ../../quick_tour.rst:175
msgid ""
"We now have a ``views.py`` module that is focused on handling requests "
"and responses:"
msgstr ""

#: ../../quick_tour.rst:182
msgid ""
"We have four views, each leading to the other. If you start at "
"http://localhost:6543/, you get a response with a link to the next view. "
"The ``hello_view`` (available at the URL ``/howdy``) has a link to the "
"``redirect_view``, which issues a redirect to the final view."
msgstr ""

#: ../../quick_tour.rst:187
msgid ""
"Earlier we saw ``config.add_view`` as one way to configure a view. This "
"section introduces ``@view_config``. Pyramid's configuration supports "
":term:`imperative configuration`, such as the ``config.add_view`` in the "
"previous example. You can also use :term:`declarative configuration` in "
"which a Python :term:`decorator` is placed on the line above the view. "
"Both approaches result in the same final configuration, thus usually it "
"is simply a matter of taste."
msgstr ""

#: ../../quick_tour.rst:194
msgid ""
"See also: :ref:`Quick Tutorial Views <qtut_views>`, :doc:`../narr/views`,"
" :doc:`../narr/viewconfig`, and :ref:`debugging_view_configuration`."
msgstr ""

#: ../../quick_tour.rst:200
msgid "Routing"
msgstr ""

#: ../../quick_tour.rst:202
msgid ""
"Writing web applications usually means sophisticated URL design. We just "
"saw some Pyramid machinery for requests and views. Let's look at features"
" that help with routing."
msgstr ""

#: ../../quick_tour.rst:206
msgid "Above we saw the basics of routing URLs to views in Pyramid:"
msgstr ""

#: ../../quick_tour.rst:208
msgid ""
"Your project's \"setup\" code registers a route name to be used when "
"matching part of the URL."
msgstr ""

#: ../../quick_tour.rst:211
msgid "Elsewhere a view is configured to be called for that route name."
msgstr ""

#: ../../quick_tour.rst:215
msgid ""
"Why do this twice? Other Python web frameworks let you create a route and"
" associate it with a view in one step. As illustrated in "
":ref:`routes_need_ordering`, multiple routes might match the same URL "
"pattern. Rather than provide ways to help guess, Pyramid lets you be "
"explicit in ordering. Pyramid also gives facilities to avoid the problem."
msgstr ""

#: ../../quick_tour.rst:221
msgid ""
"What if we want part of the URL to be available as data in my view? We "
"can use this route declaration, for example:"
msgstr ""

#: ../../quick_tour.rst:230
msgid ""
"With this, URLs such as ``/howdy/amy/smith`` will assign ``amy`` to "
"``first`` and ``smith`` to ``last``. We can then use this data in our "
"view:"
msgstr ""

#: ../../quick_tour.rst:240
msgid ""
"``request.matchdict`` contains values from the URL that match the "
"\"replacement patterns\" (the curly braces) in the route declaration. "
"This information can then be used in your view."
msgstr ""

#: ../../quick_tour.rst:244
msgid ""
"See also: :ref:`Quick Tutorial Routing <qtut_routing>`, "
":doc:`../narr/urldispatch`, :ref:`debug_routematch_section`, and "
":doc:`../narr/router`."
msgstr ""

#: ../../quick_tour.rst:250
msgid "Templating"
msgstr ""

#: ../../quick_tour.rst:252
msgid ""
"Ouch. We have been making our own ``Response`` and filling the response "
"body with HTML. You usually won't embed an HTML string directly in "
"Python, but instead you will use a templating language."
msgstr ""

#: ../../quick_tour.rst:256
msgid ""
"Pyramid doesn't mandate a particular database system, form library, and "
"so on. It encourages replaceability. This applies equally to templating, "
"which is fortunate: developers have strong views about template "
"languages. That said, the Pylons Project officially supports bindings for"
" Chameleon, Jinja2, and Mako. In this step let's use Chameleon."
msgstr ""

#: ../../quick_tour.rst:262
msgid ""
"Let's add ``pyramid_chameleon``, a Pyramid :term:`add-on` which enables "
"Chameleon as a :term:`renderer` in our Pyramid application:"
msgstr ""

#: ../../quick_tour.rst:269
msgid ""
"With the package installed, we can include the template bindings into our"
" configuration in ``app.py``:"
msgstr ""

#: ../../quick_tour.rst:279
msgid "Now lets change our ``views.py`` file:"
msgstr ""

#: ../../quick_tour.rst:286
msgid ""
"Ahh, that looks better. We have a view that is focused on Python code. "
"Our ``@view_config`` decorator specifies a :term:`renderer` that points "
"to our template file. Our view then simply returns data which is then "
"supplied to our template ``hello_world.pt``:"
msgstr ""

#: ../../quick_tour.rst:294
msgid ""
"Since our view returned ``dict(name=request.matchdict['name'])``, we can "
"use ``name`` as a variable in our template via ``${name}``."
msgstr ""

#: ../../quick_tour.rst:297
msgid ""
"See also: :ref:`Quick Tutorial Templating <qtut_templating>`, "
":doc:`../narr/templates`, :ref:`debugging_templates`, and "
":ref:`available_template_system_bindings`."
msgstr ""

#: ../../quick_tour.rst:304
msgid "Templating with Jinja2"
msgstr ""

#: ../../quick_tour.rst:306
msgid ""
"We just said Pyramid doesn't prefer one templating language over another."
" Time to prove it. Jinja2 is a popular templating system, modeled after "
"Django's templates. Let's add ``pyramid_jinja2``, a Pyramid :term:`add-"
"on` which enables Jinja2 as a :term:`renderer` in our Pyramid "
"applications:"
msgstr ""

#: ../../quick_tour.rst:315
msgid ""
"With the package installed, we can include the template bindings into our"
" configuration:"
msgstr ""

#: ../../quick_tour.rst:325
msgid ""
"The only change in our view is to point the renderer at the ``.jinja2`` "
"file:"
msgstr ""

#: ../../quick_tour.rst:334
msgid "Our Jinja2 template is very similar to our previous template:"
msgstr ""

#: ../../quick_tour.rst:339
msgid ""
"Pyramid's templating add-ons register a new kind of renderer into your "
"application. The renderer registration maps to different kinds of "
"filename extensions. In this case, changing the extension from ``.pt`` to"
" ``.jinja2`` passed the view response through the ``pyramid_jinja2`` "
"renderer."
msgstr ""

#: ../../quick_tour.rst:344
msgid ""
"See also: :ref:`Quick Tutorial Jinja2 <qtut_jinja2>`, `Jinja2 homepage "
"<http://jinja.pocoo.org/>`_, and :ref:`pyramid_jinja2 Overview "
"<jinja2:overview>`."
msgstr ""

#: ../../quick_tour.rst:351
msgid "Static assets"
msgstr ""

#: ../../quick_tour.rst:353
msgid ""
"Of course the Web is more than just markup. You need static assets: CSS, "
"JS, and images. Let's point our web app at a directory from which Pyramid"
" will serve some static assets. First let's make another call to the "
":term:`configurator` in ``app.py``:"
msgstr ""

#: ../../quick_tour.rst:365
msgid ""
"This tells our WSGI application to map requests under "
"http://localhost:6543/static/ to files and directories inside a "
"``static`` directory alongside our Python module."
msgstr ""

#: ../../quick_tour.rst:369
msgid "Next make a directory named ``static``, and place ``app.css`` inside:"
msgstr ""

#: ../../quick_tour.rst:374
msgid ""
"All we need to do now is point to it in the ``<head>`` of our Jinja2 "
"template, ``hello_world.jinja2``:"
msgstr ""

#: ../../quick_tour.rst:384
msgid ""
"This link presumes that our CSS is at a URL starting with ``/static/``. "
"What if the site is later moved under ``/somesite/static/``? Or perhaps a"
" web developer changes the arrangement on disk? Pyramid provides a helper"
" to allow flexibility on URL generation:"
msgstr ""

#: ../../quick_tour.rst:396
msgid ""
"By using ``request.static_url`` to generate the full URL to the static "
"assets, you ensure that you stay in sync with the configuration and gain "
"refactoring flexibility later."
msgstr ""

#: ../../quick_tour.rst:400
msgid ""
"See also: :ref:`Quick Tutorial Static Assets <qtut_static_assets>`, "
":doc:`../narr/assets`, :ref:`preventing_http_caching`, and "
":ref:`influencing_http_caching`."
msgstr ""

#: ../../quick_tour.rst:407
msgid "Returning JSON"
msgstr ""

#: ../../quick_tour.rst:409
msgid ""
"Modern web apps are more than rendered HTML. Dynamic pages now use "
"JavaScript to update the UI in the browser by requesting server data as "
"JSON. Pyramid supports this with a JSON renderer:"
msgstr ""

#: ../../quick_tour.rst:419
msgid ""
"This wires up a view that returns some data through the JSON "
":term:`renderer`, which calls Python's JSON support to serialize the data"
" into JSON, and sets the appropriate HTTP headers."
msgstr ""

#: ../../quick_tour.rst:423
msgid ""
"We also need to add a route to ``app.py`` so that our app will know how "
"to respond to a request for ``hello.json``."
msgstr ""

#: ../../quick_tour.rst:433
msgid ""
"See also: :ref:`Quick Tutorial JSON <qtut_json>`, "
":ref:`views_which_use_a_renderer`, :ref:`json_renderer`, and "
":ref:`adding_and_overriding_renderers`."
msgstr ""

#: ../../quick_tour.rst:439
msgid "View classes"
msgstr ""

#: ../../quick_tour.rst:441
msgid ""
"So far our views have been simple, free-standing functions. Many times "
"your views are related. They may have different ways to look at or work "
"on the same data, or they may be a REST API that handles multiple "
"operations. Grouping these together as a :ref:`view class "
"<class_as_view>` makes sense and achieves the following goals."
msgstr ""

#: ../../quick_tour.rst:447
msgid "Group views"
msgstr ""

#: ../../quick_tour.rst:449
msgid "Centralize some repetitive defaults"
msgstr ""

#: ../../quick_tour.rst:451
msgid "Share some state and helpers"
msgstr ""

#: ../../quick_tour.rst:453
msgid ""
"The following shows a \"Hello World\" example with three operations: view"
" a form, save a change, or press the delete button in our ``views.py``:"
msgstr ""

#: ../../quick_tour.rst:462
msgid ""
"As you can see, the three views are logically grouped together. "
"Specifically:"
msgstr ""

#: ../../quick_tour.rst:464
msgid ""
"The first view is returned when you go to ``/howdy/amy``. This URL is "
"mapped to the ``hello`` route that we centrally set using the optional "
"``@view_defaults``."
msgstr ""

#: ../../quick_tour.rst:468
msgid ""
"The second view is returned when the form data contains a field with "
"``form.edit``, such as clicking on ``<input type=\"submit\" "
"name=\"form.edit\" value=\"Save\">``. This rule is specified in the "
"``@view_config`` for that view."
msgstr ""

#: ../../quick_tour.rst:473
msgid ""
"The third view is returned when clicking on a button such as ``<input "
"type=\"submit\" name=\"form.delete\" value=\"Delete\">``."
msgstr ""

#: ../../quick_tour.rst:476
msgid ""
"Only one route is needed, stated in one place atop the view class. Also, "
"the assignment of ``name`` is done in the ``__init__`` function. Our "
"templates can then use ``{{ view.name }}``."
msgstr ""

#: ../../quick_tour.rst:480
msgid ""
"Pyramid view classes, combined with built-in and custom predicates, have "
"much more to offer:"
msgstr ""

#: ../../quick_tour.rst:483
msgid "All the same view configuration parameters as function views"
msgstr ""

#: ../../quick_tour.rst:485
msgid ""
"One route leading to multiple views, based on information in the request "
"or data such as ``request_param``, ``request_method``, ``accept``, "
"``header``, ``xhr``, ``containment``, and ``custom_predicates``"
msgstr ""

#: ../../quick_tour.rst:489
msgid ""
"See also: :ref:`Quick Tutorial View Classes <qtut_view_classes>`, "
":ref:`Quick Tutorial More View Classes <qtut_more_view_classes>`, and "
":ref:`class_as_view`."
msgstr ""

#: ../../quick_tour.rst:496
msgid "Quick project startup with cookiecutters"
msgstr ""

#: ../../quick_tour.rst:498
msgid ""
"So far we have done all of our *Quick Tour* as a single Python file. No "
"Python packages, no structure. Most Pyramid projects, though, aren't "
"developed this way."
msgstr ""

#: ../../quick_tour.rst:502
msgid ""
"To ease the process of getting started, the Pylons Project provides "
":term:`cookiecutter`\\ s that generate sample Pyramid projects from "
"project templates. These cookiecutters will install Pyramid and its "
"dependencies as well."
msgstr ""

#: ../../quick_tour.rst:504
msgid "First you'll need to install cookiecutter."
msgstr ""

#: ../../quick_tour.rst:510
msgid ""
"Let's use the cookiecutter ``pyramid-cookiecutter-starter`` to create a "
"starter Pyramid project in the current directory, entering values at the "
"prompts as shown below for the following command."
msgstr ""

#: ../../quick_tour.rst:516 ../../quick_tour.rst:864
msgid ""
"If prompted for the first item, accept the default ``yes`` by hitting "
"return."
msgstr ""

#: ../../quick_tour.rst:530
msgid "We then run through the following commands."
msgstr ""

#: ../../quick_tour.rst:545
msgid ""
"We are moving in the direction of a full-featured Pyramid project, with a"
" proper setup for Python standards (packaging) and Pyramid configuration."
" This includes a new way of running your application:"
msgstr ""

#: ../../quick_tour.rst:553
msgid "Let's look at ``pserve`` and configuration in more depth."
msgstr ""

#: ../../quick_tour.rst:555
msgid ""
"See also: :ref:`Quick Tutorial Cookiecutters <qtut_cookiecutters>`, "
":ref:`project_narr`, and :doc:`../narr/cookiecutters`"
msgstr ""

#: ../../quick_tour.rst:561
msgid "Application running with ``pserve``"
msgstr ""

#: ../../quick_tour.rst:563
msgid ""
"Prior to the cookiecutter, our project mixed a number of operational "
"details into our code. Why should my main code care which HTTP server I "
"want and what port number to run on?"
msgstr ""

#: ../../quick_tour.rst:567
msgid ""
"``pserve`` is Pyramid's application runner, separating operational "
"details from your code. When you install Pyramid, a small command program"
" called ``pserve`` is written to your ``bin`` directory. This program is "
"an executable Python module. It's very small, getting most of its brains "
"via import."
msgstr ""

#: ../../quick_tour.rst:572
msgid ""
"You can run ``pserve`` with ``--help`` to see some of its options. Doing "
"so reveals that you can ask ``pserve`` to watch your development files "
"and reload the server when they change:"
msgstr ""

#: ../../quick_tour.rst:580
msgid ""
"The ``pserve`` command has a number of other options and operations. Most"
" of the work, though, comes from your project's wiring, as expressed in "
"the configuration file you supply to ``pserve``. Let's take a look at "
"this configuration file."
msgstr ""

#: ../../quick_tour.rst:585
msgid "See also: :ref:`what_is_this_pserve_thing`"
msgstr ""

#: ../../quick_tour.rst:589
msgid "Configuration with ``.ini`` files"
msgstr ""

#: ../../quick_tour.rst:591
msgid ""
"Earlier in *Quick Tour* we first met Pyramid's configuration system. At "
"that point we did all configuration in Python code. For example, the port"
" number chosen for our HTTP server was right there in Python code. Our "
"cookiecutter has moved this decision and more into the "
"``development.ini`` file:"
msgstr ""

#: ../../quick_tour.rst:599
msgid ""
"Let's take a quick high-level look. First the ``.ini`` file is divided "
"into sections:"
msgstr ""

#: ../../quick_tour.rst:602
msgid "``[app:main]`` configures our WSGI app"
msgstr ""

#: ../../quick_tour.rst:604
msgid "``[server:main]`` holds our WSGI server settings"
msgstr ""

#: ../../quick_tour.rst:606
msgid "Various sections afterwards configure our Python logging system"
msgstr ""

#: ../../quick_tour.rst:608
msgid "We have a few decisions made for us in this configuration:"
msgstr ""

#: ../../quick_tour.rst:610
msgid ""
"*WSGI app:* What package has our WSGI application in it? ``use = "
"egg:hello_world`` in the app section tells the configuration what "
"application to load."
msgstr ""

#: ../../quick_tour.rst:614
msgid ""
"*Easier development by automatic template reloading:* In development "
"mode, you shouldn't have to restart the server when editing a Jinja2 "
"template. ``pyramid.reload_templates = true`` sets this policy, which "
"might be different in production."
msgstr ""

#: ../../quick_tour.rst:619
msgid ""
"*Choice of web server:* ``use = egg:waitress#main`` tells ``pserve`` to "
"use the ``waitress`` server."
msgstr ""

#: ../../quick_tour.rst:622
msgid ""
"*Interfaces:* ``listen = localhost:6543`` tells ``waitress`` to listen on"
" all interfaces on port 6543 for both IPv4 and IPv6."
msgstr ""

#: ../../quick_tour.rst:624
msgid ""
"Additionally the ``development.ini`` generated by this cookiecutter wired"
" up Python's standard logging. We'll now see in the console, for example,"
" a log on every request that comes in, as well as traceback information."
msgstr ""

#: ../../quick_tour.rst:628
msgid ""
"See also: :ref:`Quick Tutorial Application Configuration <qtut_ini>`, "
":ref:`environment_chapter` and :doc:`../narr/paste`"
msgstr ""

#: ../../quick_tour.rst:635
msgid "Easier development with ``debugtoolbar``"
msgstr ""

#: ../../quick_tour.rst:637
msgid ""
"As we introduce the basics, we also want to show how to be productive in "
"development and debugging. For example, we just discussed template "
"reloading and earlier we showed ``--reload`` for application reloading."
msgstr ""

#: ../../quick_tour.rst:641
msgid ""
"``pyramid_debugtoolbar`` is a popular Pyramid add-on which makes several "
"tools available in your browser. Adding it to your project illustrates "
"several points about configuration."
msgstr ""

#: ../../quick_tour.rst:645
msgid ""
"The cookiecutter ``pyramid-cookiecutter-starter`` already configured our "
"package to include the add-on ``pyramid_debugtoolbar`` in its "
"``setup.py``:"
msgstr ""

#: ../../quick_tour.rst:654
msgid "It was installed when you previously ran:"
msgstr ""

#: ../../quick_tour.rst:660
msgid ""
"The ``pyramid_debugtoolbar`` package is a Pyramid add-on, which means we "
"need to include its configuration into our web application. The "
"cookiecutter already took care of this for us in its ``development.ini`` "
"using the ``pyramid.includes`` facility:"
msgstr ""

#: ../../quick_tour.rst:668
msgid ""
"You'll now see a Pyramid logo on the right side of your browser window, "
"which when clicked opens a new window that provides introspective access "
"to debugging information. Even better, if your web application generates "
"an error, you will see a nice traceback on the screen. When you want to "
"disable this toolbar, there's no need to change code: you can remove it "
"from ``pyramid.includes`` in the relevant ``.ini`` configuration file."
msgstr ""

#: ../../quick_tour.rst:675
msgid ""
"See also: :ref:`Quick Tutorial pyramid_debugtoolbar <qtut_debugtoolbar>` "
"and :ref:`pyramid_debugtoolbar <toolbar:overview>`"
msgstr ""

#: ../../quick_tour.rst:680
msgid "Unit tests and ``py.test``"
msgstr ""

#: ../../quick_tour.rst:682
msgid ""
"Yikes! We got this far and we haven't yet discussed tests. This is "
"particularly egregious, as Pyramid has had a deep commitment to full test"
" coverage since before its release."
msgstr ""

#: ../../quick_tour.rst:686
msgid ""
"Our ``pyramid-cookiecutter-starter`` cookiecutter generated a "
"``tests.py`` module with one unit test and one functional test in it. It "
"also configured ``setup.py`` with test requirements: ``py.test`` as the "
"test runner, ``WebTest`` for running view tests, and the ``pytest-cov`` "
"tool which yells at us for code that isn't tested:"
msgstr ""

#: ../../quick_tour.rst:701
msgid ""
"We already installed the test requirements when we ran the command "
"``$VENV/bin/pip install -e \".[testing]\"``. We can now run all our "
"tests:"
msgstr ""

#: ../../quick_tour.rst:707
msgid "This yields the following output."
msgstr ""

#: ../../quick_tour.rst:730
msgid ""
"Our tests passed, and its coverage is complete. What did our test look "
"like?"
msgstr ""

#: ../../quick_tour.rst:736
msgid ""
"Pyramid supplies helpers for test writing, which we use in the test setup"
" and teardown. Our first test imports the view, makes a dummy request, "
"and sees if the view returns what we expected. Our second test verifies "
"that the response body from a request to the web root contains what we "
"expected."
msgstr ""

#: ../../quick_tour.rst:740
msgid ""
"See also: :ref:`Quick Tutorial Unit Testing <qtut_unit_testing>`, "
":ref:`Quick Tutorial Functional Testing <qtut_functional_testing>`, and "
":ref:`testing_chapter`"
msgstr ""

#: ../../quick_tour.rst:746
msgid "Logging"
msgstr ""

#: ../../quick_tour.rst:748
msgid ""
"It's important to know what is going on inside our web application. In "
"development we might need to collect some output. In production we might "
"need to detect situations when other people use the site. We need "
"*logging*."
msgstr ""

#: ../../quick_tour.rst:752
msgid ""
"Fortunately Pyramid uses the normal Python approach to logging. The "
"``development.ini`` file for your project has a number of lines that "
"configure the logging for you to some reasonable defaults. You then see "
"messages sent by Pyramid (for example, when a new request comes in)."
msgstr ""

#: ../../quick_tour.rst:756
msgid ""
"Maybe you would like to log messages in your code? In your Python module,"
" import and set up the logging in your ``views.py``:"
msgstr ""

#: ../../quick_tour.rst:764
msgid "You can now, in your code, log messages:"
msgstr ""

#: ../../quick_tour.rst:772
msgid ""
"This will log ``Some Message`` at a ``DEBUG`` log level to the "
"application-configured logger in your ``development.ini``. What controls "
"that? These emphasized sections in the configuration file:"
msgstr ""

#: ../../quick_tour.rst:782
msgid ""
"Our application, a package named ``hello_world``, is set up as a logger "
"and configured to log messages at a ``DEBUG`` or higher level. When you "
"visit http://localhost:6543, your console will now show:"
msgstr ""

#: ../../quick_tour.rst:790
msgid ""
"See also: :ref:`Quick Tutorial Logging <qtut_logging>` and "
":ref:`logging_chapter`."
msgstr ""

#: ../../quick_tour.rst:794
msgid "Sessions"
msgstr ""

#: ../../quick_tour.rst:796
msgid ""
"When people use your web application, they frequently perform a task that"
" requires semi-permanent data to be saved. For example, a shopping cart. "
"This is called a :term:`session`."
msgstr ""

#: ../../quick_tour.rst:800
msgid ""
"Pyramid has basic built-in support for sessions. Third party packages "
"such as ``pyramid_redis_sessions`` provide richer session support. Or you"
" can create your own custom sessioning engine. Let's take a look at the "
":doc:`built-in sessioning support <../narr/sessions>`. In our "
"``__init__.py`` we first import the kind of sessioning we want:"
msgstr ""

#: ../../quick_tour.rst:814
msgid ""
"As noted in the session docs, this example implementation is not intended"
" for use in settings with security implications."
msgstr ""

#: ../../quick_tour.rst:817
msgid ""
"Now make a \"factory\" and pass it to the :term:`configurator`'s "
"``session_factory`` argument:"
msgstr ""

#: ../../quick_tour.rst:826
msgid ""
"Pyramid's :term:`request` object now has a ``session`` attribute that we "
"can use in our view code in ``views.py``:"
msgstr ""

#: ../../quick_tour.rst:835
msgid ""
"We need to update our Jinja2 template ``templates/mytemplate.jinja2`` to "
"show counter increment in the session:"
msgstr ""

#: ../../quick_tour.rst:843
msgid ""
"See also: :ref:`Quick Tutorial Sessions <qtut_sessions>`, "
":ref:`sessions_chapter`, :ref:`flash_messages`, :ref:`session_module`, "
"and :term:`pyramid_redis_sessions`."
msgstr ""

#: ../../quick_tour.rst:850
msgid "Databases"
msgstr ""

#: ../../quick_tour.rst:852
msgid ""
"Web applications mean data. Data means databases. Frequently SQL "
"databases. SQL databases frequently mean an \"ORM\" (object-relational "
"mapper.) In Python, ORM usually leads to the mega-quality *SQLAlchemy*, a"
" Python package that greatly eases working with databases."
msgstr ""

#: ../../quick_tour.rst:857
msgid ""
"Pyramid and SQLAlchemy are great friends. That friendship includes a "
"cookiecutter!"
msgstr ""

#: ../../quick_tour.rst:873
msgid "We then run through the following commands as before."
msgstr ""

#: ../../quick_tour.rst:888
msgid ""
"We now have a working sample SQLAlchemy application with all dependencies"
" installed. The sample project provides a console script to initialize a "
"SQLite database with tables. Let's run it, then start the application:"
msgstr ""

#: ../../quick_tour.rst:897
msgid ""
"The ORM eases the mapping of database structures into a programming "
"language. SQLAlchemy uses \"models\" for this mapping. The cookiecutter "
"generated a sample model:"
msgstr ""

#: ../../quick_tour.rst:906
msgid ""
"View code, which mediates the logic between web requests and the rest of "
"the system, can then easily get at the data thanks to SQLAlchemy:"
msgstr ""

#: ../../quick_tour.rst:914
msgid ""
"See also: :ref:`Quick Tutorial Databases <qtut_databases>`, `SQLAlchemy "
"<http://www.sqlalchemy.org/>`_, :ref:`making_a_console_script`, "
":ref:`bfg_sql_wiki_tutorial`, and :ref:`Application Transactions with "
"pyramid_tm <tm:overview>`."
msgstr ""

#: ../../quick_tour.rst:922
msgid "Forms"
msgstr ""

#: ../../quick_tour.rst:924
msgid ""
"Developers have lots of opinions about web forms, thus there are many "
"form libraries for Python. Pyramid doesn't directly bundle a form "
"library, but *Deform* is a popular choice for forms, along with its "
"related *Colander* schema system."
msgstr ""

#: ../../quick_tour.rst:929
msgid ""
"As an example, imagine we want a form that edits a wiki page. The form "
"should have two fields on it, one of them a required title and the other "
"a rich text editor for the body. With Deform we can express this as a "
"Colander schema:"
msgstr ""

#: ../../quick_tour.rst:942
msgid ""
"With this in place, we can render the HTML for a form, perhaps with form "
"data from an existing page:"
msgstr ""

#: ../../quick_tour.rst:949
msgid "We'd like to handle form submission, validation, and saving:"
msgstr ""

#: ../../quick_tour.rst:967
msgid ""
"Deform and Colander provide a very flexible combination for forms, "
"widgets, schemas, and validation. Recent versions of Deform also include "
"a :ref:`retail mode <deform:retail>` for gaining Deform features on "
"custom forms."
msgstr ""

#: ../../quick_tour.rst:971
msgid ""
"Deform uses attractive CSS from Twitter Bootstrap and more powerful "
"select, checkbox, and date and time widgets."
msgstr ""

#: ../../quick_tour.rst:973
msgid ""
"See also: :ref:`Quick Tutorial Forms <qtut_forms>`, :ref:`Deform "
"<deform:overview>`, and :ref:`Colander <colander:overview>`."
msgstr ""

#: ../../quick_tour.rst:977
msgid "Conclusion"
msgstr ""

#: ../../quick_tour.rst:979
msgid ""
"This *Quick Tour* covered a little about a lot. We introduced a long list"
" of concepts in Pyramid, many of which are expanded on more fully in the "
"Pyramid developer docs."
msgstr ""

