# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/authorization.rst:4
msgid ":mod:`pyramid.authorization`"
msgstr ""

#: ../../../../../../../../home/okazaki/.local/lib/python3.6/site-packages/pyramid/authorization.py:docstring of pyramid.authorization.ACLAuthorizationPolicy:1
msgid "An :term:`authorization policy` which consults an :term:`ACL` object attached to a :term:`context` to determine authorization information about a :term:`principal` or multiple principals. If the context is part of a :term:`lineage`, the context's parents are consulted for ACL information too.  The following is true about this security policy."
msgstr ""

#: ../../../../../../../../home/okazaki/.local/lib/python3.6/site-packages/pyramid/authorization.py:docstring of pyramid.authorization.ACLAuthorizationPolicy:8
msgid "When checking whether the 'current' user is permitted (via the ``permits`` method), the security policy consults the ``context`` for an ACL first.  If no ACL exists on the context, or one does exist but the ACL does not explicitly allow or deny access for any of the effective principals, consult the context's parent ACL, and so on, until the lineage is exhausted or we determine that the policy permits or denies."
msgstr ""

#: ../../../../../../../../home/okazaki/.local/lib/python3.6/site-packages/pyramid/authorization.py:docstring of pyramid.authorization.ACLAuthorizationPolicy:16
msgid "During this processing, if any :data:`pyramid.security.Deny` ACE is found matching any principal in ``principals``, stop processing by returning an :class:`pyramid.security.ACLDenied` instance (equals ``False``) immediately.  If any :data:`pyramid.security.Allow` ACE is found matching any principal, stop processing by returning an :class:`pyramid.security.ACLAllowed` instance (equals ``True``) immediately.  If we exhaust the context's :term:`lineage`, and no ACE has explicitly permitted or denied access, return an instance of :class:`pyramid.security.ACLDenied` (equals ``False``)."
msgstr ""

#: ../../../../../../../../home/okazaki/.local/lib/python3.6/site-packages/pyramid/authorization.py:docstring of pyramid.authorization.ACLAuthorizationPolicy:29
msgid "When computing principals allowed by a permission via the :func:`pyramid.security.principals_allowed_by_permission` method, we compute the set of principals that are explicitly granted the ``permission`` in the provided ``context``.  We do this by walking 'up' the object graph *from the root* to the context.  During this walking process, if we find an explicit :data:`pyramid.security.Allow` ACE for a principal that matches the ``permission``, the principal is included in the allow list.  However, if later in the walking process that principal is mentioned in any :data:`pyramid.security.Deny` ACE for the permission, the principal is removed from the allow list.  If a :data:`pyramid.security.Deny` to the principal :data:`pyramid.security.Everyone` is encountered during the walking process that matches the ``permission``, the allow list is cleared for all principals encountered in previous ACLs.  The walking process ends after we've processed the any ACL directly attached to ``context``; a set of principals is returned."
msgstr ""

#: ../../../../../../../../home/okazaki/.local/lib/python3.6/site-packages/pyramid/authorization.py:docstring of pyramid.authorization.ACLAuthorizationPolicy:47
msgid "Objects of this class implement the :class:`pyramid.interfaces.IAuthorizationPolicy` interface."
msgstr ""

