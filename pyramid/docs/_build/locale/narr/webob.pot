# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../narr/webob.rst:8
msgid "Request and Response Objects"
msgstr ""

#: ../../narr/webob.rst:10
msgid "This chapter is adapted from a portion of the :term:`WebOb` documentation, originally written by Ian Bicking."
msgstr ""

#: ../../narr/webob.rst:13
msgid ":app:`Pyramid` uses the :term:`WebOb` package as a basis for its :term:`request` and :term:`response` object implementations.  The :term:`request` object that is passed to a :app:`Pyramid` :term:`view` is an instance of the :class:`pyramid.request.Request` class, which is a subclass of :class:`webob.Request`.  The :term:`response` returned from a :app:`Pyramid` :term:`view` :term:`renderer` is an instance of the :mod:`pyramid.response.Response` class, which is a subclass of the :class:`webob.Response` class.  Users can also return an instance of :class:`pyramid.response.Response` directly from a view as necessary."
msgstr ""

#: ../../narr/webob.rst:23
msgid "WebOb is a project separate from :app:`Pyramid` with a separate set of authors and a fully separate `set of documentation <http://docs.webob.org/en/latest/index.html>`_.  :app:`Pyramid` adds some functionality to the standard WebOb request, which is documented in the :ref:`request_module` API documentation."
msgstr ""

#: ../../narr/webob.rst:29
msgid "WebOb provides objects for HTTP requests and responses.  Specifically it does this by wrapping the `WSGI <https://wsgi.readthedocs.io/en/latest/>`_ request environment and response status, header list, and app_iter (body) values."
msgstr ""

#: ../../narr/webob.rst:33
msgid "WebOb request and response objects provide many conveniences for parsing WSGI requests and forming WSGI responses.  WebOb is a nice way to represent \"raw\" WSGI requests and responses.  However, we won't cover that use case in this document, as users of :app:`Pyramid` don't typically need to use the WSGI-related features of WebOb directly.  The `reference documentation <http://docs.webob.org/en/latest/reference.html>`_ shows many examples of creating requests and using response objects in this manner, however."
msgstr ""

#: ../../narr/webob.rst:46
msgid "Request"
msgstr ""

#: ../../narr/webob.rst:48
msgid "The request object is a wrapper around the `WSGI environ dictionary <https://www.python.org/dev/peps/pep-0333/#environ-variables>`_.  This dictionary contains keys for each header, keys that describe the request (including the path and query string), a file-like object for the request body, and a variety of custom keys.  You can always access the environ with ``req.environ``."
msgstr ""

#: ../../narr/webob.rst:55
msgid "Some of the most important and interesting attributes of a request object are below."
msgstr ""

#: ../../narr/webob.rst:59
msgid "``req.method``"
msgstr ""

#: ../../narr/webob.rst:59
msgid "The request method, e.g., ``GET``, ``POST``"
msgstr ""

#: ../../narr/webob.rst:62
msgid "``req.GET``"
msgstr ""

#: ../../narr/webob.rst:62
msgid "A :term:`multidict` with all the variables in the query string."
msgstr ""

#: ../../narr/webob.rst:66
msgid "``req.POST``"
msgstr ""

#: ../../narr/webob.rst:65
msgid "A :term:`multidict` with all the variables in the request body.  This only has variables if the request was a ``POST`` and it is a form submission."
msgstr ""

#: ../../narr/webob.rst:70
msgid "``req.params``"
msgstr ""

#: ../../narr/webob.rst:69
msgid "A :term:`multidict` with a combination of everything in ``req.GET`` and ``req.POST``."
msgstr ""

#: ../../narr/webob.rst:76
msgid "``req.body``"
msgstr ""

#: ../../narr/webob.rst:73
msgid "The contents of the body of the request.  This contains the entire request body as a string.  This is useful when the request is a ``POST`` that is *not* a form submission, or a request like a ``PUT``.  You can also get ``req.body_file`` for a file-like object."
msgstr ""

#: ../../narr/webob.rst:80
msgid "``req.json_body``"
msgstr ""

#: ../../narr/webob.rst:79
msgid "The JSON-decoded contents of the body of the request. See :ref:`request_json_body`."
msgstr ""

#: ../../narr/webob.rst:83
msgid "``req.cookies``"
msgstr ""

#: ../../narr/webob.rst:83
msgid "A simple dictionary of all the cookies."
msgstr ""

#: ../../narr/webob.rst:86
msgid "``req.headers``"
msgstr ""

#: ../../narr/webob.rst:86
msgid "A dictionary of all the headers.  This dictionary is case-insensitive."
msgstr ""

#: ../../narr/webob.rst:92
msgid "``req.urlvars`` and ``req.urlargs``"
msgstr ""

#: ../../narr/webob.rst:89
msgid "``req.urlvars`` are the keyword parameters associated with the request URL. ``req.urlargs`` are the positional parameters. These are set by products like `Routes <https://routes.readthedocs.io/en/latest/>`_ and `Selector <https://github.com/lukearno/selector>`_."
msgstr ""

#: ../../narr/webob.rst:94
msgid "Also for standard HTTP request headers, there are usually attributes such as ``req.accept_language``, ``req.content_length``, and ``req.user_agent``.  These properties expose the *parsed* form of each header, for whatever parsing makes sense.  For instance, ``req.if_modified_since`` returns a :mod:`datetime` object (or None if the header is was not provided)."
msgstr ""

#: ../../narr/webob.rst:100
msgid "Full API documentation for the :app:`Pyramid` request object is available in :ref:`request_module`."
msgstr ""

#: ../../narr/webob.rst:109
msgid "Special Attributes Added to the Request by :app:`Pyramid`"
msgstr ""

#: ../../narr/webob.rst:111
msgid "In addition to the standard :term:`WebOb` attributes, :app:`Pyramid` adds special attributes to every request: ``context``, ``registry``, ``root``, ``subpath``, ``traversed``, ``view_name``, ``virtual_root``, ``virtual_root_path``, ``session``, ``matchdict``, and ``matched_route``. These attributes are documented further within the :class:`pyramid.request.Request` API documentation."
msgstr ""

#: ../../narr/webob.rst:122
msgid "URLs"
msgstr ""

#: ../../narr/webob.rst:124
msgid "In addition to these attributes, there are several ways to get the URL of the request and its parts.  We'll show various values for an example URL ``http://localhost/app/blog?id=10``, where the application is mounted at ``http://localhost/app``."
msgstr ""

#: ../../narr/webob.rst:131
msgid "``req.url``"
msgstr ""

#: ../../narr/webob.rst:130
msgid "The full request URL with query string, e.g., ``http://localhost/app/blog?id=10``"
msgstr ""

#: ../../narr/webob.rst:134
msgid "``req.host``"
msgstr ""

#: ../../narr/webob.rst:134
msgid "The host information in the URL, e.g., ``localhost``"
msgstr ""

#: ../../narr/webob.rst:137
msgid "``req.host_url``"
msgstr ""

#: ../../narr/webob.rst:137
msgid "The URL with the host, e.g., ``http://localhost``"
msgstr ""

#: ../../narr/webob.rst:141
msgid "``req.application_url``"
msgstr ""

#: ../../narr/webob.rst:140
msgid "The URL of the application (just the ``SCRIPT_NAME`` portion of the path, not ``PATH_INFO``), e.g., ``http://localhost/app``"
msgstr ""

#: ../../narr/webob.rst:145
msgid "``req.path_url``"
msgstr ""

#: ../../narr/webob.rst:144
msgid "The URL of the application including the ``PATH_INFO``, e.g., ``http://localhost/app/blog``"
msgstr ""

#: ../../narr/webob.rst:149
msgid "``req.path``"
msgstr ""

#: ../../narr/webob.rst:148
msgid "The URL including ``PATH_INFO`` without the host or scheme, e.g., ``/app/blog``"
msgstr ""

#: ../../narr/webob.rst:153
msgid "``req.path_qs``"
msgstr ""

#: ../../narr/webob.rst:152
msgid "The URL including ``PATH_INFO`` and the query string, e.g, ``/app/blog?id=10``"
msgstr ""

#: ../../narr/webob.rst:156
msgid "``req.query_string``"
msgstr ""

#: ../../narr/webob.rst:156
msgid "The query string in the URL, e.g., ``id=10``"
msgstr ""

#: ../../narr/webob.rst:160
msgid "``req.relative_url(url, to_application=False)``"
msgstr ""

#: ../../narr/webob.rst:159
msgid "Gives a URL relative to the current URL.  If ``to_application`` is True, then resolves it relative to ``req.application_url``."
msgstr ""

#: ../../narr/webob.rst:166
msgid "Methods"
msgstr ""

#: ../../narr/webob.rst:168
msgid "There are methods of request objects documented in :class:`pyramid.request.Request` but you'll find that you won't use very many of them.  Here are a couple that might be useful:"
msgstr ""

#: ../../narr/webob.rst:177
msgid "``Request.blank(base_url)``"
msgstr ""

#: ../../narr/webob.rst:173
msgid "Creates a new request with blank information, based at the given URL.  This can be useful for subrequests and artificial requests.  You can also use ``req.copy()`` to copy an existing request, or for subrequests ``req.copy_get()`` which copies the request but always turns it into a GET (which is safer to share for subrequests)."
msgstr ""

#: ../../narr/webob.rst:182
msgid "``req.get_response(wsgi_application)``"
msgstr ""

#: ../../narr/webob.rst:180
msgid "This method calls the given WSGI application with this request, and returns a :class:`pyramid.response.Response` object.  You can also use this for subrequests or testing."
msgstr ""

#: ../../narr/webob.rst:189
msgid "Text (Unicode)"
msgstr ""

#: ../../narr/webob.rst:191
msgid "Many of the properties of the request object will be text values (``unicode`` under Python 2 or ``str`` under Python 3) if the request encoding/charset is provided.  If it is provided, the values in ``req.POST``, ``req.GET``, ``req.params``, and ``req.cookies`` will contain text.  The client *can* indicate the charset with something like ``Content-Type: application/x-www-form-urlencoded; charset=utf8``, but browsers seldom set this.  You can reset the charset of an existing request with ``newreq = req.decode('utf-8')``, or during instantiation with ``Request(environ, charset='utf8')``."
msgstr ""

#: ../../narr/webob.rst:207
msgid "Multidict"
msgstr ""

#: ../../narr/webob.rst:209
msgid "Several attributes of a WebOb request are multidict structures (such as ``request.GET``, ``request.POST``, and ``request.params``).  A multidict is a dictionary where a key can have multiple values.  The quintessential example is a query string like ``?pref=red&pref=blue``; the ``pref`` variable has two values: ``red`` and ``blue``."
msgstr ""

#: ../../narr/webob.rst:215
msgid "In a multidict, when you do ``request.GET['pref']``, you'll get back only ``\"blue\"`` (the last value of ``pref``).  This returned result might not be expected—sometimes returning a string, and sometimes returning a list—and may be cause of frequent exceptions.  If you want *all* the values back, use ``request.GET.getall('pref')``.  If you want to be sure there is *one and only one* value, use ``request.GET.getone('pref')``, which will raise an exception if there is zero or more than one value for ``pref``."
msgstr ""

#: ../../narr/webob.rst:223
msgid "When you use operations like ``request.GET.items()``, you'll get back something like ``[('pref', 'red'), ('pref', 'blue')]``.  All the key/value pairs will show up.  Similarly ``request.GET.keys()`` returns ``['pref', 'pref']``. Multidict is a view on a list of tuples; all the keys are ordered, and all the values are ordered."
msgstr ""

#: ../../narr/webob.rst:229
msgid "API documentation for a multidict exists as :class:`pyramid.interfaces.IMultiDict`."
msgstr ""

#: ../../narr/webob.rst:238
msgid "Dealing with a JSON-Encoded Request Body"
msgstr ""

#: ../../narr/webob.rst:242
msgid ":attr:`pyramid.request.Request.json_body` is a property that returns a :term:`JSON`-decoded representation of the request body.  If the request does not have a body, or the body is not a properly JSON-encoded value, an exception will be raised when this attribute is accessed."
msgstr ""

#: ../../narr/webob.rst:247
msgid "This attribute is useful when you invoke a :app:`Pyramid` view callable via, for example, jQuery's ``$.ajax`` function, which has the potential to send a request with a JSON-encoded body."
msgstr ""

#: ../../narr/webob.rst:251
msgid "Using ``request.json_body`` is equivalent to:"
msgstr ""

#: ../../narr/webob.rst:258
msgid "Here's how to construct an AJAX request in JavaScript using :term:`jQuery` that allows you to use the ``request.json_body`` attribute when the request is sent to a :app:`Pyramid` application:"
msgstr ""

#: ../../narr/webob.rst:269
msgid "When such a request reaches a view in your application, the ``request.json_body`` attribute will be available in the view callable body."
msgstr ""

#: ../../narr/webob.rst:279
msgid "For the above view, printed to the console will be:"
msgstr ""

#: ../../narr/webob.rst:285
msgid "For bonus points, here's a bit of client-side code that will produce a request that has a body suitable for reading via ``request.json_body`` using Python's ``urllib2`` instead of a JavaScript AJAX request:"
msgstr ""

#: ../../narr/webob.rst:299
msgid "If you are doing Cross-origin resource sharing (CORS), then the standard requires the browser to do a pre-flight HTTP OPTIONS request. The easiest way to handle this is to add an extra ``view_config`` for the same route, with ``request_method`` set to ``OPTIONS``, and set the desired response header before returning. You can find examples of response headers `Access control CORS, Preflighted requests <https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests>`_."
msgstr ""

#: ../../narr/webob.rst:313
msgid "Cleaning up after a Request"
msgstr ""

#: ../../narr/webob.rst:315
msgid "Sometimes it's required to perform some cleanup at the end of a request when a database connection is involved."
msgstr ""

#: ../../narr/webob.rst:318
msgid "For example, let's say you have a ``mypackage`` :app:`Pyramid` application package that uses SQLAlchemy, and you'd like the current SQLAlchemy database session to be removed after each request.  Put the following in the ``mypackage.__init__`` module:"
msgstr ""

#: ../../narr/webob.rst:338
msgid "Registering the ``cleanup_callback`` finished callback at the start of a request (by causing the ``add_cleanup_callback`` to receive a :class:`pyramid.events.NewRequest` event at the start of each request) will cause the DBSession to be removed whenever request processing has ended. Note that in the example above, for the :class:`pyramid.events.subscriber` decorator to work, the :meth:`pyramid.config.Configurator.scan` method must be called against your ``mypackage`` package during application initialization."
msgstr ""

#: ../../narr/webob.rst:347
msgid "This is only an example.  In particular, it is not necessary to cause ``DBSession.remove`` to be called in an application generated from a :app:`Pyramid` cookiecutter, because these all use the ``pyramid_tm`` package. The cleanup done by ``DBSession.remove`` is unnecessary when ``pyramid_tm`` :term:`middleware` is configured into the application."
msgstr ""

#: ../../narr/webob.rst:354
#: ../../narr/webob.rst:494
msgid "More Details"
msgstr ""

#: ../../narr/webob.rst:356
msgid "More detail about the request object API is available as follows."
msgstr ""

#: ../../narr/webob.rst:358
msgid ":class:`pyramid.request.Request` API documentation"
msgstr ""

#: ../../narr/webob.rst:360
msgid "`WebOb documentation <http://docs.webob.org/en/latest/index.html>`_.  All methods and attributes of a ``webob.Request`` documented within the WebOb documentation will work with request objects created by :app:`Pyramid`."
msgstr ""

#: ../../narr/webob.rst:368
msgid "Response"
msgstr ""

#: ../../narr/webob.rst:370
msgid "The :app:`Pyramid` response object can be imported as :class:`pyramid.response.Response`.  This class is a subclass of the ``webob.Response`` class.  The subclass does not add or change any functionality, so the WebOb Response documentation will be completely relevant for this class as well."
msgstr ""

#: ../../narr/webob.rst:376
msgid "A response object has three fundamental parts:"
msgstr ""

#: ../../narr/webob.rst:380
msgid "``response.status``"
msgstr ""

#: ../../narr/webob.rst:379
msgid "The response code plus reason message, like ``200 OK``.  To set the code without a message, use ``status_int``, i.e., ``response.status_int = 200``."
msgstr ""

#: ../../narr/webob.rst:385
msgid "``response.headerlist``"
msgstr ""

#: ../../narr/webob.rst:383
msgid "A list of all the headers, like ``[('Content-Type', 'text/html')]``. There's a case-insensitive :term:`multidict` in ``response.headers`` that also allows you to access these same headers."
msgstr ""

#: ../../narr/webob.rst:392
msgid "``response.app_iter``"
msgstr ""

#: ../../narr/webob.rst:388
msgid "An iterable (such as a list or generator) that will produce the content of the response.  This is also accessible as ``response.body`` (a string), ``response.text`` (a unicode object, informed by ``response.charset``), and ``response.body_file`` (a file-like object; writing to it appends to ``app_iter``)."
msgstr ""

#: ../../narr/webob.rst:394
msgid "Everything else in the object typically derives from this underlying state. Here are some highlights:"
msgstr ""

#: ../../narr/webob.rst:402
msgid "``response.content_type``"
msgstr ""

#: ../../narr/webob.rst:398
msgid "The content type *not* including the ``charset`` parameter."
msgstr ""

#: ../../narr/webob.rst:400
msgid "Typical use: ``response.content_type = 'text/html'``."
msgstr ""

#: ../../narr/webob.rst:402
msgid "Default value: ``response.content_type = 'text/html'``."
msgstr ""

#: ../../narr/webob.rst:407
msgid "``response.charset``"
msgstr ""

#: ../../narr/webob.rst:405
msgid "The ``charset`` parameter of the content-type, it also informs encoding in ``response.text``. ``response.content_type_params`` is a dictionary of all the parameters."
msgstr ""

#: ../../narr/webob.rst:413
msgid "``response.set_cookie(name, value, max_age=None, path='/', ...)``"
msgstr ""

#: ../../narr/webob.rst:410
msgid "Set a cookie.  The keyword arguments control the various cookie parameters. The ``max_age`` argument is the length for the cookie to live in seconds (you may also use a timedelta object).  The ``Expires`` key will also be set based on the value of ``max_age``."
msgstr ""

#: ../../narr/webob.rst:417
msgid "``response.delete_cookie(name, path='/', domain=None)``"
msgstr ""

#: ../../narr/webob.rst:416
msgid "Delete a cookie from the client.  This sets ``max_age`` to 0 and the cookie value to ``''``."
msgstr ""

#: ../../narr/webob.rst:422
msgid "``response.cache_expires(seconds=0)``"
msgstr ""

#: ../../narr/webob.rst:420
msgid "This makes the response cacheable for the given number of seconds, or if ``seconds`` is ``0`` then the response is uncacheable (this also sets the ``Expires`` header)."
msgstr ""

#: ../../narr/webob.rst:428
msgid "``response(environ, start_response)``"
msgstr ""

#: ../../narr/webob.rst:425
msgid "The response object is a WSGI application.  As an application, it acts according to how you create it.  It *can* do conditional responses if you pass ``conditional_response=True`` when instantiating (or set that attribute later).  It can also do HEAD and Range requests."
msgstr ""

#: ../../narr/webob.rst:434
msgid "Headers"
msgstr ""

#: ../../narr/webob.rst:436
msgid "Like the request, most HTTP response headers are available as properties. These are parsed, so you can do things like ``response.last_modified = os.path.getmtime(filename)``."
msgstr ""

#: ../../narr/webob.rst:440
msgid "The details are available in the :mod:`webob.response` API documentation."
msgstr ""

#: ../../narr/webob.rst:446
msgid "Instantiating the Response"
msgstr ""

#: ../../narr/webob.rst:448
msgid "Of course most of the time you just want to *make* a response.  Generally any attribute of the response can be passed in as a keyword argument to the class, e.g.:"
msgstr ""

#: ../../narr/webob.rst:458
msgid "The status defaults to ``'200 OK'``."
msgstr ""

#: ../../narr/webob.rst:460
msgid "The value of ``content_type`` defaults to ``webob.response.Response.default_content_type``, which is ``text/html``. You can subclass :class:`pyramid.response.Response` and set ``default_content_type`` to override this behavior."
msgstr ""

#: ../../narr/webob.rst:469
msgid "Exception Responses"
msgstr ""

#: ../../narr/webob.rst:471
msgid "To facilitate error responses like ``404 Not Found``, the module :mod:`pyramid.httpexceptions` contains classes for each kind of error response. These include boring but appropriate error bodies.  The exceptions exposed by this module, when used under :app:`Pyramid`, should be imported from the :mod:`pyramid.httpexceptions` module.  This import location contains subclasses and replacements that mirror those in the ``webob.exc`` module."
msgstr ""

#: ../../narr/webob.rst:478
msgid "Each class is named ``pyramid.httpexceptions.HTTP*``, where ``*`` is the reason for the error.  For instance, :class:`pyramid.httpexceptions.HTTPNotFound` subclasses :class:`pyramid.response.Response`, so you can manipulate the instances in the same way.  A typical example is:"
msgstr ""

#: ../../narr/webob.rst:496
msgid "More details about the response object API are available in the :mod:`pyramid.response` documentation.  More details about exception responses are in the :mod:`pyramid.httpexceptions` API documentation.  The `WebOb documentation <http://docs.webob.org/en/latest/index.html>`_ is also useful."
msgstr ""

