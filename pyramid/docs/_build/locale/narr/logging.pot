# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../narr/logging.rst:4
msgid "Logging"
msgstr ""

#: ../../narr/logging.rst:6
msgid ":app:`Pyramid` allows you to make use of the Python standard library :mod:`logging` module.  This chapter describes how to configure logging and how to send log messages to loggers that you've configured."
msgstr ""

#: ../../narr/logging.rst:12
msgid "This chapter assumes you've used a :term:`cookiecutter` to create a project which contains ``development.ini`` and ``production.ini`` files which help configure logging.  All of the Pyramid cookiecutters provided by the Pylons Project do this.  If you're not using a cookiecutter, or if you've used a third-party cookiecutter which does not create these files, the configuration information in this chapter may not be applicable."
msgstr ""

#: ../../narr/logging.rst:27
msgid "Logging Configuration"
msgstr ""

#: ../../narr/logging.rst:29
msgid "A :app:`Pyramid` project created from a :term:`cookiecutter` is configured to allow you to send messages to :mod:`Python standard library logging package <logging>` loggers from within your application.  In particular, the :term:`PasteDeploy` ``development.ini`` and ``production.ini`` files created when you use a cookiecutter include a basic configuration for the Python :mod:`logging` package."
msgstr ""

#: ../../narr/logging.rst:36
msgid "PasteDeploy ``.ini`` files use the Python standard library :mod:`ConfigParser format <ConfigParser>`. This is the same format used as the Python :ref:`logging module's Configuration file format <logging-config-fileformat>`. The application-related and logging-related sections in the configuration file can coexist peacefully, and the logging-related sections in the file are used from when you run ``pserve``."
msgstr ""

#: ../../narr/logging.rst:43
msgid "The ``pserve`` command calls the :func:`pyramid.paster.setup_logging` function, a thin wrapper around the :func:`logging.config.fileConfig` using the specified ``.ini`` file, if it contains a ``[loggers]`` section (all of the cookiecutter-generated ``.ini`` files do). ``setup_logging`` reads the logging configuration from the ini file upon which ``pserve`` was invoked."
msgstr ""

#: ../../narr/logging.rst:49
msgid "Default logging configuration is provided in both the default ``development.ini`` and the ``production.ini`` files.  If you use ``pyramid-cookiecutter-starter`` to generate a Pyramid project with the name of the package as ``hello_world``, then the logging configuration in the ``development.ini`` file is as follows:"
msgstr ""

#: ../../narr/logging.rst:58
msgid "The ``production.ini`` file uses the ``WARN`` level in its logger configuration instead of ``DEBUG``, but it is otherwise identical."
msgstr ""

#: ../../narr/logging.rst:61
msgid "In this logging configuration:"
msgstr ""

#: ../../narr/logging.rst:63
msgid "a logger named ``root`` is created that logs messages at a level above or equal to the ``INFO`` level to stderr, with the following format:"
msgstr ""

#: ../../narr/logging.rst:70
msgid "a logger named ``myproject`` is configured that logs messages sent at a level above or equal to ``DEBUG`` to stderr in the same format as the root logger."
msgstr ""

#: ../../narr/logging.rst:73
msgid "The ``root`` logger will be used by all applications in the Pyramid process that ask for a logger (via ``logging.getLogger``) that has a name which begins with anything except your project's package name (e.g., ``myproject``). The logger with the same name as your package name is reserved for your own usage in your :app:`Pyramid` application.  Its existence means that you can log to a known logging location from any :app:`Pyramid` application generated via a cookiecutter."
msgstr ""

#: ../../narr/logging.rst:80
msgid ":app:`Pyramid` and many other libraries (such as Beaker, SQLAlchemy, Paste) log a number of messages to the root logger for debugging purposes. Switching the root logger level to ``DEBUG`` reveals them:"
msgstr ""

#: ../../narr/logging.rst:91
msgid "Some cookiecutters configure additional loggers for additional subsystems they use (such as SQLALchemy).  Take a look at the ``production.ini`` and ``development.ini`` files rendered when you create a project from a cookiecutter."
msgstr ""

#: ../../narr/logging.rst:96
msgid "Sending Logging Messages"
msgstr ""

#: ../../narr/logging.rst:98
msgid "Python's special ``__name__`` variable refers to the current module's fully qualified name.  From any module in a package named ``myproject``, the ``__name__`` builtin variable will always be something like ``myproject``, or ``myproject.subpackage`` or ``myproject.package.subpackage`` if your project is named ``myproject``.  Sending a message to this logger will send it to the ``myproject`` logger."
msgstr ""

#: ../../narr/logging.rst:105
msgid "To log messages to the package-specific logger configured in your ``.ini`` file, simply create a logger object using the ``__name__`` builtin and call methods on it."
msgstr ""

#: ../../narr/logging.rst:122
msgid "This will result in the following printed to the console, on ``stderr``:"
msgstr ""

#: ../../narr/logging.rst:130
msgid "Filtering log messages"
msgstr ""

#: ../../narr/logging.rst:132
msgid "Often there's too much log output to sift through, such as when switching the root logger's level to ``DEBUG``."
msgstr ""

#: ../../narr/logging.rst:135
msgid "For example, you're diagnosing database connection issues in your application and only want to see SQLAlchemy's ``DEBUG`` messages in relation to database connection pooling. You can leave the root logger's level at the less verbose ``INFO`` level and set that particular SQLAlchemy logger to ``DEBUG`` on its own, apart from the root logger:"
msgstr ""

#: ../../narr/logging.rst:148
msgid "then add it to the list of loggers:"
msgstr ""

#: ../../narr/logging.rst:155
msgid "No handlers need to be configured for this logger as by default non-root loggers will propagate their log records up to their parent logger's handlers. The root logger is the top level parent of all loggers."
msgstr ""

#: ../../narr/logging.rst:159
msgid "This technique is used in the default ``development.ini``. The root logger's level is set to ``INFO``, whereas the application's log level is set to ``DEBUG``:"
msgstr ""

#: ../../narr/logging.rst:175
msgid "All of the child loggers of the ``myproject`` logger will inherit the ``DEBUG`` level unless they're explicitly set differently. Meaning the ``myproject.views``, ``myproject.models``, and all your app's modules' loggers by default have an effective level of ``DEBUG`` too."
msgstr ""

#: ../../narr/logging.rst:180
msgid "For more advanced filtering, the logging module provides a :class:`logging.Filter` object; however it cannot be used directly from the configuration file."
msgstr ""

#: ../../narr/logging.rst:185
msgid "Advanced Configuration"
msgstr ""

#: ../../narr/logging.rst:187
msgid "To capture log output to a separate file, use :class:`logging.FileHandler` (or :class:`logging.handlers.RotatingFileHandler`):"
msgstr ""

#: ../../narr/logging.rst:198
msgid "Before it's recognized, it needs to be added to the list of handlers:"
msgstr ""

#: ../../narr/logging.rst:205
msgid "and finally utilized by a logger."
msgstr ""

#: ../../narr/logging.rst:213
msgid "These final three lines of configuration direct all of the root logger's output to the ``myproject.log`` as well as the console."
msgstr ""

#: ../../narr/logging.rst:217
msgid "Logging Exceptions"
msgstr ""

#: ../../narr/logging.rst:219
msgid "To log or email exceptions generated by your :app:`Pyramid` application, use the :term:`pyramid_exclog` package.  Details about its configuration are in its `documentation <https://docs.pylonsproject.org/projects/pyramid_exclog/en/latest/>`_."
msgstr ""

#: ../../narr/logging.rst:234
msgid "Request Logging with Paste's TransLogger"
msgstr ""

#: ../../narr/logging.rst:236
msgid "The :term:`WSGI` design is modular.  Waitress logs error conditions, debugging output, etc., but not web traffic.  For web traffic logging, Paste provides the `TransLogger <http://pythonpaste.org/modules/translogger.html>`_ :term:`middleware`.  TransLogger produces logs in the `Apache Combined Log Format <http://httpd.apache.org/docs/2.2/logs.html#combined>`_.  But TransLogger does not write to files; the Python logging system must be configured to do this.  The Python :class:`logging.FileHandler` logging handler can be used alongside TransLogger to create an ``access.log`` file similar to Apache's."
msgstr ""

#: ../../narr/logging.rst:246
msgid "Like any standard :term:`middleware` with a Paste entry point, TransLogger can be configured to wrap your application using ``.ini`` file syntax.  First rename your Pyramid ``.ini`` file's ``[app:main]`` section to ``[app:mypyramidapp]``, then add a ``[filter:translogger]`` section, then use a ``[pipeline:main]`` section file to form a WSGI pipeline with both the translogger and your application in it.  For instance, change from this:"
msgstr ""

#: ../../narr/logging.rst:258
msgid "To this:"
msgstr ""

#: ../../narr/logging.rst:273
msgid "Using PasteDeploy this way to form and serve a pipeline is equivalent to wrapping your app in a TransLogger instance via the bottom of the ``main`` function of your project's ``__init__`` file:"
msgstr ""

#: ../../narr/logging.rst:286
msgid "TransLogger will automatically setup a logging handler to the console when called with no arguments, so it \"just works\" in environments that don't configure logging. Since our logging handlers are configured, we disable the automation via ``setup_console_handler = False``."
msgstr ""

#: ../../narr/logging.rst:291
msgid "With the filter in place, TransLogger's logger (named the ``wsgi`` logger) will propagate its log messages to the parent logger (the root logger), sending its output to the console when we request a page:"
msgstr ""

#: ../../narr/logging.rst:304
msgid "To direct TransLogger to an ``access.log`` FileHandler, we need the following to add a FileHandler (named ``accesslog``) to the list of handlers, and ensure that the ``wsgi`` logger is configured and uses this handler accordingly:"
msgstr ""

#: ../../narr/logging.rst:330
msgid "As mentioned above, non-root loggers by default propagate their log records to the root logger's handlers (currently the console handler). Setting ``propagate`` to ``0`` (``False``) here disables this; so the ``wsgi`` logger directs its records only to the ``accesslog`` handler."
msgstr ""

#: ../../narr/logging.rst:335
msgid "Finally, there's no need to use the ``generic`` formatter with TransLogger as TransLogger itself provides all the information we need. We'll use a formatter that passes through the log messages as is. Add a new formatter called ``accesslog`` by including the following in your configuration file:"
msgstr ""

#: ../../narr/logging.rst:348
msgid "Finally alter the existing configuration to wire this new ``accesslog`` formatter into the FileHandler:"
msgstr ""

