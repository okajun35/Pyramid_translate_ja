# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../narr/environment.rst:22
msgid "Environment Variables and ``.ini`` File Settings"
msgstr ""

#: ../../narr/environment.rst:24
msgid ":app:`Pyramid` behavior can be configured through a combination of operating system environment variables and ``.ini`` configuration file application section settings.  The meaning of the environment variables and the configuration file settings overlap."
msgstr ""

#: ../../narr/environment.rst:30
msgid "Where a configuration file setting exists with the same meaning as an environment variable, and both are present at application startup time, the environment variable setting takes precedence."
msgstr ""

#: ../../narr/environment.rst:34
msgid "The term \"configuration file setting name\" refers to a key in the ``.ini`` configuration for your application.  The configuration file setting names documented in this chapter are reserved for :app:`Pyramid` use.  You should not use them to indicate application-specific configuration settings."
msgstr ""

#: ../../narr/environment.rst:40
msgid "Reloading Templates"
msgstr ""

#: ../../narr/environment.rst:42
msgid "When this value is true, templates are automatically reloaded whenever they are modified without restarting the application, so you can see changes to templates take effect immediately during development.  This flag is meaningful to Chameleon and Mako templates, as well as most third-party template rendering extensions."
msgstr ""

#: ../../narr/environment.rst:49
#: ../../narr/environment.rst:65
#: ../../narr/environment.rst:86
#: ../../narr/environment.rst:103
#: ../../narr/environment.rst:120
#: ../../narr/environment.rst:141
#: ../../narr/environment.rst:161
#: ../../narr/environment.rst:173
#: ../../narr/environment.rst:185
#: ../../narr/environment.rst:204
msgid "Environment Variable Name"
msgstr ""

#: ../../narr/environment.rst:49
#: ../../narr/environment.rst:65
#: ../../narr/environment.rst:86
#: ../../narr/environment.rst:103
#: ../../narr/environment.rst:120
#: ../../narr/environment.rst:141
#: ../../narr/environment.rst:161
#: ../../narr/environment.rst:173
#: ../../narr/environment.rst:185
#: ../../narr/environment.rst:204
#: ../../narr/environment.rst:220
#: ../../narr/environment.rst:336
msgid "Config File Setting Name"
msgstr ""

#: ../../narr/environment.rst:51
msgid "``PYRAMID_RELOAD_TEMPLATES``"
msgstr ""

#: ../../narr/environment.rst:51
msgid "``pyramid.reload_templates``"
msgstr ""

#: ../../narr/environment.rst:52
msgid "or ``reload_templates``"
msgstr ""

#: ../../narr/environment.rst:56
msgid "Reloading Assets"
msgstr ""

#: ../../narr/environment.rst:58
msgid "Don't cache any asset file data when this value is true."
msgstr ""

#: ../../narr/environment.rst:62
msgid "See also :ref:`overriding_assets_section`."
msgstr ""

#: ../../narr/environment.rst:67
msgid "``PYRAMID_RELOAD_ASSETS``"
msgstr ""

#: ../../narr/environment.rst:67
msgid "``pyramid.reload_assets`` or ``reload_assets``"
msgstr ""

#: ../../narr/environment.rst:71
msgid "For backwards compatibility purposes, aliases can be used for configuring asset reloading: ``PYRAMID_RELOAD_RESOURCES`` (envvar) and ``pyramid.reload_resources`` (config file)."
msgstr ""

#: ../../narr/environment.rst:76
msgid "Debugging Authorization"
msgstr ""

#: ../../narr/environment.rst:78
msgid "Print view authorization failure and success information to stderr when this value is true."
msgstr ""

#: ../../narr/environment.rst:83
msgid "See also :ref:`debug_authorization_section`."
msgstr ""

#: ../../narr/environment.rst:88
msgid "``PYRAMID_DEBUG_AUTHORIZATION``"
msgstr ""

#: ../../narr/environment.rst:88
msgid "``pyramid.debug_authorization`` or ``debug_authorization``"
msgstr ""

#: ../../narr/environment.rst:93
msgid "Debugging Not Found Errors"
msgstr ""

#: ../../narr/environment.rst:95
msgid "Print view-related ``NotFound`` debug messages to stderr when this value is true."
msgstr ""

#: ../../narr/environment.rst:100
msgid "See also :ref:`debug_notfound_section`."
msgstr ""

#: ../../narr/environment.rst:105
msgid "``PYRAMID_DEBUG_NOTFOUND``"
msgstr ""

#: ../../narr/environment.rst:105
msgid "``pyramid.debug_notfound`` or ``debug_notfound``"
msgstr ""

#: ../../narr/environment.rst:110
msgid "Debugging Route Matching"
msgstr ""

#: ../../narr/environment.rst:112
msgid "Print debugging messages related to :term:`url dispatch` route matching when this value is true."
msgstr ""

#: ../../narr/environment.rst:117
msgid "See also :ref:`debug_routematch_section`."
msgstr ""

#: ../../narr/environment.rst:122
msgid "``PYRAMID_DEBUG_ROUTEMATCH``"
msgstr ""

#: ../../narr/environment.rst:122
msgid "``pyramid.debug_routematch`` or ``debug_routematch``"
msgstr ""

#: ../../narr/environment.rst:129
msgid "Preventing HTTP Caching"
msgstr ""

#: ../../narr/environment.rst:131
msgid "Prevent the ``http_cache`` view configuration argument from having any effect globally in this process when this value is true.  No HTTP caching-related response headers will be set by the :app:`Pyramid` ``http_cache`` view configuration feature when this is true."
msgstr ""

#: ../../narr/environment.rst:138
msgid "See also :ref:`influencing_http_caching`."
msgstr ""

#: ../../narr/environment.rst:143
msgid "``PYRAMID_PREVENT_HTTP_CACHE``"
msgstr ""

#: ../../narr/environment.rst:143
msgid "``pyramid.prevent_http_cache`` or ``prevent_http_cache``"
msgstr ""

#: ../../narr/environment.rst:148
msgid "Preventing Cache Busting"
msgstr ""

#: ../../narr/environment.rst:150
msgid "Prevent the ``cachebust`` static view configuration argument from having any effect globally in this process when this value is true.  No cache buster will be configured or used when this is true."
msgstr ""

#: ../../narr/environment.rst:158
msgid "See also :ref:`cache_busting`."
msgstr ""

#: ../../narr/environment.rst:163
msgid "``PYRAMID_PREVENT_CACHEBUST``"
msgstr ""

#: ../../narr/environment.rst:163
msgid "``pyramid.prevent_cachebust`` or ``prevent_cachebust``"
msgstr ""

#: ../../narr/environment.rst:168
msgid "Debugging All"
msgstr ""

#: ../../narr/environment.rst:170
msgid "Turns on all ``debug*`` settings."
msgstr ""

#: ../../narr/environment.rst:175
msgid "``PYRAMID_DEBUG_ALL``"
msgstr ""

#: ../../narr/environment.rst:175
msgid "``pyramid.debug_all`` or ``debug_all``"
msgstr ""

#: ../../narr/environment.rst:180
msgid "Reloading All"
msgstr ""

#: ../../narr/environment.rst:182
msgid "Turns on all ``reload*`` settings."
msgstr ""

#: ../../narr/environment.rst:187
msgid "``PYRAMID_RELOAD_ALL``"
msgstr ""

#: ../../narr/environment.rst:187
msgid "``pyramid.reload_all`` or ``reload_all``"
msgstr ""

#: ../../narr/environment.rst:194
msgid "Default Locale Name"
msgstr ""

#: ../../narr/environment.rst:196
msgid "The value supplied here is used as the default locale name when a :term:`locale negotiator` is not registered."
msgstr ""

#: ../../narr/environment.rst:201
msgid "See also :ref:`localization_deployment_settings`."
msgstr ""

#: ../../narr/environment.rst:206
msgid "``PYRAMID_DEFAULT_LOCALE_NAME``"
msgstr ""

#: ../../narr/environment.rst:206
msgid "``pyramid.default_locale_name`` or ``default_locale_name``"
msgstr ""

#: ../../narr/environment.rst:213
msgid "Including Packages"
msgstr ""

#: ../../narr/environment.rst:215
msgid "``pyramid.includes`` instructs your application to include other packages. Using the setting is equivalent to using the :meth:`pyramid.config.Configurator.include` method."
msgstr ""

#: ../../narr/environment.rst:222
msgid "``pyramid.includes``"
msgstr ""

#: ../../narr/environment.rst:225
msgid "The value assigned to ``pyramid.includes`` should be a sequence.  The sequence can take several different forms."
msgstr ""

#: ../../narr/environment.rst:228
#: ../../narr/environment.rst:344
msgid "It can be a string."
msgstr ""

#: ../../narr/environment.rst:230
msgid "If it is a string, the package names can be separated by spaces::"
msgstr ""

#: ../../narr/environment.rst:234
msgid "The package names can also be separated by carriage returns::"
msgstr ""

#: ../../narr/environment.rst:240
#: ../../narr/environment.rst:356
msgid "It can be a Python list, where the values are strings::"
msgstr ""

#: ../../narr/environment.rst:244
#: ../../narr/environment.rst:360
msgid "Each value in the sequence should be a :term:`dotted Python name`."
msgstr ""

#: ../../narr/environment.rst:247
msgid "``pyramid.includes`` vs. :meth:`pyramid.config.Configurator.include`"
msgstr ""

#: ../../narr/environment.rst:249
msgid "Two methods exist for including packages: ``pyramid.includes`` and :meth:`pyramid.config.Configurator.include`.  This section explains their equivalence."
msgstr ""

#: ../../narr/environment.rst:254
msgid "Using PasteDeploy"
msgstr ""

#: ../../narr/environment.rst:256
msgid "Using the following ``pyramid.includes`` setting in the PasteDeploy ``.ini`` file in your application:"
msgstr ""

#: ../../narr/environment.rst:265
#: ../../narr/environment.rst:296
#: ../../narr/environment.rst:375
msgid "Is equivalent to using the following statements in your configuration code:"
msgstr ""

#: ../../narr/environment.rst:279
#: ../../narr/environment.rst:309
#: ../../narr/environment.rst:390
msgid "It is fine to use both or either form."
msgstr ""

#: ../../narr/environment.rst:282
msgid "Plain Python"
msgstr ""

#: ../../narr/environment.rst:284
msgid "Using the following ``pyramid.includes`` setting in your plain-Python Pyramid application:"
msgstr ""

#: ../../narr/environment.rst:314
msgid "Explicit Tween Configuration"
msgstr ""

#: ../../narr/environment.rst:316
msgid "This value allows you to perform explicit :term:`tween` ordering in your configuration.  Tweens are bits of code used by add-on authors to extend Pyramid.  They form a chain, and require ordering."
msgstr ""

#: ../../narr/environment.rst:320
msgid "Ideally you won't need to use the ``pyramid.tweens`` setting at all.  Tweens are generally ordered and included \"implicitly\" when an add-on package which registers a tween is \"included\".  Packages are included when you name a ``pyramid.includes`` setting in your configuration or when you call :meth:`pyramid.config.Configurator.include`."
msgstr ""

#: ../../narr/environment.rst:326
msgid "Authors of included add-ons provide \"implicit\" tween configuration ordering hints to Pyramid when their packages are included.  However, the implicit tween ordering is only best-effort.  Pyramid will attempt to provide an implicit order of tweens as best it can using hints provided by add-on authors, but because it's only best-effort, if very precise tween ordering is required, the only surefire way to get it is to use an explicit tween order. You may be required to inspect your tween ordering (see :ref:`displaying_tweens`) and add a ``pyramid.tweens`` configuration value at the behest of an add-on author."
msgstr ""

#: ../../narr/environment.rst:338
msgid "``pyramid.tweens``"
msgstr ""

#: ../../narr/environment.rst:341
msgid "The value assigned to ``pyramid.tweens`` should be a sequence.  The sequence can take several different forms."
msgstr ""

#: ../../narr/environment.rst:346
msgid "If it is a string, the tween names can be separated by spaces::"
msgstr ""

#: ../../narr/environment.rst:350
msgid "The tween names can also be separated by carriage returns::"
msgstr ""

#: ../../narr/environment.rst:363
msgid "PasteDeploy Configuration vs. Plain-Python Configuration"
msgstr ""

#: ../../narr/environment.rst:365
msgid "Using the following ``pyramid.tweens`` setting in the PasteDeploy ``.ini`` file in your application:"
msgstr ""

#: ../../narr/environment.rst:393
msgid "Examples"
msgstr ""

#: ../../narr/environment.rst:395
msgid "Let's presume your configuration file is named ``MyProject.ini``, and there is a section representing your application named ``[app:main]`` within the file that represents your :app:`Pyramid` application. The configuration file settings documented in the above \"Config File Setting Name\" column would go in the ``[app:main]`` section.  Here's an example of such a section:"
msgstr ""

#: ../../narr/environment.rst:409
msgid "You can also use environment variables to accomplish the same purpose for settings documented as such.  For example, you might start your :app:`Pyramid` application using the following command line:"
msgstr ""

#: ../../narr/environment.rst:418
msgid "If you started your application this way, your :app:`Pyramid` application would behave in the same manner as if you had placed the respective settings in the ``[app:main]`` section of your application's ``.ini`` file."
msgstr ""

#: ../../narr/environment.rst:422
msgid "If you want to turn all ``debug`` settings (every setting that starts with ``pyramid.debug_``) on in one fell swoop, you can use ``PYRAMID_DEBUG_ALL=1`` as an environment variable setting or you may use ``pyramid.debug_all=true`` in the config file.  Note that this does not affect settings that do not start with ``pyramid.debug_*`` such as ``pyramid.reload_templates``."
msgstr ""

#: ../../narr/environment.rst:428
msgid "If you want to turn all ``pyramid.reload`` settings (every setting that starts with ``pyramid.reload_``) on in one fell swoop, you can use ``PYRAMID_RELOAD_ALL=1`` as an environment variable setting or you may use ``pyramid.reload_all=true`` in the config file.  Note that this does not affect settings that do not start with ``pyramid.reload_*`` such as ``pyramid.debug_notfound``."
msgstr ""

#: ../../narr/environment.rst:436
msgid "Specifying configuration settings via environment variables is generally most useful during development, where you may wish to augment or override the more permanent settings in the configuration file. This is useful because many of the reload and debug settings may have performance or security (i.e., disclosure) implications that make them undesirable in a production environment."
msgstr ""

#: ../../narr/environment.rst:448
msgid "Understanding the Distinction Between ``reload_templates`` and ``reload_assets``"
msgstr ""

#: ../../narr/environment.rst:450
msgid "The difference between ``pyramid.reload_assets`` and ``pyramid.reload_templates`` is a bit subtle. Templates are themselves also treated by :app:`Pyramid` as asset files (along with other static files), so the distinction can be confusing.  It's helpful to read :ref:`overriding_assets_section` for some context about assets in general."
msgstr ""

#: ../../narr/environment.rst:456
msgid "When ``pyramid.reload_templates`` is true, :app:`Pyramid` takes advantage of the underlying templating system's ability to check for file modifications to an individual template file.  When ``pyramid.reload_templates`` is true, but ``pyramid.reload_assets`` is *not* true, the template filename returned by the ``pkg_resources`` package (used under the hood by asset resolution) is cached by :app:`Pyramid` on the first request.  Subsequent requests for the same template file will return a cached template filename.  The underlying templating system checks for modifications to this particular file for every request.  Setting ``pyramid.reload_templates`` to ``True`` doesn't affect performance dramatically (although it should still not be used in production because it has some effect)."
msgstr ""

#: ../../narr/environment.rst:468
msgid "However, when ``pyramid.reload_assets`` is true, :app:`Pyramid` will not cache the template filename, meaning you can see the effect of changing the content of an overridden asset directory for templates without restarting the server after every change.  Subsequent requests for the same template file may return different filenames based on the current state of overridden asset directories. Setting ``pyramid.reload_assets`` to ``True`` affects performance *dramatically*, slowing things down by an order of magnitude for each template rendering.  However, it's convenient to enable when moving files around in overridden asset directories. ``pyramid.reload_assets`` makes the system *very slow* when templates are in use.  Never set ``pyramid.reload_assets`` to ``True`` on a production system."
msgstr ""

#: ../../narr/environment.rst:486
msgid "Adding a Custom Setting"
msgstr ""

#: ../../narr/environment.rst:488
msgid "From time to time, you may need to add a custom setting to your application. Here's how:"
msgstr ""

#: ../../narr/environment.rst:491
msgid "If you're using an ``.ini`` file, change the ``.ini`` file, adding the setting to the ``[app:foo]`` section representing your Pyramid application. For example:"
msgstr ""

#: ../../narr/environment.rst:501
msgid "In the ``main()`` function that represents the place that your Pyramid WSGI application is created, anticipate that you'll be getting this key/value pair as a setting and do any type conversion necessary."
msgstr ""

#: ../../narr/environment.rst:505
msgid "If you've done any type conversion of your custom value, reset the converted values into the ``settings`` dictionary *before* you pass the dictionary as ``settings`` to the :term:`Configurator`.  For example:"
msgstr ""

#: ../../narr/environment.rst:520
msgid "It's especially important that you mutate the ``settings`` dictionary with the converted version of the variable *before* passing it to the Configurator: the configurator makes a *copy* of ``settings``, it doesn't use the one you pass directly."
msgstr ""

#: ../../narr/environment.rst:525
msgid "When creating an ``includeme`` function that will be later added to your application's configuration you may access the ``settings`` dictionary through the instance of the :term:`Configurator` that is passed into the function as its only argument.  For Example:"
msgstr ""

#: ../../narr/environment.rst:536
msgid "In the runtime code from where you need to access the new settings value, find the value in the ``registry.settings`` dictionary and use it.  In :term:`view` code (or any other code that has access to the request), the easiest way to do this is via ``request.registry.settings``.  For example:"
msgstr ""

#: ../../narr/environment.rst:546
msgid "If you wish to use the value in code that does not have access to the request and you wish to use the value, you'll need to use the :func:`pyramid.threadlocal.get_current_registry` API to obtain the current registry, then ask for its ``settings`` attribute.  For example:"
msgstr ""

