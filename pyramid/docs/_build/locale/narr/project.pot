# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../narr/project.rst:4
msgid "Creating a :app:`Pyramid` Project"
msgstr ""

#: ../../narr/project.rst:6
msgid "As we saw in :ref:`firstapp_chapter`, it's possible to create a :app:`Pyramid` application completely manually.  However, it's usually more convenient to use a :term:`cookiecutter` to generate a basic :app:`Pyramid` :term:`project`."
msgstr ""

#: ../../narr/project.rst:10
msgid "A project is a directory that contains at least one Python :term:`package`. You'll use a cookiecutter to create a project, and you'll create your application logic within a package that lives inside the project.  Even if your application is extremely simple, it is useful to place code that drives the application within a package, because (1) a package is more easily extended with new code, and (2) an application that lives inside a package can also be distributed more easily than one which does not live within a package."
msgstr ""

#: ../../narr/project.rst:18
msgid "The Pylons Project provides several :app:`Pyramid` cookiecutters that you can use to generate a project.  Each cookiecutter makes different configuration assumptions about what type of application you're trying to construct."
msgstr ""

#: ../../narr/project.rst:22
msgid "These cookiecutters are rendered using the ``cookiecutter`` command that you may install."
msgstr ""

#: ../../narr/project.rst:26
msgid "See also `Cookiecutter Installation <https://cookiecutter.readthedocs.io/en/latest/installation.html>`_."
msgstr ""

#: ../../narr/project.rst:38
msgid ":app:`Pyramid` cookiecutters"
msgstr ""

#: ../../narr/project.rst:40
msgid "Pyramid cookiecutters released under the Pylons Project differ from each other on a number of axes:"
msgstr ""

#: ../../narr/project.rst:42
msgid "the persistence mechanism they offer (no persistence mechanism, :term:`SQLAlchemy` with SQLite, or :term:`ZODB`)"
msgstr ""

#: ../../narr/project.rst:44
msgid "the mechanism they use to map URLs to code (:term:`URL dispatch` or :term:`traversal`)"
msgstr ""

#: ../../narr/project.rst:46
msgid "templating libraries (:term:`Jinja2`, :term:`Chameleon`, or :term:`Mako`)"
msgstr ""

#: ../../narr/project.rst:48
msgid "`pyramid-cookiecutter-starter <https://github.com/Pylons/pyramid-cookiecutter-starter>`_"
msgstr ""

#: ../../narr/project.rst:49
msgid "`pyramid-cookiecutter-alchemy <https://github.com/Pylons/pyramid-cookiecutter-alchemy>`_"
msgstr ""

#: ../../narr/project.rst:50
msgid "`pyramid-cookiecutter-zodb <https://github.com/Pylons/pyramid-cookiecutter-zodb>`_"
msgstr ""

#: ../../narr/project.rst:52
msgid "These cookiecutters include:"
msgstr ""

#: ../../narr/project.rst:55
msgid "``pyramid-cookiecutter-starter``"
msgstr ""

#: ../../narr/project.rst:55
msgid ":term:`URL dispatch` for routing and either :term:`Jinja2`, :term:`Chameleon`, or :term:`Mako` for templating"
msgstr ""

#: ../../narr/project.rst:58
msgid "``pyramid-cookiecutter-alchemy``"
msgstr ""

#: ../../narr/project.rst:58
msgid "SQLite for persistent storage, :term:`SQLAlchemy` for an ORM, :term:`URL dispatch` for routing, and :term:`Jinja2` for templating."
msgstr ""

#: ../../narr/project.rst:62
msgid "``pyramid-cookiecutter-zodb``"
msgstr ""

#: ../../narr/project.rst:61
msgid ":term:`ZODB` for persistent storage, :term:`traversal` for routing, and :term:`Chameleon` for templating"
msgstr ""

#: ../../narr/project.rst:72
msgid "Creating the Project"
msgstr ""

#: ../../narr/project.rst:74
msgid "In :ref:`installing_chapter`, you created a virtual Python environment via the ``venv`` command. We called the virtual environment directory ``env`` and set an environment variable ``VENV`` to its path."
msgstr ""

#: ../../narr/project.rst:78
msgid "We assume that you :ref:`previously installed cookiecutter <cookiecutters>`, following its installation instructions."
msgstr ""

#: ../../narr/project.rst:80
msgid "We'll choose ``pyramid-cookiecutter-starter`` to start the project.  When we invoke ``cookiecutter``, it will create a directory that represents our project."
msgstr ""

#: ../../narr/project.rst:82
msgid "We assume our current working directory is the value of ``VENV``."
msgstr ""

#: ../../narr/project.rst:84
msgid "On all platforms, generate a project using cookiecutter."
msgstr ""

#: ../../narr/project.rst:90
msgid "If prompted for the first item, accept the default ``yes`` by hitting return."
msgstr ""

#: ../../narr/project.rst:104
msgid "We then run through the following commands."
msgstr ""

#: ../../narr/project.rst:106
#: ../../narr/project.rst:191
#: ../../narr/project.rst:229
#: ../../narr/project.rst:245
#: ../../narr/project.rst:310
msgid "On UNIX:"
msgstr ""

#: ../../narr/project.rst:119
#: ../../narr/project.rst:197
msgid "Or on Windows:"
msgstr ""

#: ../../narr/project.rst:132
msgid "As a result of invoking the ``cookiecutter`` command, a directory named ``myproject`` is created.  That directory is a :term:`project` directory. The ``setup.py`` file in that directory can be used to distribute your application, or install your application for deployment or development."
msgstr ""

#: ../../narr/project.rst:137
msgid "An ``.ini`` file named ``development.ini`` will be created in the project directory.  You will use this ``.ini`` file to configure a server, to run your application, and to debug your application.  It contains configuration that enables an interactive debugger and settings optimized for development."
msgstr ""

#: ../../narr/project.rst:142
msgid "Another ``.ini`` file named ``production.ini`` will also be created in the project directory.  It contains configuration that disables any interactive debugger (to prevent inappropriate access and disclosure), and turns off a number of debugging settings.  You can use this file to put your application into production."
msgstr ""

#: ../../narr/project.rst:148
msgid "The ``myproject`` project directory contains an additional subdirectory named ``myproject`` (note the case difference) representing a Python :term:`package` which holds very simple :app:`Pyramid` sample code.  This is where you'll edit your application's Python code and templates."
msgstr ""

#: ../../narr/project.rst:153
msgid "We created this project in a directory next to its virtual environment directory. However, note that this is not mandatory. The project directory can go more or less anywhere on your filesystem. You don't need to put it in a special \"web server\" directory. You could put it within a virtual environment directory. The author uses Linux mainly, and tends to put project directories which he creates within his ``~/projects`` directory. On Windows, it's a good idea to put project directories within a directory that contains no space characters, so it's wise to *avoid* a path that contains, i.e., ``My Documents``. As a result, the author, when he uses Windows, just puts his projects in ``C:\\projects``."
msgstr ""

#: ../../narr/project.rst:166
msgid "You'll need to avoid using ``cookiecutter`` to create a project with the same name as a Python standard library component. In particular, this means you should avoid using the names ``site`` or ``test``, both of which conflict with Python standard library packages.  You should also avoid using the name ``pyramid``, which will conflict with Pyramid itself."
msgstr ""

#: ../../narr/project.rst:177
msgid "Installing your Newly Created Project for Development"
msgstr ""

#: ../../narr/project.rst:179
msgid "To install a newly created project for development, you should ``cd`` to the newly created project directory and use the Python interpreter from the :term:`virtual environment` you created during :ref:`installing_chapter` to invoke the command ``pip install -e .``, which installs the project in development mode (``-e`` is for \"editable\") into the current directory (``.``)."
msgstr ""

#: ../../narr/project.rst:185
msgid "The file named ``setup.py`` will be in the root of the cookiecutter-generated project directory.  The ``python`` you're invoking should be the one that lives in the ``bin`` (or ``Scripts`` on Windows) directory of your virtual Python environment.  Your terminal's current working directory *must* be the newly created project directory."
msgstr ""

#: ../../narr/project.rst:203
msgid "Elided output from a run of this command on UNIX is shown below:"
msgstr ""

#: ../../narr/project.rst:214
msgid "This will install a :term:`distribution` representing your project into the virtual environment interpreter's library set so it can be found by ``import`` statements and by other console scripts such as ``pserve``, ``pshell``, ``proutes``, and ``pviews``."
msgstr ""

#: ../../narr/project.rst:224
msgid "Running the Tests for Your Application"
msgstr ""

#: ../../narr/project.rst:226
msgid "To run unit tests for your application, you must first install the testing dependencies."
msgstr ""

#: ../../narr/project.rst:235
#: ../../narr/project.rst:251
#: ../../narr/project.rst:316
msgid "On Windows:"
msgstr ""

#: ../../narr/project.rst:241
msgid "Once the testing requirements are installed, then you can run the tests using the ``py.test`` command that was just installed in the ``bin`` directory of your virtual environment."
msgstr ""

#: ../../narr/project.rst:257
msgid "Here's sample output from a test run on UNIX:"
msgstr ""

#: ../../narr/project.rst:265
msgid "The tests themselves are found in the ``tests.py`` module in your ``cookiecutter``-generated project.  Within a project generated by the ``pyramid-cookiecutter-starter`` cookiecutter, only two sample tests exist."
msgstr ""

#: ../../narr/project.rst:269
msgid "The ``-q`` option is passed to the ``py.test`` command to limit the output to a stream of dots. If you don't pass ``-q``, you'll see verbose test result output (which normally isn't very useful)."
msgstr ""

#: ../../narr/project.rst:273
msgid "Alternatively, if you'd like to see test coverage, pass the ``--cov`` option to ``py.test``:"
msgstr ""

#: ../../narr/project.rst:280
msgid "Cookiecutters include configuration defaults for ``py.test`` and test coverage. These configuration files are ``pytest.ini`` and ``.coveragerc``, located at the root of your package. Without these defaults, we would need to specify the path to the module on which we want to run tests and coverage."
msgstr ""

#: ../../narr/project.rst:289
msgid "See py.test's documentation for :ref:`pytest:usage` or invoke ``py.test -h`` to see its full set of options."
msgstr ""

#: ../../narr/project.rst:302
msgid "Running the Project Application"
msgstr ""

#: ../../narr/project.rst:304
msgid "See also the output of :ref:`pserve --help <pserve_script>`."
msgstr ""

#: ../../narr/project.rst:306
msgid "Once a project is installed for development, you can run the application it represents using the ``pserve`` command against the generated configuration file.  In our case, this file is named ``development.ini``."
msgstr ""

#: ../../narr/project.rst:322
msgid "Here's sample output from a run of ``pserve`` on UNIX:"
msgstr ""

#: ../../narr/project.rst:331
msgid "Access is restricted such that only a browser running on the same machine as Pyramid will be able to access your Pyramid application.  However, if you want to open access to other machines on the same network, then edit the ``development.ini`` file, and replace the ``listen`` value in the ``[server:main]`` section, changing it from ``localhost:6543`` to ``*:6543`` (this is equivalent to ``0.0.0.0:6543 [::]:6543``).  For example:"
msgstr ""

#: ../../narr/project.rst:344
msgid "Now when you use ``pserve`` to start the application, it will respond to requests on *all* IP addresses possessed by your system, not just requests to ``localhost``.  This is what the ``0.0.0.0`` in ``serving on http://0.0.0.0:6543`` means.  The server will respond to requests made to ``127.0.0.1`` and on any external IP address. For example, your system might be configured to have an external IP address ``192.168.1.50``.  If that's the case, if you use a browser running on the same system as Pyramid, it will be able to access the application via ``http://127.0.0.1:6543/`` as well as via ``http://192.168.1.50:6543/``. However, *other people* on other computers on the same network will also be able to visit your Pyramid application in their browser by visiting ``http://192.168.1.50:6543/``. The same holds true if you use IPv6. ``[::]`` means the same as ``0.0.0.0`` but for IPv6 protocol."
msgstr ""

#: ../../narr/project.rst:357
msgid "You can change the port on which the server runs on by changing the same portion of the ``development.ini`` file.  For example, you can change the ``listen = localhost:6543`` line in the ``development.ini`` file's ``[server:main]`` section to ``listen = localhost:8080`` to run the server on port 8080 instead of port 6543."
msgstr ""

#: ../../narr/project.rst:362
msgid "You can shut down a server started this way by pressing ``Ctrl-C`` (or ``Ctrl-Break`` on Windows)."
msgstr ""

#: ../../narr/project.rst:365
msgid "The default server used to run your Pyramid application when a project is created from a cookiecutter is named :term:`Waitress`.  This server is what prints the ``Serving on...`` line when you run ``pserve``.  It's a good idea to use this server during development because it's very simple.  It can also be used for light production.  Setting your application up under a different server is not advised until you've done some development work under the default server, particularly if you're not yet experienced with Python web development.  Python web server setup can be complex, and you should get some confidence that your application works in a default environment before trying to optimize it or make it \"more like production\".  It's awfully easy to get sidetracked trying to set up a non-default server for hours without actually starting to do any development.  One of the nice things about Python web servers is that they're largely interchangeable, so if your application works under the default server, it will almost certainly work under any other server in production if you eventually choose to use a different one.  Don't worry about it right now."
msgstr ""

#: ../../narr/project.rst:381
msgid "For more detailed information about the startup process, see :ref:`startup_chapter`.  For more information about environment variables and configuration file settings that influence startup and runtime behavior, see :ref:`environment_chapter`."
msgstr ""

#: ../../narr/project.rst:389
msgid "Reloading Code"
msgstr ""

#: ../../narr/project.rst:391
msgid "During development, it's often useful to run ``pserve`` using its ``--reload`` option.  When ``--reload`` is passed to ``pserve``, changes to any Python module your project uses will cause the server to restart.  This typically makes development easier, as changes to Python code made within a :app:`Pyramid` application is not put into effect until the server restarts."
msgstr ""

#: ../../narr/project.rst:397
msgid "For example, on UNIX:"
msgstr ""

#: ../../narr/project.rst:407
msgid "Now if you make a change to any of your project's ``.py`` files or ``.ini`` files, you'll see the server restart automatically:"
msgstr ""

#: ../../narr/project.rst:418
msgid "Changes to template files (such as ``.pt`` or ``.mak`` files) won't cause the server to restart.  Changes to template files don't require a server restart as long as the ``pyramid.reload_templates`` setting in the ``development.ini`` file is ``true``.  Changes made to template files when this setting is ``true`` will take effect immediately without a server restart."
msgstr ""

#: ../../narr/project.rst:428
msgid "Viewing the Application"
msgstr ""

#: ../../narr/project.rst:430
msgid "Once your application is running via ``pserve``, you may visit ``http://localhost:6543/`` in your browser.  You will see something in your browser like what is displayed in the following image:"
msgstr ""

#: ../../narr/project.rst:436
msgid "This is the page shown by default when you visit an unmodified ``cookiecutter`` generated ``pyramid-cookiecutter-starter`` application in a browser."
msgstr ""

#: ../../narr/project.rst:445
msgid "The Debug Toolbar"
msgstr ""

#: ../../narr/project.rst:449
msgid "If you click on the :app:`Pyramid` logo at the top right of the page, a new target window will open to present a debug toolbar that provides various niceties while you're developing.  This logo will float above every HTML page served by :app:`Pyramid` while you develop an application, and allows you to show the toolbar as necessary."
msgstr ""

#: ../../narr/project.rst:457
msgid "If you don't see the Pyramid logo on the top right of the page, it means you're browsing from a system that does not have debugging access.  By default, for security reasons, only a browser originating from ``localhost`` (``127.0.0.1``) can see the debug toolbar.  To allow your browser on a remote system to access the server, add a line within the ``[app:main]`` section of the ``development.ini`` file in the form ``debugtoolbar.hosts = X .X.X.X``.  For example, if your Pyramid application is running on a remote system, and you're browsing from a host with the IP address ``192.168.1.1``, you'd add something like this to enable the toolbar when your system contacts Pyramid:"
msgstr ""

#: ../../narr/project.rst:473
msgid "For more information about what the debug toolbar allows you to do, see the :ref:`documentation for pyramid_debugtoolbar <toolbar:overview>`."
msgstr ""

#: ../../narr/project.rst:476
msgid "The debug toolbar will not be shown (and all debugging will be turned off) when you use the ``production.ini`` file instead of the ``development.ini`` ini file to run the application."
msgstr ""

#: ../../narr/project.rst:480
msgid "You can also turn the debug toolbar off by editing ``development.ini`` and commenting out a line.  For example, instead of:"
msgstr ""

#: ../../narr/project.rst:491
msgid "Put a hash mark at the beginning of the ``pyramid_debugtoolbar`` line:"
msgstr ""

#: ../../narr/project.rst:501
msgid "Then restart the application to see that the toolbar has been turned off."
msgstr ""

#: ../../narr/project.rst:503
msgid "Note that if you comment out the ``pyramid_debugtoolbar`` line, the ``#`` *must* be in the first column.  If you put it anywhere else, and then attempt to restart the application, you'll receive an error that ends something like this:"
msgstr ""

#: ../../narr/project.rst:516
msgid "The Project Structure"
msgstr ""

#: ../../narr/project.rst:518
msgid "The ``pyramid-cookiecutter-starter`` cookiecutter generated a :term:`project` (named ``myproject``), which contains a Python :term:`package`.  The package is *also* named ``myproject``; the cookiecutter generates a project which contains a package that shares its name."
msgstr ""

#: ../../narr/project.rst:523
msgid "All :app:`Pyramid` ``cookiecutter``-generated projects share a similar structure. The ``myproject`` project we've generated has the following directory structure:"
msgstr ""

#: ../../narr/project.rst:551
msgid "The ``myproject`` :term:`Project`"
msgstr ""

#: ../../narr/project.rst:553
msgid "The ``myproject`` :term:`project` directory is the distribution and deployment wrapper for your application.  It contains both the ``myproject`` :term:`package` representing your application as well as files used to describe, run, and test your application."
msgstr ""

#: ../../narr/project.rst:558
msgid "``.coveragerc`` configures coverage when running tests."
msgstr ""

#: ../../narr/project.rst:560
msgid "``CHANGES.txt`` describes the changes you've made to the application.  It is conventionally written in :term:`reStructuredText` format."
msgstr ""

#: ../../narr/project.rst:563
msgid "``MANIFEST.in`` is a :term:`distutils` \"manifest\" file, naming which files should be included in a source distribution of the package when ``python setup.py sdist`` is run."
msgstr ""

#: ../../narr/project.rst:567
msgid "``README.txt`` describes the application in general.  It is conventionally written in :term:`reStructuredText` format."
msgstr ""

#: ../../narr/project.rst:570
msgid "``development.ini`` is a :term:`PasteDeploy` configuration file that can be used to execute your application during development."
msgstr ""

#: ../../narr/project.rst:573
msgid "``production.ini`` is a :term:`PasteDeploy` configuration file that can be used to execute your application in a production configuration."
msgstr ""

#: ../../narr/project.rst:576
msgid "``pytest.ini`` is a configuration file for running tests."
msgstr ""

#: ../../narr/project.rst:578
msgid "``setup.py`` is the file you'll use to test and distribute your application. It is a standard :term:`setuptools` ``setup.py`` file."
msgstr ""

#: ../../narr/project.rst:588
msgid "``development.ini``"
msgstr ""

#: ../../narr/project.rst:590
msgid "The ``development.ini`` file is a :term:`PasteDeploy` configuration file. Its purpose is to specify an application to run when you invoke ``pserve``, as well as the deployment settings provided to that application."
msgstr ""

#: ../../narr/project.rst:594
msgid "The generated ``development.ini`` file looks like so:"
msgstr ""

#: ../../narr/project.rst:600
msgid "This file contains several sections including ``[app:main]``, ``[server:main]``, and several other sections related to logging configuration."
msgstr ""

#: ../../narr/project.rst:603
msgid "The ``[app:main]`` section represents configuration for your :app:`Pyramid` application.  The ``use`` setting is the only setting required to be present in the ``[app:main]`` section.  Its default value, ``egg:myproject``, indicates that our myproject project contains the application that should be served. Other settings added to this section are passed as keyword arguments to the function named ``main`` in our package's ``__init__.py`` module.  You can provide startup-time configuration parameters to your application by adding more settings to this section."
msgstr ""

#: ../../narr/project.rst:612
msgid "See :ref:`pastedeploy_entry_points` for more information about the meaning of the ``use = egg:myproject`` value in this section."
msgstr ""

#: ../../narr/project.rst:615
msgid "The ``pyramid.reload_templates`` setting in the ``[app:main]`` section is a :app:`Pyramid`-specific setting which is passed into the framework.  If it exists, and its value is ``true``, supported template changes will not require an application restart to be detected.  See :ref:`reload_templates_section` for more information."
msgstr ""

#: ../../narr/project.rst:621
msgid "The ``pyramid.reload_templates`` option should be turned off for production applications, as template rendering is slowed when it is turned on."
msgstr ""

#: ../../narr/project.rst:625
msgid "The ``pyramid.includes`` setting in the ``[app:main]`` section tells Pyramid to \"include\" configuration from another package.  In this case, the line ``pyramid.includes = pyramid_debugtoolbar`` tells Pyramid to include configuration from the ``pyramid_debugtoolbar`` package.  This turns on a debugging panel in development mode which can be opened by clicking on the :app:`Pyramid` logo on the top right of the screen.  Including the debug toolbar will also make it possible to interactively debug exceptions when an error occurs."
msgstr ""

#: ../../narr/project.rst:634
msgid "Various other settings may exist in this section having to do with debugging or influencing runtime behavior of a :app:`Pyramid` application.  See :ref:`environment_chapter` for more information about these settings."
msgstr ""

#: ../../narr/project.rst:638
msgid "The name ``main`` in ``[app:main]`` signifies that this is the default application run by ``pserve`` when it is invoked against this configuration file.  The name ``main`` is a convention used by PasteDeploy signifying that it is the default application."
msgstr ""

#: ../../narr/project.rst:643
msgid "The ``[server:main]`` section of the configuration file configures a WSGI server which listens on TCP port 6543.  It is configured to listen on localhost only (``127.0.0.1``)."
msgstr ""

#: ../../narr/project.rst:649
msgid "The sections after ``# logging configuration`` represent Python's standard library :mod:`logging` module configuration for your application.  These sections are passed to the `logging module's config file configuration engine <https://docs.python.org/2/howto/logging.html#configuring-logging>`_ when the ``pserve`` or ``pshell`` commands are executed.  The default configuration sends application logging output to the standard error output of your terminal. For more information about logging configuration, see :ref:`logging_chapter`."
msgstr ""

#: ../../narr/project.rst:657
msgid "See the :term:`PasteDeploy` documentation for more information about other types of things you can put into this ``.ini`` file, such as other applications, :term:`middleware`, and alternate :term:`WSGI` server implementations."
msgstr ""

#: ../../narr/project.rst:666
msgid "``production.ini``"
msgstr ""

#: ../../narr/project.rst:668
msgid "The ``production.ini`` file is a :term:`PasteDeploy` configuration file with a purpose much like that of ``development.ini``.  However, it disables the debug toolbar, and filters all log messages except those above the WARN level.  It also turns off template development options such that templates are not automatically reloaded when changed, and turns off all debugging options.  This file is appropriate to use instead of ``development.ini`` when you put your application into production."
msgstr ""

#: ../../narr/project.rst:676
msgid "It's important to use ``production.ini`` (and *not* ``development.ini``) to benchmark your application and put it into production.  ``development.ini`` configures your system with a debug toolbar that helps development, but the inclusion of this toolbar slows down page rendering times by over an order of magnitude.  The debug toolbar is also a potential security risk if you have it configured incorrectly."
msgstr ""

#: ../../narr/project.rst:687
msgid "``MANIFEST.in``"
msgstr ""

#: ../../narr/project.rst:689
msgid "The ``MANIFEST.in`` file is a :term:`distutils` configuration file which specifies the non-Python files that should be included when a :term:`distribution` of your Pyramid project is created when you run ``python setup.py sdist``.  Due to the information contained in the default ``MANIFEST.in``, an sdist of your Pyramid project will include ``.txt`` files, ``.ini`` files, ``.rst`` files, graphics files, and template files, as well as ``.py`` files.  See https://docs.python.org/2/distutils/sourcedist.html#the-manifest-in-template for more information about the syntax and usage of ``MANIFEST.in``."
msgstr ""

#: ../../narr/project.rst:699
msgid "Without the presence of a ``MANIFEST.in`` file or without checking your source code into a version control repository, ``setup.py sdist`` places only *Python source files* (files ending with a ``.py`` extension) into tarballs generated by ``python setup.py sdist``.  This means, for example, if your project was not checked into a setuptools-compatible source control system, and your project directory didn't contain a ``MANIFEST.in`` file that told the ``sdist`` machinery to include ``*.pt`` files, the ``myproject/templates/mytemplate.pt`` file would not be included in the generated tarball."
msgstr ""

#: ../../narr/project.rst:708
msgid "Projects generated by Pyramid cookiecutters include a default ``MANIFEST.in`` file. The ``MANIFEST.in`` file contains declarations which tell it to include files like ``*.pt``, ``*.css`` and ``*.js`` in the generated tarball. If you include files with extensions other than the files named in the project's ``MANIFEST.in`` and you don't make use of a setuptools-compatible version control system, you'll need to edit the ``MANIFEST.in`` file and include the statements necessary to include your new files.  See https://docs.python.org/2/distutils/sourcedist.html#principle for more information about how to do this."
msgstr ""

#: ../../narr/project.rst:718
msgid "You can also delete ``MANIFEST.in`` from your project and rely on a setuptools feature which simply causes all files checked into a version control system to be put into the generated tarball.  To allow this to happen, check all the files that you'd like to be distributed along with your application's Python files into Subversion.  After you do this, when you rerun ``setup.py sdist``, all files checked into the version control system will be included in the tarball.  If you don't use Subversion, and instead use a different version control system, you may need to install a setuptools add-on such as ``setuptools-git`` or ``setuptools-hg`` for this behavior to work properly."
msgstr ""

#: ../../narr/project.rst:732
msgid "``setup.py``"
msgstr ""

#: ../../narr/project.rst:734
msgid "The ``setup.py`` file is a :term:`setuptools` setup file.  It is meant to be used to define requirements for installing dependencies for your package and testing, as well as distributing your application."
msgstr ""

#: ../../narr/project.rst:740
msgid "``setup.py`` is the de facto standard which Python developers use to distribute their reusable code.  You can read more about ``setup.py`` files and their usage in the `Python Packaging User Guide <https://packaging.python.org/>`_ and `Setuptools documentation <http://pythonhosted.org/setuptools/>`_."
msgstr ""

#: ../../narr/project.rst:746
msgid "Our generated ``setup.py`` looks like this:"
msgstr ""

#: ../../narr/project.rst:752
msgid "The ``setup.py`` file calls the setuptools ``setup`` function, which does various things depending on the arguments passed to ``pip`` on the command line."
msgstr ""

#: ../../narr/project.rst:756
msgid "Within the arguments to this function call, information about your application is kept.  While it's beyond the scope of this documentation to explain everything about setuptools setup files, we'll provide a whirlwind tour of what exists in this file in this section."
msgstr ""

#: ../../narr/project.rst:761
msgid "Your application's name can be any string; it is specified in the ``name`` field.  The version number is specified in the ``version`` value.  A short description is provided in the ``description`` field.  The ``long_description`` is conventionally the content of the ``README`` and ``CHANGES`` files appended together. The ``classifiers`` field is a list of `Trove classifiers <https://pypi.org/pypi?%3Aaction=list_classifiers>`_ describing your application.  ``author`` and ``author_email`` are text fields which probably don't need any description. ``url`` is a field that should point at your application project's URL (if any). ``packages=find_packages()`` causes all packages within the project to be found when packaging the application. ``include_package_data`` will include non-Python files when the application is packaged if those files are checked into version control. ``zip_safe=False`` indicates that this package is not safe to use as a zipped egg; instead it will always unpack as a directory, which is more convenient. ``install_requires`` indicates that this package depends on the ``pyramid`` package. ``extras_require`` is a Python dictionary that defines what is required to be installed for running tests. We examined ``entry_points`` in our discussion of the ``development.ini`` file; this file defines the ``main`` entry point that represents our project's application."
msgstr ""

#: ../../narr/project.rst:781
msgid "Usually you only need to think about the contents of the ``setup.py`` file when distributing your application to other people, when adding Python package dependencies, or when versioning your application for your own use. For fun, you can try this command now:"
msgstr ""

#: ../../narr/project.rst:790
msgid "This will create a tarball of your application in a ``dist`` subdirectory named ``myproject-0.0.tar.gz``.  You can send this tarball to other people who want to install and use your application."
msgstr ""

#: ../../narr/project.rst:798
msgid "The ``myproject`` :term:`Package`"
msgstr ""

#: ../../narr/project.rst:800
msgid "The ``myproject`` :term:`package` lives inside the ``myproject`` :term:`project`.  It contains:"
msgstr ""

#: ../../narr/project.rst:803
msgid "An ``__init__.py`` file signifies that this is a Python :term:`package`. It also contains code that helps users run the application, including a ``main`` function which is used as a entry point for commands such as ``pserve``, ``pshell``, ``pviews``, and others."
msgstr ""

#: ../../narr/project.rst:808
msgid "A ``templates`` directory, which contains :term:`Jinja2` (or other types of) templates."
msgstr ""

#: ../../narr/project.rst:811
msgid "A ``tests.py`` module, which contains unit test code for the application."
msgstr ""

#: ../../narr/project.rst:813
msgid "A ``views.py`` module, which contains view code for the application."
msgstr ""

#: ../../narr/project.rst:815
msgid "These are purely conventions established by the cookiecutter. :app:`Pyramid` doesn't insist that you name things in any particular way. However, it's generally a good idea to follow Pyramid standards for naming, so that other Pyramid developers can get up to speed quickly on your code when you need help."
msgstr ""

#: ../../narr/project.rst:826
msgid "``__init__.py``"
msgstr ""

#: ../../narr/project.rst:828
msgid "We need a small Python module that configures our application and which advertises an entry point for use by our :term:`PasteDeploy` ``.ini`` file. This is the file named ``__init__.py``.  The presence of an ``__init__.py`` also informs Python that the directory which contains it is a *package*."
msgstr ""

#: ../../narr/project.rst:837
msgid "Line 1 imports the :term:`Configurator` class from :mod:`pyramid.config` that we use later."
msgstr ""

#: ../../narr/project.rst:840
msgid "Lines 4-12 define a function named ``main`` that returns a :app:`Pyramid` WSGI application.  This function is meant to be called by the :term:`PasteDeploy` framework as a result of running ``pserve``."
msgstr ""

#: ../../narr/project.rst:844
msgid "Within this function, application configuration is performed."
msgstr ""

#: ../../narr/project.rst:846
msgid "Line 7 creates an instance of a :term:`Configurator`."
msgstr ""

#: ../../narr/project.rst:848
msgid "Line 8 adds support for Jinja2 templating bindings, allowing us to specify renderers with the ``.jinja2`` extension."
msgstr ""

#: ../../narr/project.rst:851
msgid "Line 9 registers a static view, which will serve up the files from the ``myproject:static`` :term:`asset specification` (the ``static`` directory of the ``myproject`` package)."
msgstr ""

#: ../../narr/project.rst:855
msgid "Line 10 adds a :term:`route` to the configuration.  This route is later used by a view in the ``views`` module."
msgstr ""

#: ../../narr/project.rst:858
msgid "Line 11 calls ``config.scan()``, which picks up view registrations declared elsewhere in the package (in this case, in the ``views.py`` module)."
msgstr ""

#: ../../narr/project.rst:861
msgid "Line 12 returns a :term:`WSGI` application to the caller of the function (Pyramid's pserve)."
msgstr ""

#: ../../narr/project.rst:868
msgid "``views.py``"
msgstr ""

#: ../../narr/project.rst:870
msgid "Much of the heavy lifting in a :app:`Pyramid` application is done by *view callables*.  A :term:`view callable` is the main tool of a :app:`Pyramid` web application developer; it is a bit of code which accepts a :term:`request` and which returns a :term:`response`."
msgstr ""

#: ../../narr/project.rst:879
msgid "Lines 4-6 define and register a :term:`view callable` named ``my_view``.  The function named ``my_view`` is decorated with a ``view_config`` decorator (which is processed by the ``config.scan()`` line in our ``__init__.py``). The view_config decorator asserts that this view be found when a :term:`route` named ``home`` is matched.  In our case, because our ``__init__.py`` maps the route named ``home`` to the URL pattern ``/``, this route will match when a visitor visits the root URL.  The view_config decorator also names a ``renderer``, which in this case is a template that will be used to render the result of the view callable.  This particular view declaration points at ``templates/mytemplate.pt``, which is an :term:`asset specification` that specifies the ``mytemplate.pt`` file within the ``templates`` directory of the ``myproject`` package.  The asset specification could have also been specified as ``myproject:templates/mytemplate.pt``; the leading package name and colon is optional.  The template file pointed to is a :term:`Jinja2` template file (``templates/my_template.jinja2``)."
msgstr ""

#: ../../narr/project.rst:895
msgid "This view callable function is handed a single piece of information: the :term:`request`.  The *request* is an instance of the :term:`WebOb` ``Request`` class representing the browser's request to our server."
msgstr ""

#: ../../narr/project.rst:899
msgid "This view is configured to invoke a :term:`renderer` on a template.  The dictionary the view returns (on line 6) provides the value the renderer substitutes into the template when generating HTML.  The renderer then returns the HTML in a :term:`response`."
msgstr ""

#: ../../narr/project.rst:904
msgid "Dictionaries provide values to :term:`template`\\s."
msgstr ""

#: ../../narr/project.rst:906
msgid "When the application is run with the cookiecutter's :ref:`default development.ini <myproject_ini>` configuration, :ref:`logging is set up <myproject_ini_logging>` to aid debugging.  If an exception is raised, uncaught tracebacks are displayed after the startup messages on :ref:`the console running the server <running_the_project_application>`. Also ``print()`` statements may be inserted into the application for debugging to send output to this console."
msgstr ""

#: ../../narr/project.rst:914
msgid "``development.ini`` has a setting that controls how templates are reloaded, ``pyramid.reload_templates``."
msgstr ""

#: ../../narr/project.rst:917
msgid "When set to ``True`` (as in the cookiecutter ``development.ini``), changed templates automatically reload without a server restart.  This is convenient while developing, but slows template rendering speed."
msgstr ""

#: ../../narr/project.rst:921
msgid "When set to ``False`` (the default value), changing templates requires a server restart to reload them.  Production applications should use ``pyramid.reload_templates = False``."
msgstr ""

#: ../../narr/project.rst:927
msgid "See also :ref:`views_which_use_a_renderer` for more information about how views, renderers, and templates relate and cooperate."
msgstr ""

#: ../../narr/project.rst:932
msgid "Pyramid can also dynamically reload changed Python files.  See also :ref:`reloading_code`."
msgstr ""

#: ../../narr/project.rst:937
msgid "See also the :ref:`debug_toolbar`, which provides interactive access to your application's internals and, should an exception occur, allows interactive access to traceback execution stack frames from the Python interpreter."
msgstr ""

#: ../../narr/project.rst:946
msgid "``static``"
msgstr ""

#: ../../narr/project.rst:948
msgid "This directory contains static assets which support the ``layout.jinja2`` template.  It includes CSS and images."
msgstr ""

#: ../../narr/project.rst:953
msgid "``templates/layout.jinja2``"
msgstr ""

#: ../../narr/project.rst:955
msgid "This is the base layout content. It contains a single marker for content block. Other templates inherit its content, providing layout for the web application. Its contents are too long to show here, but here is an excerpt:"
msgstr ""

#: ../../narr/project.rst:964
msgid "``templates/mytemplate.jinja2``"
msgstr ""

#: ../../narr/project.rst:966
msgid "This is the content :term:`Jinja2` template that exists in the project.  It is referenced by the call to ``@view_config`` as the ``renderer`` of the ``my_view`` view callable in the ``views.py`` file.  See :ref:`views_which_use_a_renderer` for more information about renderers. It inherits (\"extends\") the HTML provided by ``layout.jinja2``, replacing the content block with its own content."
msgstr ""

#: ../../narr/project.rst:974
msgid "Templates are accessed and used by view configurations and sometimes by view functions themselves.  See :ref:`templates_used_directly` and :ref:`templates_used_as_renderers`."
msgstr ""

#: ../../narr/project.rst:983
msgid "``tests.py``"
msgstr ""

#: ../../narr/project.rst:985
msgid "The ``tests.py`` module includes tests for your application."
msgstr ""

#: ../../narr/project.rst:991
msgid "This sample ``tests.py`` file has one unit test and one functional test defined within it. These tests are executed when you run ``py.test -q``. You may add more tests here as you build your application. You are not required to write tests to use :app:`Pyramid`. This file is simply provided for convenience and example."
msgstr ""

#: ../../narr/project.rst:997
msgid "See :ref:`testing_chapter` for more information about writing :app:`Pyramid` unit tests."
msgstr ""

#: ../../narr/project.rst:1006
msgid "Modifying Package Structure"
msgstr ""

#: ../../narr/project.rst:1008
msgid "It is best practice for your application's code layout to not stray too much from accepted Pyramid cookiecutter defaults.  If you refrain from changing things very much, other Pyramid coders will be able to more quickly understand your application.  However, the code layout choices made for you by a cookiecutter are in no way magical or required.  Despite the choices made for you by any cookiecutter, you can decide to lay your code out any way you see fit."
msgstr ""

#: ../../narr/project.rst:1015
msgid "For example, the configuration method named :meth:`~pyramid.config.Configurator.add_view` requires you to pass a :term:`dotted Python name` or a direct object reference as the class or function to be used as a view.  By default, the ``starter`` cookiecutter would have you add view functions to the ``views.py`` module in your package. However, you might be more comfortable creating a ``views`` *directory*, and adding a single file for each view."
msgstr ""

#: ../../narr/project.rst:1023
msgid "If your project package name was ``myproject`` and you wanted to arrange all your views in a Python subpackage within the ``myproject`` :term:`package` named ``views`` instead of within a single ``views.py`` file, you might do the following."
msgstr ""

#: ../../narr/project.rst:1028
msgid "Create a ``views`` directory inside your ``myproject`` package directory (the same directory which holds ``views.py``)."
msgstr ""

#: ../../narr/project.rst:1031
msgid "Create a file within the new ``views`` directory named ``__init__.py``.  (It can be empty.  This just tells Python that the ``views`` directory is a *package*.)"
msgstr ""

#: ../../narr/project.rst:1035
msgid "*Move* the content from the existing ``views.py`` file to a file inside the new ``views`` directory named, say, ``blog.py``.  Because the ``templates`` directory remains in the ``myproject`` package, the template :term:`asset specification` values in ``blog.py`` must now be fully qualified with the project's package name (``myproject:templates/blog.pt``)."
msgstr ""

#: ../../narr/project.rst:1041
msgid "You can then continue to add view callable functions to the ``blog.py`` module, but you can also add other ``.py`` files which contain view callable functions to the ``views`` directory.  As long as you use the ``@view_config`` directive to register views in conjunction with ``config.scan()``, they will be picked up automatically when the application is restarted."
msgstr ""

#: ../../narr/project.rst:1048
msgid "Using the Interactive Shell"
msgstr ""

#: ../../narr/project.rst:1050
msgid "It is possible to use the ``pshell`` command to load a Python interpreter prompt with a similar configuration as would be loaded if you were running your Pyramid application via ``pserve``.  This can be a useful debugging tool. See :ref:`interactive_shell` for more details."
msgstr ""

#: ../../narr/project.rst:1058
msgid "What Is This ``pserve`` Thing"
msgstr ""

#: ../../narr/project.rst:1060
msgid "The code generated by a :app:`Pyramid` cookiecutter assumes that you will be using the ``pserve`` command to start your application while you do development. ``pserve`` is a command that reads a :term:`PasteDeploy` ``.ini`` file (e.g., ``development.ini``), and configures a server to serve a :app:`Pyramid` application based on the data in the file."
msgstr ""

#: ../../narr/project.rst:1066
msgid "``pserve`` is by no means the only way to start up and serve a :app:`Pyramid` application.  As we saw in :ref:`firstapp_chapter`, ``pserve`` needn't be invoked at all to run a :app:`Pyramid` application.  The use of ``pserve`` to run a :app:`Pyramid` application is purely conventional based on the output of its cookiecutter.  But we strongly recommend using ``pserve`` while developing your application because many other convenience introspection commands (such as ``pviews``, ``prequest``, ``proutes``, and others) are also implemented in terms of configuration availability of this ``.ini`` file format.  It also configures Pyramid logging and provides the ``--reload`` switch for convenient restarting of the server when code changes."
msgstr ""

#: ../../narr/project.rst:1080
msgid "Using an Alternate WSGI Server"
msgstr ""

#: ../../narr/project.rst:1082
msgid "Pyramid cookiecutters generate projects which use the :term:`Waitress` WSGI server. Waitress is a server that is suited for development and light production usage.  It's not the fastest nor the most featureful WSGI server. Instead, its main feature is that it works on all platforms that Pyramid needs to run on, making it a good choice as a default server from the perspective of Pyramid's developers."
msgstr ""

#: ../../narr/project.rst:1089
msgid "Any WSGI server is capable of running a :app:`Pyramid` application.  But we suggest you stick with the default server for development, and that you wait to investigate other server options until you're ready to deploy your application to production.  Unless for some reason you need to develop on a non-local system, investigating alternate server options is usually a distraction until you're ready to deploy.  But we recommend developing using the default configuration on a local system that you have complete control over; it will provide the best development experience."
msgstr ""

#: ../../narr/project.rst:1098
msgid "One popular production alternative to the default Waitress server is :term:`mod_wsgi`. You can use ``mod_wsgi`` to serve your :app:`Pyramid` application using the Apache web server rather than any \"pure-Python\" server like Waitress. It is fast and featureful.  See :ref:`modwsgi_tutorial` for details."
msgstr ""

#: ../../narr/project.rst:1103
msgid "Another good production alternative is :term:`Green Unicorn` (aka ``gunicorn``).  It's faster than Waitress and slightly easier to configure than ``mod_wsgi``, although it depends, in its default configuration, on having a buffering HTTP proxy in front of it.  It does not, as of this writing, work on Windows."
msgstr ""

#: ../../narr/project.rst:1110
msgid "Automatically Reloading Your Code"
msgstr ""

#: ../../narr/project.rst:1112
msgid "During development, it can be really useful to automatically have the webserver restart when you make changes. ``pserve`` has a ``--reload`` switch to enable this. It uses the `hupper <https://docs.pylonsproject.org/projects/hupper/en/latest/>`_ package to enable this behavior. When your code crashes, ``hupper`` will wait for another change or the ``SIGHUP`` signal before restarting again."
msgstr ""

#: ../../narr/project.rst:1120
msgid "inotify support"
msgstr ""

#: ../../narr/project.rst:1122
msgid "By default ``hupper`` will poll the filesystem for changes to all Python code. This can be pretty inefficient in larger projects. To be nicer to your hard drive, you should install the `watchdog <http://pythonhosted.org/watchdog/>`_ package in development. ``hupper`` will automatically use ``watchdog`` to more efficiently poll the filesystem."
msgstr ""

#: ../../narr/project.rst:1130
msgid "Monitoring Custom Files"
msgstr ""

#: ../../narr/project.rst:1132
msgid "By default, ``pserve --reload`` will monitor all imported Python code (everything in ``sys.modules``) as well as the config file passed to ``pserve`` (e.g., ``development.ini``). You can instruct ``pserve`` to watch other files for changes as well by defining a ``[pserve]`` section in your configuration file. For example, let's say your application loads the ``favicon.ico`` file at startup and stores it in memory to efficiently serve it many times. When you change it, you want ``pserve`` to restart:"
msgstr ""

#: ../../narr/project.rst:1146
msgid "Paths may be absolute or relative to the configuration file. They may also be an :term:`asset specification`. These paths are passed to ``hupper``, which has some basic support for globbing. Acceptable glob patterns depend on the version of Python being used."
msgstr ""

