# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../narr/advconfig.rst:7
msgid "Advanced Configuration"
msgstr ""

#: ../../narr/advconfig.rst:9
msgid "To support application extensibility, the :app:`Pyramid` :term:`Configurator` by default detects configuration conflicts and allows you to include configuration imperatively from other packages or modules.  It also by default performs configuration in two separate phases.  This allows you to ignore relative configuration statement ordering in some circumstances."
msgstr ""

#: ../../narr/advconfig.rst:21
msgid "Conflict Detection"
msgstr ""

#: ../../narr/advconfig.rst:23
msgid "Here's a familiar example of one of the simplest :app:`Pyramid` applications, configured imperatively:"
msgstr ""

#: ../../narr/advconfig.rst:43
msgid "When you start this application, all will be OK.  However, what happens if we try to add another view to the configuration with the same set of :term:`predicate` arguments as one we've already added?"
msgstr ""

#: ../../narr/advconfig.rst:72
msgid "The application now has two conflicting view configuration statements.  When we try to start it again, it won't start.  Instead we'll receive a traceback that ends something like this:"
msgstr ""

#: ../../narr/advconfig.rst:94
msgid "This traceback is trying to tell us:"
msgstr ""

#: ../../narr/advconfig.rst:96
msgid "We've got conflicting information for a set of view configuration statements (The ``For:`` line)."
msgstr ""

#: ../../narr/advconfig.rst:99
msgid "There are two statements which conflict, shown beneath the ``For:`` line: ``config.add_view(hello_world. 'hello')`` on line 14 of ``app.py``, and ``config.add_view(goodbye_world, 'hello')`` on line 17 of ``app.py``."
msgstr ""

#: ../../narr/advconfig.rst:103
msgid "These two configuration statements are in conflict because we've tried to tell the system that the set of :term:`predicate` values for both view configurations are exactly the same.  Both the ``hello_world`` and ``goodbye_world`` views are configured to respond under the same set of circumstances.  This circumstance, the :term:`view name` represented by the ``name=`` predicate, is ``hello``."
msgstr ""

#: ../../narr/advconfig.rst:110
msgid "This presents an ambiguity that :app:`Pyramid` cannot resolve. Rather than allowing the circumstance to go unreported, by default Pyramid raises a :exc:`ConfigurationConflictError` error and prevents the application from running."
msgstr ""

#: ../../narr/advconfig.rst:115
msgid "Conflict detection happens for any kind of configuration: imperative configuration or configuration that results from the execution of a :term:`scan`."
msgstr ""

#: ../../narr/advconfig.rst:122
msgid "Manually Resolving Conflicts"
msgstr ""

#: ../../narr/advconfig.rst:124
msgid "There are a number of ways to manually resolve conflicts: by changing registrations to not conflict, by strategically using :meth:`pyramid.config.Configurator.commit`, or by using an \"autocommitting\" configurator."
msgstr ""

#: ../../narr/advconfig.rst:130
msgid "The Right Thing"
msgstr ""

#: ../../narr/advconfig.rst:132
msgid "The most correct way to resolve conflicts is to \"do the needful\": change your configuration code to not have conflicting configuration statements.  The details of how this is done depends entirely on the configuration statements made by your application.  Use the detail provided in the :exc:`ConfigurationConflictError` to track down the offending conflicts and modify your configuration code accordingly."
msgstr ""

#: ../../narr/advconfig.rst:139
msgid "If you're getting a conflict while trying to extend an existing application, and that application has a function which performs configuration like this one:"
msgstr ""

#: ../../narr/advconfig.rst:148
msgid "Don't call this function directly with ``config`` as an argument.  Instead, use :meth:`pyramid.config.Configurator.include`:"
msgstr ""

#: ../../narr/advconfig.rst:156
msgid "Using :meth:`~pyramid.config.Configurator.include` instead of calling the function directly provides a modicum of automated conflict resolution, with the configuration statements you define in the calling code overriding those of the included function."
msgstr ""

#: ../../narr/advconfig.rst:163
msgid "See also :ref:`automatic_conflict_resolution` and :ref:`including_configuration`."
msgstr ""

#: ../../narr/advconfig.rst:167
msgid "Using ``config.commit()``"
msgstr ""

#: ../../narr/advconfig.rst:169
msgid "You can manually commit a configuration by using the :meth:`~pyramid.config.Configurator.commit` method between configuration calls. For example, we prevent conflicts from occurring in the application we examined previously as the result of adding a ``commit``.  Here's the application that generates conflicts:"
msgstr ""

#: ../../narr/advconfig.rst:200
msgid "We can prevent the two ``add_view`` calls from conflicting by issuing a call to :meth:`~pyramid.config.Configurator.commit` between them:"
msgstr ""

#: ../../narr/advconfig.rst:231
msgid "In the above example we've issued a call to :meth:`~pyramid.config.Configurator.commit` between the two ``add_view`` calls. :meth:`~pyramid.config.Configurator.commit` will execute any pending configuration statements."
msgstr ""

#: ../../narr/advconfig.rst:236
msgid "Calling :meth:`~pyramid.config.Configurator.commit` is safe at any time.  It executes all pending configuration actions and leaves the configuration action list \"clean\"."
msgstr ""

#: ../../narr/advconfig.rst:240
msgid "Note that :meth:`~pyramid.config.Configurator.commit` has no effect when you're using an *autocommitting* configurator (see :ref:`autocommitting_configurator`)."
msgstr ""

#: ../../narr/advconfig.rst:246
msgid "Using an Autocommitting Configurator"
msgstr ""

#: ../../narr/advconfig.rst:248
msgid "You can also use a heavy hammer to circumvent conflict detection by using a configurator constructor parameter: ``autocommit=True``.  For example:"
msgstr ""

#: ../../narr/advconfig.rst:259
msgid "When the ``autocommit`` parameter passed to the Configurator is ``True``, conflict detection (and :ref:`twophase_config`) is disabled.  Configuration statements will be executed immediately, and succeeding statements will override preceding ones."
msgstr ""

#: ../../narr/advconfig.rst:264
msgid ":meth:`~pyramid.config.Configurator.commit` has no effect when ``autocommit`` is ``True``."
msgstr ""

#: ../../narr/advconfig.rst:267
msgid "If you use a Configurator in code that performs unit testing, it's usually a good idea to use an autocommitting Configurator, because you are usually unconcerned about conflict detection or two-phase configuration in test code."
msgstr ""

#: ../../narr/advconfig.rst:274
msgid "Automatic Conflict Resolution"
msgstr ""

#: ../../narr/advconfig.rst:276
msgid "If your code uses the :meth:`~pyramid.config.Configurator.include` method to include external configuration, some conflicts are automatically resolved. Configuration statements that are made as the result of an \"include\" will be overridden by configuration statements that happen within the caller of the \"include\" method."
msgstr ""

#: ../../narr/advconfig.rst:282
msgid "Automatic conflict resolution supports this goal.  If a user wants to reuse a Pyramid application, and they want to customize the configuration of this application without hacking its code \"from outside\", they can \"include\" a configuration function from the package and override only some of its configuration statements within the code that does the include.  No conflicts will be generated by configuration statements within the code that does the including, even if configuration statements in the included code would conflict if it was moved \"up\" to the calling code."
msgstr ""

#: ../../narr/advconfig.rst:292
msgid "Methods Which Provide Conflict Detection"
msgstr ""

#: ../../narr/advconfig.rst:294
msgid "These are the methods of the configurator which provide conflict detection:"
msgstr ""

#: ../../narr/advconfig.rst:296
msgid ":meth:`~pyramid.config.Configurator.add_view`, :meth:`~pyramid.config.Configurator.add_route`, :meth:`~pyramid.config.Configurator.add_renderer`, :meth:`~pyramid.config.Configurator.add_request_method`, :meth:`~pyramid.config.Configurator.set_request_factory`, :meth:`~pyramid.config.Configurator.set_session_factory`, :meth:`~pyramid.config.Configurator.set_request_property`, :meth:`~pyramid.config.Configurator.set_root_factory`, :meth:`~pyramid.config.Configurator.set_view_mapper`, :meth:`~pyramid.config.Configurator.set_authentication_policy`, :meth:`~pyramid.config.Configurator.set_authorization_policy`, :meth:`~pyramid.config.Configurator.set_locale_negotiator`, :meth:`~pyramid.config.Configurator.set_default_permission`, :meth:`~pyramid.config.Configurator.add_traverser`, :meth:`~pyramid.config.Configurator.add_resource_url_adapter`, and :meth:`~pyramid.config.Configurator.add_response_adapter`."
msgstr ""

#: ../../narr/advconfig.rst:313
msgid ":meth:`~pyramid.config.Configurator.add_static_view` also indirectly provides conflict detection, because it's implemented in terms of the conflict-aware ``add_route`` and ``add_view`` methods."
msgstr ""

#: ../../narr/advconfig.rst:323
msgid "Including Configuration from External Sources"
msgstr ""

#: ../../narr/advconfig.rst:325
msgid "Some application programmers will factor their configuration code in such a way that it is easy to reuse and override configuration statements.  For example, such a developer might factor out a function used to add routes to their application:"
msgstr ""

#: ../../narr/advconfig.rst:336
msgid "Rather than calling this function directly with ``config`` as an argument, instead use :meth:`pyramid.config.Configurator.include`:"
msgstr ""

#: ../../narr/advconfig.rst:344
msgid "Using ``include`` rather than calling the function directly will allow :ref:`automatic_conflict_resolution` to work."
msgstr ""

#: ../../narr/advconfig.rst:347
msgid ":meth:`~pyramid.config.Configurator.include` can also accept a :term:`module` as an argument:"
msgstr ""

#: ../../narr/advconfig.rst:357
msgid "For this to work properly, the ``myapp`` module must contain a callable with the special name ``includeme``, which should perform configuration (like the ``add_routes`` callable we showed above as an example)."
msgstr ""

#: ../../narr/advconfig.rst:361
msgid ":meth:`~pyramid.config.Configurator.include` can also accept a :term:`dotted Python name` to a function or a module."
msgstr ""

#: ../../narr/advconfig.rst:364
msgid "See :ref:`the_include_tag` for a declarative alternative to the :meth:`~pyramid.config.Configurator.include` method."
msgstr ""

#: ../../narr/advconfig.rst:370
msgid "Two-Phase Configuration"
msgstr ""

#: ../../narr/advconfig.rst:372
msgid "When a non-autocommitting :term:`Configurator` is used to do configuration (the default), configuration execution happens in two phases.  In the first phase, \"eager\" configuration actions (actions that must happen before all others, such as registering a renderer) are executed, and *discriminators* are computed for each of the actions that depend on the result of the eager actions.  In the second phase, the discriminators of all actions are compared to do conflict detection."
msgstr ""

#: ../../narr/advconfig.rst:380
msgid "Due to this, for configuration methods that have no internal ordering constraints, execution order of configuration method calls is not important. For example, the relative ordering of :meth:`~pyramid.config.Configurator.add_view` and :meth:`~pyramid.config.Configurator.add_renderer` is unimportant when a non-autocommitting configurator is used.  This code snippet:"
msgstr ""

#: ../../narr/advconfig.rst:393
msgid "Has the same result as:"
msgstr ""

#: ../../narr/advconfig.rst:401
msgid "Even though the view statement depends on the registration of a custom renderer, due to two-phase configuration, the order in which the configuration statements are issued is not important.  ``add_view`` will be able to find the ``.rn`` renderer even if ``add_renderer`` is called after ``add_view``."
msgstr ""

#: ../../narr/advconfig.rst:406
msgid "The same is untrue when you use an *autocommitting* configurator (see :ref:`autocommitting_configurator`).  When an autocommitting configurator is used, two-phase configuration is disabled, and configuration statements must be ordered in dependency order."
msgstr ""

#: ../../narr/advconfig.rst:411
msgid "Some configuration methods, such as :meth:`~pyramid.config.Configurator.add_route` have internal ordering constraints: the routes they imply require relative ordering.  Such ordering constraints are not absolved by two-phase configuration.  Routes are still added in configuration execution order."
msgstr ""

#: ../../narr/advconfig.rst:418
msgid "More Information"
msgstr ""

#: ../../narr/advconfig.rst:420
msgid "For more information, see the article :ref:`A Whirlwind Tour of Advanced Configuration Tactics <cookbook:whirlwind-adv-conf>` in the Pyramid Community Cookbook."
msgstr ""

