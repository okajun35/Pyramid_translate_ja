# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../narr/scaffolding.rst:4
msgid "Creating Pyramid Scaffolds"
msgstr ""

#: ../../narr/scaffolding.rst:8
msgid "Scaffolds and the ``pcreate`` script used to generate :app:`Pyramid` projects from scaffolds have been deprecated. Use :ref:`cookiecutters` instead."
msgstr ""

#: ../../narr/scaffolding.rst:10
msgid "You can extend Pyramid by creating a :term:`scaffold` template.  A scaffold template is useful if you'd like to distribute a customizable configuration of Pyramid to other users.  Once you've created a scaffold, and someone has installed the distribution that houses the scaffold, they can use the ``pcreate`` script to create a custom version of your scaffold's template. Pyramid itself uses scaffolds to allow people to bootstrap new projects.  For example, ``pcreate -s alchemy MyStuff`` causes Pyramid to render the ``alchemy`` scaffold template to the ``MyStuff`` directory."
msgstr ""

#: ../../narr/scaffolding.rst:20
msgid "Basics"
msgstr ""

#: ../../narr/scaffolding.rst:22
msgid "A scaffold template is just a bunch of source files and directories on disk. A small definition class points at this directory.  It is in turn pointed at by a :term:`setuptools` \"entry point\" which registers the scaffold so it can be found by the ``pcreate`` command."
msgstr ""

#: ../../narr/scaffolding.rst:27
msgid "To create a scaffold template, create a Python :term:`distribution` to house the scaffold which includes a ``setup.py`` that relies on the ``setuptools`` package.  See `Packaging and Distributing Projects <https://packaging.python.org/tutorials/distributing-packages/>`_ for more information about how to do this.  For example, we'll pretend the distribution you create is named ``CoolExtension``, and it has a package directory within it named ``coolextension``."
msgstr ""

#: ../../narr/scaffolding.rst:35
msgid "Once you've created the distribution, put a \"scaffolds\" directory within your distribution's package directory, and create a file within that directory named ``__init__.py`` with something like the following:"
msgstr ""

#: ../../narr/scaffolding.rst:50
msgid "Once this is done, within the ``scaffolds`` directory, create a template directory.  Our example used a template directory named ``coolextension_scaffold``."
msgstr ""

#: ../../narr/scaffolding.rst:54
msgid "As you create files and directories within the template directory, note that:"
msgstr ""

#: ../../narr/scaffolding.rst:56
msgid "Files which have a name which are suffixed with the value ``_tmpl`` will be rendered, and replacing any instance of the literal string ``{{var}}`` with the string value of the variable named ``var`` provided to the scaffold."
msgstr ""

#: ../../narr/scaffolding.rst:60
msgid "Files and directories with filenames that contain the string ``+var+`` will have that string replaced with the value of the ``var`` variable provided to the scaffold."
msgstr ""

#: ../../narr/scaffolding.rst:64
msgid "Files that start with a dot (e.g., ``.env``) are ignored and will not be copied over to the destination directory. If you want to include a file with a leading dot, then you must replace the dot with ``+dot+`` (e.g., ``+dot+env``)."
msgstr ""

#: ../../narr/scaffolding.rst:69
msgid "Otherwise, files and directories which live in the template directory will be copied directly without modification to the ``pcreate`` output location."
msgstr ""

#: ../../narr/scaffolding.rst:72
msgid "The variables provided by the default ``PyramidTemplate`` include ``project`` (the project name provided by the user as an argument to ``pcreate``), ``package`` (a lowercasing and normalizing of the project name provided by the user), ``random_string`` (a long random string), and ``package_logger`` (the name of the package's logger)."
msgstr ""

#: ../../narr/scaffolding.rst:78
msgid "See Pyramid's \"scaffolds\" package (https://github.com/Pylons/pyramid/tree/master/pyramid/scaffolds) for concrete examples of scaffold directories (``zodb``, ``alchemy``, and ``starter``, for example)."
msgstr ""

#: ../../narr/scaffolding.rst:83
msgid "After you've created the template directory, add the following to the ``entry_points`` value of your distribution's ``setup.py``:"
msgstr ""

#: ../../narr/scaffolding.rst:91
msgid "For example:"
msgstr ""

#: ../../narr/scaffolding.rst:103
msgid "Run your distribution's ``setup.py develop`` or ``setup.py install`` command. After that, you should be able to see your scaffolding template listed when you run ``pcreate -l``.  It will be named ``coolextension`` because that's the name we gave it in the entry point setup.  Running ``pcreate -s coolextension MyStuff`` will then render your scaffold to an output directory named ``MyStuff``."
msgstr ""

#: ../../narr/scaffolding.rst:110
msgid "See the module documentation for :mod:`pyramid.scaffolds` for information about the API of the :class:`pyramid.scaffolds.Template` class and related classes. You can override methods of this class to get special behavior."
msgstr ""

#: ../../narr/scaffolding.rst:115
msgid "Supporting Older Pyramid Versions"
msgstr ""

#: ../../narr/scaffolding.rst:117
msgid "Because different versions of Pyramid handled scaffolding differently, if you want to have extension scaffolds that can work across Pyramid 1.0.X, 1.1.X, 1.2.X and 1.3.X, you'll need to use something like this bit of horror while defining your scaffold template:"
msgstr ""

#: ../../narr/scaffolding.rst:143
msgid "And then in the setup.py of the package that contains your scaffold, define the template as a target of both ``paste.paster_create_template`` (for ``paster create``) and ``pyramid.scaffold`` (for ``pcreate``)."
msgstr ""

#: ../../narr/scaffolding.rst:154
msgid "Doing this hideousness will allow your scaffold to work as a ``paster create`` target (under 1.0, 1.1, or 1.2) or as a ``pcreate`` target (under 1.3).  If an invoker tries to run ``paster create`` against a scaffold defined this way under 1.3, an error is raised instructing them to use ``pcreate`` instead."
msgstr ""

#: ../../narr/scaffolding.rst:159
msgid "If you want to support Pyramid 1.3 only, it's much cleaner, and the API is stable:"
msgstr ""

#: ../../narr/scaffolding.rst:171
msgid "You only need to specify a ``paste.paster_create_template`` entry point target in your ``setup.py`` if you want your scaffold to be consumable by users of Pyramid 1.0, 1.1, or 1.2.  To support only 1.3, specifying only the ``pyramid.scaffold`` entry point is good enough.  If you want to support both ``paster create`` and ``pcreate`` (meaning you want to support Pyramid 1.2 and some older version), you'll need to define both."
msgstr ""

#: ../../narr/scaffolding.rst:179
msgid "Examples"
msgstr ""

#: ../../narr/scaffolding.rst:181
msgid "Existing third-party distributions which house scaffolding are available via :term:`PyPI`.  The ``pyramid_jqm``, ``pyramid_zcml``, and ``pyramid_jinja2`` packages house scaffolds.  You can install and examine these packages to see how they work in the quest to develop your own scaffolding."
msgstr ""

