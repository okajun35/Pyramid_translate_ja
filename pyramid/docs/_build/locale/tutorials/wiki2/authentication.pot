# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorials/wiki2/authentication.rst:5
msgid "Adding authentication"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:7
msgid ":app:`Pyramid` provides facilities for :term:`authentication` and :term:`authorization`. In this section we'll focus solely on the authentication APIs to add login and logout functionality to our wiki."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:11
msgid "We will implement authentication with the following steps:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:13
msgid "Add an :term:`authentication policy` and a ``request.user`` computed property (``security.py``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:15
msgid "Add routes for ``/login`` and ``/logout`` (``routes.py``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:16
msgid "Add login and logout views (``views/auth.py``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:17
msgid "Add a login template (``login.jinja2``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:18
msgid "Add \"Login\" and \"Logout\" links to every page based on the user's authenticated state (``layout.jinja2``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:20
msgid "Make the existing views verify user state (``views/default.py``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:21
msgid "Redirect to ``/login`` when a user is denied access to any of the views that require permission, instead of a default \"403 Forbidden\" page (``views/auth.py``)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:27
msgid "Authenticating requests"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:29
msgid "The core of :app:`Pyramid` authentication is an :term:`authentication policy` which is used to identify authentication information from a ``request``, as well as handling the low-level login and logout operations required to track users across requests (via cookies, headers, or whatever else you can imagine)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:37
msgid "Add the authentication policy"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:39
msgid "Create a new file ``tutorial/security.py`` with the following content:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:45
msgid "Here we've defined:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:47
msgid "A new authentication policy named ``MyAuthenticationPolicy``, which is subclassed from Pyramid's :class:`pyramid.authentication.AuthTktAuthenticationPolicy`, which tracks the :term:`userid` using a signed cookie (lines 7-11)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:51
msgid "A ``get_user`` function, which can convert the ``unauthenticated_userid`` from the policy into a ``User`` object from our database (lines 13-17)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:53
msgid "The ``get_user`` is registered on the request as ``request.user`` to be used throughout our application as the authenticated ``User`` object for the logged-in user (line 27)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:57
msgid "The logic in this file is a little bit interesting, so we'll go into detail about what's happening here:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:60
msgid "First, the default authentication policies all provide a method named ``unauthenticated_userid`` which is responsible for the low-level parsing of the information in the request (cookies, headers, etc.). If a ``userid`` is found, then it is returned from this method. This is named ``unauthenticated_userid`` because, at the lowest level, it knows the value of the userid in the cookie, but it doesn't know if it's actually a user in our system (remember, anything the user sends to our app is untrusted)."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:68
msgid "Second, our application should only care about ``authenticated_userid`` and ``request.user``, which have gone through our application-specific process of validating that the user is logged in."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:72
msgid "In order to provide an ``authenticated_userid`` we need a verification step. That can happen anywhere, so we've elected to do it inside of the cached ``request.user`` computed property. This is a convenience that makes ``request.user`` the source of truth in our system. It is either ``None`` or a ``User`` object from our database. This is why the ``get_user`` function uses the ``unauthenticated_userid`` to check the database."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:81
msgid "Configure the app"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:83
msgid "Since we've added a new ``tutorial/security.py`` module, we need to include it. Open the file ``tutorial/__init__.py`` and edit the following lines:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:91
msgid "Our authentication policy is expecting a new setting, ``auth.secret``. Open the file ``development.ini`` and add the highlighted line below:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:100
msgid "Finally, best practices tell us to use a different secret for production, so open ``production.ini`` and add a different secret:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:111
msgid "Add permission checks"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:113
msgid ":app:`Pyramid` has full support for declarative authorization, which we'll cover in the next chapter. However, many people looking to get their feet wet are just interested in authentication with some basic form of home-grown authorization. We'll show below how to accomplish the simple security goals of our wiki, now that we can track the logged-in state of users."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:119
msgid "Remember our goals:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:121
msgid "Allow only ``editor`` and ``basic`` logged-in users to create new pages."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:122
msgid "Only allow ``editor`` users and the page creator (possibly a ``basic`` user) to edit pages."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:125
msgid "Open the file ``tutorial/views/default.py`` and fix the following imports:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:133
msgid "Change the two highlighted lines."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:135
msgid "In the same file, now edit the ``edit_page`` view function:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:143
#: ../../tutorials/wiki2/authentication.rst:156
msgid "Only the highlighted lines need to be changed."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:145
msgid "If the user either is not logged in or the user is not the page's creator *and* not an ``editor``, then we raise ``HTTPForbidden``."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:148
msgid "In the same file, now edit the ``add_page`` view function:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:158
msgid "If the user either is not logged in or is not in the ``basic`` or ``editor`` roles, then we raise ``HTTPForbidden``, which will return a \"403 Forbidden\" response to the user. However, we will hook this later to redirect to the login page. Also, now that we have ``request.user``, we no longer have to hard-code the creator as the ``editor`` user, so we can finally drop that hack."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:164
msgid "These simple checks should protect our views."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:168
msgid "Login, logout"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:170
msgid "Now that we've got the ability to detect logged-in users, we need to add the ``/login`` and ``/logout`` views so that they can actually login and logout!"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:175
msgid "Add routes for ``/login`` and ``/logout``"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:177
msgid "Go back to ``tutorial/routes.py`` and add these two routes as highlighted:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:185
msgid "The preceding lines must be added *before* the following ``view_page`` route definition:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:193
msgid "This is because ``view_page``'s route definition uses a catch-all \"replacement marker\" ``/{pagename}`` (see :ref:`route_pattern_syntax`), which will catch any route that was not already caught by any route registered before it. Hence, for ``login`` and ``logout`` views to have the opportunity of being matched (or \"caught\"), they must be above ``/{pagename}``."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:202
msgid "Add login, logout, and forbidden views"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:204
msgid "Create a new file ``tutorial/views/auth.py``, and add the following code to it:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:210
msgid "This code adds three new views to the application:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:212
msgid "The ``login`` view renders a login form and processes the post from the login form, checking credentials against our ``users`` table in the database."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:215
msgid "The check is done by first finding a ``User`` record in the database, then using our ``user.check_password`` method to compare the hashed passwords."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:218
msgid "If the credentials are valid, then we use our authentication policy to store the user's id in the response using :meth:`pyramid.security.remember`."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:221
msgid "Finally, the user is redirected back to either the page which they were trying to access (``next``) or the front page as a fallback. This parameter is used by our forbidden view, as explained below, to finish the login workflow."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:226
msgid "The ``logout`` view handles requests to ``/logout`` by clearing the credentials using :meth:`pyramid.security.forget`, then redirecting them to the front page."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:230
msgid "The ``forbidden_view`` is registered using the :class:`pyramid.view.forbidden_view_config` decorator. This is a special :term:`exception view`, which is invoked when a :class:`pyramid.httpexceptions.HTTPForbidden` exception is raised."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:235
msgid "This view will handle a forbidden error by redirecting the user to ``/login``. As a convenience, it also sets the ``next=`` query string to the current URL (the one that is forbidding access). This way, if the user successfully logs in, they will be sent back to the page which they had been trying to access."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:243
msgid "Add the ``login.jinja2`` template"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:245
msgid "Create ``tutorial/templates/login.jinja2`` with the following content:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:250
msgid "The above template is referenced in the login view that we just added in ``tutorial/views/auth.py``."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:255
msgid "Add \"Login\" and \"Logout\" links"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:257
msgid "Open ``tutorial/templates/layout.jinja2`` and add the following code as indicated by the highlighted lines."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:266
msgid "The ``request.user`` will be ``None`` if the user is not authenticated, or a ``tutorial.models.User`` object if the user is authenticated. This check will make the logout link shown only when the user is logged in, and conversely the login link is only shown when the user is logged out."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:273
msgid "Viewing the application in a browser"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:275
msgid "We can finally examine our application in a browser (See :ref:`wiki2-start-the-application`).  Launch a browser and visit each of the following URLs, checking that the result is as expected:"
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:279
msgid "http://localhost:6543/ invokes the ``view_wiki`` view.  This always redirects to the ``view_page`` view of the ``FrontPage`` page object.  It is executable by any user."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:283
msgid "http://localhost:6543/FrontPage invokes the ``view_page`` view of the ``FrontPage`` page object. There is a \"Login\" link in the upper right corner while the user is not authenticated, else it is a \"Logout\" link when the user is authenticated."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:288
msgid "http://localhost:6543/FrontPage/edit_page invokes the ``edit_page`` view for the ``FrontPage`` page object.  It is executable by only the ``editor`` user. If a different user (or the anonymous user) invokes it, then a login form will be displayed. Supplying the credentials with the username ``editor`` and password ``editor`` will display the edit page form."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:294
msgid "http://localhost:6543/add_page/SomePageName invokes the ``add_page`` view for a page. If the page already exists, then it redirects the user to the ``edit_page`` view for the page object. It is executable by either the ``editor`` or ``basic`` user.  If a different user (or the anonymous user) invokes it, then a login form will be displayed. Supplying the credentials with either the username ``editor`` and password ``editor``, or username ``basic`` and password ``basic``, will display the edit page form."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:302
msgid "http://localhost:6543/SomePageName/edit_page invokes the ``edit_page`` view for an existing page, or generates an error if the page does not exist. It is editable by the ``basic`` user if the page was created by that user in the previous step. If, instead, the page was created by the ``editor`` user, then the login page should be shown for the ``basic`` user."
msgstr ""

#: ../../tutorials/wiki2/authentication.rst:308
msgid "After logging in (as a result of hitting an edit or add page and submitting the login form with the ``editor`` credentials), we'll see a \"Logout\" link in the upper right hand corner.  When we click it, we're logged out, redirected back to the front page, and a \"Login\" link is shown in the upper right hand corner."
msgstr ""

