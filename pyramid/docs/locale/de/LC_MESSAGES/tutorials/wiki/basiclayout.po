# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorials/wiki/basiclayout.rst:5
msgid "Basic Layout"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:7
msgid ""
"The starter files generated by the ``zodb`` cookiecutter are very basic, "
"but they provide a good orientation for the high-level patterns common to"
" most :term:`traversal`-based (and :term:`ZODB`-based) :app:`Pyramid` "
"projects."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:13
msgid "Application configuration with ``__init__.py``"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:15
msgid ""
"A directory on disk can be turned into a Python :term:`package` by "
"containing an ``__init__.py`` file.  Even if empty, this marks a "
"directory as a Python package.  We use ``__init__.py`` both as a marker, "
"indicating the directory in which it's contained is a package, and to "
"contain application configuration code."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:21
msgid ""
"When you run the application using the ``pserve`` command using the "
"``development.ini`` generated configuration file, the application "
"configuration points at a setuptools *entry point* described as "
"``egg:tutorial``.  In our application, because the application's "
"``setup.py`` file says so, this entry point happens to be the ``main`` "
"function within the file named ``__init__.py``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:28
msgid "Open ``tutorial/__init__.py``.  It should already contain the following:"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:34
msgid "*Lines 1-3*.  Perform some dependency imports."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:36
msgid "*Lines 6-8*.  Define a :term:`root factory` for our Pyramid application."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:38
msgid "*Line 11*.  ``__init__.py`` defines a function named ``main``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:40
msgid ""
"*Line 14*.  Use an explicit transaction manager for apps so that they do "
"not implicitly create new transactions when touching the manager outside "
"of the ``pyramid_tm`` lifecycle."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:42
msgid ""
"*Line 15*.  Construct a :term:`Configurator` as a :term:`context manager`"
" with the settings keyword parsed by :term:`PasteDeploy`."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:44
msgid ""
"*Line 16*.  Include support for the :term:`Chameleon` template rendering "
"bindings, allowing us to use the ``.pt`` templates."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:47
msgid ""
"*Line 17*.  Include support for ``pyramid_tm``, allowing Pyramid requests"
" to join the active transaction as provided by the `transaction "
"<https://pypi.org/project/transaction/>`_ package."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:49
msgid ""
"*Line 18*.  Include support for ``pyramid_retry`` to retry a request when"
" transient exceptions occur."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:51
msgid ""
"*Line 19*.  Include support for ``pyramid_zodbconn``, providing "
"integration between :term:`ZODB` and a Pyramid application."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:53
msgid "*Line 20*.  Set a root factory using our function named ``root_factory``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:55
msgid ""
"*Line 21*.  Register a \"static view\", which answers requests whose URL "
"paths start with ``/static``, using the "
":meth:`pyramid.config.Configurator.add_static_view` method.  This "
"statement registers a view that will serve up static assets, such as CSS "
"and image files, for us, in this case, at "
"``http://localhost:6543/static/`` and below.  The first argument is the "
"\"name\" ``static``, which indicates that the URL path prefix of the view"
" will be ``/static``.  The second argument of this tag is the \"path\", "
"which is a relative :term:`asset specification`, so it finds the "
"resources it should serve within the ``static`` directory inside the "
"``tutorial`` package.  Alternatively the cookiecutter could have used an "
"*absolute* asset specification as the path (``tutorial:static``)."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:68
msgid ""
"*Line 22*.  Perform a :term:`scan`.  A scan will find "
":term:`configuration decoration`, such as view configuration decorators "
"(e.g., ``@view_config``) in the source code of the ``tutorial`` package "
"and will take actions based on these decorators.  We don't pass any "
"arguments to :meth:`~pyramid.config.Configurator.scan`, which implies "
"that the scan should take place in the current package (in this case, "
"``tutorial``). The cookiecutter could have equivalently said "
"``config.scan('tutorial')``, but it chose to omit the package name "
"argument."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:77
msgid ""
"*Line 23*.  Use the :meth:`pyramid.config.Configurator.make_wsgi_app` "
"method to return a :term:`WSGI` application."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:82
msgid "Resources and models with ``models.py``"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:84
msgid ""
":app:`Pyramid` uses the word :term:`resource` to describe objects "
"arranged hierarchically in a :term:`resource tree`.  This tree is "
"consulted by :term:`traversal` to map URLs to code.  In this application,"
" the resource tree represents the site structure, but it *also* "
"represents the :term:`domain model` of the application, because each "
"resource is a node stored persistently in a :term:`ZODB` database.  The "
"``models.py`` file is where the ``zodb`` cookiecutter put the classes "
"that implement our resource objects, each of which also happens to be a "
"domain model object."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:93
msgid "Here is the source for ``models.py``:"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:99
msgid ""
"*Lines 4-5*.  The ``MyModel`` :term:`resource` class is implemented here."
" Instances of this class are capable of being persisted in :term:`ZODB` "
"because the class inherits from the "
":class:`persistent.mapping.PersistentMapping` class.  The ``__parent__`` "
"and ``__name__`` are important parts of the :term:`traversal` protocol. "
"By default, set these to ``None`` to indicate that this is the "
":term:`root` object."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:107
msgid ""
"*Lines 8-12*.  ``appmaker`` is used to return the *application root* "
"object.  It is called on *every request* to the :app:`Pyramid` "
"application.  It also performs bootstrapping by *creating* an application"
" root (inside the ZODB root object) if one does not already exist.  It is"
" used by the ``root_factory`` we've defined in our ``__init__.py``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:114
msgid ""
"Bootstrapping is done by first seeing if the database has the persistent "
"application root.  If not, we make an instance, store it, and commit the "
"transaction.  We then return the application root object."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:119
msgid "Views With ``views.py``"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:121
msgid ""
"Our cookiecutter generated a default ``views.py`` on our behalf.  It "
"contains a single view, which is used to render the page shown when you "
"visit the URL ``http://localhost:6543/``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:125
msgid "Here is the source for ``views.py``:"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:131
msgid "Let's try to understand the components in this module:"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:133
msgid "*Lines 1-2*. Perform some dependency imports."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:135
msgid ""
"*Line 5*.  Use the :func:`pyramid.view.view_config` :term:`configuration "
"decoration` to perform a :term:`view configuration` registration.  This "
"view configuration registration will be activated when the application is"
" started.  It will be activated by virtue of it being found as the result"
" of a :term:`scan` (when Line 14 of ``__init__.py`` is run)."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:141
msgid ""
"The ``@view_config`` decorator accepts a number of keyword arguments.  We"
" use two keyword arguments here: ``context`` and ``renderer``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:144
msgid ""
"The ``context`` argument signifies that the decorated view callable "
"should only be run when :term:`traversal` finds the "
"``tutorial.models.MyModel`` :term:`resource` to be the :term:`context` of"
" a request.  In English, this means that when the URL ``/`` is visited, "
"because ``MyModel`` is the root model, this view callable will be "
"invoked."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:150
msgid ""
"The ``renderer`` argument names an :term:`asset specification` of "
"``templates/mytemplate.pt``.  This asset specification points at a "
":term:`Chameleon` template which lives in the ``mytemplate.pt`` file "
"within the ``templates`` directory of the ``tutorial`` package.  And "
"indeed if you look in the ``templates`` directory of this package, you'll"
" see a ``mytemplate.pt`` template file, which renders the default home "
"page of the generated project.  This asset specification is *relative* "
"(to the view.py's current package).  Alternatively we could have used the"
" absolute asset specification ``tutorial:templates/mytemplate.pt``, but "
"chose to use the relative version."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:161
msgid ""
"Since this call to ``@view_config`` doesn't pass a ``name`` argument, the"
" ``my_view`` function which it decorates represents the \"default\" view "
"callable used when the context is of the type ``MyModel``."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:165
msgid ""
"*Lines 6-7*.  We define a :term:`view callable` named ``my_view``, which "
"we decorated in the step above.  This view callable is a *function* we "
"write generated by the ``zodb`` cookiecutter that is given a ``request`` "
"and which returns a dictionary.  The ``mytemplate.pt`` :term:`renderer` "
"named by the asset specification in the step above will convert this "
"dictionary to a :term:`response` on our behalf."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:172
msgid ""
"The function returns the dictionary ``{'project':'tutorial'}``.  This "
"dictionary is used by the template named by the ``mytemplate.pt`` asset "
"specification to fill in certain values on the page."
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:177
msgid "Configuration in ``development.ini``"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:179
msgid ""
"The ``development.ini`` (in the ``tutorial`` :term:`project` directory, "
"as opposed to the ``tutorial`` :term:`package` directory) looks like "
"this:"
msgstr ""

#: ../../tutorials/wiki/basiclayout.rst:185
msgid ""
"Note the existence of a ``[app:main]`` section which specifies our WSGI "
"application.  Our ZODB database settings are specified as the "
"``zodbconn.uri`` setting within this section.  This value, and the other "
"values within this section, are passed as ``**settings`` to the ``main`` "
"function we defined in ``__init__.py`` when the server is started via "
"``pserve``."
msgstr ""

