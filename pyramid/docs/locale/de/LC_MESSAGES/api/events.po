# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/events.rst:4
msgid ":mod:`pyramid.events`"
msgstr ""

#: ../../api/events.rst:9
msgid "Functions"
msgstr ""

#: of pyramid.events.subscriber:1
msgid ""
"Decorator activated via a :term:`scan` which treats the function being "
"decorated as an event subscriber for the set of interfaces passed as "
"``*ifaces`` and the set of predicate terms passed as ``**predicates`` to "
"the decorator constructor."
msgstr ""

#: of pyramid.events.subscriber:6
msgid "For example:"
msgstr ""

#: of pyramid.events.subscriber:17
msgid ""
"More than one event type can be passed as a constructor argument.  The "
"decorated subscriber will be called for each event type."
msgstr ""

#: of pyramid.events.subscriber:29
msgid ""
"When the ``subscriber`` decorator is used without passing an arguments, "
"the function it decorates is called for every event sent:"
msgstr ""

#: of pyramid.events.subscriber:40
msgid ""
"This method will have no effect until a :term:`scan` is performed against"
" the package or module which contains it, ala:"
msgstr ""

#: of pyramid.events.subscriber:49
msgid ""
"Any ``**predicate`` arguments will be passed along to "
":meth:`pyramid.config.Configurator.add_subscriber`.  See "
":ref:`subscriber_predicates` for a description of how predicates can "
"narrow the set of circumstances in which a subscriber will be called."
msgstr ""

#: of pyramid.events.subscriber:54
msgid ""
"Two additional keyword arguments which will be passed to the "
":term:`venusian` ``attach`` function are ``_depth`` and ``_category``."
msgstr ""

#: of pyramid.events.subscriber:57
msgid ""
"``_depth`` is provided for people who wish to reuse this class from "
"another decorator. The default value is ``0`` and should be specified "
"relative to the ``subscriber`` invocation. It will be passed in to the "
":term:`venusian` ``attach`` function as the depth of the callstack when "
"Venusian checks if the decorator is being used in a class or module "
"context. It's not often used, but it can be useful in this circumstance."
msgstr ""

#: of pyramid.events.subscriber:64
msgid ""
"``_category`` sets the decorator category name. It can be useful in "
"combination with the ``category`` argument of ``scan`` to control which "
"views should be processed."
msgstr ""

#: of pyramid.events.subscriber:68
msgid ""
"See the :py:func:`venusian.attach` function in Venusian for more "
"information about the ``_depth`` and ``_category`` arguments."
msgstr ""

#: of pyramid.events.subscriber:71
msgid "Added the ``_depth`` and ``_category`` arguments."
msgstr ""

#: ../../api/events.rst:16
msgid "Event Types"
msgstr ""

#: of pyramid.events.ApplicationCreated:1
msgid ""
"An instance of this class is emitted as an :term:`event` when the "
":meth:`pyramid.config.Configurator.make_wsgi_app` is called.  The "
"instance has an attribute, ``app``, which is an instance of the "
":term:`router` that will handle WSGI requests. This class implements the "
":class:`pyramid.interfaces.IApplicationCreated` interface."
msgstr ""

#: of pyramid.events.ApplicationCreated:10
msgid ""
"For backwards compatibility purposes, this class can also be imported as "
":class:`pyramid.events.WSGIApplicationCreatedEvent`.  This was the name "
"of the event class before :app:`Pyramid` 1.0."
msgstr ""

#: of pyramid.events.NewRequest:1
msgid ""
"An instance of this class is emitted as an :term:`event` whenever "
":app:`Pyramid` begins to process a new request.  The event instance has "
"an attribute, ``request``, which is a :term:`request` object.  This event"
" class implements the :class:`pyramid.interfaces.INewRequest` interface."
msgstr ""

#: of pyramid.events.ContextFound:1
msgid ""
"An instance of this class is emitted as an :term:`event` after the "
":app:`Pyramid` :term:`router` finds a :term:`context` object (after it "
"performs traversal) but before any view code is executed.  The instance "
"has an attribute, ``request``, which is the request object generated by "
":app:`Pyramid`."
msgstr ""

#: of pyramid.events.ContextFound:7
msgid ""
"Notably, the request object will have an attribute named ``context``, "
"which is the context that will be provided to the view which will "
"eventually be called, as well as other attributes attached by context-"
"finding code."
msgstr ""

#: of pyramid.events.ContextFound:12
msgid ""
"This class implements the :class:`pyramid.interfaces.IContextFound` "
"interface."
msgstr ""

#: of pyramid.events.ContextFound:17
msgid ""
"As of :app:`Pyramid` 1.0, for backwards compatibility purposes, this "
"event may also be imported as :class:`pyramid.events.AfterTraversal`."
msgstr ""

#: of pyramid.events.BeforeTraversal:1
msgid ""
"An instance of this class is emitted as an :term:`event` after the "
":app:`Pyramid` :term:`router` has attempted to find a :term:`route` "
"object but before any traversal or view code is executed. The instance "
"has an attribute, ``request``, which is the request object generated by "
":app:`Pyramid`."
msgstr ""

#: of pyramid.events.BeforeTraversal:7
msgid ""
"Notably, the request object **may** have an attribute named "
"``matched_route``, which is the matched route if found. If no route "
"matched, this attribute is not available."
msgstr ""

#: of pyramid.events.BeforeTraversal:11
msgid ""
"This class implements the :class:`pyramid.interfaces.IBeforeTraversal` "
"interface."
msgstr ""

#: of pyramid.events.NewResponse:1
msgid ""
"An instance of this class is emitted as an :term:`event` whenever any "
":app:`Pyramid` :term:`view` or :term:`exception view` returns a "
":term:`response`."
msgstr ""

#: of pyramid.events.NewResponse:5
msgid ""
"The instance has two attributes:``request``, which is the request which "
"caused the response, and ``response``, which is the response object "
"returned by a view or renderer."
msgstr ""

#: of pyramid.events.NewResponse:9
msgid ""
"If the ``response`` was generated by an :term:`exception view`, the "
"request will have an attribute named ``exception``, which is the "
"exception object which caused the exception view to be executed.  If the "
"response was generated by a 'normal' view, this attribute of the request "
"will be ``None``."
msgstr ""

#: of pyramid.events.NewResponse:15
msgid ""
"This event will not be generated if a response cannot be created due to "
"an exception that is not caught by an exception view (no response is "
"created under this circumstace)."
msgstr ""

#: of pyramid.events.NewResponse:19
msgid ""
"This class implements the :class:`pyramid.interfaces.INewResponse` "
"interface."
msgstr ""

#: of pyramid.events.NewResponse:24
msgid ""
"Postprocessing a response is usually better handled in a WSGI "
":term:`middleware` component than in subscriber code that is called by a "
":class:`pyramid.interfaces.INewResponse` event. The "
":class:`pyramid.interfaces.INewResponse` event exists almost purely for "
"symmetry with the :class:`pyramid.interfaces.INewRequest` event."
msgstr ""

#: of pyramid.events.BeforeRender:1
msgid ""
"Subscribers to this event may introspect and modify the set of "
":term:`renderer globals` before they are passed to a :term:`renderer`. "
"This event object iself has a dictionary-like interface that can be used "
"for this purpose.  For example::"
msgstr ""

#: of pyramid.events.BeforeRender:13
msgid ""
"An object of this type is sent as an event just before a :term:`renderer`"
" is invoked."
msgstr ""

#: of pyramid.events.BeforeRender:16
msgid ""
"If a subscriber adds a key via ``__setitem__`` that already exists in the"
" renderer globals dictionary, it will overwrite the older value there. "
"This can be problematic because event subscribers to the BeforeRender "
"event do not possess any relative ordering.  For maximum interoperability"
" with other third-party subscribers, if you write an event subscriber "
"meant to be used as a BeforeRender subscriber, your subscriber code will "
"need to ensure no value already exists in the renderer globals dictionary"
" before setting an overriding value (which can be done using ``.get`` or "
"``__contains__`` of the event object)."
msgstr ""

#: of pyramid.events.BeforeRender:26
msgid ""
"The dictionary returned from the view is accessible through the "
":attr:`rendering_val` attribute of a "
":class:`~pyramid.events.BeforeRender` event."
msgstr ""

#: of pyramid.events.BeforeRender:30
msgid ""
"Suppose you return ``{'mykey': 'somevalue', 'mykey2': 'somevalue2'}`` "
"from your view callable, like so::"
msgstr ""

#: of pyramid.events.BeforeRender:39
msgid ""
":attr:`rendering_val` can be used to access these values from the "
":class:`~pyramid.events.BeforeRender` object::"
msgstr ""

#: of pyramid.events.BeforeRender:50
msgid ""
"In other words, :attr:`rendering_val` is the (non-system) value returned "
"by a view or passed to ``render*`` as ``value``.  This feature is new in "
"Pyramid 1.2."
msgstr ""

#: of pyramid.events.BeforeRender:54
msgid ""
"For a description of the values present in the renderer globals "
"dictionary, see :ref:`renderer_system_values`."
msgstr ""

#: of pyramid.events.BeforeRender:59
msgid "See also :class:`pyramid.interfaces.IBeforeRender`."
msgstr ""

#: ../../api/events.rst:35
msgid ""
"Update D from dict/iterable E and F. If E has a .keys() method, does: for"
" k in E: D[k] = E[k] If E lacks .keys() method, does: for (k, v) in E: "
"D[k] = v.  In either case, this is followed by: for k in F: D[k] = F[k]."
msgstr ""

#: of pyramid.events.BeforeRender.fromkeys:1
msgid "Returns a new dict with keys from iterable and values equal to value."
msgstr ""

#: of pyramid.events.BeforeRender.pop:1
msgid "If key is not found, d is returned if given, otherwise KeyError is raised"
msgstr ""

#: of pyramid.events.BeforeRender.popitem:1
msgid "2-tuple; but raise KeyError if D is empty."
msgstr ""

#: ../../api/events.rst:40
msgid ""
"See :ref:`events_chapter` for more information about how to register code"
" which subscribes to these events."
msgstr ""

