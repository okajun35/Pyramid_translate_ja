# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../quick_tour.rst:6
msgid "Quick Tour of Pyramid"
msgstr "(機械翻訳)ピラミッドのクイックツアー"

#: ../../quick_tour.rst:8
msgid ""
"Pyramid lets you start small and finish big.  This *Quick Tour* of "
"Pyramid is for those who want to evaluate Pyramid, whether you are new to"
" Python web frameworks, or a pro in a hurry. For more detailed treatment "
"of each topic, give the :ref:`quick_tutorial` a try."
msgstr "ピラミッドは小さなものから始まり大きなものに仕上げます。 Pyramidのこのクイックツアー*は、あなたがPython Webフレームワークの初心者であろうと、急いでプロであろうと、Pyramidを評価したい人のためのものです。各トピックの詳細な扱いについては、：ref： `quick_tutorial`を試してみてください。"

#: ../../quick_tour.rst:13
msgid ""
"If you would prefer to cut and paste the example code in this tour you "
"may browse the source code located in the `Pyramid repository in the "
"directory \"docs/quick_tour\" <https://github.com/Pylons/pyramid/>`. If "
"you have downloaded the source code, you will find the tour in the same "
"location."
msgstr "このツアーでサンプルコードをカットアンドペーストしたい場合は、\ &quot;docs / quick_tour \&quot;ディレクトリのPyramidリポジトリにあるソースコードを参照してください。 <https://github.com/Pylons/pyramid/> `。ソースコードをダウンロードした場合は、同じ場所にツアーがあります。"

#: ../../quick_tour.rst:16
msgid "Installation"
msgstr "インストール"

#: ../../quick_tour.rst:18
msgid ""
"Once you have a standard Python environment setup, getting started with "
"Pyramid is a breeze. Unfortunately \"standard\" is not so simple in "
"Python. For this Quick Tour, it means `Python "
"<https://www.python.org/downloads/>`_, `venv "
"<https://packaging.python.org/en/latest/projects/#venv>`_ (or `virtualenv"
" for Python 2.7 "
"<https://packaging.python.org/en/latest/projects/#virtualenv>`_), `pip "
"<https://packaging.python.org/en/latest/projects/#pip>`_, and `setuptools"
" <https://packaging.python.org/en/latest/projects/#easy-install>`_."
msgstr "標準のPython環境設定を済ませたら、Pyramidを使い始めるのは簡単です。残念ながら\ &quot;標準\&quot;はPythonではそれほど単純ではありません。このクイックツアーでは、Python <https://www.python.org/downloads/> `_、` venv <https://packaging.python.org/en/latest/projects/#venv> `_（または` `Python 2.7用のvirtualenv <https://packaging.python.org/en/latest/projects/#virtualenv> `_）、` pip <https://packaging.python.org/en/latest/projects/#pip> `_、`と `setuptools <https://packaging.python.org/en/latest/projects/#easy-install> `_。"

#: ../../quick_tour.rst:26
msgid ""
"To save a little bit of typing and to be certain that we use the modules,"
" scripts, and packages installed in our virtual environment, we'll set an"
" environment variable, too."
msgstr "ちょっとしたタイピングを省き、仮想環境にインストールされたモジュール、スクリプト、パッケージを確実に使用するために、環境変数も設定します。"

#: ../../quick_tour.rst:30
msgid "As an example, for Python 3.6+ on Linux:"
msgstr "たとえば、LinuxのPython 3.6以降では、次のようになります。"

#: ../../quick_tour.rst:43
msgid "For Windows:"
msgstr "Windowsの場合："

#: ../../quick_tour.rst:56
msgid ""
"Of course Pyramid runs fine on Python 2.7+, as do the examples in this "
"*Quick Tour*. We're showing Python 3 for simplicity. (Pyramid had "
"production support for Python 3 in October 2011.) Also for simplicity, "
"the remaining examples will show only UNIX commands."
msgstr "もちろん、PyramidはPython 2.7以降でうまく動作します。このクイックツアーの例もそうです。簡単にするためにPython 3を公開しています。 Pyramidは2011年10月にPython 3をサポートしていました。簡単にするために、残りの例ではUNIXコマンドのみを表示します。"

#: ../../quick_tour.rst:61
msgid ""
"See also: :ref:`Quick Tutorial section on Requirements "
"<qtut_requirements>`, :ref:`installing_unix`, :ref:`Before You Install "
"<installing_chapter>`, :ref:`Why use $VENV/bin/pip instead of source "
"bin/activate, then pip <venv-bin-pip-vs-source-bin-activate>`, and "
":ref:`Installing Pyramid on a Windows System <installing_windows>`."
msgstr "参照：：ref： `クイックチュートリアルセクションの要件<qtut_requirements> `、：ref：` installing_unix`、：ref： `あなたがインストールする前に<installing_chapter> `、：ref：`ソースbin / activateの代わりに$ VENV / bin / pipを使用してからpip <venv-bin-pip-vs-source-bin-activate> `、および：ref：` WindowsシステムへのPyramidのインストール<installing_windows> `。"

#: ../../quick_tour.rst:70
msgid "Hello World"
msgstr "こんにちは世界"

#: ../../quick_tour.rst:72
msgid ""
"Microframeworks have shown that learning starts best from a very small "
"first step. Here's a tiny application in Pyramid:"
msgstr "Microframeworksは、学習が非常に小さな第一歩から最も効果的に始まることを示しています。 Pyramidには小さなアプリケーションがあります："

#: ../../quick_tour.rst:79
msgid "This simple example is easy to run. Save this as ``app.py`` and run it:"
msgstr "この簡単な例は簡単に実行できます。これを `` app.py``として保存し、それを実行してください："

#: ../../quick_tour.rst:85
msgid ""
"Next open http://localhost:6543/ in a browser, and you will see the "
"``Hello World!`` message."
msgstr "次にhttp：// localhost：6543 /をブラウザで開き、 `` Hello World！ ``というメッセージが表示されます。"

#: ../../quick_tour.rst:88
msgid ""
"New to Python web programming? If so, some lines in the module merit "
"explanation:"
msgstr "Python Webプログラミングの新機能？そうであれば、モジュール内のいくつかの行に説明があります："

#: ../../quick_tour.rst:91
msgid ""
"*Line 10*. ``if __name__ == '__main__':`` is Python's way of saying "
"\"Start here when running from the command line\"."
msgstr "* 10行目。 ``もし__name__ == &#39;__main __&#39;： ``はPythonが\ &quot;コマンドラインから実行するときにここから開始する\&quot;と言っているのです。"

#: ../../quick_tour.rst:94
msgid ""
"*Lines 11-13*. Use Pyramid's :term:`configurator` in a :term:`context "
"manager` to connect :term:`view` code to a particular URL :term:`route`."
msgstr "* 11-13行目。 Pyramidの：term： `configurator`をa：term：` context manager`で使用して：term： `view`コードを特定のURL：term：` route`に接続します。"

#: ../../quick_tour.rst:97
msgid "*Lines 6-7*. Implement the view code that generates the :term:`response`."
msgstr "*ライン6-7 *。 ：term： `response`を生成するビューコードを実装します。"

#: ../../quick_tour.rst:99
msgid "*Lines 14-16*. Publish a :term:`WSGI` app using an HTTP server."
msgstr "* 14〜16行目*。 HTTPサーバを使ってa：term： `WSGI`アプリを公開します。"

#: ../../quick_tour.rst:101
msgid ""
"As shown in this example, the :term:`configurator` plays a central role "
"in Pyramid development. Building an application from loosely-coupled "
"parts via :doc:`../narr/configuration` is a central idea in Pyramid, one "
"that we will revisit regurlarly in this *Quick Tour*."
msgstr "この例に示すように、：term： `configurator`はピラミッドの開発において中心的な役割を果たします。 doc： `../ narr / configuration`を介して疎結合部分からアプリケーションをビルドすることはピラミッドの中心的なアイデアです。このクイックツアーでは定期的に再考する予定です。"

#: ../../quick_tour.rst:106
msgid ""
"See also: :ref:`Quick Tutorial Hello World <qtut_hello_world>`, "
":ref:`firstapp_chapter`, and :ref:`Todo List Application in One File "
"<cookbook:single-file-tutorial>`."
msgstr "参照：：ref： `クイックチュートリアルHello World <qtut_hello_world> `、：ref：` firstapp_chapter`、：ref： `1つのファイル内のTodoリストアプリケーション<cookbook:single-file-tutorial> `。"

#: ../../quick_tour.rst:113
msgid "Handling web requests and responses"
msgstr "Webリクエストとレスポンスの処理"

#: ../../quick_tour.rst:115
msgid ""
"Developing for the web means processing web requests. As this is a "
"critical part of a web application, web developers need a robust, mature "
"set of software for web requests."
msgstr "Web用に開発するとは、Web要求を処理することを意味します。これはWebアプリケーションの重要な部分であるため、Web開発者はWeb要求のための堅牢で成熟したソフトウェアを必要とします。"

#: ../../quick_tour.rst:119
msgid ""
"Pyramid has always fit nicely into the existing world of Python web "
"development (virtual environments, packaging, cookiecutters, one of the "
"first to embrace Python 3, etc.). Pyramid turned to the well-regarded "
":term:`WebOb` Python library for request and response handling. In our "
"example above, Pyramid hands ``hello_world`` a ``request`` that is "
":ref:`based on WebOb <webob_chapter>`."
msgstr "Pyramidは、Python Web開発の既存の世界（仮想環境、パッケージ、cookiecutters、Python 3を最初に採用したものの1つなど）に常にうまく収まっています。ピラミッドは要求と応答の処理のためによく使われる：term： `WebOb` Pythonライブラリに目を向けました。上の例では、ピラミッドは `` hello_world``を `` request``と呼んでいます：ref： `WebOb <webob_chapter> `。"

#: ../../quick_tour.rst:125
msgid "Let's see some features of requests and responses in action:"
msgstr "実際に要求と応答のいくつかの機能を見てみましょう："

#: ../../quick_tour.rst:131
msgid ""
"In this Pyramid view, we get the URL being visited from ``request.url``. "
"Also if you visited http://localhost:6543/?name=alice in a browser, the "
"name is included in the body of the response:"
msgstr "このピラミッドビューでは、 `` request.url``からURLを取得します。また、ブラウザでhttp：// localhost：6543 /？name = aliceにアクセスした場合、その名前はレスポンスの本文に含まれます："

#: ../../quick_tour.rst:139
msgid "Finally we set the response's content type, and return the Response."
msgstr "最後に、レスポンスのコンテンツタイプを設定し、レスポンスを返します。"

#: ../../quick_tour.rst:141
msgid ""
"See also: :ref:`Quick Tutorial Request and Response "
"<qtut_request_response>` and :ref:`webob_chapter`."
msgstr "参照：：ref： `クイックチュートリアルリクエストとレスポンス<qtut_request_response> `と：ref：` webob_chapter`です。"

#: ../../quick_tour.rst:147
msgid "Views"
msgstr "ビュー"

#: ../../quick_tour.rst:149
msgid ""
"For the examples above, the ``hello_world`` function is a \"view\". In "
"Pyramid views are the primary way to accept web requests and return "
"responses."
msgstr "上の例では、 `` hello_world``関数は\ &quot;view \&quot;です。ピラミッドビューでは、Web要求を受け入れて応答を返す主要な方法があります。"

#: ../../quick_tour.rst:152
msgid "So far our examples place everything in one file:"
msgstr "これまでの例では、すべてを1つのファイルに格納しています。"

#: ../../quick_tour.rst:154
msgid "the view function"
msgstr "ビュー関数"

#: ../../quick_tour.rst:156
msgid "its registration with the configurator"
msgstr "コンフィギュレータへの登録"

#: ../../quick_tour.rst:158
msgid "the route to map it to an URL"
msgstr "それをURLにマップするルート"

#: ../../quick_tour.rst:160
msgid "the WSGI application launcher"
msgstr "WSGIアプリケーションランチャ"

#: ../../quick_tour.rst:162
msgid ""
"Let's move the views out to their own ``views.py`` module and change the "
"``app.py`` to scan that module, looking for decorators that set up the "
"views."
msgstr "ビューを独自の `` views.py``モジュールに移動し、 `` app.py``を変更してそのモジュールをスキャンし、ビューを設定するデコレータを探しましょう。"

#: ../../quick_tour.rst:165
msgid "First our revised ``app.py``:"
msgstr "最初に改訂された `` app.py``："

#: ../../quick_tour.rst:171
msgid ""
"We added some more routes, but we also removed the view code. Our views "
"and their registrations (via decorators) are now in a module "
"``views.py``, which is scanned via ``config.scan('views')``."
msgstr "ルートを追加しましたが、ビューコードも削除しました。ビューとその登録（デコレータ経由）は `` views.py``モジュールにあり、 `` config.scan（ &#39;views&#39;） ``でスキャンされます。"

#: ../../quick_tour.rst:175
msgid ""
"We now have a ``views.py`` module that is focused on handling requests "
"and responses:"
msgstr "要求と応答の処理に焦点を当てた `` views.py``モジュールが追加されました："

#: ../../quick_tour.rst:182
msgid ""
"We have four views, each leading to the other. If you start at "
"http://localhost:6543/, you get a response with a link to the next view. "
"The ``hello_view`` (available at the URL ``/howdy``) has a link to the "
"``redirect_view``, which issues a redirect to the final view."
msgstr "我々は4つの視点を持ち、それぞれが別の視点につながっています。 http：// localhost：6543 /で始めると、次のビューへのリンクを含む応答が得られます。 `` hello_view``（URL `` / howdy``にあります）は `` redirect_view``へのリンクを持ち、最終的なビューにリダイレクトします。"

#: ../../quick_tour.rst:187
msgid ""
"Earlier we saw ``config.add_view`` as one way to configure a view. This "
"section introduces ``@view_config``. Pyramid's configuration supports "
":term:`imperative configuration`, such as the ``config.add_view`` in the "
"previous example. You can also use :term:`declarative configuration` in "
"which a Python :term:`decorator` is placed on the line above the view. "
"Both approaches result in the same final configuration, thus usually it "
"is simply a matter of taste."
msgstr "以前は、 `` config.add_view``がビューを設定する一つの方法として見えました。このセクションでは、 `` @ view_config``について説明します。 Pyramidの設定は、前の例の `` config.add_view``のように、term： `必須の設定`をサポートしています。 Python：term： `decorator`がビューの上の行に置かれている：term：`宣言的な設定 &#39;を使うこともできます。どちらの方法も同じ最終的な構成になります。したがって、通常は単に味の問題です。"

#: ../../quick_tour.rst:194
msgid ""
"See also: :ref:`Quick Tutorial Views <qtut_views>`, :doc:`../narr/views`,"
" :doc:`../narr/viewconfig`, and :ref:`debugging_view_configuration`."
msgstr "参照：：ref： `クイックチュートリアルビュー<qtut_views> `、：doc：` ../ narr / views`、：doc： `../ narr / viewconfig`、および：ref：` debugging_view_configuration`です。"

#: ../../quick_tour.rst:200
msgid "Routing"
msgstr "ルーティング"

#: ../../quick_tour.rst:202
msgid ""
"Writing web applications usually means sophisticated URL design. We just "
"saw some Pyramid machinery for requests and views. Let's look at features"
" that help with routing."
msgstr "Webアプリケーションの作成は、通常、洗練されたURL設計を意味します。私たちは要求と見解のためにいくつかのピラミッド機械を見ただけです。ルーティングに役立つ機能を見てみましょう。"

#: ../../quick_tour.rst:206
msgid "Above we saw the basics of routing URLs to views in Pyramid:"
msgstr "上では、PyramidのビューへのURLのルーティングの基本を確認しました。"

#: ../../quick_tour.rst:208
msgid ""
"Your project's \"setup\" code registers a route name to be used when "
"matching part of the URL."
msgstr "プロジェクトの\ &quot;setup \&quot;コードは、URLの一部と一致するときに使用されるルート名を登録します。"

#: ../../quick_tour.rst:211
msgid "Elsewhere a view is configured to be called for that route name."
msgstr "そのルート名に対してビューが呼び出されるように設定されています。"

#: ../../quick_tour.rst:215
msgid ""
"Why do this twice? Other Python web frameworks let you create a route and"
" associate it with a view in one step. As illustrated in "
":ref:`routes_need_ordering`, multiple routes might match the same URL "
"pattern. Rather than provide ways to help guess, Pyramid lets you be "
"explicit in ordering. Pyramid also gives facilities to avoid the problem."
msgstr "なぜこれを2回するのですか？他のPython Webフレームワークを使用すると、ルートを作成して1つのステップでビューに関連付けることができます。 ：ref： `routes_need_ordering`に示すように、複数のルートが同じURLパターンと一致する可能性があります。推測を支援する方法を提供するのではなく、Pyramidでは順序を明示することができます。ピラミッドは、この問題を回避するための設備も提供しています。"

#: ../../quick_tour.rst:221
msgid ""
"What if we want part of the URL to be available as data in my view? We "
"can use this route declaration, for example:"
msgstr "URLの一部をビューのデータとして利用できるようにするにはどうすればよいですか？このルート宣言は、たとえば次のように使用できます。"

#: ../../quick_tour.rst:230
msgid ""
"With this, URLs such as ``/howdy/amy/smith`` will assign ``amy`` to "
"``first`` and ``smith`` to ``last``. We can then use this data in our "
"view:"
msgstr "これにより、 `` / howdy / amy / smith`のようなURLは、 ``最初に ``に ``、 ``最後に ``スミス `に割り当てられます。このデータをビューで使用することができます。"

#: ../../quick_tour.rst:240
msgid ""
"``request.matchdict`` contains values from the URL that match the "
"\"replacement patterns\" (the curly braces) in the route declaration. "
"This information can then be used in your view."
msgstr "`` request.matchdict``には、ルート宣言の\ &quot;置換パターン\&quot;（中括弧）と一致するURLの値が含まれています。この情報は、あなたのビューで使用することができます。"

#: ../../quick_tour.rst:244
msgid ""
"See also: :ref:`Quick Tutorial Routing <qtut_routing>`, "
":doc:`../narr/urldispatch`, :ref:`debug_routematch_section`, and "
":doc:`../narr/router`."
msgstr "参照：：ref： `クイックチュートリアルルーティング<qtut_routing> `、：doc：` ../ narr / urldispatch`、：ref： `debug_routematch_section`、：doc：` ../ narr / router`です。"

#: ../../quick_tour.rst:250
msgid "Templating"
msgstr "テンプレート"

#: ../../quick_tour.rst:252
msgid ""
"Ouch. We have been making our own ``Response`` and filling the response "
"body with HTML. You usually won't embed an HTML string directly in "
"Python, but instead you will use a templating language."
msgstr "ああ。私たちは独自の ``レスポンス ``を作り、レスポンスボディにHTMLを埋めました。通常、PythonではHTML文字列を直接埋め込むことはありませんが、代わりにテンプレート言語を使用します。"

#: ../../quick_tour.rst:256
msgid ""
"Pyramid doesn't mandate a particular database system, form library, and "
"so on. It encourages replaceability. This applies equally to templating, "
"which is fortunate: developers have strong views about template "
"languages. That said, the Pylons Project officially supports bindings for"
" Chameleon, Jinja2, and Mako. In this step let's use Chameleon."
msgstr "Pyramidは、特定のデータベースシステム、フォームライブラリなどを強制するものではありません。それは交換可能性を奨励します。これは幸運なことにテンプレートにも当てはまります。開発者はテンプレート言語についての強い見解を持っています。つまり、Pylonsプロジェクトは、Chameleon、Jinja2、Makoのバインドを正式にサポートしています。このステップでは、カメレオンを使いましょう。"

#: ../../quick_tour.rst:262
msgid ""
"Let's add ``pyramid_chameleon``, a Pyramid :term:`add-on` which enables "
"Chameleon as a :term:`renderer` in our Pyramid application:"
msgstr "私たちのPyramidアプリケーションで、カメレオンを：term： `renderer &#39;として有効にするPyramid：term：` add-on`という `` pyramid_chameleon``を追加しましょう："

#: ../../quick_tour.rst:269
msgid ""
"With the package installed, we can include the template bindings into our"
" configuration in ``app.py``:"
msgstr "パッケージがインストールされた状態で、テンプレートバインディングを設定に `` app.py``で含めることができます："

#: ../../quick_tour.rst:279
msgid "Now lets change our ``views.py`` file:"
msgstr "`` views.py``ファイルを変更しましょう："

#: ../../quick_tour.rst:286
msgid ""
"Ahh, that looks better. We have a view that is focused on Python code. "
"Our ``@view_config`` decorator specifies a :term:`renderer` that points "
"to our template file. Our view then simply returns data which is then "
"supplied to our template ``hello_world.pt``:"
msgstr "ああ、それは良く見えます。私たちはPythonコードに焦点を当てています。私たちの `` @ view_config``デコレータはテンプレートファイルを指すa：term： `renderer`を指定します。私たちの見解はデータを返すだけで、テンプレート `` hello_world.pt``に与えられます："

#: ../../quick_tour.rst:294
msgid ""
"Since our view returned ``dict(name=request.matchdict['name'])``, we can "
"use ``name`` as a variable in our template via ``${name}``."
msgstr "私たちのビューは `` dict（name = request.matchdict [&#39;name&#39;]） ``を返すので、 `` $ {name} ``を介してテンプレート内の変数として `` name``を使うことができます。"

#: ../../quick_tour.rst:297
msgid ""
"See also: :ref:`Quick Tutorial Templating <qtut_templating>`, "
":doc:`../narr/templates`, :ref:`debugging_templates`, and "
":ref:`available_template_system_bindings`."
msgstr "参照：：ref： `クイックチュートリアルテンプレート<qtut_templating> `、：doc：` ../ narr / templates`、：ref： `debugging_templates`、：ref：` available_template_system_bindings`です。"

#: ../../quick_tour.rst:304
msgid "Templating with Jinja2"
msgstr "Jinja2を使ったテンプレート"

#: ../../quick_tour.rst:306
msgid ""
"We just said Pyramid doesn't prefer one templating language over another."
" Time to prove it. Jinja2 is a popular templating system, modeled after "
"Django's templates. Let's add ``pyramid_jinja2``, a Pyramid :term:`add-"
"on` which enables Jinja2 as a :term:`renderer` in our Pyramid "
"applications:"
msgstr "私たちは、ピラミッドがテンプレート言語を別のものよりも好まないと言っただけです。それを証明する時間。 Jinja2は、Djangoのテンプレートをモデルにした、人気のあるテンプレートシステムです。ピラミッドのアプリケーションでJinja2をterm： `renderer &#39;として使用できるようにするPyramid：term：` add-on`を `` pyramid_jinja2``に追加しましょう："

#: ../../quick_tour.rst:315
msgid ""
"With the package installed, we can include the template bindings into our"
" configuration:"
msgstr "パッケージがインストールされたら、テンプレートバインディングを設定に含めることができます："

#: ../../quick_tour.rst:325
msgid ""
"The only change in our view is to point the renderer at the ``.jinja2`` "
"file:"
msgstr "ビューの唯一の変更点はレンダラーを `` .jinja2``ファイルで指すことです："

#: ../../quick_tour.rst:334
msgid "Our Jinja2 template is very similar to our previous template:"
msgstr "私たちのJinja2テンプレートは、以前のテンプレートに非常に似ています："

#: ../../quick_tour.rst:339
msgid ""
"Pyramid's templating add-ons register a new kind of renderer into your "
"application. The renderer registration maps to different kinds of "
"filename extensions. In this case, changing the extension from ``.pt`` to"
" ``.jinja2`` passed the view response through the ``pyramid_jinja2`` "
"renderer."
msgstr "Pyramidのテンプレートアドオンは、新しい種類のレンダラーをアプリケーションに登録します。レンダラー登録は、さまざまな種類のファイル拡張子にマップされます。この場合、拡張子を `` .pt``から `` .jinja2``に変更すると、 `` pyramid_jinja2``レンダラを通してビュー応答が渡されます。"

#: ../../quick_tour.rst:344
msgid ""
"See also: :ref:`Quick Tutorial Jinja2 <qtut_jinja2>`, `Jinja2 homepage "
"<http://jinja.pocoo.org/>`_, and :ref:`pyramid_jinja2 Overview "
"<jinja2:overview>`."
msgstr "参照：：ref： `クイックチュートリアルJinja2 <qtut_jinja2> `、` Jinja2ホームページ<http://jinja.pocoo.org/> `_、and：ref：` pyramid_jinja2概要<jinja2:overview> `。"

#: ../../quick_tour.rst:351
msgid "Static assets"
msgstr "静的資産"

#: ../../quick_tour.rst:353
msgid ""
"Of course the Web is more than just markup. You need static assets: CSS, "
"JS, and images. Let's point our web app at a directory from which Pyramid"
" will serve some static assets. First let's make another call to the "
":term:`configurator` in ``app.py``:"
msgstr "もちろん、Webは単にマークアップ以上のものです。 CSS、JS、イメージなどの静的アセットが必要です。ピラミッドがいくつかの静的資産を提供するディレクトリにWebアプリケーションを向けてみましょう。まず、 `` app.py``の：term： `configurator`をもう一度呼び出してみましょう："

#: ../../quick_tour.rst:365
msgid ""
"This tells our WSGI application to map requests under "
"http://localhost:6543/static/ to files and directories inside a "
"``static`` directory alongside our Python module."
msgstr "これは私たちのWSGIアプリケーションに、http：// localhost：6543 / static /の下のリクエストをPythonモジュールの横にある `` static``ディレクトリ内のファイルとディレクトリにマップするように指示します。"

#: ../../quick_tour.rst:369
msgid "Next make a directory named ``static``, and place ``app.css`` inside:"
msgstr "次に `` static``という名前のディレクトリを作り、そこに `` app.css``を配置します："

#: ../../quick_tour.rst:374
msgid ""
"All we need to do now is point to it in the ``<head>`` of our Jinja2 "
"template, ``hello_world.jinja2``:"
msgstr "今私たちがする必要があるのは、 `` <head> `` Jinja2テンプレート `` hello_world.jinja2``の ``："

#: ../../quick_tour.rst:384
msgid ""
"This link presumes that our CSS is at a URL starting with ``/static/``. "
"What if the site is later moved under ``/somesite/static/``? Or perhaps a"
" web developer changes the arrangement on disk? Pyramid provides a helper"
" to allow flexibility on URL generation:"
msgstr "このリンクは、CSSが `` / static / ``で始まるURLにあると想定しています。サイトが後で `` / somesite / static / ``の下で動かされるとどうなるでしょうか？あるいは、Web開発者がディスク上の配置を変更するのでしょうか？ Pyramidには、URL生成に柔軟性を持たせるためのヘルパーが用意されています。"

#: ../../quick_tour.rst:396
msgid ""
"By using ``request.static_url`` to generate the full URL to the static "
"assets, you ensure that you stay in sync with the configuration and gain "
"refactoring flexibility later."
msgstr "`` request.static_url``を使って静的アセットへの完全なURLを生成することで、コンフィグレーションとの同期を維持し、後でリファクタリングの柔軟性を得ることができます。"

#: ../../quick_tour.rst:400
msgid ""
"See also: :ref:`Quick Tutorial Static Assets <qtut_static_assets>`, "
":doc:`../narr/assets`, :ref:`preventing_http_caching`, and "
":ref:`influencing_http_caching`."
msgstr "参照：：ref： `クイックチュートリアル静的アセット<qtut_static_assets> `、：doc：` ../ narr / assets`、：ref： `prevent_http_caching`、および：ref：` influencing_http_caching`です。"

#: ../../quick_tour.rst:407
msgid "Returning JSON"
msgstr "JSONを返す"

#: ../../quick_tour.rst:409
msgid ""
"Modern web apps are more than rendered HTML. Dynamic pages now use "
"JavaScript to update the UI in the browser by requesting server data as "
"JSON. Pyramid supports this with a JSON renderer:"
msgstr "現代のWebアプリケーションはレンダリングされたHTML以上のものです。動的ページでは、JSONとしてサーバーデータを要求することで、JavaScriptを使用してブラウザのUIを更新します。 PyramidはこれをJSONレンダラーでサポートしています："

#: ../../quick_tour.rst:419
msgid ""
"This wires up a view that returns some data through the JSON "
":term:`renderer`, which calls Python's JSON support to serialize the data"
" into JSON, and sets the appropriate HTTP headers."
msgstr "これは、PythonのJSONサポートを呼び出してJSONにデータをシリアル化し、適切なHTTPヘッダーを設定する、JSON：term： `renderer`を通していくつかのデータを返すビューを結び付けます。"

#: ../../quick_tour.rst:423
msgid ""
"We also need to add a route to ``app.py`` so that our app will know how "
"to respond to a request for ``hello.json``."
msgstr "私たちのアプリが `` hello.json``のリクエストにどのように応答するかを知るために、 `` app.py``へのルートを追加する必要もあります。"

#: ../../quick_tour.rst:433
msgid ""
"See also: :ref:`Quick Tutorial JSON <qtut_json>`, "
":ref:`views_which_use_a_renderer`, :ref:`json_renderer`, and "
":ref:`adding_and_overriding_renderers`."
msgstr "参照：：ref： `クイックチュートリアルJSON <qtut_json> `、：ref：` views_which_use_a_renderer`、：ref： `json_renderer`、：ref：` adding_and_overriding_renderers`です。"

#: ../../quick_tour.rst:439
msgid "View classes"
msgstr "ビュークラス"

#: ../../quick_tour.rst:441
msgid ""
"So far our views have been simple, free-standing functions. Many times "
"your views are related. They may have different ways to look at or work "
"on the same data, or they may be a REST API that handles multiple "
"operations. Grouping these together as a :ref:`view class "
"<class_as_view>` makes sense and achieves the following goals."
msgstr "これまでのところ、われわれの見解は単純で自由な機能であった。あなたの意見は何度も関連しています。同じデータを表示または操作する方法が異なる場合や、複数の操作を処理するREST APIの場合があります。これらをまとめて：ref： `viewクラス<class_as_view>以下の目標を達成します。"

#: ../../quick_tour.rst:447
msgid "Group views"
msgstr "グループビュー"

#: ../../quick_tour.rst:449
msgid "Centralize some repetitive defaults"
msgstr "反復的なデフォルトを一元化する"

#: ../../quick_tour.rst:451
msgid "Share some state and helpers"
msgstr "州とヘルパーを共有する"

#: ../../quick_tour.rst:453
msgid ""
"The following shows a \"Hello World\" example with three operations: view"
" a form, save a change, or press the delete button in our ``views.py``:"
msgstr "以下は、 &quot;Hello World&quot;の例です。フォームの表示、変更の保存、または `` views.py``の削除ボタンを押します："

#: ../../quick_tour.rst:462
msgid ""
"As you can see, the three views are logically grouped together. "
"Specifically:"
msgstr "ご覧のとおり、3つのビューは論理的にグループ化されています。具体的には："

#: ../../quick_tour.rst:464
msgid ""
"The first view is returned when you go to ``/howdy/amy``. This URL is "
"mapped to the ``hello`` route that we centrally set using the optional "
"``@view_defaults``."
msgstr "`` / howdy / amy``に行くと最初のビューが返されます。このURLは、オプションで `` @ view_defaults``を使って集中的に設定する `` hello``ルートにマップされています。"

#: ../../quick_tour.rst:468
msgid ""
"The second view is returned when the form data contains a field with "
"``form.edit``, such as clicking on ``<input type=\"submit\" "
"name=\"form.edit\" value=\"Save\">``. This rule is specified in the "
"``@view_config`` for that view."
msgstr "2番目のビューは、フォームデータに `` form.edit``を含むフィールドが含まれている場合に返されます。たとえば、 `` <input type=\"submit\" name=\"form.edit\" value=\"Save\"> ``。このルールは、そのビューの `` @ view_config``で指定されます。"

#: ../../quick_tour.rst:473
msgid ""
"The third view is returned when clicking on a button such as ``<input "
"type=\"submit\" name=\"form.delete\" value=\"Delete\">``."
msgstr "3番目のビューは、 `` <input type=\"submit\" name=\"form.delete\" value=\"Delete\"> ``。"

#: ../../quick_tour.rst:476
msgid ""
"Only one route is needed, stated in one place atop the view class. Also, "
"the assignment of ``name`` is done in the ``__init__`` function. Our "
"templates can then use ``{{ view.name }}``."
msgstr "1つの経路だけが必要で、ビュークラスの上の1つの場所に記載されています。また、 `` name``の代入は `` __init__``関数で行われます。私たちのテンプレートは `` {{view.name}} ``を使うことができます。"

#: ../../quick_tour.rst:480
msgid ""
"Pyramid view classes, combined with built-in and custom predicates, have "
"much more to offer:"
msgstr "ピラミッド・ビュー・クラスは、組み込みおよびカスタムの述部と組み合わされて、さらに多くの機能を提供します。"

#: ../../quick_tour.rst:483
msgid "All the same view configuration parameters as function views"
msgstr "ファンクションビューと同じビュー構成パラメータ"

#: ../../quick_tour.rst:485
msgid ""
"One route leading to multiple views, based on information in the request "
"or data such as ``request_param``, ``request_method``, ``accept``, "
"``header``, ``xhr``, ``containment``, and ``custom_predicates``"
msgstr "request_param`、 `` request_method``、 `` accept``、 `` header``、 `` xhr``、containmentなどのリクエストやデータの情報に基づいて、複数のビューにつながる1つのルート``、 `` custom_predicates``"

#: ../../quick_tour.rst:489
msgid ""
"See also: :ref:`Quick Tutorial View Classes <qtut_view_classes>`, "
":ref:`Quick Tutorial More View Classes <qtut_more_view_classes>`, and "
":ref:`class_as_view`."
msgstr "参照：：ref： `クイックチュートリアルのビュークラス<qtut_view_classes> `、：ref：`クイックチュートリアル他のビュークラス<qtut_more_view_classes> `、：ref：` class_as_view`です。"

#: ../../quick_tour.rst:496
msgid "Quick project startup with cookiecutters"
msgstr "cookiecuttersによるクイックプロジェクトの起動"

#: ../../quick_tour.rst:498
msgid ""
"So far we have done all of our *Quick Tour* as a single Python file. No "
"Python packages, no structure. Most Pyramid projects, though, aren't "
"developed this way."
msgstr "これまでのところ、* Quick Tour *のすべてを単一のPythonファイルとして実行しました。 Pythonパッケージなし、構造体なし。しかし、ほとんどのピラミッドプロジェクトはこのように開発されていません。"

#: ../../quick_tour.rst:502
msgid ""
"To ease the process of getting started, the Pylons Project provides "
":term:`cookiecutter`\\ s that generate sample Pyramid projects from "
"project templates. These cookiecutters will install Pyramid and its "
"dependencies as well."
msgstr "開始プロセスを簡単にするために、Pylonsプロジェクトは次のものを提供しています。プロジェクトテンプレートからサンプルPyramidプロジェクトを生成するterm： `cookiecutter` \これらのcookiecuttersはPyramidとその依存関係もインストールします。"

#: ../../quick_tour.rst:504
msgid "First you'll need to install cookiecutter."
msgstr "まず、cookiecutterをインストールする必要があります。"

#: ../../quick_tour.rst:510
msgid ""
"Let's use the cookiecutter ``pyramid-cookiecutter-starter`` to create a "
"starter Pyramid project in the current directory, entering values at the "
"prompts as shown below for the following command."
msgstr "cookiecutterの `` pyramid-cookiecutter-starter``を使って、現在のディレクトリにピラミッドプロジェクトを作成し、次のコマンドのためにプロンプ​​トに値を入力してみましょう。"

#: ../../quick_tour.rst:516 ../../quick_tour.rst:864
msgid ""
"If prompted for the first item, accept the default ``yes`` by hitting "
"return."
msgstr "最初の項目の入力を求められたら、returnキーを押してデフォルトの `` yes``を受け入れます。"

#: ../../quick_tour.rst:530
msgid "We then run through the following commands."
msgstr "次に、次のコマンドを実行します。"

#: ../../quick_tour.rst:545
msgid ""
"We are moving in the direction of a full-featured Pyramid project, with a"
" proper setup for Python standards (packaging) and Pyramid configuration."
" This includes a new way of running your application:"
msgstr "Pythonの標準（パッケージング）とPyramidの設定を適切にセットアップして、完全機能を備えたPyramidプロジェクトの方向に向かっています。これには、アプリケーションを実行するための新しい方法が含まれます。"

#: ../../quick_tour.rst:553
msgid "Let's look at ``pserve`` and configuration in more depth."
msgstr "`` pserve``と設定をもっと深く見てみましょう。"

#: ../../quick_tour.rst:555
msgid ""
"See also: :ref:`Quick Tutorial Cookiecutters <qtut_cookiecutters>`, "
":ref:`project_narr`, and :doc:`../narr/cookiecutters`"
msgstr "参照：：ref： `クイックチュートリアルCookiecutters <qtut_cookiecutters> `、：ref：` project_narr`、：doc： `../ narr / cookiecutters`です。"

#: ../../quick_tour.rst:561
msgid "Application running with ``pserve``"
msgstr "`` pserve``で動作するアプリケーション"

#: ../../quick_tour.rst:563
msgid ""
"Prior to the cookiecutter, our project mixed a number of operational "
"details into our code. Why should my main code care which HTTP server I "
"want and what port number to run on?"
msgstr "cookiecutterに入る前に、私たちのプロジェクトでは、いくつかの操作の詳細がコードに混在していました。なぜ私のメインコードは、私が欲しいHTTPサーバーと、実行するポート番号を気にする必要がありますか？"

#: ../../quick_tour.rst:567
msgid ""
"``pserve`` is Pyramid's application runner, separating operational "
"details from your code. When you install Pyramid, a small command program"
" called ``pserve`` is written to your ``bin`` directory. This program is "
"an executable Python module. It's very small, getting most of its brains "
"via import."
msgstr "`` pserve``はPyramidのアプリケーションランナーで、コードから操作の詳細を分離します。 Pyramidをインストールすると、 `` pserve``という小さなコマンドプログラムがあなたの `` bin``ディレクトリに書き出されます。このプログラムは実行可能なPythonモジュールです。それは非常に小さく、ほとんどの脳をインポートによって取得します。"

#: ../../quick_tour.rst:572
msgid ""
"You can run ``pserve`` with ``--help`` to see some of its options. Doing "
"so reveals that you can ask ``pserve`` to watch your development files "
"and reload the server when they change:"
msgstr "`` --help``で `` pserve``を実行すると、そのオプションのいくつかを見ることができます。そうすることで、 `` pserve``にあなたの開発ファイルを見て、変更時にサーバをリロードするように要求することができます："

#: ../../quick_tour.rst:580
msgid ""
"The ``pserve`` command has a number of other options and operations. Most"
" of the work, though, comes from your project's wiring, as expressed in "
"the configuration file you supply to ``pserve``. Let's take a look at "
"this configuration file."
msgstr "`` pserve``コマンドには他の多くのオプションと操作があります。しかし、ほとんどの作業は、あなたが `` pserve``に提供する設定ファイルで表現されているように、プロジェクトの配線から来ています。この設定ファイルを見てみましょう。"

#: ../../quick_tour.rst:585
msgid "See also: :ref:`what_is_this_pserve_thing`"
msgstr "参照：：ref： `what_is_this_pserve_thing`"

#: ../../quick_tour.rst:589
msgid "Configuration with ``.ini`` files"
msgstr "`` .ini``ファイルによる設定"

#: ../../quick_tour.rst:591
msgid ""
"Earlier in *Quick Tour* we first met Pyramid's configuration system. At "
"that point we did all configuration in Python code. For example, the port"
" number chosen for our HTTP server was right there in Python code. Our "
"cookiecutter has moved this decision and more into the "
"``development.ini`` file:"
msgstr "*クイックツアー*では、Pyramidの設定システムに初めて触れました。その時点で、私たちはすべての設定をPythonコードで行いました。たとえば、私たちのHTTPサーバー用に選択されたポート番号は、Pythonコードのところにありました。私たちのcookiecutterはこの決定を `` development.ini``ファイルに移しました："

#: ../../quick_tour.rst:599
msgid ""
"Let's take a quick high-level look. First the ``.ini`` file is divided "
"into sections:"
msgstr "すばやく高レベルの外観を取ってみましょう。最初に `` .ini``ファイルはセクションに分割されます："

#: ../../quick_tour.rst:602
msgid "``[app:main]`` configures our WSGI app"
msgstr "`` [app：main] ``はWSGIアプリケーションを設定します"

#: ../../quick_tour.rst:604
msgid "``[server:main]`` holds our WSGI server settings"
msgstr "`` [server：main] ``はWSGIサーバー設定を保持しています"

#: ../../quick_tour.rst:606
msgid "Various sections afterwards configure our Python logging system"
msgstr "その後のさまざまなセクションで、Pythonロギングシステムを設定します"

#: ../../quick_tour.rst:608
msgid "We have a few decisions made for us in this configuration:"
msgstr "この構成では、いくつかの決定事項があります。"

#: ../../quick_tour.rst:610
msgid ""
"*WSGI app:* What package has our WSGI application in it? ``use = "
"egg:hello_world`` in the app section tells the configuration what "
"application to load."
msgstr "* WSGIアプリケーション：* WSGIアプリケーションにはどのようなパッケージが含まれていますか？ appセクションの `` use = egg：hello_world``はどのアプリケーションを読み込むか設定します。"

#: ../../quick_tour.rst:614
msgid ""
"*Easier development by automatic template reloading:* In development "
"mode, you shouldn't have to restart the server when editing a Jinja2 "
"template. ``pyramid.reload_templates = true`` sets this policy, which "
"might be different in production."
msgstr "*自動テンプレートリロードによる簡単な開発：*開発モードでは、Jinja2テンプレートを編集するときにサーバーを再起動する必要はありません。 `` pyramid.reload_templates = true``はこのポリシーを設定します。これは本番環境では異なる場合があります。"

#: ../../quick_tour.rst:619
msgid ""
"*Choice of web server:* ``use = egg:waitress#main`` tells ``pserve`` to "
"use the ``waitress`` server."
msgstr "*ウェブサーバーの選択：* `` use = egg：waitress＃main``は `` pserve``に `` waitress``サーバーを使用するよう指示します。"

#: ../../quick_tour.rst:622
msgid ""
"*Interfaces:* ``listen = localhost:6543`` tells ``waitress`` to listen on"
" all interfaces on port 6543 for both IPv4 and IPv6."
msgstr "*インタフェース：* `` listen = localhost：6543``は、IPv4とIPv6の両方についてポート6543上のすべてのインタフェースを待ち受けるように `` waitress``を指示します。"

#: ../../quick_tour.rst:624
msgid ""
"Additionally the ``development.ini`` generated by this cookiecutter wired"
" up Python's standard logging. We'll now see in the console, for example,"
" a log on every request that comes in, as well as traceback information."
msgstr "さらに、このcookiecutterによって生成された `` development.ini``は、Pythonの標準ロギングをビルドしました。ここでは、コンソールに、たとえば、トレースバック情報だけでなく、来るすべてのリクエストのログが表示されます。"

#: ../../quick_tour.rst:628
msgid ""
"See also: :ref:`Quick Tutorial Application Configuration <qtut_ini>`, "
":ref:`environment_chapter` and :doc:`../narr/paste`"
msgstr "参照：：ref： `クイックチュートリアルアプリケーションの設定<qtut_ini> `、：ref：` environment_chapter`と：doc： `../ narr / paste`"

#: ../../quick_tour.rst:635
msgid "Easier development with ``debugtoolbar``"
msgstr "`` debugtoolbar``による簡単な開発"

#: ../../quick_tour.rst:637
msgid ""
"As we introduce the basics, we also want to show how to be productive in "
"development and debugging. For example, we just discussed template "
"reloading and earlier we showed ``--reload`` for application reloading."
msgstr "基本を紹介しながら、開発とデバッグの生産性を上げる方法も示したいと考えています。たとえば、テンプレートのリロードについて説明したところで、アプリケーションリロードのために `` --reload``を前に示しました。"

#: ../../quick_tour.rst:641
msgid ""
"``pyramid_debugtoolbar`` is a popular Pyramid add-on which makes several "
"tools available in your browser. Adding it to your project illustrates "
"several points about configuration."
msgstr "`` pyramid_debugtoolbar``は、あなたのブラウザでいくつかのツールを利用できる人気のPyramidアドオンです。プロジェクトに追加すると、構成に関するいくつかの点が示されます。"

#: ../../quick_tour.rst:645
msgid ""
"The cookiecutter ``pyramid-cookiecutter-starter`` already configured our "
"package to include the add-on ``pyramid_debugtoolbar`` in its "
"``setup.py``:"
msgstr "cookiecutter `` pyramid-cookiecutter-starter``は `` setup.py``にアドオン `` pyramid_debugtoolbar``を追加するようにパッケージを設定しています："

#: ../../quick_tour.rst:654
msgid "It was installed when you previously ran:"
msgstr "以前に実行したときにインストールされました："

#: ../../quick_tour.rst:660
msgid ""
"The ``pyramid_debugtoolbar`` package is a Pyramid add-on, which means we "
"need to include its configuration into our web application. The "
"cookiecutter already took care of this for us in its ``development.ini`` "
"using the ``pyramid.includes`` facility:"
msgstr "`` pyramid_debugtoolbar``パッケージはPyramidアドオンです。つまり、その設定をWebアプリケーションに含める必要があります。 cookiecutterは、 `` pyramid.includes``ファシリティを使って `` development.ini``で既にこれを世話してくれました："

#: ../../quick_tour.rst:668
msgid ""
"You'll now see a Pyramid logo on the right side of your browser window, "
"which when clicked opens a new window that provides introspective access "
"to debugging information. Even better, if your web application generates "
"an error, you will see a nice traceback on the screen. When you want to "
"disable this toolbar, there's no need to change code: you can remove it "
"from ``pyramid.includes`` in the relevant ``.ini`` configuration file."
msgstr "ブラウザウィンドウの右側にピラミッドのロゴが表示されます。クリックすると、デバッグ情報への内密アクセスを可能にする新しいウィンドウが開きます。さらに、Webアプリケーションでエラーが発生した場合は、画面に素晴らしいトレースバックが表示されます。このツールバーを無効にしたい場合は、コードを変更する必要はありません。関連する `` .ini``設定ファイルの `` pyramid.includes``から削除することができます。"

#: ../../quick_tour.rst:675
msgid ""
"See also: :ref:`Quick Tutorial pyramid_debugtoolbar <qtut_debugtoolbar>` "
"and :ref:`pyramid_debugtoolbar <toolbar:overview>`"
msgstr "参照：：ref： `クイックチュートリアルpyramid_debugtoolbar <qtut_debugtoolbar> `と：ref：` pyramid_debugtoolbar <toolbar:overview> `"

#: ../../quick_tour.rst:680
msgid "Unit tests and ``py.test``"
msgstr "ユニットテストと `` py.test``"

#: ../../quick_tour.rst:682
msgid ""
"Yikes! We got this far and we haven't yet discussed tests. This is "
"particularly egregious, as Pyramid has had a deep commitment to full test"
" coverage since before its release."
msgstr "Yikes！私たちはこれを遠くに持っており、まだテストについて議論していません。これは、Pyramidがリリース前から完全なテストカバレッジに深いコミットメントを持っているため、特に厳しいです。"

#: ../../quick_tour.rst:686
msgid ""
"Our ``pyramid-cookiecutter-starter`` cookiecutter generated a "
"``tests.py`` module with one unit test and one functional test in it. It "
"also configured ``setup.py`` with test requirements: ``py.test`` as the "
"test runner, ``WebTest`` for running view tests, and the ``pytest-cov`` "
"tool which yells at us for code that isn't tested:"
msgstr "我々の `` pyramid-cookiecutter-starter`` cookiecutterは、ユニットテストと機能テストを1つずつ持つ `` tests.py``モジュールを生成しました。また、テストランナーとして `` py.test``、ビューテストを実行するための `` WebTest``、私たちに叫ぶ `` pytest-cov``ツールといったテスト要件を持つ `` setup.py``を設定しましたテストされていないコードの場合："

#: ../../quick_tour.rst:701
msgid ""
"We already installed the test requirements when we ran the command "
"``$VENV/bin/pip install -e \".[testing]\"``. We can now run all our "
"tests:"
msgstr "`` $ VENV / bin / pip install -e \ &quot;コマンドを実行したときにテスト要件をインストールしました。[testing] \&quot; ``。これですべてのテストを実行できます："

#: ../../quick_tour.rst:707
msgid "This yields the following output."
msgstr "これにより、次の出力が得られます。"

#: ../../quick_tour.rst:730
msgid ""
"Our tests passed, and its coverage is complete. What did our test look "
"like?"
msgstr "私たちのテストは合格し、その適用範囲は完全です。私たちのテストはどのように見えましたか？"

#: ../../quick_tour.rst:736
msgid ""
"Pyramid supplies helpers for test writing, which we use in the test setup"
" and teardown. Our first test imports the view, makes a dummy request, "
"and sees if the view returns what we expected. Our second test verifies "
"that the response body from a request to the web root contains what we "
"expected."
msgstr "ピラミッドは、テストのセットアップとティアダウンで使用するテストライターのためのヘルパーを提供します。私たちの最初のテストは、ビューをインポートし、ダミーリクエストを行い、ビューが期待したものを返すかどうかを確認します。私たちの2番目のテストでは、要求からWebルートへの応答本文に、期待した内容が含まれていることが検証されています。"

#: ../../quick_tour.rst:740
msgid ""
"See also: :ref:`Quick Tutorial Unit Testing <qtut_unit_testing>`, "
":ref:`Quick Tutorial Functional Testing <qtut_functional_testing>`, and "
":ref:`testing_chapter`"
msgstr "参照：：ref： `クイックチュートリアルユニットテスト<qtut_unit_testing> `、：ref：`クイックチュートリアル機能テスト<qtut_functional_testing> `、および：ref：` testing_chapter`"

#: ../../quick_tour.rst:746
msgid "Logging"
msgstr "ロギング"

#: ../../quick_tour.rst:748
msgid ""
"It's important to know what is going on inside our web application. In "
"development we might need to collect some output. In production we might "
"need to detect situations when other people use the site. We need "
"*logging*."
msgstr "Webアプリケーション内で何が起こっているのかを知ることは重要です。開発時には、出力を収集する必要があります。プロダクションでは、他の人がサイトを使用している状況を検出する必要があります。 *ロギング*が必要です。"

#: ../../quick_tour.rst:752
msgid ""
"Fortunately Pyramid uses the normal Python approach to logging. The "
"``development.ini`` file for your project has a number of lines that "
"configure the logging for you to some reasonable defaults. You then see "
"messages sent by Pyramid (for example, when a new request comes in)."
msgstr "幸いにもPyramidは通常のPythonのロギング手法を使用しています。あなたのプロジェクトの `` development.ini``ファイルには、いくつかの合理的なデフォルト値を設定する行がいくつかあります。次に、Pyramidによって送信されたメッセージが表示されます（たとえば、新しい要求が入った場合）。"

#: ../../quick_tour.rst:756
msgid ""
"Maybe you would like to log messages in your code? In your Python module,"
" import and set up the logging in your ``views.py``:"
msgstr "あなたのコードにメッセージを記録したいのですか？あなたのPythonモジュールでは、 `` views.py``でロギングをインポートして設定します："

#: ../../quick_tour.rst:764
msgid "You can now, in your code, log messages:"
msgstr "あなたのコードでログメッセージを作成できるようになりました："

#: ../../quick_tour.rst:772
msgid ""
"This will log ``Some Message`` at a ``DEBUG`` log level to the "
"application-configured logger in your ``development.ini``. What controls "
"that? These emphasized sections in the configuration file:"
msgstr "これは `` DEBUG``ログレベルの `` Some Message``を `` development.ini``のアプリケーション設定ロガーに記録します。それを制御するのは何ですか？設定ファイルのこれらの強調されたセクション"

#: ../../quick_tour.rst:782
msgid ""
"Our application, a package named ``hello_world``, is set up as a logger "
"and configured to log messages at a ``DEBUG`` or higher level. When you "
"visit http://localhost:6543, your console will now show:"
msgstr "私たちのアプリケーション、 `` hello_world``という名前のパッケージは、ロガーとしてセットアップされ、 `` DEBUG`以上のレベルでメッセージを記録するように設定されています。 http：// localhost：6543にアクセスすると、コンソールに次のように表示されます。"

#: ../../quick_tour.rst:790
msgid ""
"See also: :ref:`Quick Tutorial Logging <qtut_logging>` and "
":ref:`logging_chapter`."
msgstr "参照：：ref： `クイックチュートリアルロギング<qtut_logging> `と：ref：` logging_chapter`です。"

#: ../../quick_tour.rst:794
msgid "Sessions"
msgstr "セッション"

#: ../../quick_tour.rst:796
msgid ""
"When people use your web application, they frequently perform a task that"
" requires semi-permanent data to be saved. For example, a shopping cart. "
"This is called a :term:`session`."
msgstr "Webアプリケーションを使用する人は、半永久的なデータを保存する必要があるタスクを頻繁に実行します。たとえば、ショッピングカートです。これは：term： `session`と呼ばれます。"

#: ../../quick_tour.rst:800
msgid ""
"Pyramid has basic built-in support for sessions. Third party packages "
"such as ``pyramid_redis_sessions`` provide richer session support. Or you"
" can create your own custom sessioning engine. Let's take a look at the "
":doc:`built-in sessioning support <../narr/sessions>`. In our "
"``__init__.py`` we first import the kind of sessioning we want:"
msgstr "Pyramidにはセッションのための基本的な組み込みサポートがあります。 `` pyramid_redis_sessions``のようなサードパーティパッケージは、より豊かなセッションサポートを提供します。または、独自のカスタムセッションエンジンを作成することもできます。 ：doc： `組込みセッションサポート&lt;../ narr / sessions&gt;`を見てみましょう。私たちの `` __init __。py``ではまず最初に必要なセッションをインポートします："

#: ../../quick_tour.rst:814
msgid ""
"As noted in the session docs, this example implementation is not intended"
" for use in settings with security implications."
msgstr "セッション文書でも指摘されているように、この実装例は、セキュリティの意味を持つ設定での使用を意図したものではありません。"

#: ../../quick_tour.rst:817
msgid ""
"Now make a \"factory\" and pass it to the :term:`configurator`'s "
"``session_factory`` argument:"
msgstr "\ &quot;factory \&quot;を作り、：term： `configurator`の` `session_factory``引数に渡してください："

#: ../../quick_tour.rst:826
msgid ""
"Pyramid's :term:`request` object now has a ``session`` attribute that we "
"can use in our view code in ``views.py``:"
msgstr "Pyramidの：term： `request`オブジェクトには、` `views.py``のビューコードで使用できる` `session``属性が追加されました："

#: ../../quick_tour.rst:835
msgid ""
"We need to update our Jinja2 template ``templates/mytemplate.jinja2`` to "
"show counter increment in the session:"
msgstr "セッションのカウンタインクリメントを表示するには、Jinja2テンプレート `` templates / mytemplate.jinja2``を更新する必要があります："

#: ../../quick_tour.rst:843
msgid ""
"See also: :ref:`Quick Tutorial Sessions <qtut_sessions>`, "
":ref:`sessions_chapter`, :ref:`flash_messages`, :ref:`session_module`, "
"and :term:`pyramid_redis_sessions`."
msgstr "参照：：ref： `クイックチュートリアルセッション<qtut_sessions> `、：ref：` sessions_chapter`、：ref： `flash_messages`、：ref：` session_module`、：term： `pyramid_redis_sessions`です。"

#: ../../quick_tour.rst:850
msgid "Databases"
msgstr "データベース"

#: ../../quick_tour.rst:852
msgid ""
"Web applications mean data. Data means databases. Frequently SQL "
"databases. SQL databases frequently mean an \"ORM\" (object-relational "
"mapper.) In Python, ORM usually leads to the mega-quality *SQLAlchemy*, a"
" Python package that greatly eases working with databases."
msgstr "Webアプリケーションとは、データを意味します。データとはデータベースを意味します。頻繁にSQLデータベース。 SQLデータベースは、しばしば\ &quot;ORM \&quot;（オブジェクト・リレーショナル・マッパー）を意味します。Pythonでは、ORMは通常、メガ・クオリティの* SQLAlchemy *をもたらします。"

#: ../../quick_tour.rst:857
msgid ""
"Pyramid and SQLAlchemy are great friends. That friendship includes a "
"cookiecutter!"
msgstr "PyramidとSQLAlchemyは素晴らしい友達です。その友情には調理師がいる！"

#: ../../quick_tour.rst:873
msgid "We then run through the following commands as before."
msgstr "その後、以下のコマンドを実行します。"

#: ../../quick_tour.rst:888
msgid ""
"We now have a working sample SQLAlchemy application with all dependencies"
" installed. The sample project provides a console script to initialize a "
"SQLite database with tables. Let's run it, then start the application:"
msgstr "すべての依存関係がインストールされたSQLAlchemyアプリケーションのサンプルが用意されました。サンプルプロジェクトは、テーブルを使用してSQLiteデータベースを初期化するためのコンソールスクリプトを提供します。それを実行してから、アプリケーションを起動してみましょう："

#: ../../quick_tour.rst:897
msgid ""
"The ORM eases the mapping of database structures into a programming "
"language. SQLAlchemy uses \"models\" for this mapping. The cookiecutter "
"generated a sample model:"
msgstr "ORMは、データベース構造のプログラミング言語へのマッピングを容易にします。 SQLAlchemyはこのマッピングに\ &quot;models \&quot;を使用します。 cookiecutterはサンプルモデルを生成しました："

#: ../../quick_tour.rst:906
msgid ""
"View code, which mediates the logic between web requests and the rest of "
"the system, can then easily get at the data thanks to SQLAlchemy:"
msgstr "Web要求とシステムの残りの間のロジックを仲介するビューコードは、SQLAlchemyのおかげでデータに簡単にアクセスできます。"

#: ../../quick_tour.rst:914
msgid ""
"See also: :ref:`Quick Tutorial Databases <qtut_databases>`, `SQLAlchemy "
"<http://www.sqlalchemy.org/>`_, :ref:`making_a_console_script`, "
":ref:`bfg_sql_wiki_tutorial`, and :ref:`Application Transactions with "
"pyramid_tm <tm:overview>`."
msgstr "参照：：ref： `クイックチュートリアルデータベース<qtut_databases> `、` SQLAlchemy <http://www.sqlalchemy.org/> `_、：ref：` making_a_console_script`、：ref： `bfg_sql_wiki_tutorial`、および：ref：` pyramid_tmによるアプリケーショントランザクション<tm:overview> `。"

#: ../../quick_tour.rst:922
msgid "Forms"
msgstr "フォーム"

#: ../../quick_tour.rst:924
msgid ""
"Developers have lots of opinions about web forms, thus there are many "
"form libraries for Python. Pyramid doesn't directly bundle a form "
"library, but *Deform* is a popular choice for forms, along with its "
"related *Colander* schema system."
msgstr "開発者はWebフォームに関する多くの意見を持っているため、Python用の多くのフォームライブラリがあります。 Pyramidはフォームライブラリを直接バンドルしませんが、* Deform *はフォームによく使われる選択肢で、関連する* Colander *スキーマシステムです。"

#: ../../quick_tour.rst:929
msgid ""
"As an example, imagine we want a form that edits a wiki page. The form "
"should have two fields on it, one of them a required title and the other "
"a rich text editor for the body. With Deform we can express this as a "
"Colander schema:"
msgstr "たとえば、wikiページを編集するフォームが必要な場合を考えてみましょう。フォームには2つのフィールドが必要です.1つは必須タイトル、もう1つは本文のリッチテキストエディタです。 Deformでは、これをColanderスキーマとして表現できます。"

#: ../../quick_tour.rst:942
msgid ""
"With this in place, we can render the HTML for a form, perhaps with form "
"data from an existing page:"
msgstr "これで、既存のページのフォームデータを使用して、フォームのHTMLをレンダリングできます。"

#: ../../quick_tour.rst:949
msgid "We'd like to handle form submission, validation, and saving:"
msgstr "フォームの提出、検証、および保存を処理したいと思います。"

#: ../../quick_tour.rst:967
msgid ""
"Deform and Colander provide a very flexible combination for forms, "
"widgets, schemas, and validation. Recent versions of Deform also include "
"a :ref:`retail mode <deform:retail>` for gaining Deform features on "
"custom forms."
msgstr "DeformとColanderは、フォーム、ウィジェット、スキーマ、および検証に非常に柔軟な組み合わせを提供します。最近のバージョンのDeformには、：ref： `小売モード<deform:retail>カスタムフォームでDeform機能を利用するためのものです。"

#: ../../quick_tour.rst:971
msgid ""
"Deform uses attractive CSS from Twitter Bootstrap and more powerful "
"select, checkbox, and date and time widgets."
msgstr "Deformは、Twitterブートストラップの魅力的なCSSと、より強力な選択、チェックボックス、日付と時刻のウィジェットを使用しています。"

#: ../../quick_tour.rst:973
msgid ""
"See also: :ref:`Quick Tutorial Forms <qtut_forms>`, :ref:`Deform "
"<deform:overview>`, and :ref:`Colander <colander:overview>`."
msgstr "参照：：ref： `クイックチュートリアルフォーム<qtut_forms> `、：ref：`変形<deform:overview> `、および：ref：` Colander <colander:overview> `。"

#: ../../quick_tour.rst:977
msgid "Conclusion"
msgstr "結論"

#: ../../quick_tour.rst:979
msgid ""
"This *Quick Tour* covered a little about a lot. We introduced a long list"
" of concepts in Pyramid, many of which are expanded on more fully in the "
"Pyramid developer docs."
msgstr "この*クイックツアー*については少し詳しく説明しました。 Pyramidの概念の長いリストを紹介しましたが、その多くはPyramidの開発者ドキュメントに詳しく説明されています。"

