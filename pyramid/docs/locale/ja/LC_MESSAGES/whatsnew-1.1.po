# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../whatsnew-1.1.rst:2
msgid "What's New in Pyramid 1.1"
msgstr "(機械翻訳)Pyramid 1.1の新機能"

#: ../../whatsnew-1.1.rst:4
msgid ""
"This article explains the new features in Pyramid version 1.1 as compared"
" to its predecessor, :app:`Pyramid` 1.0.  It also documents backwards "
"incompatibilities between the two versions and deprecations added to "
"Pyramid 1.1, as well as software dependency changes and notable "
"documentation additions."
msgstr "この記事では、Pyramidバージョン1.1の新機能について、その前身であるapp： `Pyramid` 1.0と比較して説明します。また、Pyramid 1.1に追加された2つのバージョンと廃止予定の間の後方互換性や、ソフトウェア依存の変更や著しいドキュメントの追加についても説明しています。"

#: ../../whatsnew-1.1.rst:11
msgid "Terminology Changes"
msgstr "用語の変更"

#: ../../whatsnew-1.1.rst:13
msgid ""
"The term \"template\" used by the Pyramid documentation used to refer to "
"both \"paster templates\" and \"rendered templates\" (templates created "
"by a rendering engine.  i.e. Mako, Chameleon, Jinja, etc.).  \"Paster "
"templates\" will now be referred to as \"scaffolds\", whereas the name "
"for \"rendered templates\" will remain as \"templates.\""
msgstr "ピラミッドのドキュメントで使用される &quot;テンプレート&quot;という用語は、\ &quot;パスタテンプレート\&quot;と\ &quot;レンダリングテンプレート\&quot;（レンダリングエンジンで作成されたテンプレート、つまりMako、Chameleon、Jinjaなど）の両方を指します。 \ &quot;Paster templates \&quot;は\ &quot;scaffolds \&quot;と呼ばれますが、\ &quot;rendered templates \&quot;の名前は\ &quot;テンプレート\"

#: ../../whatsnew-1.1.rst:20
msgid "Major Feature Additions"
msgstr "主な機能の追加"

#: ../../whatsnew-1.1.rst:22
msgid "The major feature additions in Pyramid 1.1 are:"
msgstr "Pyramid 1.1の主な機能の追加は次のとおりです。"

#: ../../whatsnew-1.1.rst:24
msgid "Support for the ``request.response`` attribute."
msgstr "`` request.response``属性のサポート。"

#: ../../whatsnew-1.1.rst:26
msgid "New views introspection feature: ``paster pviews``."
msgstr "新しいビューイントロスペクション機能： `` paster pviews``。"

#: ../../whatsnew-1.1.rst:28
msgid "Support for \"static\" routes."
msgstr "\ &quot;静的\&quot;ルートのサポート。"

#: ../../whatsnew-1.1.rst:30
msgid "Default HTTP exception view."
msgstr "デフォルトのHTTP例外ビュー。"

#: ../../whatsnew-1.1.rst:32
msgid ""
"``http_cache`` view configuration parameter causes Pyramid to set HTTP "
"caching headers."
msgstr "`` http_cache``表示設定パラメータは、PyramidにHTTPキャッシュヘッダを設定させます。"

#: ../../whatsnew-1.1.rst:35
msgid ""
"Features that make it easier to write scripts that work in a "
":app:`Pyramid` environment."
msgstr "：app： `Pyramid`環境で動作するスクリプトを書くのを容易にする機能。"

#: ../../whatsnew-1.1.rst:39
msgid "``request.response``"
msgstr "`` request.response``"

#: ../../whatsnew-1.1.rst:41
msgid ""
"Instances of the :class:`pyramid.request.Request` class now have a "
"``response`` attribute."
msgstr "：class： `pyramid.request.Request`クラスのインスタンスに` `response``属性が追加されました。"

#: ../../whatsnew-1.1.rst:44
msgid ""
"The object passed to a view callable as ``request`` is an instance of "
":class:`pyramid.request.Request`. ``request.response`` is an instance of "
"the class :class:`pyramid.response.Response`.  View callables that are "
"configured with a :term:`renderer` will return this response object to "
"the Pyramid router.  Therefore, code in a renderer-using view callable "
"can set response attributes such as ``request.response.content_type`` "
"(before they return, e.g. a dictionary to the renderer) and this will "
"influence the HTTP return value of the view callable."
msgstr "`` request``としてコール可能なビューに渡されるオブジェクトは、class： `pyramid.request.Request`のインスタンスです。 `` request.response``はクラスのインスタンスです：class： `pyramid.response.Response`。 ：term： `renderer`で設定された呼び出し可能な呼び出しを表示すると、この応答オブジェクトがPyramidルータに返されます。したがって、レンダラを使用するビュー呼び出し可能コードでは、 `` request.response.content_type``（返される前、レンダラに辞書など）のようなレスポンス属性を設定できます。これは、コール可能なビューのHTTP戻り値に影響します。"

#: ../../whatsnew-1.1.rst:53
msgid ""
"``request.response`` can also be used in view callable code that is not "
"configured to use a renderer.  For example, a view callable might do "
"``request.response.body = '123'; return request.response``.  However, the"
" response object that is produced by ``request.response`` must be "
"*returned* when a renderer is not in play in order to have any effect on "
"the HTTP response (it is not a \"global\" response, and modifications to "
"it are not somehow merged into a separately returned response object)."
msgstr "`` request.response``はレンダラーを使用するように構成されていないビュー呼び出し可能コードでも使用できます。たとえば、ビュー呼び出し可能な関数は `` request.response.body = &#39;123&#39;; return request.response``です。しかし、 `` request.response``で生成されるレスポンスオブジェクトは、HTTPレスポンスに影響を与えるためにレンダラが動作していないときには必ず返されなければなりません（レスポンスはグローバルなレスポンスではなく、それに対する変更は、何らかの形で別々に返されるレスポンスオブジェクトにマージされません）。"

#: ../../whatsnew-1.1.rst:61
msgid ""
"The ``request.response`` object is lazily created, so its introduction "
"does not negatively impact performance."
msgstr "`` request.response``オブジェクトは遅れて作成されるため、その導入はパフォーマンスに悪影響を与えません。"

#: ../../whatsnew-1.1.rst:65
msgid "``paster pviews``"
msgstr "`` paster pviews``"

#: ../../whatsnew-1.1.rst:67
msgid ""
"A new paster command named ``paster pviews`` was added.  This command "
"prints a summary of potentially matching views for a given path.  See the"
" section entitled :ref:`displaying_matching_views` for more information."
msgstr "`` paster pviews``という新しいパスタコマンドが追加されました。このコマンドは、指定されたパスについて一致する可能性のあるビューの概要を出力します。詳細は、ref： `display_matching_views`セクションを参照してください。"

#: ../../whatsnew-1.1.rst:73
msgid "Static Routes"
msgstr "静的ルート"

#: ../../whatsnew-1.1.rst:75
msgid ""
"The ``add_route`` method of the Configurator now accepts a ``static`` "
"argument.  If this argument is ``True``, the added route will never be "
"considered for matching when a request is handled.  Instead, it will only"
" be useful for URL generation via ``route_url`` and ``route_path``.  See "
"the section entitled :ref:`static_route_narr` for more information."
msgstr "Configuratorの `` add_route``メソッドは、 `` static``引数を受け付けるようになりました。この引数が `` True``の場合、要求が処理されたときに追加されたルートは照合のために決して考慮されません。代わりに、 `` route_url``と `` route_path``を使ってURLを生成するだけに便利です。詳細は、ref： `static_route_narr`を参照してください。"

#: ../../whatsnew-1.1.rst:82
msgid "Default HTTP Exception View"
msgstr "デフォルトのHTTP例外ビュー"

#: ../../whatsnew-1.1.rst:84
msgid ""
"A default exception view for the interface "
":class:`pyramid.interfaces.IExceptionResponse` is now registered by "
"default.  This means that an instance of any exception class imported "
"from :mod:`pyramid.httpexceptions` (such as ``HTTPFound``) can now be "
"raised from within view code; when raised, this exception view will "
"render the exception to a response."
msgstr "インタフェース：class： `pyramid.interfaces.IExceptionResponse`のデフォルトの例外ビューがデフォルトで登録されるようになりました。つまり、mod： `pyramid.httpexceptions`（` `HTTPFound``など）からインポートされた例外クラスのインスタンスをビューコード内から呼び出すことができます。呼び出されると、この例外ビューは応答に例外をレンダリングします。"

#: ../../whatsnew-1.1.rst:91
msgid ""
"To allow for configuration of this feature, the :term:`Configurator` now "
"accepts an additional keyword argument named ``exceptionresponse_view``. "
"By default, this argument is populated with a default exception view "
"function that will be used when an HTTP exception is raised.  When "
"``None`` is passed for this value, an exception view for HTTP exceptions "
"will not be registered.  Passing ``None`` returns the behavior of raising"
" an HTTP exception to that of Pyramid 1.0 (the exception will propagate "
"to :term:`middleware` and to the WSGI server)."
msgstr "この機能の設定を可能にするために、：term： `Configurator`は、` `exceptionresponse_view``というキーワード引数を追加できるようになりました。デフォルトでは、この引数には、HTTP例外が発生したときに使用されるデフォルトの例外ビュー関数が設定されます。この値に `` None``が渡されると、HTTP例外の例外ビューは登録されません。 `` None``を渡すと、HTTP例外をPyramid 1.0の例外に戻します（例外はterm： `middleware`とWSGIサーバに伝播します）。"

#: ../../whatsnew-1.1.rst:101
msgid "``http_cache``"
msgstr "`` http_cache``"

#: ../../whatsnew-1.1.rst:103
msgid ""
"A new value ``http_cache`` can be used as a :term:`view configuration` "
"parameter."
msgstr "新しい値 `` http_cache``は：term： `view configuration`パラメータとして使うことができます。"

#: ../../whatsnew-1.1.rst:106
msgid ""
"When you supply an ``http_cache`` value to a view configuration, the "
"``Expires`` and ``Cache-Control`` headers of a response generated by the "
"associated view callable are modified.  The value for ``http_cache`` may "
"be one of the following:"
msgstr "ビュー設定に `` http_cache``値を指定すると、関連するview呼び出し可能で生成されたレスポンスの `` Expires``と `` Cache-Control``ヘッダーが変更されます。 `` http_cache``の値は次のいずれかです："

#: ../../whatsnew-1.1.rst:111
msgid ""
"A nonzero integer.  If it's a nonzero integer, it's treated as a number "
"of seconds.  This number of seconds will be used to compute the "
"``Expires`` header and the ``Cache-Control: max-age`` parameter of "
"responses to requests which call this view.  For example: "
"``http_cache=3600`` instructs the requesting browser to 'cache this "
"response for an hour, please'."
msgstr "非ゼロの整数。ゼロ以外の整数の場合、秒数として扱われます。この秒数は、このビューを呼び出すリクエストに対するレスポンスの `` Expires``ヘッダと `` Cache-Control：max-age``パラメータを計算するために使用されます。たとえば、 `` http_cache = 3600``は、リクエストしているブラウザに「この応答を1時間キャッシュしてください」と指示します。"

#: ../../whatsnew-1.1.rst:118
msgid ""
"A ``datetime.timedelta`` instance.  If it's a ``datetime.timedelta`` "
"instance, it will be converted into a number of seconds, and that number "
"of seconds will be used to compute the ``Expires`` header and the "
"``Cache-Control: max-age`` parameter of responses to requests which call "
"this view.  For example: ``http_cache=datetime.timedelta(days=1)`` "
"instructs the requesting browser to 'cache this response for a day, "
"please'."
msgstr "`` datetime.timedelta``インスタンスです。 `` datetime.timedelta``インスタンスの場合、秒数に変換され、その秒数が `` Expires``ヘッダーと `` Cache-Control：max-age &#39;&#39;を計算するために使われますこのビューを呼び出す要求への応答のパラメータ。例： `` http_cache = datetime.timedelta（days = 1） ``は、リクエストしているブラウザに「この応答を1日キャッシュしてください」と指示します。"

#: ../../whatsnew-1.1.rst:126
msgid ""
"Zero (``0``).  If the value is zero, the ``Cache-Control`` and "
"``Expires`` headers present in all responses from this view will be "
"composed such that client browser cache (and any intermediate caches) are"
" instructed to never cache the response."
msgstr "0（ `` 0``）。値がゼロの場合、このビューからのすべての応答に存在する `` Cache-Control``と `` Expires``ヘッダーは、クライアントブラウザのキャッシュ（および任意の中間キャッシュ）にレスポンスをキャッシュしないように構成されます。"

#: ../../whatsnew-1.1.rst:131
msgid ""
"A two-tuple.  If it's a two tuple (e.g. ``http_cache=(1, "
"{'public':True})``), the first value in the tuple may be a nonzero "
"integer or a ``datetime.timedelta`` instance; in either case this value "
"will be used as the number of seconds to cache the response.  The second "
"value in the tuple must be a dictionary.  The values present in the "
"dictionary will be used as input to the ``Cache-Control`` response "
"header.  For example: ``http_cache=(3600, {'public':True})`` means 'cache"
" for an hour, and add ``public`` to the Cache-Control header of the "
"response'.  All keys and values supported by the "
"``webob.cachecontrol.CacheControl`` interface may be added to the "
"dictionary.  Supplying ``{'public':True}`` is equivalent to calling "
"``response.cache_control.public = True``."
msgstr "2タプル。それが2つのタプル（例えば `` http_cache =（1、{&#39;public&#39;：True）） ``）の場合、タプルの最初の値は非ゼロの整数か `` datetime.timedelta``インスタンスです。どちらの場合も、この値はレスポンスをキャッシュする秒数として使用されます。タプルの2番目の値は辞書でなければなりません。辞書にある値は `` Cache-Control``レスポンスヘッダへの入力として使われます。例えば、 `` http_cache =（3600、{&#39;public&#39;：True}）は ``キャッシュを1時間意味し、 `` public``をレスポンスのCache-Controlヘッダに追加します。 `` webob.cachecontrol.CacheControl``インターフェースでサポートされているすべてのキーと値を辞書に追加することができます。 `` {&#39;public&#39;：True} ``を提供することは、 `` response.cache_control.public = True``を呼び出すことと等価です。"

#: ../../whatsnew-1.1.rst:144
msgid ""
"Providing a non-tuple value as ``http_cache`` is equivalent to calling "
"``response.cache_expires(value)`` within your view's body."
msgstr "`` http_cache``として非タプルの値を与えることは、あなたのビューのボディ内で `` response.cache_expires（value） ``を呼び出すことと同じです。"

#: ../../whatsnew-1.1.rst:147
msgid ""
"Providing a two-tuple value as ``http_cache`` is equivalent to calling "
"``response.cache_expires(value[0], **value[1])`` within your view's body."
msgstr "`` http_cache``として2タプルの値を与えることは、あなたのビューのボディ内で `` response.cache_expires（value [0]、** value [1]） ``を呼び出すのと同じです。"

#: ../../whatsnew-1.1.rst:150
msgid ""
"If you wish to avoid influencing, the ``Expires`` header, and instead "
"wish to only influence ``Cache-Control`` headers, pass a tuple as "
"``http_cache`` with the first element of ``None``, e.g.: ``(None, "
"{'public':True})``."
msgstr "`` Expires``ヘッダーに影響を与えず、 `` Cache-Control``ヘッダにのみ影響を与えたい場合は、 `` None``の最初の要素を持つ `` http_cache``としてタプルを渡し、例： ``（None、{&#39;public&#39;：True}） ``。"

#: ../../whatsnew-1.1.rst:154
msgid ""
"The environment setting ``PYRAMID_PREVENT_HTTP_CACHE`` and configuration "
"file value ``prevent_http_cache`` are synonymous and allow you to prevent"
" HTTP cache headers from being set by Pyramid's ``http_cache`` machinery "
"globally in a process.  see :ref:`influencing_http_caching` and "
":ref:`preventing_http_caching`."
msgstr "環境設定 `` PYRAMID_PREVENT_HTTP_CACHE`と設定ファイルの値 `` prevent_http_cache``は同義で、プロセス内でグローバルにPyramidの `` http_cache``機構によってHTTPキャッシュヘッダが設定されないようにします。 ：ref： `influencing_http_caching`と：ref：` prevent_http_caching`を参照してください。"

#: ../../whatsnew-1.1.rst:161
msgid "Easier Scripting Writing"
msgstr "簡単なスクリプト作成"

#: ../../whatsnew-1.1.rst:163
msgid ""
"A new API function :func:`pyramid.paster.bootstrap` has been added to "
"make writing scripts that need to work under Pyramid environment easier, "
"e.g.:"
msgstr "新しいAPI関数：func： `pyramid.paster.bootstrap`が追加され、Pyramid環境下で動作する必要のあるスクリプトを簡単に作成できます。例："

#: ../../whatsnew-1.1.rst:173
msgid "See :ref:`writing_a_script` for more details."
msgstr "詳細は、：ref： `writing_a_script`を参照してください。"

#: ../../whatsnew-1.1.rst:176
msgid "Minor Feature Additions"
msgstr "マイナー機能追加"

#: ../../whatsnew-1.1.rst:178
msgid ""
"It is now possible to invoke ``paster pshell`` even if the paste ini file"
" section name pointed to in its argument is not actually a Pyramid WSGI "
"application.  The shell will work in a degraded mode, and will warn the "
"user.  See \"The Interactive Shell\" in the \"Creating a Pyramid "
"Project\" narrative documentation section."
msgstr "引数に指定されているpaste iniファイルセクション名がPyramid WSGIアプリケーションではない場合でも、 `` paster pshell``を呼び出すことが可能になりました。シェルは劣化モードで動作し、ユーザーに警告します。 \ &quot;Pyramid Projectの作成\&quot;ドキュメンテーションセクションの\ &quot;The Interactive Shell \&quot;を参照してください。"

#: ../../whatsnew-1.1.rst:184
msgid ""
"The ``paster pshell``, ``paster pviews``, and ``paster proutes`` commands"
" each now under the hood uses :func:`pyramid.paster.bootstrap`, which "
"makes it possible to supply an ``.ini`` file without naming the \"right\""
" section in the file that points at the actual Pyramid application.  "
"Instead, you can generally just run ``paster {pshell|proutes|pviews} "
"development.ini`` and it will do mostly the right thing."
msgstr "`` paster pshell``、 `` paster pviews``、 `` paster proutes``コマンドはfunc： `pyramid.paster.bootstrap`を使用します。通常の `` paster {pshell | proutes | pviews} development.ini``を実行するだけで、ほとんどの場合に実行されます良い行い。"

#: ../../whatsnew-1.1.rst:191
msgid ""
"It is now possible to add a ``[pshell]`` section to your application's "
".ini configuration file, which influences the global names available to a"
" pshell session.  See :ref:`extending_pshell`."
msgstr "現在、アプリケーションの.ini設定ファイルに `` [pshell] `セクションを追加することができます。これは、pshellセッションで使用できるグローバル名に影響します。参照：ref： `extend_pshell`を参照してください。"

#: ../../whatsnew-1.1.rst:195
msgid ""
"The :meth:`pyramid.config.Configurator.scan` method has grown a ``**kw`` "
"argument.  ``kw`` argument represents a set of keyword arguments to pass "
"to the Venusian ``Scanner`` object created by Pyramid.  (See the "
":term:`Venusian` documentation for more information about ``Scanner``)."
msgstr "：meth： `pyramid.config.Configurator.scan`メソッドは` `** kw``引数を増やしました。 `` kw``引数は、ピラミッドが作成したVenusianの `` Scanner``オブジェクトに渡すキーワード引数の集合を表します。 （ `` Scanner``の詳細については：term： `Venusian`のドキュメントを参照してください）。"

#: ../../whatsnew-1.1.rst:200
msgid ""
"New request property: ``json_body``. This property will return the JSON-"
"decoded variant of the request body.  If the request body is not well-"
"formed JSON, this property will raise an exception."
msgstr "新しいリクエストプロパティ： `` json_body``。このプロパティは、リクエスト本体のJSONでデコードされた変形を返します。要求の本文が整形式JSONでない場合、このプロパティは例外を発生させます。"

#: ../../whatsnew-1.1.rst:204
msgid ""
"A `JSONP <http://en.wikipedia.org/wiki/JSONP>`_ renderer.  See "
":ref:`jsonp_renderer` for more details."
msgstr "`JSONP <http://en.wikipedia.org/wiki/JSONP> `_ renderer。詳細はref： `jsonp_renderer`を参照してください。"

#: ../../whatsnew-1.1.rst:207
msgid ""
"New authentication policy: "
":class:`pyramid.authentication.SessionAuthenticationPolicy`, which uses a"
" session to store credentials."
msgstr "新しい認証ポリシー：：class： `pyramid.authentication.SessionAuthenticationPolicy`：セッションを使用してクレデンシャルを保存します。"

#: ../../whatsnew-1.1.rst:211
msgid ""
"A function named :func:`pyramid.httpexceptions.exception_response` is a "
"shortcut that can be used to create HTTP exception response objects using"
" an HTTP integer status code."
msgstr "func： `pyramid.httpexceptions.exception_response`という名前の関数は、HTTP整数ステータスコードを使用してHTTP例外応答オブジェクトを作成するために使用できるショートカットです。"

#: ../../whatsnew-1.1.rst:215
msgid ""
"Integers and longs passed as ``elements`` to "
":func:`pyramid.url.resource_url` or "
":meth:`pyramid.request.Request.resource_url` e.g. ``resource_url(context,"
" request, 1, 2)`` (``1`` and ``2`` are the ``elements``) will now be "
"converted implicitly to strings in the result.  Previously passing "
"integers or longs as elements would cause a TypeError."
msgstr "func： `pyramid.url.resource_url`や：meth：` pyramid.request.Request.resource_url`のように、 `` resource_url（context、request、1、2） ``に渡された整数とロング`` 1``と `` 2``が `` elements``です）は、暗黙的に結果の文字列に変換されます。以前は整数またはlongを要素として渡すと、TypeErrorが発生します。"

#: ../../whatsnew-1.1.rst:222
msgid ""
"``pyramid_alchemy`` scaffold now uses ``query.get`` rather than "
"``query.filter_by`` to take better advantage of identity map caching."
msgstr "`` pyramid_alchemy`` scaffoldは、 `` query.filter_by``ではなく `` query.get``を使用してアイデンティティマップのキャッシュをより有効に活用します。"

#: ../../whatsnew-1.1.rst:225
msgid "``pyramid_alchemy`` scaffold now has unit tests."
msgstr "`` pyramid_alchemy``足場には単体テストがあります。"

#: ../../whatsnew-1.1.rst:227
msgid "Added a :func:`pyramid.i18n.make_localizer` API."
msgstr "a：func： `pyramid.i18n.make_localizer` APIを追加しました。"

#: ../../whatsnew-1.1.rst:229
msgid ""
"An exception raised by a :class:`pyramid.events.NewRequest` event "
"subscriber can now be caught by an exception view."
msgstr "a：class： `pyramid.events.NewRequest`イベントサブスクライバによって生成された例外は、例外ビューで捕捉できるようになりました。"

#: ../../whatsnew-1.1.rst:232
msgid ""
"It is now possible to get information about why Pyramid raised a "
"Forbidden exception from within an exception view.  The ``ACLDenied`` "
"object returned by the ``permits`` method of each stock authorization "
"policy (:meth:`pyramid.interfaces.IAuthorizationPolicy.permits`) is now "
"attached to the Forbidden exception as its ``result`` attribute.  "
"Therefore, if you've created a Forbidden exception view, you can see the "
"ACE, ACL, permission, and principals involved in the request as eg. "
"``context.result.permission``, ``context.result.acl``, etc within the "
"logic of the Forbidden exception view."
msgstr "Pyramidが例外ビューからForbidden例外を発生させた理由についての情報を得ることができるようになりました。各株式承認ポリシー（：meth： `pyramid.interfaces.IAuthorizationPolicy.permits`）の` `permits``メソッドによって返された` `ACLDenied``オブジェクトは、` `result``属性としてForbidden例外に付加されました。したがって、[禁止された例外]ビューを作成した場合、ACE、ACL、アクセス許可、および要求に含まれるプリンシパルが、たとえば次のように表示されます。 `` context.result.permission``、 `` context.result.acl``などの禁止された例外ビューのロジック内にあります。"

#: ../../whatsnew-1.1.rst:242
msgid ""
"Don't explicitly prevent the ``timeout`` from being lower than the "
"``reissue_time`` when setting up an "
":class:`pyramid.authentication.AuthTktAuthenticationPolicy` (previously "
"such a configuration would raise a ``ValueError``, now it's allowed, "
"although typically nonsensical).  Allowing the nonsensical configuration "
"made the code more understandable and required fewer tests."
msgstr "：class： `pyramid.authentication.AuthTktAuthenticationPolicy`を設定するときに` `timeout``が` `reissue_time``よりも低くなるのを明示的に禁止しないでください（以前の設定では` `ValueError``それは許可されていますが、通常は無意味ですが）。無意味な設定を許可することで、コードを理解しやすくなり、必要なテストが少なくなりました。"

#: ../../whatsnew-1.1.rst:249
msgid ""
"The :class:`pyramid.request.Request` class now has a ``ResponseClass`` "
"attribute which points at :class:`pyramid.response.Response`."
msgstr "：class： `pyramid.request.Request`クラスはclass：` pyramid.response.Response`を指す `` ResponseClass``属性を持つようになりました。"

#: ../../whatsnew-1.1.rst:252
msgid ""
"The :class:`pyramid.response.Response` class now has a ``RequestClass`` "
"interface which points at :class:`pyramid.request.Request`."
msgstr "：class： `pyramid.response.Response`クラスはclass：` pyramid.request.Request`を指す `` RequestClass``インターフェースを持っています。"

#: ../../whatsnew-1.1.rst:255
msgid ""
"It is now possible to return an arbitrary object from a Pyramid view "
"callable even if a renderer is not used, as long as a suitable adapter to"
" :class:`pyramid.interfaces.IResponse` is registered for the type of the "
"returned object by using the new "
":meth:`pyramid.config.Configurator.add_response_adapter` API.  See the "
"section in the Hooks chapter of the documentation entitled "
":ref:`using_iresponse`."
msgstr "レンダラーが使用されていなくても、呼び出し可能なピラミッドビューから任意のオブジェクトを返すことができるようになりました。class： `pyramid.interfaces.IResponse`は、新しい：meth： `pyramid.config.Configurator.add_response_adapter` APIです。ドキュメント：ref： `using_iresponse`のHooksの章を参照してください。"

#: ../../whatsnew-1.1.rst:263
msgid ""
"The Pyramid router will now, by default, call the ``__call__`` method of "
"response objects when returning a WSGI response.  This means that, among "
"other things, the ``conditional_response`` feature response objects "
"inherited from WebOb will now behave properly."
msgstr "Pyramidルータはデフォルトで、WSGI応答を返すときに応答オブジェクトの `` __call__``メソッドを呼び出すようになりました。これは、とりわけ、WebObから継承された `` conditional_response``の機能応答オブジェクトが正しく動作するようになりました。"

#: ../../whatsnew-1.1.rst:268
msgid ""
"New method named :meth:`pyramid.request.Request.is_response`.  This "
"method should be used instead of the :func:`pyramid.view.is_response` "
"function, which has been deprecated."
msgstr "新しいメソッド：meth： `pyramid.request.Request.is_response`。このメソッドは、：func： `pyramid.view.is_response`関数の代わりに使用する必要があります。これは廃止予定です。"

#: ../../whatsnew-1.1.rst:272
msgid ""
":class:`pyramid.exceptions.NotFound` is now just an alias for "
":class:`pyramid.httpexceptions.HTTPNotFound`."
msgstr "：class： `pyramid.exceptions.NotFound`はclass：` pyramid.httpexceptions.HTTPNotFound`のエイリアスになりました。"

#: ../../whatsnew-1.1.rst:275
msgid ""
":class:`pyramid.exceptions.Forbidden` is now just an alias for "
":class:`pyramid.httpexceptions.HTTPForbidden`."
msgstr "：class： `pyramid.exceptions.Forbidden`はclass：` pyramid.httpexceptions.HTTPForbidden`の別名になりました。"

#: ../../whatsnew-1.1.rst:278
msgid ""
"Added ``mako.preprocessor`` config file parameter; allows for a Mako "
"preprocessor to be specified as a Python callable or Python dotted name. "
"See https://github.com/Pylons/pyramid/pull/183 for rationale."
msgstr "`` mako.preprocessor``設定ファイルのパラメータを追加しました。 MakoプリプロセッサをPythonの呼び出し可能な名前またはPythonの点名として指定することができます。根拠については、https://github.com/Pylons/pyramid/pull/183を参照してください。"

#: ../../whatsnew-1.1.rst:282
msgid ""
"New API class: :class:`pyramid.static.static_view`.  This supersedes the "
"(now deprecated) :class:`pyramid.view.static` class. "
":class:`pyramid.static.static_view`, by default, serves up documents as "
"the result of the request's ``path_info``, attribute rather than it's "
"``subpath`` attribute (the inverse was true of "
":class:`pyramid.view.static`, and still is). "
":class:`pyramid.static.static_view` exposes a ``use_subpath`` flag for "
"use when you want the static view to behave like the older deprecated "
"version."
msgstr "新しいAPIクラス：：class： `pyramid.static.static_view`。これは、（現在廃止されている）class： `pyramid.view.static`クラスに取って代わるものです。 ：class： `pyramid.static.static_view`は、デフォルトでは、要求の` `path_info``属性の結果としてドキュメントを提供します。属性は` `subpath``属性ではありません（逆はtrueです：class：` pyramid .view.static`、それでもなおです）。 ：class： `pyramid.static.static_view`は静的ビューを古い非推奨バージョンと同じように動作させたいときに使う` `use_subpath``フラグを公開します。"

#: ../../whatsnew-1.1.rst:291
msgid ""
"A new api function :func:`pyramid.scripting.prepare` has been added.  It "
"is a lower-level analogue of :func:`pyramid.paster.bootstrap` that "
"accepts a request and a registry instead of a config file argument, and "
"is used for the same purpose:"
msgstr "新しいapi関数：func： `pyramid.scripting.prepare`が追加されました。それは設定ファイル引数の代わりに要求とレジストリを受け入れ、同じ目的のために使用される：func： `pyramid.paster.bootstrap`の下位レベルのアナログです："

#: ../../whatsnew-1.1.rst:303
msgid ""
"A new API function :func:`pyramid.scripting.make_request` has been added."
" The resulting request will have a ``registry`` attribute.  It is meant "
"to be used in conjunction with :func:`pyramid.scripting.prepare` and/or "
":func:`pyramid.paster.bootstrap` (both of which accept a request as an "
"argument):"
msgstr "新しいAPI関数func： `pyramid.scripting.make_request`が追加されました。結果として得られるリクエストは `` registry``属性を持ちます。 func： `pyramid.scripting.prepare`や：func：` pyramid.paster.bootstrap`（どちらも引数としてリクエストを受け付けます）と組み合わせて使用​​することを意図しています："

#: ../../whatsnew-1.1.rst:314
msgid ""
"New API attribute :attr:`pyramid.config.global_registries` is an iterable"
" object that contains references to every Pyramid registry loaded into "
"the current process via "
":meth:`pyramid.config.Configurator.make_wsgi_app`.  It also has a "
"``last`` attribute containing the last registry loaded.  This is used by "
"the scripting machinery, and is available for introspection."
msgstr "新しいAPI属性：attr： `pyramid.config.global_registries`は、現在のプロセスにロードされたすべてのPyramidレジストリへの参照を含むmether：` pyramid.config.Configurator.make_wsgi_app`という反復可能オブジェクトです。最後にロードされたレジストリを含む `` last``属性もあります。これはスクリプティング機器で使用され、イントロスペクションに使用できます。"

#: ../../whatsnew-1.1.rst:320
msgid ""
"Added the :attr:`pyramid.renderers.null_renderer` object as an API.  The "
"null renderer is an object that can be used in advanced integration cases"
" as input to the view configuration ``renderer=`` argument.  When the "
"null renderer is used as a view renderer argument, Pyramid avoids "
"converting the view callable result into a Response object.  This is "
"useful if you want to reuse the view configuration and lookup machinery "
"outside the context of its use by the Pyramid router.  (This feature was "
"added for consumption by the ``pyramid_rpc`` package, which uses view "
"configuration and lookup outside the context of a router in exactly this "
"way.)"
msgstr "：attr： `pyramid.renderers.null_renderer`オブジェクトをAPIとして追加しました。 nullレンダラーは、ビュー構成のレンダラー= ``引き数への入力として高度な統合のケースで使用できるオブジェクトです。 nullレンダラーをビューレンダラー引数として使用すると、Pyramidはビューの呼び出し可能な結果を​​Responseオブジェクトに変換することを回避します。これは、Pyramidルーターが使用しているコンテキスト外で、ビュー構成とルックアップマシンを再利用する場合に便利です。 （この機能は `` pyramid_rpc``パッケージで消費するために追加されました。このパッケージは、まさにこのようにルータのコンテキスト外でビューの設定と参照を使用します）。"

#: ../../whatsnew-1.1.rst:331
msgid "Backwards Incompatibilities"
msgstr "後方の非互換性"

#: ../../whatsnew-1.1.rst:333
msgid ""
"Pyramid no longer supports Python 2.4.  Python 2.5 or better is required "
"to run Pyramid 1.1+.  Pyramid, however, does not work under any version "
"of Python 3 yet."
msgstr "PyramidはPython 2.4をサポートしなくなりました。 Pyramid 1.1+を実行するには、Python 2.5以上が必要です。しかしPyramidはPython 3のどのバージョンでも動作しません。"

#: ../../whatsnew-1.1.rst:337
msgid ""
"The Pyramid router now, by default, expects response objects returned "
"from view callables to implement the "
":class:`pyramid.interfaces.IResponse` interface.  Unlike the Pyramid 1.0 "
"version of this interface, objects which implement IResponse now must "
"define a ``__call__`` method that accepts ``environ`` and "
"``start_response``, and which returns an ``app_iter`` iterable, among "
"other things.  Previously, it was possible to return any object which had"
" the three WebOb ``app_iter``, ``headerlist``, and ``status`` attributes "
"as a response, so this is a backwards incompatibility.  It is possible to"
" get backwards compatibility back by registering an adapter to IResponse "
"from the type of object you're now returning from view callables.  See "
"the section in the Hooks chapter of the documentation entitled "
":ref:`using_iresponse`."
msgstr "Pyramidルータは、デフォルトでは、view callablesから返されたレスポンスオブジェクトが：class： `pyramid.interfaces.IResponse`インタフェースを実装することを期待しています。このインタフェースのPyramid 1.0バージョンとは異なり、IResponseを実装するオブジェクトは、現在、 `` environ``と `` start_response``を受け入れ、 `` app_iter`` iterableを返す `` __call__``メソッドを定義しなければなりませんもの。以前は、3つのWebOb `` app_iter``、 `` headerlist``、および `` status``属性をレスポンスとして持つオブジェクトを返すことができました。これは後方互換性がありません。 IRISponseにアダプターを登録することで、ビュー呼び出し可能オブジェクトから戻ってきたオブジェクトの型から下位互換性を取り戻すことができます。ドキュメント：ref： `using_iresponse`のHooksの章を参照してください。"

#: ../../whatsnew-1.1.rst:350
msgid ""
"The :class:`pyramid.interfaces.IResponse` interface is now much more "
"extensive.  Previously it defined only ``app_iter``, ``status`` and "
"``headerlist``; now it is basically intended to directly mirror the "
"``webob.Response`` API, which has many methods and attributes."
msgstr "：class： `pyramid.interfaces.IResponse`インターフェースがはるかに広範囲になりました。これまでは `` app_iter``、 `` status``、 `` headerlist``だけを定義していました。これは基本的に `` webob.Response`` APIを直接ミラーリングすることを意図しています。これは多くのメソッドと属性を持っています。"

#: ../../whatsnew-1.1.rst:355
msgid ""
"The :mod:`pyramid.httpexceptions` classes named ``HTTPFound``, "
"``HTTPMultipleChoices``, ``HTTPMovedPermanently``, ``HTTPSeeOther``, "
"``HTTPUseProxy``, and ``HTTPTemporaryRedirect`` now accept ``location`` "
"as their first positional argument rather than ``detail``.  This means "
"that you can do, e.g. ``return "
"pyramid.httpexceptions.HTTPFound('http://foo')`` rather than ``return "
"pyramid.httpexceptions.HTTPFound(location='http//foo')`` (the latter will"
" of course continue to work)."
msgstr "`` HTTPFound``、 `` HTTPMultipleChoices``、 `` HTTPMovedPermanently``、 `` HTTPSeeOther``、 `` HTTPUseProxy``、および `` HTTPTemporaryRedirect``という名前の：mod： `pyramid.httpexceptions`クラスは` `` detail``ではなく `` location``を最初の位置引数として使用します。これは、pyramid.httpexceptions.HTTPFound（location = &#39;http // foo&#39;） ``を返すのではなく、 `` pyramid.httpexceptions.HTTPFound（ &#39;http：// foo&#39;） ``を返すなど、後者はもちろん作業を続けるでしょう）。"

#: ../../whatsnew-1.1.rst:364
msgid ""
"The pyramid Router attempted to set a value into the key "
"``environ['repoze.bfg.message']`` when it caught a view-related exception"
" for backwards compatibility with applications written for "
":mod:`repoze.bfg` during error handling.  It did this by using code that "
"looked like so::"
msgstr "ピラミッドルータは、エラー時に：mod： `repoze.bfg`で書かれたアプリケーションとの下位互換性のためにビュー関連の例外を捕捉したときに、キー` `environ [&#39;repoze.bfg.message&#39;]` `に値を設定しようとしました取り扱い。これは、次のようなコードを使用してこれを行いました::"

#: ../../whatsnew-1.1.rst:377
msgid ""
"Use of the value ``environ['repoze.bfg.message']`` was docs-deprecated in"
" Pyramid 1.0.  Our standing policy is to not remove features after a "
"deprecation for two full major releases, so this code was originally "
"slated to be removed in Pyramid 1.2.  However, computing the "
"``repoze.bfg.message`` value was the source of at least one bug found in "
"the wild (https://github.com/Pylons/pyramid/issues/199), and there isn't "
"a foolproof way to both preserve backwards compatibility and to fix the "
"bug. Therefore, the code which sets the value has been removed in this "
"release. Code in exception views which relies on this value's presence in"
" the environment should now use the ``exception`` attribute of the "
"request (e.g. ``request.exception[0]``) to retrieve the message instead "
"of relying on ``request.environ['repoze.bfg.message']``."
msgstr "値 `` environ [&#39;repoze.bfg.message&#39;] ``の使用は、Pyramid 1.0で廃止されました。私たちの定める方針は、完全な2つのメジャーリリースに対する非推奨の機能を削除しないことです。このコードはもともとPyramid 1.2で削除される予定でした。しかし、 `` repoze.bfg.message``値を計算することは、野生で見つかった少なくとも1つのバグ（https://github.com/Pylons/pyramid/issues/199）のソースであり、下位互換性を維持し、バグを修正するための完全な方法です。したがって、このリリースでは値を設定するコードは削除されています。環境におけるこの値の存在に依存する例外ビューのコードは、要求の `` exception``属性（例えば、 `` request.exception [0] ``）を使用して、 `` request .environ [&#39;repoze.bfg.message&#39;] ``。"

#: ../../whatsnew-1.1.rst:391
msgid "Deprecations and Behavior Differences"
msgstr "廃止と行動の相違"

#: ../../whatsnew-1.1.rst:393
msgid ""
"Under Python 2.7+, it's necessary to pass the Python interpreter the "
"correct warning flags to see deprecation warnings emitted by Pyramid when"
" porting your application from an older version of Pyramid.  Use the "
"``PYTHONWARNINGS`` environment variable with the value ``all`` in the "
"shell you use to invoke ``paster serve`` to see these warnings, e.g. on "
"UNIX, ``PYTHONWARNINGS=all $VENV/bin/paster serve development.ini``. "
"Python 2.5 and 2.6 show deprecation warnings by default, so this is "
"unnecessary there. All deprecation warnings are emitted to the console."
msgstr "Python 2.7以降では、古いバージョンのPyramidからアプリケーションを移植する際に、Pyramidが発行する廃止予定の警告を表示するために、Pythonインタプリタに正しい警告フラグを渡す必要があります。 UNIXの場合、 `` PYTHONWARNINGS = all $ VENV / bin / paster &#39;&#39;のように、 `` paster serve``を呼び出すために使用する ``すべて ``の値を持つ `` PYTHONWARNINGS``環境変数を `` paster serve &#39;開発.ini``。 Python 2.5と2.6は、デフォルトで廃止予定の警告を表示するので、これは不要です。すべての非推奨警告がコンソールに出力されます。"

#: ../../whatsnew-1.1.rst:403
msgid ""
"The :class:`pyramid.view.static` class has been deprecated in favor of "
"the newer :class:`pyramid.static.static_view` class.  A deprecation "
"warning is raised when it is used.  You should replace it with a "
"reference to :class:`pyramid.static.static_view` with the "
"``use_subpath=True`` argument."
msgstr "：class： `pyramid.view.static`クラスは新しい：class：` pyramid.static.static_view`クラスのために推奨されなくなりました。非推奨警告は使用時に発生します。 `` use_subpath = True``引数で：class： `pyramid.static.static_view`への参照で置き換えるべきです。"

#: ../../whatsnew-1.1.rst:408
msgid ""
"The ``paster pshell``, ``paster proutes``, and ``paster pviews`` commands"
" now take a single argument in the form "
"``/path/to/config.ini#sectionname`` rather than the previous 2-argument "
"spelling ``/path/to/config.ini sectionname``.  ``#sectionname`` may be "
"omitted, in which case ``#main`` is assumed."
msgstr "`` paster pshell``、 `` paster proutes``、 `` paster pviews``コマンドは、前の2つではなく `` / path / to / config.ini＃sectionname``の形式で引数を取るようになりました - 引数の `` /path/to/config.ini sectionname``のスペルです。 ``＃sectionname``は省略できます。この場合、 ``＃main``が仮定されます。"

#: ../../whatsnew-1.1.rst:414
msgid ""
"The default Mako renderer is now configured to escape all HTML in "
"expression tags. This is intended to help prevent XSS attacks caused by "
"rendering unsanitized input from users. To revert this behavior in user's"
" templates, they need to filter the expression through the 'n' filter::"
msgstr "デフォルトのMakoレンダラは、式タグ内のすべてのHTMLをエスケープするように設定されました。これは、非正規化された入力をユーザーから表示することによるXSS攻撃を防ぐのに役立ちます。ユーザーのテンプレートでこの動作を元に戻すには、 &#39;n&#39;フィルタを使用して式をフィルタリングする必要があります。"

#: ../../whatsnew-1.1.rst:421
msgid "See https://github.com/Pylons/pyramid/issues/193."
msgstr "https://github.com/Pylons/pyramid/issues/193を参照してください。"

#: ../../whatsnew-1.1.rst:423
msgid ""
"Deprecated all assignments to ``request.response_*`` attributes (for "
"example ``request.response_content_type = 'foo'`` is now deprecated). "
"Assignments and mutations of assignable request attributes that were "
"considered by the framework for response influence are now deprecated: "
"``response_content_type``, ``response_headerlist``, ``response_status``, "
"``response_charset``, and ``response_cache_for``.  Instead of assigning "
"these to the request object for later detection by the rendering "
"machinery, users should use the appropriate API of the Response object "
"created by accessing ``request.response`` (e.g. code which does "
"``request.response_content_type = 'abc'`` should be changed to "
"``request.response.content_type = 'abc'``)."
msgstr "`` request.response_ * ``属性へのすべての代入を非推奨にしました（例えば `` request.response_content_type = &#39;foo&#39;``は廃止予定です）。レスポンスへの影響をフレームワークで考慮した、割り当て可能なリクエスト属性の代入と突然変異は非難されました： `` response_content_type``、 `` response_headerlist``、 `` response_status``、 `` response_charset``、 `` response_cache_for`` 。後でレンダリング機構が検出するためにこれらをリクエストオブジェクトに割り当てるのではなく、 `` request.response``にアクセスして作成したResponseオブジェクトの適切なAPIを使用する必要があります（例えば `` request.response_content_type = &#39;abc&#39; ``は `` request.response.content_type = &#39;abc&#39;``に変更する必要があります）。"

#: ../../whatsnew-1.1.rst:435
msgid ""
"Passing view-related parameters to "
":meth:`pyramid.config.Configurator.add_route` is now deprecated. "
"Previously, a view was permitted to be connected to a route using a set "
"of ``view*`` parameters passed to the ``add_route`` method of the "
"Configurator.  This was a shorthand which replaced the need to perform a "
"subsequent call to ``add_view``. For example, it was valid (and often "
"recommended) to do::"
msgstr "ビュー関連のパラメータを：meth： `pyramid.config.Configurator.add_route`に渡すことは廃止されました。以前は、コンフィグレータの `` add_route``メソッドに渡された `` view * ``パラメータのセットを使って、ビューをルートに接続することが許可されていました。これは、後で `` add_view``を呼び出す必要性に代わる短縮形でした。たとえば、以下のことを行うには有効でした（しばしば推奨されます）："

#: ../../whatsnew-1.1.rst:446
msgid ""
"Passing ``view*`` arguments to ``add_route`` is now deprecated in favor "
"of connecting a view to a predefined route via "
":meth:`pyramid.config.Configurator.add_view` using the route's "
"``route_name`` parameter.  As a result, the above example should now be "
"spelled::"
msgstr "`` view * ``引数を `` add_route``に渡すことは、ルートの `` route_name``パラメータを使って：meth： `pyramid.config.Configurator.add_view`を介してビューを定義済みのルートに接続することを推奨しています。その結果、上記の例は今すぐ綴られるべきです::"

#: ../../whatsnew-1.1.rst:456
msgid ""
"This deprecation was done to reduce confusion observed in IRC, as well as"
" to (eventually) reduce documentation burden.  A deprecation warning is "
"now issued when any view-related parameter is passed to ``add_route``."
msgstr "この廃止は、IRCで見られる混乱を減らし、（最終的に）文書化の負担を軽減するために行われました。ビュー関連のパラメータが `` add_route``に渡されると非推奨警告が発行されるようになりました。"

#: ../../whatsnew-1.1.rst:462
msgid ""
"See also `issue #164 on GitHub "
"<https://github.com/Pylons/pyramid/issues/164>`_."
msgstr "GitHubの `issue＃164 &#39;も参照してください。 <https://github.com/Pylons/pyramid/issues/164> `_。"

#: ../../whatsnew-1.1.rst:465
msgid ""
"Passing an ``environ`` dictionary to the ``__call__`` method of a "
"\"traverser\" (e.g. an object that implements "
":class:`pyramid.interfaces.ITraverser` such as an instance of "
":class:`pyramid.traversal.ResourceTreeTraverser`) as its ``request`` "
"argument now causes a deprecation warning to be emitted.  Consumer code "
"should pass a ``request`` object instead.  The fact that passing an "
"environ dict is permitted has been documentation-deprecated since "
"``repoze.bfg`` 1.1, and this capability will be removed entirely in a "
"future version."
msgstr "\ &quot;traverser \&quot;の `` __call__`メソッド（例：class： `pyramid.interfaces.ITraverser`：class：` pyramidのインスタンスを実装するオブジェクト）に `` environ``辞書を渡します。 traversal.ResourceTreeTraverser`）を `` request``引数として使用すると、非推奨警告が発行されるようになりました。コンシューマーコードは `` request``オブジェクトを渡すべきです。環境を渡すことが許可されているという事実は、 `` repoze.bfg`` 1.1以降、ドキュメンテーション非難されており、この機能は将来のバージョンでは完全に削除されるでしょう。"

#: ../../whatsnew-1.1.rst:474
msgid ""
"The following (undocumented, dictionary-like) methods of the "
":class:`pyramid.request.Request` object have been deprecated: "
"``__contains__``, ``__delitem__``, ``__getitem__``, ``__iter__``, "
"``__setitem__``, ``get``, ``has_key``, ``items``, ``iteritems``, "
"``itervalues``, ``keys``, ``pop``, ``popitem``, ``setdefault``, "
"``update``, and ``values``.  Usage of any of these methods will cause a "
"deprecation warning to be emitted.  These methods were added for internal"
" compatibility in ``repoze.bfg`` 1.1 (code that currently expects a "
"request object expected an environ object in BFG 1.0 and before).  In a "
"future version, these methods will be removed entirely."
msgstr "：class： `pyramid.request.Request`オブジェクトの以下の（文書化されていない、辞書のような）メソッドは非難されました：` `__contains__``、` `__delitem__``、` `__getitem__``、` `__iter__`` `` iteritems``、 `` itervalues``、 `` keys``、 `` pop``、 `` iteritems``、 `` iteritems``、 `` `popitem``、` `setdefault``、` `update``、` `values``のようなものです。これらのメソッドを使用すると、非推奨警告が発行されます。これらのメソッドは、 `` repoze.bfg`` 1.1（BFG 1.0以前ではenvironオブジェクトが期待される要求オブジェクトを現在期待しているコード）の内部互換性のために追加されました。将来のバージョンでは、これらのメソッドは完全に削除されます。"

#: ../../whatsnew-1.1.rst:485
msgid ""
"A custom request factory is now required to return a request object that "
"has a ``response`` attribute (or \"reified\"/lazy property) if the "
"request is meant to be used in a view that uses a renderer.  This "
"``response`` attribute should be an instance of the class "
":class:`pyramid.response.Response`."
msgstr "リクエストがレンダラーを使用するビューで使用される場合は、カスタムリクエストファクトリが `` response``属性（または\ &quot;reified \&quot; / lazyプロパティ）を持つリクエストオブジェクトを返すようになりました。この `` response``属性はクラス：class： `pyramid.response.Response`のインスタンスでなければなりません。"

#: ../../whatsnew-1.1.rst:491
msgid ""
"The JSON and string renderer factories now assign to "
"``request.response.content_type`` rather than "
"``request.response_content_type``."
msgstr "JSONおよび文字列レンダラーファクトリは、 `` request.response_content_type``ではなく `` request.response.content_type``に割り当てられます。"

#: ../../whatsnew-1.1.rst:495
msgid ""
"Each built-in renderer factory now determines whether it should change "
"the content type of the response by comparing the response's content type"
" against the response's default content type; if the content type is the "
"default content type (usually ``text/html``), the renderer changes the "
"content type (to ``application/json`` or ``text/plain`` for JSON and "
"string renderers respectively)."
msgstr "各ビルトインレンダラーファクトリは、レスポンスのコンテンツタイプをレスポンスのデフォルトのコンテンツタイプと比較することによってレスポンスのコンテンツタイプを変更する必要があるかどうかを判断します。コンテンツタイプがデフォルトのコンテンツタイプ（通常 `` text / html``）である場合、レンダラーはコンテンツタイプをJSONおよび文字列レンダラーのそれぞれに対して `` application / json``または `` text / plain``に​​変更します。 。"

#: ../../whatsnew-1.1.rst:502
msgid ""
"The :func:`pyramid.wsgi.wsgiapp2` now uses a slightly different method of"
" figuring out how to \"fix\" ``SCRIPT_NAME`` and ``PATH_INFO`` for the "
"downstream application.  As a result, those values may differ slightly "
"from the perspective of the downstream application (for example, "
"``SCRIPT_NAME`` will now never possess a trailing slash)."
msgstr "：func： `pyramid.wsgi.wsgiapp2`は、下位アプリケーションの` `SCRIPT_NAME``と` `PATH_INFO``を修正する方法を少し違った方法で使います。結果として、それらの値は、下流のアプリケーションの観点から若干異なるかもしれません（例えば、 `` SCRIPT_NAME``は後にスラッシュを持たないでしょう）。"

#: ../../whatsnew-1.1.rst:508
msgid ""
"Previously, :class:`pyramid.request.Request` inherited from "
":class:`webob.request.Request` and implemented ``__getattr__``, "
"``__setattr__`` and ``__delattr__`` itself in order to override \"adhoc "
"attr\" WebOb behavior where attributes of the request are stored in the "
"environ.  Now, :class:`pyramid.request.Request` inherits from (the more "
"recent) :class:`webob.request.BaseRequest` instead of "
":class:`webob.request.Request`, which provides the same behavior. "
":class:`pyramid.request.Request` no longer implements its own "
"``__getattr__``, ``__setattr__`` or ``__delattr__`` as a result."
msgstr "これまで：：class： `pyramid.request.Request`：class：` webob.request.Request`から継承し、 `` __getattr__``、 `` __setattr__``、 `` __delattr__``自体を実装して、 adhoc attr \ &quot;要求の属性が環境内に格納されているWebObの動作。さて、：class： `pyramid.request.Request`は：class：` webob.request.Request`の代わりに（もっと最近の）：class： `webob.request.BaseRequest`を継承しています。 ：class： `pyramid.request.Request`はもはや独自の` `__getattr__``、` `__setattr__``または` `__delattr__``を実装しません。"

#: ../../whatsnew-1.1.rst:518
msgid ""
"Deprecated :func:`pyramid.view.is_response` function in favor of (newly-"
"added) :meth:`pyramid.request.Request.is_response` method. Determining if"
" an object is truly a valid response object now requires access to the "
"registry, which is only easily available as a request attribute.  The "
":func:`pyramid.view.is_response` function will still work until it is "
"removed, but now may return an incorrect answer under some (very "
"uncommon) circumstances."
msgstr "deprecated：func： `pyramid.view.is_response`関数は、（新しく追加された）：meth：` pyramid.request.Request.is_response`メソッドを支持します。オブジェクトが本当に有効な応答オブジェクトであるかどうかを判断するには、レジストリにアクセスする必要があります。これは、要求属性としてのみ簡単に利用できます。 ：func： `pyramid.view.is_response`関数は、それが削除されるまでは動作しますが、現在、いくつかの（非常に珍しい）状況下で誤った答えを返す可能性があります。"

#: ../../whatsnew-1.1.rst:526
msgid ""
":class:`pyramid.response.Response` is now a *subclass* of "
"``webob.response.Response`` (in order to directly implement the "
":class:`pyramid.interfaces.IResponse` interface, to speed up response "
"generation)."
msgstr "：class： `pyramid.response.Response`は` `webob.response.Response``の*サブクラス*になりました（レスポンス生成を高速化するために：class：` pyramid.interfaces.IResponse`インタフェースを直接実装するためです） ）。"

#: ../../whatsnew-1.1.rst:531
msgid ""
"The \"exception response\" objects importable from "
"``pyramid.httpexceptions`` (e.g. ``HTTPNotFound``) are no longer just "
"import aliases for classes that actually live in ``webob.exc``.  Instead,"
" we've defined our own exception classes within the module that mirror "
"and emulate the ``webob.exc`` exception response objects almost entirely."
"  See :ref:`http_exception_hierarchy` in the Design Defense chapter for "
"more information."
msgstr "`` pyramid.httpexceptions``（例えば `` HTTPNotFound``）からインポート可能な\ &quot;例外応答\&quot;オブジェクトは、 `` webob.exc``に実際に存在するクラスのインポートエイリアスではなくなりました。代わりに、 `` webob.exc``例外応答オブジェクトをほぼ完全にミラーリングしてエミュレートする独自の例外クラスをモジュール内に定義しました。詳細については、Design Defenseの章の：ref： `http_exception_hierarchy`を参照してください。"

#: ../../whatsnew-1.1.rst:539
msgid ""
"When visiting a URL that represented a static view which resolved to a "
"subdirectory, the ``index.html`` of that subdirectory would not be served"
" properly.  Instead, a redirect to ``/subdir`` would be issued.  This has"
" been fixed, and now visiting a subdirectory that contains an "
"``index.html`` within a static view returns the index.html properly."
msgstr "サブディレクトリに解決された静的ビューを表すURLにアクセスすると、そのサブディレクトリの `` index.html``は適切に処理されません。代わりに、 `` / subdir``へのリダイレクトが発行されます。これは修正され、静的ビュー内の `` index.html``を含むサブディレクトリにアクセスすると、index.htmlが正しく返されます。"

#: ../../whatsnew-1.1.rst:547
msgid ""
"See also `issue #67 on GitHub "
"<https://github.com/Pylons/pyramid/issues/67>`_."
msgstr "GitHubの `issue＃67 <https://github.com/Pylons/pyramid/issues/67> `_。"

#: ../../whatsnew-1.1.rst:550
msgid ""
"Deprecated the "
"``pyramid.config.Configurator.set_renderer_globals_factory`` method and "
"the ``renderer_globals`` Configurator constructor parameter. Users should"
" convert code using this feature to use a BeforeRender event. See the "
"section :ref:`beforerender_event` in the Hooks chapter."
msgstr "`` pyramid.config.Configurator.set_renderer_globals_factory``メソッドと `` renderer_globals``のコンストラクタコンストラクタパラメータは廃止されました。 BeforeRenderイベントを使用するには、この機能を使用してコードを変換する必要があります。フックの章のref： `beforerender_event`を参照してください。"

#: ../../whatsnew-1.1.rst:555
msgid ""
"In Pyramid 1.0, the :class:`pyramid.events.subscriber` directive behaved "
"contrary to the documentation when passed more than one interface object "
"to its constructor.  For example, when the following listener was "
"registered::"
msgstr "Pyramid 1.0では、：class： `pyramid.events.subscriber`ディレクティブは、複数のインタフェースオブジェクトをそのコンストラクタに渡すとドキュメンテーションとは逆の動作をします。たとえば、次のリスナーが登録されているとします。"

#: ../../whatsnew-1.1.rst:563
msgid ""
"The Events chapter docs claimed that the listener would be registered and"
" listening for both ``IFoo`` and ``IBar`` events.  Instead, it registered"
" an \"object event\" subscriber which would only be called if an "
"IObjectEvent was emitted where the object interface was ``IFoo`` and the "
"event interface was ``IBar``."
msgstr "イベントの章docsは、リスナーが登録され、 `` IFoo``と `` IBar``イベントの両方を聞くと主張しました。代わりに、IObjectEventが発行され、オブジェクトインタフェースが &quot;IFoo&quot;で、イベントインタフェースが &quot;IBar&quot;であった場合にのみ呼び出される\ &quot;オブジェクトイベント\&quot;サブスクライバを登録しました。"

#: ../../whatsnew-1.1.rst:569
msgid ""
"The behavior now matches the documentation. If you were relying on the "
"buggy behavior of the 1.0 ``subscriber`` directive in order to register "
"an object event subscriber, you must now pass a sequence to indicate "
"you'd like to register a subscriber for an object event. e.g.::"
msgstr "この動作はドキュメントと一致するようになりました。オブジェクトイベントサブスクライバを登録するために1.0の `` subscriber``ディレクティブのバグの振る舞いに頼っていた場合、オブジェクトイベントのサブスクライバを登録することを示すシーケンスを渡す必要があります。例えば：："

#: ../../whatsnew-1.1.rst:578
msgid ""
"In 1.0, if a :class:`pyramid.events.BeforeRender` event subscriber added "
"a value via the ``__setitem__`` or ``update`` methods of the event object"
" with a key that already existed in the renderer globals dictionary, a "
"``KeyError`` was raised.  With the deprecation of the "
"\"add_renderer_globals\" feature of the configurator, there was no way to"
" override an existing value in the renderer globals dictionary that "
"already existed.  Now, the event object will overwrite an older value "
"that is already in the globals dictionary when its ``__setitem__`` or "
"``update`` is called (as well as the new ``setdefault`` method), just "
"like a plain old dictionary.  As a result, for maximum interoperability "
"with other third-party subscribers, if you write an event subscriber "
"meant to be used as a BeforeRender subscriber, your subscriber code will "
"now need to (using ``.get`` or ``__contains__`` of the event object) "
"ensure no value already exists in the renderer globals dictionary before "
"setting an overriding value."
msgstr "1.0では、class： `pyramid.events.BeforeRender`イベントサブスクライバが、イベントオブジェクトの` `__setitem__``メソッドまたは` `update``メソッドを介してレンダラーグローバルディクショナリにすでに存在しているキーで値を追加した場合、 `` KeyError``が発生しました。コンフィギュレータの\ &quot;add_renderer_globals \&quot;機能の廃止により、既に存在していたレンダラグローバルディクショナリの既存の値を上書きする方法はありませんでした。さて、イベントオブジェクトは、 `` __setitem__``または `` update``が呼び出されたとき（新しい `` setdefault``メソッドと同様に）、グローバルディクショナリにすでにある古い値を上書きします古い辞書。その結果、他のサードパーティの加入者との最大限の相互運用性を実現するために、BeforeRenderサブスクライバとして使用する予定のイベントサブスクライバを書くと、サブスクライバコードが必要になります（ `` .get``または ``____ __contains__``オーバーライド値を設定する前に、レンダラーグローバルディクショナリに値が存在しないことを確認します。"

#: ../../whatsnew-1.1.rst:594
msgid ""
"The :meth:`pyramid.config.Configurator.add_route` method allowed two "
"routes with the same route to be added without an intermediate call to "
":meth:`pyramid.config.Configurator.commit`.  If you now receive a "
"``ConfigurationError`` at startup time that appears to be ``add_route`` "
"related, you'll need to either a) ensure that all of your route names are"
" unique or b) call ``config.commit()`` before adding a second route with "
"the name of a previously added name or c) use a Configurator that works "
"in ``autocommit`` mode."
msgstr "：meth： `pyramid.config.Configurator.add_route`メソッドは：meth：` pyramid.config.Configurator.commit`への中間呼び出しなしで、同じルートを持つ2つのルートを追加することを許可しました。起動時に `` ConfigurationError``が `` add_route``に関連しているように見える場合は、a）すべてのルート名が一意であることを確認するか、またはb） `` config.commit以前に追加された名前の名前を持つ第2のルートを追加する前に、または `` autocommit``モードで動作するConfiguratorを使用してください。"

#: ../../whatsnew-1.1.rst:604
msgid "Dependency Changes"
msgstr "依存関係の変更"

#: ../../whatsnew-1.1.rst:606
msgid ""
"Pyramid now depends on :term:`WebOb` >= 1.0.2 as tests depend on the "
"bugfix in that release: \"Fix handling of WSGI environs with missing "
"``SCRIPT_NAME``\".  (Note that in reality, everyone should probably be "
"using 1.0.4 or better though, as WebOb 1.0.2 and 1.0.3 were effectively "
"brownbag releases.)"
msgstr "Pyramidは、テストではそのリリースのバグ修正に依存しているため、term： `WebOb`&gt; = 1.0.2に依存しています：\&quot; SCRIPT_NAME`` \がないWSGI環境の処理を修正しました。 （WebOb 1.0.2と1.0.3は実質的にブラウンバックのリリースであったため、実際には1.0.4以上のバージョンを使用しているはずです）。"

#: ../../whatsnew-1.1.rst:613
msgid "Documentation Enhancements"
msgstr "ドキュメントの機能拡張"

#: ../../whatsnew-1.1.rst:615
msgid ""
"Added a section entitled :ref:`writing_a_script` to the \"Command-Line "
"Pyramid\" chapter."
msgstr "\ &quot;Command-Line Pyramid \&quot;章に：ref： `writing_a_script`というセクションを追加しました。"

#: ../../whatsnew-1.1.rst:618
msgid "The :ref:`bfg_wiki_tutorial` was updated slightly."
msgstr "：ref： `bfg_wiki_tutorial`が少し更新されました。"

#: ../../whatsnew-1.1.rst:620
msgid "The :ref:`bfg_sql_wiki_tutorial` was updated slightly."
msgstr "：ref： `bfg_sql_wiki_tutorial`が少し更新されました。"

#: ../../whatsnew-1.1.rst:622
msgid ""
"Made :class:`pyramid.interfaces.IAuthenticationPolicy` and "
":class:`pyramid.interfaces.IAuthorizationPolicy` public interfaces, and "
"they are now referred to within the :mod:`pyramid.authentication` and "
":mod:`pyramid.authorization` API docs."
msgstr "`pyramid.interfaces.IAuthenticationPolicy`と：class：` pyramid.interfaces.IAuthorizationPolicy`パブリックインターフェースを作成しました：mod： `pyramid.authentication`と：mod：` pyramid.authorization` APIドキュメント"

#: ../../whatsnew-1.1.rst:627
msgid ""
"Render the function definitions for each exposed interface in "
":mod:`pyramid.interfaces`."
msgstr "公開された各インタフェースの関数定義を：mod： `pyramid.interfaces`にレンダリングします。"

#: ../../whatsnew-1.1.rst:630
msgid ""
"Add missing docs reference to "
":meth:`pyramid.config.Configurator.set_view_mapper` and refer to it "
"within the documentation section entitled :ref:`using_a_view_mapper`."
msgstr "不足しているドキュメントの参照を：meth： `pyramid.config.Configurator.set_view_mapper`に追加し、参照：ref：` using_a_view_mapper`というドキュメントのセクションを参照してください。"

#: ../../whatsnew-1.1.rst:634
msgid ""
"Added section to the \"Environment Variables and ``.ini`` File Settings\""
" chapter in the narrative documentation section entitled "
":ref:`adding_a_custom_setting`."
msgstr "環境変数と `` .ini``ファイル設定\章にセクションを追加しました：ref： `adding_a_custom_setting`というナラティブドキュメンテーションセクション。"

#: ../../whatsnew-1.1.rst:638
msgid ""
"Added documentation for a :term:`multidict` as "
":class:`pyramid.interfaces.IMultiDict`."
msgstr "：term： `multidict`をclass：` pyramid.interfaces.IMultiDict`として追加しました。"

#: ../../whatsnew-1.1.rst:641
msgid ""
"Added a section to the \"URL Dispatch\" narrative chapter regarding the "
"new \"static\" route feature entitled :ref:`static_route_narr`."
msgstr "ref： `static_route_narr`という新しい\&quot;静的\ &quot;ルート機能に関するセクションをURLディスパッチ\ nの章に追加しました。"

#: ../../whatsnew-1.1.rst:644
msgid "Added API docs for :func:`pyramid.httpexceptions.exception_response`."
msgstr "func： `pyramid.httpexceptions.exception_response`のAPIドキュメントを追加しました。"

#: ../../whatsnew-1.1.rst:646
msgid ""
"Added :ref:`http_exceptions` section to Views narrative chapter including"
" a description of :func:`pyramid.httpexceptions.exception_response`."
msgstr "Func： `pyramid.httpexceptions.exception_response`の説明を含むビューの説明の章にref：` http_exceptions`セクションを追加しました。"

#: ../../whatsnew-1.1.rst:649
msgid ""
"Added API docs for "
":class:`pyramid.authentication.SessionAuthenticationPolicy`."
msgstr "class： `pyramid.authentication.SessionAuthenticationPolicy`のAPIドキュメントを追加しました。"

