# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/testing.rst:4
msgid ":mod:`pyramid.testing`"
msgstr ""

#: of pyramid.testing.setUp:1
msgid ""
"Set :app:`Pyramid` registry and request thread locals for the duration of"
" a single unit test."
msgstr ""

#: of pyramid.testing.setUp:4
msgid ""
"Use this function in the ``setUp`` method of a unittest test case which "
"directly or indirectly uses:"
msgstr ""

#: of pyramid.testing.setUp:7
msgid ""
"any method of the :class:`pyramid.config.Configurator` object returned by"
" this function."
msgstr ""

#: of pyramid.testing.setUp:10
msgid ""
"the :func:`pyramid.threadlocal.get_current_registry` or "
":func:`pyramid.threadlocal.get_current_request` functions."
msgstr ""

#: of pyramid.testing.setUp:13
msgid ""
"If you use the ``get_current_*`` functions (or call :app:`Pyramid` code "
"that uses these functions) without calling ``setUp``, "
":func:`pyramid.threadlocal.get_current_registry` will return a *global* "
":term:`application registry`, which may cause unit tests to not be "
"isolated with respect to registrations they perform."
msgstr ""

#: of pyramid.testing.setUp:19
msgid ""
"If the ``registry`` argument is ``None``, a new empty :term:`application "
"registry` will be created (an instance of the "
":class:`pyramid.registry.Registry` class).  If the ``registry`` argument "
"is not ``None``, the value passed in should be an instance of the "
":class:`pyramid.registry.Registry` class or a suitable testing analogue."
msgstr ""

#: of pyramid.testing.setUp:26
msgid ""
"After ``setUp`` is finished, the registry returned by the "
":func:`pyramid.threadlocal.get_current_registry` function will be the "
"passed (or constructed) registry until :func:`pyramid.testing.tearDown` "
"is called (or :func:`pyramid.testing.setUp` is called again) ."
msgstr ""

#: of pyramid.testing.setUp:32
msgid ""
"If the ``hook_zca`` argument is ``True``, ``setUp`` will attempt to "
"perform the operation ``zope.component.getSiteManager.sethook( "
"pyramid.threadlocal.get_current_registry)``, which will cause the "
":term:`Zope Component Architecture` global API (e.g. "
":func:`zope.component.getSiteManager`, :func:`zope.component.getAdapter`,"
" and so on) to use the registry constructed by ``setUp`` as the value it "
"returns from :func:`zope.component.getSiteManager`.  If the "
":mod:`zope.component` package cannot be imported, or if ``hook_zca`` is "
"``False``, the hook will not be set."
msgstr ""

#: of pyramid.testing.setUp:43
msgid ""
"If ``settings`` is not ``None``, it must be a dictionary representing the"
" values passed to a Configurator as its ``settings=`` argument."
msgstr ""

#: of pyramid.testing.setUp:46
msgid ""
"If ``package`` is ``None`` it will be set to the caller's package. The "
"``package`` setting in the :class:`pyramid.config.Configurator` will "
"affect any relative imports made via "
":meth:`pyramid.config.Configurator.include` or "
":meth:`pyramid.config.Configurator.maybe_dotted`."
msgstr ""

#: of pyramid.testing.setUp:52
msgid ""
"This function returns an instance of the "
":class:`pyramid.config.Configurator` class, which can be used for further"
" configuration to set up an environment suitable for a unit or "
"integration test.  The ``registry`` attribute attached to the "
"Configurator instance represents the 'current' :term:`application "
"registry`; the same registry will be returned by "
":func:`pyramid.threadlocal.get_current_registry` during the execution of "
"the test."
msgstr ""

#: of pyramid.testing.tearDown:1
msgid ""
"Undo the effects of :func:`pyramid.testing.setUp`.  Use this function in "
"the ``tearDown`` method of a unit test that uses "
":func:`pyramid.testing.setUp` in its ``setUp`` method."
msgstr ""

#: of pyramid.testing.tearDown:5
msgid ""
"If the ``unhook_zca`` argument is ``True`` (the default), call "
":func:`zope.component.getSiteManager.reset`.  This undoes the action of "
":func:`pyramid.testing.setUp` when called with the argument "
"``hook_zca=True``.  If :mod:`zope.component` cannot be imported, "
"``unhook_zca`` is set to ``False``."
msgstr ""

#: of pyramid.testing.testConfig:1
msgid "Returns a context manager for test set up."
msgstr ""

#: of pyramid.testing.testConfig:3
msgid ""
"This context manager calls :func:`pyramid.testing.setUp` when entering "
"and :func:`pyramid.testing.tearDown` when exiting."
msgstr ""

#: of pyramid.testing.testConfig:6
msgid ""
"All arguments are passed directly to :func:`pyramid.testing.setUp`. If "
"the ZCA is hooked, it will always be un-hooked in tearDown."
msgstr ""

#: of pyramid.testing.testConfig:9
msgid "This context manager allows you to write test code like this:"
msgstr ""

#: of pyramid.testing.cleanUp:1
msgid "An alias for :func:`pyramid.testing.setUp`."
msgstr ""

#: of pyramid.testing.DummyResource:1
msgid "A dummy :app:`Pyramid` :term:`resource` object."
msgstr ""

#: of pyramid.testing.DummyResource.clone:1
msgid ""
"Create a clone of the resource object.  If ``__name__`` or ``__parent__``"
" arguments are passed, use these values to override the existing "
"``__name__`` or ``__parent__`` of the resource.  If any extra keyword "
"args are passed in via the ``kw`` argument, use these keywords to add to "
"or override existing resource keywords (attributes)."
msgstr ""

#: of pyramid.testing.DummyResource.items:1
msgid "Return the items set by __setitem__"
msgstr ""

#: of pyramid.testing.DummyResource.keys:1
msgid "Return the keys set by __setitem__"
msgstr ""

#: of pyramid.testing.DummyResource.values:1
msgid "Return the values set by __setitem__"
msgstr ""

#: of pyramid.testing.DummyRequest:1
msgid "A DummyRequest object (incompletely) imitates a :term:`request` object."
msgstr ""

#: of pyramid.testing.DummyRequest:3
msgid ""
"The ``params``, ``environ``, ``headers``, ``path``, and ``cookies`` "
"arguments correspond to their :term:`WebOb` equivalents."
msgstr ""

#: of pyramid.testing.DummyRequest:7
msgid ""
"The ``post`` argument,  if passed, populates the request's ``POST`` "
"attribute, but *not* ``params``, in order to allow testing that the app "
"accepts data for a given view only from POST requests. This argument also"
" sets ``self.method`` to \"POST\"."
msgstr ""

#: of pyramid.testing.DummyRequest:12
msgid "Extra keyword arguments are assigned as attributes of the request itself."
msgstr ""

#: of pyramid.testing.DummyRequest:15
msgid ""
"Note that DummyRequest does not have complete fidelity with a \"real\" "
"request.  For example, by default, the DummyRequest ``GET`` and ``POST`` "
"attributes are of type ``dict``, unlike a normal Request's GET and POST, "
"which are of type ``MultiDict``. If your code uses the features of "
"MultiDict, you should either use a real :class:`pyramid.request.Request` "
"or adapt your DummyRequest by replacing the attributes with ``MultiDict``"
" instances."
msgstr ""

#: of pyramid.testing.DummyRequest:23
msgid ""
"Other similar incompatibilities exist.  If you need all the features of a"
" Request, use the :class:`pyramid.request.Request` class itself rather "
"than this class while writing tests."
msgstr ""

#: of pyramid.testing.DummyTemplateRenderer:1
msgid ""
"An instance of this class is returned from "
":meth:`pyramid.config.Configurator.testing_add_renderer`.  It has a "
"helper function (``assert_``) that makes it possible to make an assertion"
" which compares data passed to the renderer by the view function against "
"expected key/value pairs."
msgstr ""

#: of pyramid.testing.DummyTemplateRenderer.assert_:1
msgid ""
"Accept an arbitrary set of assertion key/value pairs.  For each assertion"
" key/value pair assert that the renderer (eg. "
":func:`pyramid.renderers.render_to_response`) received the key with a "
"value that equals the asserted value. If the renderer did not receive the"
" key at all, or the value received by the renderer doesn't match the "
"assertion value, raise an :exc:`AssertionError`."
msgstr ""

