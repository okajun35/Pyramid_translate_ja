# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../api/testing.rst:4
msgid ":mod:`pyramid.testing`"
msgstr "(機械翻訳) :mod:`pyramid.testing`"

#: of pyramid.testing.setUp:1
msgid ""
"Set :app:`Pyramid` registry and request thread locals for the duration of"
" a single unit test."
msgstr "Set：app： `Pyramid`レジストリと単一ユニットテストの期間中のスレッドローカルを要求します。"

#: of pyramid.testing.setUp:4
msgid ""
"Use this function in the ``setUp`` method of a unittest test case which "
"directly or indirectly uses:"
msgstr "直接または間接的に以下を使用するunittestテストケースの `` setUp``メソッドでこの関数を使用してください："

#: of pyramid.testing.setUp:7
msgid ""
"any method of the :class:`pyramid.config.Configurator` object returned by"
" this function."
msgstr "この関数が返す：class： `pyramid.config.Configurator`オブジェクトのメソッドです。"

#: of pyramid.testing.setUp:10
msgid ""
"the :func:`pyramid.threadlocal.get_current_registry` or "
":func:`pyramid.threadlocal.get_current_request` functions."
msgstr "：func： `pyramid.threadlocal.get_current_registry`または：func：` pyramid.threadlocal.get_current_request`関数を呼び出します。"

#: of pyramid.testing.setUp:13
msgid ""
"If you use the ``get_current_*`` functions (or call :app:`Pyramid` code "
"that uses these functions) without calling ``setUp``, "
":func:`pyramid.threadlocal.get_current_registry` will return a *global* "
":term:`application registry`, which may cause unit tests to not be "
"isolated with respect to registrations they perform."
msgstr "`` setUp``を呼び出さずに `` get_current_ * ``関数（またはこれらの関数を使用するapp： `Pyramid`コードを呼び出す）を使うと、：func：` pyramid.threadlocal.get_current_registry`は*グローバル* ：term： `アプリケーションレジストリ &#39;。ユニットテストが実行される登録に関して分離されないことがあります。"

#: of pyramid.testing.setUp:19
msgid ""
"If the ``registry`` argument is ``None``, a new empty :term:`application "
"registry` will be created (an instance of the "
":class:`pyramid.registry.Registry` class).  If the ``registry`` argument "
"is not ``None``, the value passed in should be an instance of the "
":class:`pyramid.registry.Registry` class or a suitable testing analogue."
msgstr "`` registry``引数が `` None``の場合、新しい空：term： `アプリケーションレジストリ`（：class： `pyramid.registry.Registry`クラスのインスタンス）が作成されます。 `` registry``引数が `` None``でない場合、渡される値は：class： `pyramid.registry.Registry`クラスのインスタンスであるか、適切なテスト用アナログでなければなりません。"

#: of pyramid.testing.setUp:26
msgid ""
"After ``setUp`` is finished, the registry returned by the "
":func:`pyramid.threadlocal.get_current_registry` function will be the "
"passed (or constructed) registry until :func:`pyramid.testing.tearDown` "
"is called (or :func:`pyramid.testing.setUp` is called again) ."
msgstr "func： `pyramid.threadlocal.get_current_registry`関数は、func：` pyramid.testing.tearDown`が呼び出されるまで渡された（または構築された）レジストリになります： func： `pyramid.testing.setUp`が再度呼び出されます）。"

#: of pyramid.testing.setUp:32
msgid ""
"If the ``hook_zca`` argument is ``True``, ``setUp`` will attempt to "
"perform the operation ``zope.component.getSiteManager.sethook( "
"pyramid.threadlocal.get_current_registry)``, which will cause the "
":term:`Zope Component Architecture` global API (e.g. "
":func:`zope.component.getSiteManager`, :func:`zope.component.getAdapter`,"
" and so on) to use the registry constructed by ``setUp`` as the value it "
"returns from :func:`zope.component.getSiteManager`.  If the "
":mod:`zope.component` package cannot be imported, or if ``hook_zca`` is "
"``False``, the hook will not be set."
msgstr "`` hook_zca``引数が `` True``の場合、 `` setUp``は `` zope.component.getSiteManager.sethook（pyramid.threadlocal.get_current_registry） ``という操作を実行しようとします。 `` setUp``で構築されたレジストリを `` zope.com.getSiteManager``、 `` zope.component.getAdapter`などの `` Zope Component Architecture``のグローバルAPI（例：func： `zope.component.getSiteManager`、：func：` zope.component.getAdapter`など）値：func： `zope.component.getSiteManager`から返されます。 ：mod： `zope.component`パッケージをインポートできない場合、または` `hook_zca``が` `False``の場合、フックは設定されません。"

#: of pyramid.testing.setUp:43
msgid ""
"If ``settings`` is not ``None``, it must be a dictionary representing the"
" values passed to a Configurator as its ``settings=`` argument."
msgstr "`` settings``が `` None``でなければ、それはConfiguratorに `` settings = ``引数として渡された値を表す辞書でなければなりません。"

#: of pyramid.testing.setUp:46
msgid ""
"If ``package`` is ``None`` it will be set to the caller's package. The "
"``package`` setting in the :class:`pyramid.config.Configurator` will "
"affect any relative imports made via "
":meth:`pyramid.config.Configurator.include` or "
":meth:`pyramid.config.Configurator.maybe_dotted`."
msgstr "`` package``が `` None``ならば、それは呼び出し元のパッケージに設定されます。 ：class： `pyramid.config.Configurator`の` `package``設定は：meth：` pyramid.config.Configurator.include`または：meth： `pyramid.config.Configurator.maybe_dottedを介して行われる相対的なインポートに影響します`。"

#: of pyramid.testing.setUp:52
msgid ""
"This function returns an instance of the "
":class:`pyramid.config.Configurator` class, which can be used for further"
" configuration to set up an environment suitable for a unit or "
"integration test.  The ``registry`` attribute attached to the "
"Configurator instance represents the 'current' :term:`application "
"registry`; the same registry will be returned by "
":func:`pyramid.threadlocal.get_current_registry` during the execution of "
"the test."
msgstr "この関数は、：class： `pyramid.config.Configurator`クラスのインスタンスを返します。これは、ユニットまたは統合テストに適した環境を設定するためのさらなる設定に使用できます。 Configuratorインスタンスに添付された `` registry``属性は、 &#39;current&#39;：term： `application registry`を表します。同じレジストリがテストの実行中に：func： `pyramid.threadlocal.get_current_registry &#39;によって返されます。"

#: of pyramid.testing.tearDown:1
msgid ""
"Undo the effects of :func:`pyramid.testing.setUp`.  Use this function in "
"the ``tearDown`` method of a unit test that uses "
":func:`pyramid.testing.setUp` in its ``setUp`` method."
msgstr "func： `pyramid.testing.setUp`の効果を元に戻します。この関数は、 `` setUp``メソッドで：func： `pyramid.testing.setUp`を使用する単体テストの` `tearDown``メソッドで使用します。"

#: of pyramid.testing.tearDown:5
msgid ""
"If the ``unhook_zca`` argument is ``True`` (the default), call "
":func:`zope.component.getSiteManager.reset`.  This undoes the action of "
":func:`pyramid.testing.setUp` when called with the argument "
"``hook_zca=True``.  If :mod:`zope.component` cannot be imported, "
"``unhook_zca`` is set to ``False``."
msgstr "`` unhook_zca``引数が `` True``（デフォルト）の場合、func： `zope.component.getSiteManager.reset`を呼び出します。これは引数 `` hook_zca = True``で呼び出されたとき：func： `pyramid.testing.setUp`のアクションを元に戻します。 ：mod： `zope.component`をインポートできない場合、` `unhook_zca``は` `False``に設定されます。"

#: of pyramid.testing.testConfig:1
msgid "Returns a context manager for test set up."
msgstr "テスト設定用のコンテキストマネージャを返します。"

#: of pyramid.testing.testConfig:3
msgid ""
"This context manager calls :func:`pyramid.testing.setUp` when entering "
"and :func:`pyramid.testing.tearDown` when exiting."
msgstr "このコンテキストマネージャは、func： `pyramid.testing.setUp`を呼び出すときには：func：` pyramid.testing.tearDown`を呼び出します。"

#: of pyramid.testing.testConfig:6
msgid ""
"All arguments are passed directly to :func:`pyramid.testing.setUp`. If "
"the ZCA is hooked, it will always be un-hooked in tearDown."
msgstr "すべての引数は：func： `pyramid.testing.setUp`に直接渡されます。 ZCAがフックされている場合は、tearDownでは常に解除されます。"

#: of pyramid.testing.testConfig:9
msgid "This context manager allows you to write test code like this:"
msgstr "このコンテキストマネージャでは、次のようなテストコードを書くことができます："

#: of pyramid.testing.cleanUp:1
msgid "An alias for :func:`pyramid.testing.setUp`."
msgstr "：func： `pyramid.testing.setUp`の別名です。"

#: of pyramid.testing.DummyResource:1
msgid "A dummy :app:`Pyramid` :term:`resource` object."
msgstr "ダミー：app： `Pyramid`：term：` resource`オブジェクトです。"

#: of pyramid.testing.DummyResource.clone:1
msgid ""
"Create a clone of the resource object.  If ``__name__`` or ``__parent__``"
" arguments are passed, use these values to override the existing "
"``__name__`` or ``__parent__`` of the resource.  If any extra keyword "
"args are passed in via the ``kw`` argument, use these keywords to add to "
"or override existing resource keywords (attributes)."
msgstr "リソースオブジェクトのクローンを作成します。 `` __name__``または `` __parent__``引数が渡された場合は、これらの値を使用してリソースの既存の `` __name__``または `` __parent__``を上書きします。余分なキーワード引数が `` kw``引数で渡された場合は、これらのキーワードを使用して既存のリソースキーワード（属性）を追加または上書きします。"

#: of pyramid.testing.DummyResource.items:1
msgid "Return the items set by __setitem__"
msgstr "__setitem__で設定した項目を返します。"

#: of pyramid.testing.DummyResource.keys:1
msgid "Return the keys set by __setitem__"
msgstr "__setitem__で設定されたキーを返します。"

#: of pyramid.testing.DummyResource.values:1
msgid "Return the values set by __setitem__"
msgstr "__setitem__で設定された値を返します。"

#: of pyramid.testing.DummyRequest:1
msgid "A DummyRequest object (incompletely) imitates a :term:`request` object."
msgstr "DummyRequestオブジェクト（不完全）はa：term： `request`オブジェクトを模倣します。"

#: of pyramid.testing.DummyRequest:3
msgid ""
"The ``params``, ``environ``, ``headers``, ``path``, and ``cookies`` "
"arguments correspond to their :term:`WebOb` equivalents."
msgstr "`` phams``、 `` environ``、 `` headers``、 `` path``、 `` cookies``の引数は：term： `WebOb`に相当します。"

#: of pyramid.testing.DummyRequest:7
msgid ""
"The ``post`` argument,  if passed, populates the request's ``POST`` "
"attribute, but *not* ``params``, in order to allow testing that the app "
"accepts data for a given view only from POST requests. This argument also"
" sets ``self.method`` to \"POST\"."
msgstr "渡された場合、 `` post``引数は、アプリケーションがPOSTリクエストからの特定のビューのデータを受け入れることをテストできるように、リクエストの `` POST``属性を取りますが、 `` `` params``ではありません。この引数は `` self.method``を\ &quot;POST \&quot;に設定します。"

#: of pyramid.testing.DummyRequest:12
msgid "Extra keyword arguments are assigned as attributes of the request itself."
msgstr "余分なキーワード引数は、リクエスト自体の属性として割り当てられます。"

#: of pyramid.testing.DummyRequest:15
msgid ""
"Note that DummyRequest does not have complete fidelity with a \"real\" "
"request.  For example, by default, the DummyRequest ``GET`` and ``POST`` "
"attributes are of type ``dict``, unlike a normal Request's GET and POST, "
"which are of type ``MultiDict``. If your code uses the features of "
"MultiDict, you should either use a real :class:`pyramid.request.Request` "
"or adapt your DummyRequest by replacing the attributes with ``MultiDict``"
" instances."
msgstr "DummyRequestは\ &quot;実際の\&quot;要求に対して完全な忠実性を持っていないことに注意してください。たとえば、デフォルトでは、DummyRequestの `` GET``属性と `` POST``属性は、 `` MultiDict``型の通常のRequestのGETとPOSTとは異なり、 `` dict``型です。コードがMultiDictの機能を使用している場合は、real：class： `pyramid.request.Request`を使用するか、属性を` `MultiDict``インスタンスに置き換えることによってDummyRequestを適合させる必要があります。"

#: of pyramid.testing.DummyRequest:23
msgid ""
"Other similar incompatibilities exist.  If you need all the features of a"
" Request, use the :class:`pyramid.request.Request` class itself rather "
"than this class while writing tests."
msgstr "他の同様の非互換性も存在する。リクエストのすべての機能が必要な場合は、テストを書くときにこのクラスではなく、：class： `pyramid.request.Request`クラスそのものを使用してください。"

#: of pyramid.testing.DummyTemplateRenderer:1
msgid ""
"An instance of this class is returned from "
":meth:`pyramid.config.Configurator.testing_add_renderer`.  It has a "
"helper function (``assert_``) that makes it possible to make an assertion"
" which compares data passed to the renderer by the view function against "
"expected key/value pairs."
msgstr "このクラスのインスタンスは：meth： `pyramid.config.Configurator.testing_add_renderer`から返されます。ビューファンクションによってレンダラーに渡されたデータを期待されるキーと値のペアと比較するアサーションを作成するヘルパー関数（assert_``）を持っています。"

#: of pyramid.testing.DummyTemplateRenderer.assert_:1
msgid ""
"Accept an arbitrary set of assertion key/value pairs.  For each assertion"
" key/value pair assert that the renderer (eg. "
":func:`pyramid.renderers.render_to_response`) received the key with a "
"value that equals the asserted value. If the renderer did not receive the"
" key at all, or the value received by the renderer doesn't match the "
"assertion value, raise an :exc:`AssertionError`."
msgstr "アサーションキーと値のペアの任意のセットを受け入れます。各アサーションキー/値のペアに対して、レンダラー（例えば、：func： `pyramid.renderers.render_to_response`）が、アサートされた値と等しい値を持つキーを受け取ったことをアサーションします。レンダラーがキーをまったく受け取らなかった場合、またはレンダラーが受け取った値がアサーション値と一致しない場合は、：exc： `AssertionError`を発生させます。"

