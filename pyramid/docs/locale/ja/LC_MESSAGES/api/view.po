# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../api/view.rst:4
msgid ":mod:`pyramid.view`"
msgstr "(機械翻訳)  :mod:`pyramid.view`"

#: of pyramid.view.render_view_to_response:1
msgid ""
"Call the :term:`view callable` configured with a :term:`view "
"configuration` that matches the :term:`view name` ``name`` registered "
"against the specified ``context`` and ``request`` and return a "
":term:`response` object.  This function will return ``None`` if a "
"corresponding :term:`view callable` cannot be found (when no :term:`view "
"configuration` matches the combination of ``name`` / ``context`` / and "
"``request``)."
msgstr "指定された `` context``と `` request``に登録された：term： `view name`` `name``と一致する：term：` view configuration`で設定された：term： `view callable`を呼び出します。 a：term： `response`オブジェクトを返します。この関数は、対応する：term： `view callable`が見つからない場合（term：` view configuration`が `` name`` / `` context`` / `` `要求`）。"

#: of pyramid.view.render_view_to_response:9
msgid ""
"If `secure`` is ``True``, and the :term:`view callable` found is "
"protected by a permission, the permission will be checked before calling "
"the view function.  If the permission check disallows view execution "
"(based on the current :term:`authorization policy`), a "
":exc:`pyramid.httpexceptions.HTTPForbidden` exception will be raised. The"
" exception's ``args`` attribute explains why the view access was "
"disallowed."
msgstr "`secure`が` `True``であり、：term：` view callable`がパーミッションで保護されている場合、ビュー関数を呼び出す前にパーミッションがチェックされます。権限チェックによって（現在の：term： `認可ポリシー`に基づいて）ビューの実行が許可されない場合、a：exc： `pyramid.httpexceptions.HTTPForbidden`例外が送出されます。例外の `` args``属性は、ビューのアクセスが許可されなかった理由を説明します。"

#: of pyramid.view.render_view:21 pyramid.view.render_view_to_iterable:23
#: pyramid.view.render_view_to_response:17
msgid "If ``secure`` is ``False``, no permission checking is done."
msgstr "`` secure``が `` False``の場合、権限チェックは行われません。"

#: of pyramid.view.render_view_to_iterable:1
msgid ""
"Call the :term:`view callable` configured with a :term:`view "
"configuration` that matches the :term:`view name` ``name`` registered "
"against the specified ``context`` and ``request`` and return an iterable "
"object which represents the body of a response. This function will return"
" ``None`` if a corresponding :term:`view callable` cannot be found (when "
"no :term:`view configuration` matches the combination of ``name`` / "
"``context`` / and ``request``).  Additionally, this function will raise a"
" :exc:`ValueError` if a view function is found and called but the view "
"function's result does not have an ``app_iter`` attribute."
msgstr "指定された `` context``と `` request``に登録された：term： `view name`` `name``と一致する：term：` view configuration`で設定された：term： `view callable`を呼び出します。応答の本体を表す反復可能なオブジェクトを返します。この関数は、対応する：term： `view callable`が見つからない場合（term：` view configuration`が `` name`` / `` context`` / `` `要求`）。さらに、この関数は、ビュー関数が見つかって呼び出されたが、ビュー関数の結果に `` app_iter``属性がない場合、：exc： `ValueError`を送出します。"

#: of pyramid.view.render_view_to_iterable:12
msgid ""
"You can usually get the bytestring representation of the return value of "
"this function by calling ``b''.join(iterable)``, or just use "
":func:`pyramid.view.render_view` instead."
msgstr "通常、 `` b &#39;&#39;。join（iterable） ``を呼び出すか、代わりに：func： `pyramid.view.render_view`を使うだけで、この関数の戻り値のバイトテスト表現を得ることができます。"

#: of pyramid.view.render_view_to_iterable:16
msgid ""
"If ``secure`` is ``True``, and the view is protected by a permission, the"
" permission will be checked before the view function is invoked.  If the "
"permission check disallows view execution (based on the current "
":term:`authentication policy`), a "
":exc:`pyramid.httpexceptions.HTTPForbidden` exception will be raised; its"
" ``args`` attribute explains why the view access was disallowed."
msgstr "`` secure``が `` True``で、ビューがパーミッションで保護されている場合、ビュー関数が呼び出される前にパーミッションがチェックされます。権限チェックによって（現在の：term： `認証ポリシー`に基づいて）ビューの実行が許可されない場合、a：exc： `pyramid.httpexceptions.HTTPForbidden`例外が送出されます。その `` args``属性は、なぜviewアクセスが許可されなかったのかを説明します。"

#: of pyramid.view.render_view:1
msgid ""
"Call the :term:`view callable` configured with a :term:`view "
"configuration` that matches the :term:`view name` ``name`` registered "
"against the specified ``context`` and ``request`` and unwind the view "
"response's ``app_iter`` (see :ref:`the_response`) into a single "
"bytestring.  This function will return ``None`` if a corresponding "
":term:`view callable` cannot be found (when no :term:`view configuration`"
" matches the combination of ``name`` / ``context`` / and ``request``).  "
"Additionally, this function will raise a :exc:`ValueError` if a view "
"function is found and called but the view function's result does not have"
" an ``app_iter`` attribute. This function will return ``None`` if a "
"corresponding view cannot be found."
msgstr "指定された `` context``と `` request``に登録された：term： `view name`` `name``と一致する：term：` view configuration`で設定された：term： `view callable`を呼び出します。ビュー応答の `` app_iter``（参照：ref： `the_response`）を単一のバイトコードに戻します。この関数は、対応する：term： `view callable`が見つからない場合（term：` view configuration`が `` name`` / `` context`` / `` `要求`）。さらに、この関数は、ビュー関数が見つかって呼び出されたが、ビュー関数の結果に `` app_iter``属性がない場合、：exc： `ValueError`を送出します。対応するビューが見つからない場合、この関数は `` None``を返します。"

#: of pyramid.view.render_view:14
msgid ""
"If ``secure`` is ``True``, and the view is protected by a permission, the"
" permission will be checked before the view is invoked.  If the "
"permission check disallows view execution (based on the current "
":term:`authorization policy`), a "
":exc:`pyramid.httpexceptions.HTTPForbidden` exception will be raised; its"
" ``args`` attribute explains why the view access was disallowed."
msgstr "`` secure``が `` True``で、ビューがパーミッションで保護されている場合、パーミッションはビューが呼び出される前にチェックされます。権限チェックで（現在の：term： `認可ポリシー`に基づいて）ビューの実行が許可されない場合、a：exc： `pyramid.httpexceptions.HTTPForbidden`例外が送出されます。その `` args``属性は、なぜviewアクセスが許可されなかったのかを説明します。"

#: of pyramid.view.view_config:1
msgid ""
"A function, class or method :term:`decorator` which allows a developer to"
" create view registrations nearer to a :term:`view callable` definition "
"than use :term:`imperative configuration` to do the same."
msgstr "関数：クラス：メソッド：term： `decorator`：開発者はビュー登録をa：term：` view callable`に近いものにすることができます：term： `imperative configuration`"

#: of pyramid.view.view_config:6
msgid "For example, this code in a module ``views.py``::"
msgstr "例えば、このコードは `` views.py`` ::モジュール"

#: of pyramid.view.view_config:15
msgid ""
"Might replace the following call to the "
":meth:`pyramid.config.Configurator.add_view` method::"
msgstr "：meth： `pyramid.config.Configurator.add_view`メソッドへの以下の呼び出しを置き換えるかもしれません::"

#: of pyramid.view.view_config:27
msgid ""
":class:`pyramid.view.view_config` supports the following keyword "
"arguments: ``context``, ``exception``, ``permission``, ``name``, "
"``request_type``, ``route_name``, ``request_method``, ``request_param``, "
"``containment``, ``xhr``, ``accept``, ``header``, ``path_info``, "
"``custom_predicates``, ``decorator``, ``mapper``, ``http_cache``, "
"``require_csrf``, ``match_param``, ``check_csrf``, ``physical_path``, and"
" ``view_options``."
msgstr "：class： `pyramid.view.view_config`は、` `context``、` `exception``、` `permission``、` `name``、` `request_type``、` `route_name`のキーワード引数をサポートしています。 `` request_method``、 `` request_param``、 `` containment``、 `` xhr``、 `` accept``、 `` header``、 `` path_info``、 `` custom_predicates``、 http_cache``、 `require_csrf``、` match_param``、 `check_csrf``、` `physical_path``、` `view_options``のように、` `デコレータ` `、` `デコレータ` `、` `"

#: of pyramid.view.view_config:35
msgid ""
"The meanings of these arguments are the same as the arguments passed to "
":meth:`pyramid.config.Configurator.add_view`.  If any argument is left "
"out, its default will be the equivalent ``add_view`` default."
msgstr "これらの引数の意味は、meth： `pyramid.config.Configurator.add_view`に渡される引数と同じです。引数が指定されていない場合、デフォルトは `` add_view``と同じです。"

#: of pyramid.view.view_config:39
msgid ""
"Two additional keyword arguments which will be passed to the "
":term:`venusian` ``attach`` function are ``_depth`` and ``_category``."
msgstr "：term： `venusian`` `attach``関数に渡される2つの追加のキーワード引数は` `_depth``と` `_category``です。"

#: of pyramid.view.view_config:42
msgid ""
"``_depth`` is provided for people who wish to reuse this class from "
"another decorator. The default value is ``0`` and should be specified "
"relative to the ``view_config`` invocation. It will be passed in to the "
":term:`venusian` ``attach`` function as the depth of the callstack when "
"Venusian checks if the decorator is being used in a class or module "
"context. It's not often used, but it can be useful in this circumstance."
msgstr "`` _depth``はこのクラスを別のデコレータから再利用したい人に提供されます。デフォルト値は `` 0``で、 `` view_config``の呼び出しに関連して指定する必要があります。 Venusianがデコレータがクラスまたはモジュールコンテキストで使用されているかどうかをチェックするときに、callstackの深さとして：term： `venusian`` `attach``関数に渡されます。それは頻繁には使用されませんが、この状況では便利です。"

#: of pyramid.view.view_config:49
msgid ""
"``_category`` sets the decorator category name. It can be useful in "
"combination with the ``category`` argument of ``scan`` to control which "
"views should be processed."
msgstr "`` _category``はデコレータのカテゴリ名を設定します。これは、どのビューを処理するかを制御する `` scan``の `` category``引数と組み合わせて使うと便利です。"

#: of pyramid.view.view_config:53
msgid ""
"See the :py:func:`venusian.attach` function in Venusian for more "
"information about the ``_depth`` and ``_category`` arguments."
msgstr "`` _depth``と `` _category``引数の詳細については、Venusianの：py：func： `venusian.attach`関数を参照してください。"

#: of pyramid.view.view_config:58
msgid ""
"See also :ref:`mapping_views_using_a_decorator_section` for details about"
" using :class:`pyramid.view.view_config`."
msgstr "参照：ref： `mapping_views_using_a_decorator_section`：class：` pyramid.view.view_config`の使い方の詳細については、"

#: of pyramid.view.view_config:63
msgid ""
"``view_config`` will work ONLY on module top level members because of the"
" limitation of ``venusian.Scanner.scan``."
msgstr "`` view_config``は、 `` venusian.Scanner.scan``の制限のために、モジュールトップレベルメンバ上でのみ動作します。"

#: of pyramid.view.view_defaults:1
msgid ""
"A class :term:`decorator` which, when applied to a class, will provide "
"defaults for all view configurations that use the class.  This decorator "
"accepts all the arguments accepted by :meth:`pyramid.view.view_config`, "
"and each has the same meaning."
msgstr "class：term： `decorator`：クラスに適用すると、クラスを使用するすべてのビュー設定のデフォルトが提供されます。このデコレータは、：meth： `pyramid.view.view_config`によって受け入れられるすべての引数を受け入れ、それぞれ同じ意味を持ちます。"

#: of pyramid.view.view_defaults:6
msgid "See :ref:`view_defaults` for more information."
msgstr "詳細は、：ref： `view_defaults`を参照してください。"

#: of pyramid.view.notfound_view_config:3
msgid ""
"An analogue of :class:`pyramid.view.view_config` which registers a "
":term:`Not Found View` using "
":meth:`pyramid.config.Configurator.add_notfound_view`."
msgstr "&#39;class： `pyramid.view.view_config`の類義語：：term：` Not Found View`：meth： `pyramid.config.Configurator.add_notfound_view`を使って登録します。"

#: of pyramid.view.notfound_view_config:7
msgid ""
"The ``notfound_view_config`` constructor accepts most of the same "
"arguments as the constructor of :class:`pyramid.view.view_config`.  It "
"can be used in the same places, and behaves in largely the same way, "
"except it always registers a not found exception view instead of a "
"'normal' view."
msgstr "`` notfound_view_config``コンストラクタは：class： `pyramid.view.view_config`のコンストラクタと同じ引数の大部分を受け取ります。これは、同じ場所で使用することができ、ほとんど同じように動作しますが、「通常の」ビューの代わりに常に見つからない例外ビューが登録される点が異なります。"

#: of pyramid.view.exception_view_config:14
#: pyramid.view.forbidden_view_config:12 pyramid.view.notfound_view_config:12
msgid "Example:"
msgstr "例："

#: of pyramid.view.notfound_view_config:23
msgid ""
"All arguments except ``append_slash`` have the same meaning as "
":meth:`pyramid.view.view_config` and each predicate argument restricts "
"the set of circumstances under which this notfound view will be invoked."
msgstr "`` append_slash``を除くすべての引数は：meth： `pyramid.view.view_config`と同じ意味を持ち、各述語引数は、この無関係なビューが呼び出される環境の集合を制限します。"

#: of pyramid.view.notfound_view_config:28
msgid ""
"If ``append_slash`` is ``True``, when the Not Found View is invoked, and "
"the current path info does not end in a slash, the notfound logic will "
"attempt to find a :term:`route` that matches the request's path info "
"suffixed with a slash.  If such a route exists, Pyramid will issue a "
"redirect to the URL implied by the route; if it does not, Pyramid will "
"return the result of the view callable provided as ``view``, as normal."
msgstr "`` append_slash``が `` True``である場合、Not Found Viewが呼び出され、現在のパス情報がスラッシュで終わらない場合、notfoundロジックは：term： `route`を見つけようとします。リクエストのパス情報の末尾にスラッシュが付きます。このようなルートが存在する場合、Pyramidはそのルートが意味するURLにリダイレクトを発行します。もしそうでなければ、Pyramidは通常通り `` view``として提供された呼び出し可能なビューの結果を返します。"

#: of pyramid.view.notfound_view_config:35
msgid ""
"If the argument provided as ``append_slash`` is not a boolean but instead"
" implements :class:`~pyramid.interfaces.IResponse`, the append_slash "
"logic will behave as if ``append_slash=True`` was passed, but the "
"provided class will be used as the response class instead of the default "
":class:`~pyramid.httpexceptions.HTTPFound` response class when a redirect"
" is performed.  For example:"
msgstr "`` append_slash``として提供された引数がブール値ではなく、代わりに：class： `〜pyramid.interfaces.IResponse`を実装する場合、append_slashロジックは` `append_slash = True``が渡されたかのように動作しますが、リダイレクトが実行されたときのデフォルト：class： `〜pyramid.httpexceptions.HTTPFound`レスポンスクラスの代わりにレスポンスクラスとして使用されます。例えば："

#: of pyramid.view.notfound_view_config:53
msgid ""
"The above means that a redirect to a slash-appended route will be "
"attempted, but instead of :class:`~pyramid.httpexceptions.HTTPFound` "
"being used, :class:`~pyramid.httpexceptions.HTTPMovedPermanently will be "
"used` for the redirect response if a slash-appended route is found."
msgstr "上記のことは、スラッシュが追加されたルートへのリダイレクトが試みられるが、class： `〜pyramid.httpexceptions.HTTPFound`の代わりに：class：`〜pyramid.httpexceptions.HTTPMovedPermanently`がリダイレクトに使用されることを意味するスラッシュが追加されたルートが見つかった場合の応答。"

#: of pyramid.view.notfound_view_config:58
msgid "See :ref:`changing_the_notfound_view` for detailed usage information."
msgstr "詳細な使用法については、ref： `changing_the_notfound_view`を参照してください。"

#: of pyramid.view.exception_view_config:29
#: pyramid.view.forbidden_view_config:29 pyramid.view.notfound_view_config:60
msgid "Added the ``_depth`` and ``_category`` arguments."
msgstr "`` _depth``と `` _category``引数を追加しました。"

#: of pyramid.view.forbidden_view_config:3
msgid ""
"An analogue of :class:`pyramid.view.view_config` which registers a "
":term:`forbidden view` using "
":meth:`pyramid.config.Configurator.add_forbidden_view`."
msgstr "&#39;class： `pyramid.view.view_config`の類義語：：term：`禁止されたビュー&#39;を：meth： `pyramid.config.Configurator.add_forbidden_​​view`を使って登録します。"

#: of pyramid.view.forbidden_view_config:7
msgid ""
"The forbidden_view_config constructor accepts most of the same arguments "
"as the constructor of :class:`pyramid.view.view_config`.  It can be used "
"in the same places, and behaves in largely the same way, except it always"
" registers a forbidden exception view instead of a 'normal' view."
msgstr "forbidden_​​view_configコンストラクタは：class： `pyramid.view.view_config`のコンストラクタと同じ引数の大部分を受け入れます。同じ場所で使用することができ、ほとんど同じように動作しますが、通常のビューではなく禁止された例外ビューが常に登録されます。"

#: of pyramid.view.forbidden_view_config:23
msgid ""
"All arguments passed to this function have the same meaning as "
":meth:`pyramid.view.view_config` and each predicate argument restricts "
"the set of circumstances under which this notfound view will be invoked."
msgstr "この関数に渡されるすべての引数は、：meth： `pyramid.view.view_config`と同じ意味を持ち、各述語引数は、この無関係なビューが呼び出される環境の集合を制限します。"

#: of pyramid.view.forbidden_view_config:27
msgid "See :ref:`changing_the_forbidden_view` for detailed usage information."
msgstr "詳細な使用法については、ref： `changing_the_forbidden_​​view`を参照してください。"

#: of pyramid.view.exception_view_config:3
msgid ""
"An analogue of :class:`pyramid.view.view_config` which registers an "
":term:`exception view` using "
":meth:`pyramid.config.Configurator.add_exception_view`."
msgstr "以下のように：class： `pyramid.view.view_config`の類義語：：term：`例外ビュー `を：meth：` pyramid.config.Configurator.add_exception_view`を使って登録します。"

#: of pyramid.view.exception_view_config:7
msgid ""
"The ``exception_view_config`` constructor requires an exception context, "
"and additionally accepts most of the same arguments as the constructor of"
" :class:`pyramid.view.view_config`.  It can be used in the same places, "
"and behaves in largely the same way, except it always registers an "
"exception view instead of a \"normal\" view that dispatches on the "
"request :term:`context`."
msgstr "`` exception_view_config``コンストラクタは例外コンテキストを必要とし、さらに：class： `pyramid.view.view_config`のコンストラクタと同じ引数の大部分を受け入れます。これは、同じ場所で使用することができ、ほとんど同じように動作しますが、request：term： `context`にディスパッチする\&quot;通常\ &quot;ビューではなく例外ビューを常に登録します。"

#: of pyramid.view.exception_view_config:25
msgid ""
"All arguments passed to this function have the same meaning as "
":meth:`pyramid.view.view_config`, and each predicate argument restricts "
"the set of circumstances under which this exception view will be invoked."
msgstr "この関数に渡されるすべての引数は、：meth： `pyramid.view.view_config`と同じ意味を持ち、各述語引数は、この例外ビューが呼び出される環境の集合を制限します。"

