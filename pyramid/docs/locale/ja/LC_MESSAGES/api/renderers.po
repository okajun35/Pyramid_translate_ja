# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../api/renderers.rst:4
msgid ":mod:`pyramid.renderers`"
msgstr "(機械翻訳) :mod:`pyramid.renderers`"

#: of pyramid.renderers.get_renderer:1
msgid "Return the renderer object for the renderer ``renderer_name``."
msgstr "レンダラー &quot;renderer_name&quot;のレンダラーオブジェクトを返します。"

#: of pyramid.renderers.get_renderer:3
msgid ""
"You may supply a relative asset spec as ``renderer_name``.  If the "
"``package`` argument is supplied, a relative renderer name will be "
"converted to an absolute asset specification by combining the package "
"``package`` with the relative asset specification ``renderer_name``.  If "
"``package`` is ``None`` (the default), the package name of the *caller* "
"of this function will be used as the package."
msgstr "`` renderer_name``として相対的な資産指定を与えることができます。 `` package``引数が指定された場合、相対的なレンダラー名はパッケージ `` ​​package``を相対的な資産指定 `` renderer_name``と組み合わせることによって絶対アセット仕様に変換されます。 `` package``が `` None``（デフォルト）の場合、この関数の* caller *のパッケージ名がパッケージとして使われます。"

#: of pyramid.renderers.render:1
msgid ""
"Using the renderer ``renderer_name`` (a template or a static renderer), "
"render the value (or set of values) present in ``value``. Return the "
"result of the renderer's ``__call__`` method (usually a string or "
"Unicode)."
msgstr "レンダラー `renderer_name`（テンプレートまたはスタティックレンダラー）を使用して、` `value``にある値（または値のセット）をレンダリングします。レンダラーの `` __call__``メソッドの結果（通常は文字列またはUnicode）を返します。"

#: of pyramid.renderers.render:6
msgid ""
"If the ``renderer_name`` refers to a file on disk, such as when the "
"renderer is a template, it's usually best to supply the name as an "
":term:`asset specification` (e.g. ``packagename:path/to/template.pt``)."
msgstr "レンダラーがテンプレートである場合など、 `` renderer_name``がディスク上のファイルを参照する場合は、通常：term： `asset specification`（例：` `packagename：path / to / template .pt``）。"

#: of pyramid.renderers.render:11
msgid ""
"You may supply a relative asset spec as ``renderer_name``.  If the "
"``package`` argument is supplied, a relative renderer path will be "
"converted to an absolute asset specification by combining the package "
"``package`` with the relative asset specification ``renderer_name``.  If "
"``package`` is ``None`` (the default), the package name of the *caller* "
"of this function will be used as the package."
msgstr "`` renderer_name``として相対的な資産指定を与えることができます。 `` package``引数が指定されている場合、パッケージ `` ​​package``と相対資産指定 `` renderer_name``を組み合わせることによって、相対レンダラーパスが絶対アセット仕様に変換されます。 `` package``が `` None``（デフォルト）の場合、この関数の* caller *のパッケージ名がパッケージとして使われます。"

#: of pyramid.renderers.render:19 pyramid.renderers.render_to_response:18
msgid ""
"The ``value`` provided will be supplied as the input to the renderer.  "
"Usually, for template renderings, this should be a dictionary.  For other"
" renderers, this will need to be whatever sort of value the renderer "
"expects."
msgstr "提供された `` value``はレンダラーへの入力として供給されます。通常、テンプレートのレンダリングでは、これは辞書でなければなりません。他のレンダラーの場合、これはレンダラーが期待するどんな種類の値でも必要です。"

#: of pyramid.renderers.render:24
msgid ""
"The 'system' values supplied to the renderer will include a basic set of "
"top-level system names, such as ``request``, ``context``, "
"``renderer_name``, and ``view``.  See :ref:`renderer_system_values` for "
"the full list.  If :term:`renderer globals` have been specified, these "
"will also be used to augment the value."
msgstr "レンダラーに提供される &#39;system&#39;値には、 `` request``、 `` context``、 `` renderer_name``、 `` view``などのトップレベルシステム名の基本セットが含まれます。完全なリストについては：ref： `renderer_system_values`を参照してください。 ：term： `renderer globals`が指定されている場合は、それらも値を増やすために使用されます。"

#: of pyramid.renderers.render:30
msgid ""
"Supply a ``request`` parameter in order to provide the renderer with the "
"most correct 'system' values (``request`` and ``context`` in particular)."
msgstr "レンダラーに最も正しい &#39;システム&#39;値（特に ``要求 ``と ``コンテキスト ``）を提供するために `` request``パラメータを指定してください。"

#: of pyramid.renderers.render_to_response:1
msgid ""
"Using the renderer ``renderer_name`` (a template or a static renderer), "
"render the value (or set of values) using the result of the renderer's "
"``__call__`` method (usually a string or Unicode) as the response body."
msgstr "レンダラー `` renderer_name``（テンプレートまたは静的レンダラー）を使用して、レンダラーの `` __call__``メソッドの結果（通常は文字列またはUnicode）を応答本体として使用して値（または値のセット）をレンダリングします。"

#: of pyramid.renderers.render_to_response:6
msgid ""
"If the renderer name refers to a file on disk (such as when the renderer "
"is a template), it's usually best to supply the name as a :term:`asset "
"specification`."
msgstr "レンダラー名がディスク上のファイルを参照する場合（レンダラーがテンプレートの場合など）は、通常は：term： `asset specification`として名前を指定するのが最善です。"

#: of pyramid.renderers.render_to_response:10
msgid ""
"You may supply a relative asset spec as ``renderer_name``.  If the "
"``package`` argument is supplied, a relative renderer name will be "
"converted to an absolute asset specification by combining the package "
"``package`` with the relative asset specification ``renderer_name``.  If "
"you do not supply a ``package`` (or ``package`` is ``None``) the package "
"name of the *caller* of this function will be used as the package."
msgstr "`` renderer_name``として相対的な資産指定を与えることができます。 `` package``引数が指定された場合、相対的なレンダラー名はパッケージ `` ​​package``を相対的な資産指定 `` renderer_name``と組み合わせることによって絶対アセット仕様に変換されます。 `` package``（または `` package``が `` None``）を指定しないと、この関数の* caller *のパッケージ名がパッケージとして使われます。"

#: of pyramid.renderers.render_to_response:23
msgid ""
"The 'system' values supplied to the renderer will include a basic set of "
"top-level system names, such as ``request``, ``context``, "
"``renderer_name``, and ``view``.  See :ref:`renderer_system_values` for "
"the full list.  If :term:`renderer globals` have been specified, these "
"will also be used to argument the value."
msgstr "レンダラーに提供される &#39;system&#39;値には、 `` request``、 `` context``、 `` renderer_name``、 `` view``などのトップレベルシステム名の基本セットが含まれます。完全なリストについては：ref： `renderer_system_values`を参照してください。 ：term： `renderer globals`が指定されている場合は、それらも値の引数として使用されます。"

#: of pyramid.renderers.render_to_response:29
msgid ""
"Supply a ``request`` parameter in order to provide the renderer with the "
"most correct 'system' values (``request`` and ``context`` in particular)."
" Keep in mind that any changes made to ``request.response`` prior to "
"calling this function will not be reflected in the resulting response "
"object. A new response object will be created for each call unless one is"
" passed as the ``response`` argument."
msgstr "レンダラーに最も正しい &#39;システム&#39;値（特に ``要求 ``と ``コンテキスト ``）を提供するために `` request``パラメータを指定してください。この関数を呼び出す前に `` request.response``に加えられた変更は、結果のレスポンスオブジェクトには反映されません。新しい応答オブジェクトは、 `` response``引数として渡されない限り、各呼び出しに対して作成されます。"

#: of pyramid.renderers.render_to_response:36
msgid ""
"In previous versions, any changes made to ``request.response`` outside of"
" this function call would affect the returned response. This is no longer"
" the case. If you wish to send in a pre-initialized response then you may"
" pass one in the ``response`` argument."
msgstr "以前のバージョンでは、この関数呼び出しの外で `` request.response``に加えられた変更は返された応答に影響します。これはもはやケースではない。事前に初期化された応答を送信したい場合は、 ``応答 ``引数に1つを渡すことができます。"

#: of pyramid.renderers.JSON:1
msgid "Renderer that returns a JSON-encoded string."
msgstr "JSONでエンコードされた文字列を返すレンダラーです。"

#: of pyramid.renderers.JSON:3
msgid ""
"Configure a custom JSON renderer using the "
":meth:`~pyramid.config.Configurator.add_renderer` API at application "
"startup time:"
msgstr "アプリケーションの起動時に：meth： `〜pyramid.config.Configurator.add_renderer` APIを使用してカスタムJSONレンダラーを設定します。"

#: of pyramid.renderers.JSON:14
msgid ""
"Once this renderer is registered as above, you can use ``myjson`` as the "
"``renderer=`` parameter to ``@view_config`` or "
":meth:`~pyramid.config.Configurator.add_view`:"
msgstr "このレンダラーが上記のように登録されると、 `` @ view_config``または：meth： `〜pyramid.config.Configurator.add_view`への` `renderer =` `パラメータとして` `myjson``を使うことができます："

#: of pyramid.renderers.JSON:26
msgid ""
"Custom objects can be serialized using the renderer by either "
"implementing the ``__json__`` magic method, or by registering adapters "
"with the renderer.  See :ref:`json_serializing_custom_objects` for more "
"information."
msgstr "カスタムオブジェクトはレンダラを使って `` __json__``マジックメソッドを実装するか、またはレンダラにアダプタを登録することでシリアル化することができます。詳細はref： `json_serializing_custom_objects`を参照してください。"

#: of pyramid.renderers.JSON:33
msgid ""
"The default serializer uses ``json.JSONEncoder``. A different serializer "
"can be specified via the ``serializer`` argument.  Custom serializers "
"should accept the object, a callback ``default``, and any extra ``kw`` "
"keyword arguments passed during renderer construction. This feature isn't"
" widely used but it can be used to replace the stock JSON serializer "
"with, say, simplejson.  If all you want to do, however, is serialize "
"custom objects, you should use the method explained in "
":ref:`json_serializing_custom_objects` instead of replacing the "
"serializer."
msgstr "デフォルトのシリアライザは `` json.JSONEncoder``を使います。別のシリアライザは `` serializer``引数で指定できます。カスタムシリアライザは、オブジェクト、コールバック `` default``、およびレンダラ構築中に渡された追加の `` kw``キーワード引数を受け入れなければなりません。この機能は広く使われているわけではありませんが、在庫JSONシリアライザをたとえばsimplejsonに置き換えるために使用できます。ただし、カスタムオブジェクトをシリアル化する必要がある場合は、シリアライザを置き換える代わりに：ref： `json_serializing_custom_objects`で説明されているメソッドを使用する必要があります。"

#: of pyramid.renderers.JSON:43
msgid ""
"Prior to this version, there was no public API for supplying options to "
"the underlying serializer without defining a custom renderer."
msgstr "このバージョンより前のバージョンでは、カスタムレンダラーを定義せずに、シリアライザにオプ​​ションを提供するためのパブリックAPIはありませんでした。"

#: of pyramid.renderers.JSON.add_adapter:1
#: pyramid.renderers.JSONP.add_adapter:1
msgid ""
"When an object of the type (or interface) ``type_or_iface`` fails to "
"automatically encode using the serializer, the renderer will use the "
"adapter ``adapter`` to convert it into a JSON-serializable object.  The "
"adapter must accept two arguments: the object and the currently active "
"request."
msgstr "型（またはインタフェース） `` type_or_iface``のオブジェクトがシリアライザを使用して自動的にエンコードできない場合、レンダラはアダプタ `` adapter``を使用してJSON直列化可能オブジェクトに変換します。アダプターは、オブジェクトと現在アクティブな要求の2つの引き数を受け入れる必要があります。"

#: of pyramid.renderers.JSON.add_adapter:18
#: pyramid.renderers.JSONP.add_adapter:18
msgid ""
"When you've done this, the JSON renderer will be able to serialize "
"instances of the ``Foo`` class when they're encountered in your view "
"results."
msgstr "これを行うと、JSONレンダラはビューの結果に出会ったときに `` Foo``クラスのインスタンスを直列化することができます。"

#: of pyramid.renderers.JSONP:1
msgid ""
"`JSONP <https://en.wikipedia.org/wiki/JSONP>`_ renderer factory helper "
"which implements a hybrid json/jsonp renderer.  JSONP is useful for "
"making cross-domain AJAX requests."
msgstr "`JSONP <https://en.wikipedia.org/wiki/JSONP> `_ rendererハイブリッドjson / jsonpレンダラを実装するファクトリヘルパー。 JSONPは、クロスドメインAJAXリクエストを作成するのに便利です。"

#: of pyramid.renderers.JSONP:5
msgid ""
"Configure a JSONP renderer using the "
":meth:`pyramid.config.Configurator.add_renderer` API at application "
"startup time:"
msgstr "アプリケーション起動時に：meth： `pyramid.config.Configurator.add_renderer` APIを使用してJSONPレンダラを設定する："

#: of pyramid.renderers.JSONP:16
msgid ""
"The class' constructor also accepts arbitrary keyword arguments.  All "
"keyword arguments except ``param_name`` are passed to the ``json.dumps`` "
"function as its keyword arguments."
msgstr "クラスのコンストラクタは、任意のキーワード引数も受け入れます。 `` param_name``を除くすべてのキーワード引数は、キーワード引数として `` json.dumps``関数に渡されます。"

#: of pyramid.renderers.JSONP:27
msgid "The ability of this class to accept a ``**kw`` in its constructor."
msgstr "このクラスのコンストラクタに `` ** kw``を受け入れる能力。"

#: of pyramid.renderers.JSONP:30
msgid ""
"The arguments passed to this class' constructor mean the same thing as "
"the arguments passed to :class:`pyramid.renderers.JSON` (including "
"``serializer`` and ``adapters``)."
msgstr "このクラスのコンストラクタに渡される引数は、class： `pyramid.renderers.JSON`（` `serializer``と` `adapters``を含む）に渡される引数と同じことを意味します。"

#: of pyramid.renderers.JSONP:34
msgid ""
"Once this renderer is registered via "
":meth:`~pyramid.config.Configurator.add_renderer` as above, you can use "
"``jsonp`` as the ``renderer=`` parameter to ``@view_config`` or "
":meth:`pyramid.config.Configurator.add_view``:"
msgstr "上記のように、このレンダラーが：meth： `〜pyramid.config.Configurator.add_renderer`を介して登録されると、レンダラー=` `@ view_config``または：meth：` `renderer =` `パラメーターとして` `jsonp``を使用することができます。 `pyramid.config.Configurator.add_view``："

#: of pyramid.renderers.JSONP:47
msgid "When a view is called that uses the JSONP renderer:"
msgstr "JSONPレンダラを使用するビューが呼び出されると、次のようになります。"

#: of pyramid.renderers.JSONP:49
msgid ""
"If there is a parameter in the request's HTTP query string that matches "
"the ``param_name`` of the registered JSONP renderer (by default, "
"``callback``), the renderer will return a JSONP response."
msgstr "要求のHTTPクエリ文字列に、登録されたJSONPレンダラ（デフォルトでは `` callback``）の `` param_name``と一致するパラメータがある場合、レンダラはJSONP応答を返します。"

#: of pyramid.renderers.JSONP:53
msgid ""
"If there is no callback parameter in the request's query string, the "
"renderer will return a 'plain' JSON response."
msgstr "リクエストのクエリ文字列にコールバックパラメータがない場合、レンダラは &#39;普通の&#39; JSONレスポンスを返します。"

#: of pyramid.renderers.JSONP:60
msgid "See also :ref:`jsonp_renderer`."
msgstr "ref： `jsonp_renderer`も参照してください。"

#: ../../api/renderers.rst:24
msgid ""
"An object that can be used in advanced integration cases as input to the "
"view configuration ``renderer=`` argument.  When the null renderer is "
"used as a view renderer argument, Pyramid avoids converting the view "
"callable result into a Response object.  This is useful if you want to "
"reuse the view configuration and lookup machinery outside the context of "
"its use by the Pyramid router."
msgstr "ビュー構成のレンダラー= ``引数への入力として高度な統合のケースで使用できるオブジェクトです。 nullレンダラーをビューレンダラー引数として使用すると、Pyramidはビューの呼び出し可能な結果を​​Responseオブジェクトに変換することを回避します。これは、Pyramidルーターが使用しているコンテキスト外で、ビュー構成とルックアップマシンを再利用する場合に便利です。"

