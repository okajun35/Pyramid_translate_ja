# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../api/path.rst:4
msgid ":mod:`pyramid.path`"
msgstr "(機械翻訳)  :mod:`pyramid.path`"

#: ../../api/path.rst:10
msgid ""
"A constant used by the constructor of "
":class:`pyramid.path.DottedNameResolver` and "
":class:`pyramid.path.AssetResolver`."
msgstr "：class： `pyramid.path.DottedNameResolver`と：class：` pyramid.path.AssetResolver`のコンストラクタによって使用される定数です。"

#: of pyramid.path.DottedNameResolver:1
msgid ""
"A class used to resolve a :term:`dotted Python name` to a package or "
"module object."
msgstr "a：term： `dotted Python name`をパッケージまたはモジュールオブジェクトに解決するために使用されるクラス。"

#: of pyramid.path.AssetResolver:6 pyramid.path.DottedNameResolver:6
msgid ""
"The constructor accepts a single argument named ``package`` which may be "
"any of:"
msgstr "コンストラクタは、 `` package``という名前の単一の引数を受け取ります。"

#: of pyramid.path.AssetResolver:9 pyramid.path.DottedNameResolver:9
msgid "A fully qualified (not relative) dotted name to a module or package"
msgstr "モジュールまたはパッケージへの完全修飾された（相対ではない）ドット付きの名前"

#: of pyramid.path.AssetResolver:11 pyramid.path.DottedNameResolver:11
msgid "a Python module or package object"
msgstr "Pythonモジュールまたはパッケージオブジェクト"

#: of pyramid.path.AssetResolver:13 pyramid.path.DottedNameResolver:13
msgid "The value ``None``"
msgstr "値 `` None``"

#: of pyramid.path.AssetResolver:15 pyramid.path.DottedNameResolver:15
msgid "The constant value :attr:`pyramid.path.CALLER_PACKAGE`."
msgstr "定数値：attr： `pyramid.path.CALLER_PACKAGE`です。"

#: of pyramid.path.AssetResolver:17 pyramid.path.DottedNameResolver:17
msgid "The default value is :attr:`pyramid.path.CALLER_PACKAGE`."
msgstr "デフォルト値は：attr： `pyramid.path.CALLER_PACKAGE`です。"

#: of pyramid.path.DottedNameResolver:19
msgid ""
"The ``package`` is used when a relative dotted name is supplied to the "
":meth:`~pyramid.path.DottedNameResolver.resolve` method.  A dotted name "
"which has a ``.`` (dot) or ``:`` (colon) as its first character is "
"treated as relative."
msgstr "`` package``は相対的な点線の名前が：meth： `〜pyramid.path.DottedNameResolver.resolve`メソッドに与えられたときに使われます。最初の文字として `` .``（ドット）または ``： ``（コロン）を持つ点線の名前は、相対として扱われます。"

#: of pyramid.path.DottedNameResolver:24
msgid ""
"If ``package`` is ``None``, the resolver will only be able to resolve "
"fully qualified (not relative) names.  Any attempt to resolve a relative "
"name will result in an :exc:`ValueError` exception."
msgstr "`` package``が `` None``の場合、リゾルバは完全修飾名（相対名ではない）のみを解決することができます。相対名を解決しようとすると、：exc： `ValueError`例外が発生します。"

#: of pyramid.path.DottedNameResolver:28
msgid ""
"If ``package`` is :attr:`pyramid.path.CALLER_PACKAGE`, the resolver will "
"treat relative dotted names as relative to the caller of the "
":meth:`~pyramid.path.DottedNameResolver.resolve` method."
msgstr "`` package``が：attr： `pyramid.path.CALLER_PACKAGE`である場合、リゾルバは：meth：`〜pyramid.path.DottedNameResolver.resolve`メソッドの呼び出し側に対する相対的なドット付きの名前を扱います。"

#: of pyramid.path.DottedNameResolver:33
msgid ""
"If ``package`` is a *module* or *module name* (as opposed to a package or"
" package name), its containing package is computed and this package used "
"to derive the package name (all names are resolved relative to packages, "
"never to modules).  For example, if the ``package`` argument to this type"
" was passed the string ``xml.dom.expatbuilder``, and ``.mindom`` is "
"supplied to the :meth:`~pyramid.path.DottedNameResolver.resolve` method, "
"the resulting import would be for ``xml.minidom``, because "
"``xml.dom.expatbuilder`` is a module object, not a package object."
msgstr "`` package``が* module *または* module name *（パッケージ名またはパッケージ名ではない）の場合、そのパッケージを含むパッケージが計算され、このパッケージがパッケージ名を派生させるために使用されます（すべての名前は、決してモジュールに）。たとえば、この型への `` package``引数に文字列 `` xml.dom.expatbuilder``が渡され、 `` .mindom``が：meth： `〜pyramid.path.DottedNameResolverに与えられます。 `` xml.dom.expatbuilder``はパッケージオブジェクトではなくモジュールオブジェクトであるため、結果のインポートは `` xml.minidom``のために行われます。"

#: of pyramid.path.DottedNameResolver:43
msgid ""
"If ``package`` is a *package* or *package name* (as opposed to a module "
"or module name), this package will be used to relative compute dotted "
"names.  For example, if the ``package`` argument to this type was passed "
"the string ``xml.dom``, and ``.minidom`` is supplied to the "
":meth:`~pyramid.path.DottedNameResolver.resolve` method, the resulting "
"import would be for ``xml.minidom``."
msgstr "`` package``が* package *または* package name *（モジュールまたはモジュール名ではありません）の場合、このパッケージはドット付きの名前の相対的な計算に使用されます。たとえば、このタイプの `` package``引数に文字列 `` xml.dom``が渡され、 `` .minidom``が：meth： `〜pyramid.path.DottedNameResolver.resolve`メソッドの場合、結果は `` xml.minidom``になります。"

#: of pyramid.path.DottedNameResolver.maybe_resolve:1
msgid ""
"This method behaves just like "
":meth:`~pyramid.path.DottedNameResolver.resolve`, except if the "
"``dotted`` value passed is not a string, it is simply returned.  For "
"example:"
msgstr "このメソッドは、：meth： `〜pyramid.path.DottedNameResolver.resolve`のように動作しますが、渡された` `dotted``値が文字列でない場合を除き、単に返されます。例えば："

#: of pyramid.path.DottedNameResolver.resolve:1
msgid ""
"This method resolves a dotted name reference to a global Python object "
"(an object which can be imported) to the object itself."
msgstr "このメソッドは、グローバルなPythonオブジェクト（インポート可能なオブジェクト）へのドット付きの名前参照をオブジェクト自体に解決します。"

#: of pyramid.path.DottedNameResolver.resolve:4
msgid "Two dotted name styles are supported:"
msgstr "2つの点線の名前スタイルがサポートされています："

#: of pyramid.path.DottedNameResolver.resolve:6
msgid ""
"``pkg_resources``-style dotted names where non-module attributes of a "
"package are separated from the rest of the path using a ``:`` e.g. "
"``package.module:attr``."
msgstr "パッケージの非モジュール属性が ``： `` `` package.module：attr``を使ってパスの残りの部分から分離されている `` pkg_resources``スタイルのドット付きの名前です。"

#: of pyramid.path.DottedNameResolver.resolve:10
msgid ""
"``zope.dottedname``-style dotted names where non-module attributes of a "
"package are separated from the rest of the path using a ``.`` e.g. "
"``package.module.attr``."
msgstr "`` zope.dottedname``スタイルの点線の名前パッケージの非モジュール属性が `` package.module.attr``などの `` .``を使ってパスの残りの部分と区切られています。"

#: of pyramid.path.DottedNameResolver.resolve:14
msgid ""
"These styles can be used interchangeably.  If the supplied name contains "
"a ``:`` (colon), the ``pkg_resources`` resolution mechanism will be "
"chosen, otherwise the ``zope.dottedname`` resolution mechanism will be "
"chosen."
msgstr "これらのスタイルは互換的に使用できます。指定された名前に ``： ``（コロン）が含まれている場合、 `` pkg_resources``の解決メカニズムが選択されます。そうでなければ `` zope.dottedname``の解決メカニズムが選択されます。"

#: of pyramid.path.DottedNameResolver.resolve:19
msgid ""
"If the ``dotted`` argument passed to this method is not a string, a "
":exc:`ValueError` will be raised."
msgstr "このメソッドに渡された `` dotted``引数が文字列でない場合は、：exc： `ValueError`が送出されます。"

#: of pyramid.path.DottedNameResolver.resolve:22
msgid ""
"When a dotted name cannot be resolved, a :exc:`ValueError` error is "
"raised."
msgstr "ドット付きの名前を解決できない場合、a：exc： `ValueError`エラーが発生します。"

#: of pyramid.path.DottedNameResolver.resolve:25
msgid "Example:"
msgstr "例："

#: of pyramid.path.AssetResolver:1
msgid ""
"A class used to resolve an :term:`asset specification` to an :term:`asset"
" descriptor`."
msgstr "：term： `資産指定 &#39;を：term：`資産記述子&#39;に解決するために使用されるクラス。"

#: of pyramid.path.AssetResolver:19
msgid ""
"The ``package`` is used when a relative asset specification is supplied "
"to the :meth:`~pyramid.path.AssetResolver.resolve` method.  An asset "
"specification without a colon in it is treated as relative."
msgstr "`` package``は相対的な資産指定が：meth： `〜pyramid.path.AssetResolver.resolve`メソッドに与えられたときに使われます。コロンの付いていない資産指定は、相対として扱われます。"

#: of pyramid.path.AssetResolver:23
msgid ""
"If ``package`` is ``None``, the resolver will only be able to resolve "
"fully qualified (not relative) asset specifications.  Any attempt to "
"resolve a relative asset specification will result in an "
":exc:`ValueError` exception."
msgstr "`` package``が `` None``の場合、リゾルバは完全な（相対的ではない）アセットを解決することしかできません。相対的な資産指定を解決しようとすると、：exc： `ValueError`例外が発生します。"

#: of pyramid.path.AssetResolver:28
msgid ""
"If ``package`` is :attr:`pyramid.path.CALLER_PACKAGE`, the resolver will "
"treat relative asset specifications as relative to the caller of the "
":meth:`~pyramid.path.AssetResolver.resolve` method."
msgstr "`` package``が：attr： `pyramid.path.CALLER_PACKAGE`の場合、リゾルバは：meth：`〜pyramid.path.AssetResolver.resolve`メソッドの呼び出し側に対する相対的な資産指定を扱います。"

#: of pyramid.path.AssetResolver:33
msgid ""
"If ``package`` is a *module* or *module name* (as opposed to a package or"
" package name), its containing package is computed and this package is "
"used to derive the package name (all names are resolved relative to "
"packages, never to modules).  For example, if the ``package`` argument to"
" this type was passed the string ``xml.dom.expatbuilder``, and "
"``template.pt`` is supplied to the "
":meth:`~pyramid.path.AssetResolver.resolve` method, the resulting "
"absolute asset spec would be ``xml.minidom:template.pt``, because "
"``xml.dom.expatbuilder`` is a module object, not a package object."
msgstr "`` package``が* module *または* module name *（パッケージ名またはパッケージ名ではない）であれば、そのパッケージを含むパッケージが計算され、このパッケージはパッケージ名を派生させるために使われます（すべての名前はパッケージ、決してモジュールに）。たとえば、このタイプの `` package``引数に文字列 `` xml.dom.expatbuilder``が渡され、 `` template.pt``が：meth： `〜pyramid.path.AssetResolver `xml.dom.expatbuilder``はパッケージオブジェクトではなくモジュールオブジェクトであるため、結果の絶対アセット仕様は` `xml.minidom：template.pt``になります。"

#: of pyramid.path.AssetResolver:43
msgid ""
"If ``package`` is a *package* or *package name* (as opposed to a module "
"or module name), this package will be used to compute relative asset "
"specifications.  For example, if the ``package`` argument to this type "
"was passed the string ``xml.dom``, and ``template.pt`` is supplied to the"
" :meth:`~pyramid.path.AssetResolver.resolve` method, the resulting "
"absolute asset spec would be ``xml.minidom:template.pt``."
msgstr "`` package``が* package *または* package name *（モジュールまたはモジュール名ではない）である場合、このパッケージは相対的な資産の仕様を計算するために使用されます。たとえば、この型の `` package``引数に文字列 `` xml.dom``が渡され、 `` template.pt``が：meth： `〜pyramid.path.AssetResolver.resolve `メソッドでは、結果の絶対アセット仕様は` `xml.minidom：template.pt``になります。"

#: of pyramid.path.AssetResolver.resolve:1
msgid ""
"Resolve the asset spec named as ``spec`` to an object that has the "
"attributes and methods described in "
":class:`pyramid.interfaces.IAssetDescriptor`."
msgstr "`` spec``という名前のアセット仕様を、class： `pyramid.interfaces.IAssetDescriptor`に記述されている属性とメソッドを持つオブジェクトに解決します。"

#: of pyramid.path.AssetResolver.resolve:5
msgid ""
"If ``spec`` is an absolute filename (e.g. "
"``/path/to/myproject/templates/foo.pt``) or an absolute asset spec (e.g. "
"``myproject:templates.foo.pt``), an asset descriptor is returned without "
"taking into account the ``package`` passed to this class' constructor."
msgstr "`` spec``が絶対ファイル名（ `` / path / to / myproject / templates / foo.pt``）や絶対アセット仕様（ `` myproject：templates.foo.pt``など）の場合、このクラスのコンストラクタに渡された `` package``を考慮せずに返されます。"

#: of pyramid.path.AssetResolver.resolve:11
msgid ""
"If ``spec`` is a *relative* asset specification (an asset specification "
"without a ``:`` in it, e.g. ``templates/foo.pt``), the ``package`` "
"argument of the constructor is used as the package portion of the asset "
"spec.  For example:"
msgstr "`` spec``が* relative *アセット仕様（例えば `` templates / foo.pt``のような ``： ``のないアセット仕様）である場合、コンストラクタの `` package``引数は資産仕様のパッケージ部分として使用されます。例えば："

#: of pyramid.path.AssetResolver.resolve:23
msgid ""
"If the AssetResolver is constructed without a ``package`` argument of "
"``None``, and a relative asset specification is passed to ``resolve``, an"
" :exc:`ValueError` exception is raised."
msgstr "AssetResolverが `` None``の `` package``引数なしで構築され、相対資産指定が `` resolve``に渡された場合、：exc： `ValueError`例外が発生します。"

