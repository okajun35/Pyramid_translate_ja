# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../narr/project.rst:4
msgid "Creating a :app:`Pyramid` Project"
msgstr "(機械翻訳) :app:`Pyramid` プロジェクトの作成"

#: ../../narr/project.rst:6
msgid ""
"As we saw in :ref:`firstapp_chapter`, it's possible to create a "
":app:`Pyramid` application completely manually.  However, it's usually "
"more convenient to use a :term:`cookiecutter` to generate a basic "
":app:`Pyramid` :term:`project`."
msgstr "：ref： `firstapp_chapter`で見たように、：app：` Pyramid`アプリケーションを完全に手動で作成することは可能です。しかし、通常、：term： `cookiecutter`を使ってbasic：app：` Pyramid`：term： `project`を生成する方が便利です。"

#: ../../narr/project.rst:10
msgid ""
"A project is a directory that contains at least one Python "
":term:`package`. You'll use a cookiecutter to create a project, and "
"you'll create your application logic within a package that lives inside "
"the project.  Even if your application is extremely simple, it is useful "
"to place code that drives the application within a package, because (1) a"
" package is more easily extended with new code, and (2) an application "
"that lives inside a package can also be distributed more easily than one "
"which does not live within a package."
msgstr "プロジェクトは少なくとも一つのPython：term： `package`を含むディレクトリです。 cookiecutterを使用してプロジェクトを作成すると、プロジェクト内に存在するパッケージ内にアプリケーションロジックを作成します。アプリケーションが非常にシンプルであっても、（1）パッケージが新しいコードでより簡単に拡張され、（2）パッケージ内に存在するアプリケーションがパッケージ内に存在しないものよりも容易に配布されます。"

#: ../../narr/project.rst:18
msgid ""
"The Pylons Project provides several :app:`Pyramid` cookiecutters that you"
" can use to generate a project.  Each cookiecutter makes different "
"configuration assumptions about what type of application you're trying to"
" construct."
msgstr "Pylonsプロジェクトには、プロジェクトを生成するために使用できるいくつかの：app： `Pyramid` cookiecuttersがあります。各CookiCutterは、構築しようとしているアプリケーションのタイプについて、さまざまな設定を前提にしています。"

#: ../../narr/project.rst:22
msgid ""
"These cookiecutters are rendered using the ``cookiecutter`` command that "
"you may install."
msgstr "これらのcookiecuttersは、あなたがインストールできる `` cookiecutter``コマンドを使ってレンダリングされます。"

#: ../../narr/project.rst:26
msgid ""
"See also `Cookiecutter Installation "
"<https://cookiecutter.readthedocs.io/en/latest/installation.html>`_."
msgstr "`Cookiecutterのインストール<https://cookiecutter.readthedocs.io/en/latest/installation.html> `_。"

#: ../../narr/project.rst:38
msgid ":app:`Pyramid` cookiecutters"
msgstr "：app： `Pyramid` cookiecutters"

#: ../../narr/project.rst:40
msgid ""
"Pyramid cookiecutters released under the Pylons Project differ from each "
"other on a number of axes:"
msgstr "Pylonsプロジェクトの下でリリースされたピラミッドのcookiecuttersは、いくつかの軸でお互いに異なる："

#: ../../narr/project.rst:42
msgid ""
"the persistence mechanism they offer (no persistence mechanism, "
":term:`SQLAlchemy` with SQLite, or :term:`ZODB`)"
msgstr "彼らが提供する永続化機構（永続化機構なし、term：SQLiteで `SQLAlchemy`、：term：` ZODB`）"

#: ../../narr/project.rst:44
msgid ""
"the mechanism they use to map URLs to code (:term:`URL dispatch` or "
":term:`traversal`)"
msgstr "URLをコードにマッピングするためのメカニズム（：term： `URL dispatch`または：term：` traversal`）"

#: ../../narr/project.rst:46
msgid "templating libraries (:term:`Jinja2`, :term:`Chameleon`, or :term:`Mako`)"
msgstr "テンプレートライブラリ（：term： `Jinja2`、：term：` Chameleon`、または：term： `Mako`）"

#: ../../narr/project.rst:48
msgid ""
"`pyramid-cookiecutter-starter <https://github.com/Pylons/pyramid-"
"cookiecutter-starter>`_"
msgstr "`pyramid-cookiecutter-starter <https://github.com/Pylons/pyramid-cookiecutter-starter> `_"

#: ../../narr/project.rst:49
msgid ""
"`pyramid-cookiecutter-alchemy <https://github.com/Pylons/pyramid-"
"cookiecutter-alchemy>`_"
msgstr "`ピラミッド - クッキーカッター - 錬金術<https://github.com/Pylons/pyramid-cookiecutter-alchemy> `_"

#: ../../narr/project.rst:50
msgid ""
"`pyramid-cookiecutter-zodb <https://github.com/Pylons/pyramid-"
"cookiecutter-zodb>`_"
msgstr "`pyramid-cookiecutter-zodb <https://github.com/Pylons/pyramid-cookiecutter-zodb> `_"

#: ../../narr/project.rst:52
msgid "These cookiecutters include:"
msgstr "これらのcookiecuttersには次のものがあります。"

#: ../../narr/project.rst:55
msgid "``pyramid-cookiecutter-starter``"
msgstr "``ピラミッド - クッキーカッター - スターター ``"

#: ../../narr/project.rst:55
msgid ""
":term:`URL dispatch` for routing and either :term:`Jinja2`, "
":term:`Chameleon`, or :term:`Mako` for templating"
msgstr "：term： `Jinja2`、：term：` Chameleon`、または：term：テンプレート用 `` Mako`：ルーティングのためのterm： `URL dispatch`"

#: ../../narr/project.rst:58
msgid "``pyramid-cookiecutter-alchemy``"
msgstr "``ピラミッド - クッキーカッター - 錬金術 ``"

#: ../../narr/project.rst:58
msgid ""
"SQLite for persistent storage, :term:`SQLAlchemy` for an ORM, :term:`URL "
"dispatch` for routing, and :term:`Jinja2` for templating."
msgstr "永続ストレージのためのSQLite：term：ORMの場合は `SQLAlchemy`、ルーティングの場合はterm：` URL dispatch`、テンプレート化の場合は：term： `Jinja2`。"

#: ../../narr/project.rst:62
msgid "``pyramid-cookiecutter-zodb``"
msgstr "`` pyramid-cookiecutter-zodb``"

#: ../../narr/project.rst:61
msgid ""
":term:`ZODB` for persistent storage, :term:`traversal` for routing, and "
":term:`Chameleon` for templating"
msgstr "：term：永続的なストレージのための `ZODB`、：term：ルーティングのための` traversal`、および：term：テンプレート化のための `Chameleon`"

#: ../../narr/project.rst:72
msgid "Creating the Project"
msgstr "プロジェクトの作成"

#: ../../narr/project.rst:74
msgid ""
"In :ref:`installing_chapter`, you created a virtual Python environment "
"via the ``venv`` command. We called the virtual environment directory "
"``env`` and set an environment variable ``VENV`` to its path."
msgstr "：ref： `installing_chapter`では、` `venv``コマンドで仮想的なPython環境を作成しました。仮想環境ディレクトリ `` env``を呼び出し、環境変数 `` VENV``をそのパスに設定しました。"

#: ../../narr/project.rst:78
msgid ""
"We assume that you :ref:`previously installed cookiecutter "
"<cookiecutters>`, following its installation instructions."
msgstr "私たちは次のように仮定します：ref： `以前にインストールされたcookiecutter <cookiecutters> `をインストールの指示に従ってインストールします。"

#: ../../narr/project.rst:80
msgid ""
"We'll choose ``pyramid-cookiecutter-starter`` to start the project.  When"
" we invoke ``cookiecutter``, it will create a directory that represents "
"our project."
msgstr "プロジェクトを開始するには `` pyramid-cookiecutter-starter``を選択します。 `` cookiecutter``を呼び出すと、プロジェクトを表すディレクトリが作成されます。"

#: ../../narr/project.rst:82
msgid "We assume our current working directory is the value of ``VENV``."
msgstr "現在の作業ディレクトリは `` VENV``の値​​であると仮定します。"

#: ../../narr/project.rst:84
msgid "On all platforms, generate a project using cookiecutter."
msgstr "すべてのプラットフォームで、cookiecutterを使用してプロジェクトを生成します。"

#: ../../narr/project.rst:90
msgid ""
"If prompted for the first item, accept the default ``yes`` by hitting "
"return."
msgstr "最初の項目の入力を求められたら、returnキーを押してデフォルトの `` yes``を受け入れます。"

#: ../../narr/project.rst:104
msgid "We then run through the following commands."
msgstr "次に、次のコマンドを実行します。"

#: ../../narr/project.rst:106 ../../narr/project.rst:191
#: ../../narr/project.rst:229 ../../narr/project.rst:245
#: ../../narr/project.rst:310
msgid "On UNIX:"
msgstr "UNIXの場合："

#: ../../narr/project.rst:119 ../../narr/project.rst:197
msgid "Or on Windows:"
msgstr "またはWindowsの場合："

#: ../../narr/project.rst:132
msgid ""
"As a result of invoking the ``cookiecutter`` command, a directory named "
"``myproject`` is created.  That directory is a :term:`project` directory."
" The ``setup.py`` file in that directory can be used to distribute your "
"application, or install your application for deployment or development."
msgstr "`` cookiecutter``コマンドを実行すると、 `` myproject``という名前のディレクトリが作成されます。そのディレクトリは：term： `project`ディレクトリです。そのディレクトリにある `` setup.py``ファイルは、アプリケーションを配布したり、展開や開発のためにアプリケーションをインストールしたりするために使用できます。"

#: ../../narr/project.rst:137
msgid ""
"An ``.ini`` file named ``development.ini`` will be created in the project"
" directory.  You will use this ``.ini`` file to configure a server, to "
"run your application, and to debug your application.  It contains "
"configuration that enables an interactive debugger and settings optimized"
" for development."
msgstr "`` .ini``という名前の `` .ini``ファイルがプロジェクトディレクトリに作成されます。この `` .ini``ファイルを使用して、サーバの設定、アプリケーションの実行、アプリケーションのデバッグを行います。インタラクティブなデバッガと開発用に最適化された設定を可能にする設定が含まれています。"

#: ../../narr/project.rst:142
msgid ""
"Another ``.ini`` file named ``production.ini`` will also be created in "
"the project directory.  It contains configuration that disables any "
"interactive debugger (to prevent inappropriate access and disclosure), "
"and turns off a number of debugging settings.  You can use this file to "
"put your application into production."
msgstr "`` production.ini``という別の `` .ini``ファイルもプロジェクトディレクトリに作成されます。これには、（不適切なアクセスと開示を防ぐための）対話型デバッガを無効にし、多くのデバッグ設定を無効にする構成が含まれています。このファイルを使用すると、アプリケーションを本番環境に置くことができます。"

#: ../../narr/project.rst:148
msgid ""
"The ``myproject`` project directory contains an additional subdirectory "
"named ``myproject`` (note the case difference) representing a Python "
":term:`package` which holds very simple :app:`Pyramid` sample code.  This"
" is where you'll edit your application's Python code and templates."
msgstr "`` myproject``プロジェクトディレクトリには、非常に単純な：app： `Pyramid`サンプルコードを保持するPython：term：` package`を表す `` myproject``という別のサブディレクトリがあります（ケースの違いに注意してください）。ここで、アプリケーションのPythonコードとテンプレートを編集します。"

#: ../../narr/project.rst:153
msgid ""
"We created this project in a directory next to its virtual environment "
"directory. However, note that this is not mandatory. The project "
"directory can go more or less anywhere on your filesystem. You don't need"
" to put it in a special \"web server\" directory. You could put it within"
" a virtual environment directory. The author uses Linux mainly, and tends"
" to put project directories which he creates within his ``~/projects`` "
"directory. On Windows, it's a good idea to put project directories within"
" a directory that contains no space characters, so it's wise to *avoid* a"
" path that contains, i.e., ``My Documents``. As a result, the author, "
"when he uses Windows, just puts his projects in ``C:\\projects``."
msgstr "このプロジェクトは、仮想環境ディレクトリの隣のディレクトリに作成しました。ただし、これは必須ではありません。プロジェクトディレクトリは、ファイルシステムのどこにでも置くことができます。特殊な\ &quot;web server \&quot;ディレクトリに置く必要はありません。あなたは仮想環境ディレクトリ内に置くことができます。作者は主にLinuxを使い、 ``〜/ projects``ディレクトリ内に作成したプロジェクトディレクトリを置く傾向があります。 Windowsでは、プロジェクトディレクトリを空白文字が含まれていないディレクトリに置くことをお勧めします。そのため、含まれているパス、つまり「マイドキュメント」を回避することが賢明です。結果として、作者はWindowsを使うときには、自分のプロジェクトを `` C：\\ projects``に置くだけです。"

#: ../../narr/project.rst:166
msgid ""
"You'll need to avoid using ``cookiecutter`` to create a project with the "
"same name as a Python standard library component. In particular, this "
"means you should avoid using the names ``site`` or ``test``, both of "
"which conflict with Python standard library packages.  You should also "
"avoid using the name ``pyramid``, which will conflict with Pyramid "
"itself."
msgstr "Pythonの標準ライブラリコンポーネントと同じ名前のプロジェクトを作成するには、 `` cookiecutter``を使わないでください。特に、これは `` site``や `` test``という名前を使わないでください。両方ともPythonの標準ライブラリパッケージと矛盾します。また、ピラミッドそのものと衝突する名前の「ピラミッド」を使わないでください。"

#: ../../narr/project.rst:177
msgid "Installing your Newly Created Project for Development"
msgstr "新しく開発されたプロジェクトをインストールする"

#: ../../narr/project.rst:179
msgid ""
"To install a newly created project for development, you should ``cd`` to "
"the newly created project directory and use the Python interpreter from "
"the :term:`virtual environment` you created during "
":ref:`installing_chapter` to invoke the command ``pip install -e .``, "
"which installs the project in development mode (``-e`` is for "
"\"editable\") into the current directory (``.``)."
msgstr "開発のために新しく作成したプロジェクトをインストールするには、新しく作成したプロジェクトディレクトリに `` cd``を実行し、ref： `installing_chapter`の中で作成したterm：` virtual environment`のPythonインタプリタを使用して ` `pip install -e .``は、現在のディレクトリ（` `.``）に開発モード（` `-e``は\&quot;編集可能\ &quot;用）でプロジェクトをインストールします。"

#: ../../narr/project.rst:185
msgid ""
"The file named ``setup.py`` will be in the root of the cookiecutter-"
"generated project directory.  The ``python`` you're invoking should be "
"the one that lives in the ``bin`` (or ``Scripts`` on Windows) directory "
"of your virtual Python environment.  Your terminal's current working "
"directory *must* be the newly created project directory."
msgstr "`` setup.py``という名前のファイルはcookiecutter生成のプロジェクトディレクトリのルートにあります。あなたが呼び出す `` python``は、あなたの仮想Python環境の `` bin``（または `` Scripts``）ディレクトリにあるものでなければなりません。あなたの端末の現在の作業ディレクトリ*は新しく作成されたプロジェクトディレクトリでなければなりません。"

#: ../../narr/project.rst:203
msgid "Elided output from a run of this command on UNIX is shown below:"
msgstr "UNIXでこのコマンドを実行したときに出力されなかったものを以下に示します。"

#: ../../narr/project.rst:214
msgid ""
"This will install a :term:`distribution` representing your project into "
"the virtual environment interpreter's library set so it can be found by "
"``import`` statements and by other console scripts such as ``pserve``, "
"``pshell``, ``proutes``, and ``pviews``."
msgstr "これは仮想環境インタプリタのライブラリセットにプロジェクトを表す：term： `distribution`をインストールし、` `import``文や` `pserve``、` `pshell``などの他のコンソールスクリプトで見つけることができます、 `` proutes``、 `` pviews``などがあります。"

#: ../../narr/project.rst:224
msgid "Running the Tests for Your Application"
msgstr "アプリケーションのテストの実行"

#: ../../narr/project.rst:226
msgid ""
"To run unit tests for your application, you must first install the "
"testing dependencies."
msgstr "アプリケーションの単体テストを実行するには、まずテストの依存関係をインストールする必要があります。"

#: ../../narr/project.rst:235 ../../narr/project.rst:251
#: ../../narr/project.rst:316
msgid "On Windows:"
msgstr "Windowsの場合："

#: ../../narr/project.rst:241
msgid ""
"Once the testing requirements are installed, then you can run the tests "
"using the ``py.test`` command that was just installed in the ``bin`` "
"directory of your virtual environment."
msgstr "テスト要件がインストールされたら、あなたの仮想環境の `` bin``ディレクトリにインストールされた `` py.test``コマンドを使ってテストを実行することができます。"

#: ../../narr/project.rst:257
msgid "Here's sample output from a test run on UNIX:"
msgstr "次に、UNIXでのテスト実行の出力例を示します。"

#: ../../narr/project.rst:265
msgid ""
"The tests themselves are found in the ``tests.py`` module in your "
"``cookiecutter``-generated project.  Within a project generated by the "
"``pyramid-cookiecutter-starter`` cookiecutter, only two sample tests "
"exist."
msgstr "テスト自体は `` cookiecutter``生成プロジェクトの `` tests.py``モジュールにあります。 `` pyramid-cookiecutter-starter`` cookiecutterによって生成されたプロジェクトでは、2つのサンプルテストしか存在しません。"

#: ../../narr/project.rst:269
msgid ""
"The ``-q`` option is passed to the ``py.test`` command to limit the "
"output to a stream of dots. If you don't pass ``-q``, you'll see verbose "
"test result output (which normally isn't very useful)."
msgstr "`` -q``オプションは `` py.test``コマンドに渡され、出力をドットのストリームに制限します。 `` -q``を渡さないと、冗長なテスト結果出力が表示されます（通常はそれほど役に立ちません）。"

#: ../../narr/project.rst:273
msgid ""
"Alternatively, if you'd like to see test coverage, pass the ``--cov`` "
"option to ``py.test``:"
msgstr "あるいは、テストカバレッジを表示する場合は、 `` --cov``オプションを `` py.test``に渡します："

#: ../../narr/project.rst:280
msgid ""
"Cookiecutters include configuration defaults for ``py.test`` and test "
"coverage. These configuration files are ``pytest.ini`` and "
"``.coveragerc``, located at the root of your package. Without these "
"defaults, we would need to specify the path to the module on which we "
"want to run tests and coverage."
msgstr "Cookiecuttersには、 `` py.test``とテストカバレッジのデフォルト設定が含まれています。これらの設定ファイルはパッケージのルートにある `` pytest.ini``と `` .coveragerc``です。これらのデフォルトがなければ、テストとカバレッジを実行するモジュールへのパスを指定する必要があります。"

#: ../../narr/project.rst:289
msgid ""
"See py.test's documentation for :ref:`pytest:usage` or invoke ``py.test "
"-h`` to see its full set of options."
msgstr "：ref： `pytest：usage`のpy.testのドキュメントを参照するか、` `py.test -h``を呼び出してその完全なオプションセットを見てください。"

#: ../../narr/project.rst:302
msgid "Running the Project Application"
msgstr "プロジェクトアプリケーションの実行"

#: ../../narr/project.rst:304
msgid "See also the output of :ref:`pserve --help <pserve_script>`."
msgstr "：ref： `pserve --helpの出力も参照してください。 <pserve_script> `。"

#: ../../narr/project.rst:306
msgid ""
"Once a project is installed for development, you can run the application "
"it represents using the ``pserve`` command against the generated "
"configuration file.  In our case, this file is named ``development.ini``."
msgstr "プロジェクトを開発用にインストールしたら、生成された設定ファイルに対して `` pserve``コマンドを使って表すアプリケーションを実行できます。私たちの場合、このファイルの名前は `` development.ini``です。"

#: ../../narr/project.rst:322
msgid "Here's sample output from a run of ``pserve`` on UNIX:"
msgstr "UNIXでの `` pserve``の実行結果のサンプルを以下に示します："

#: ../../narr/project.rst:331
msgid ""
"Access is restricted such that only a browser running on the same machine"
" as Pyramid will be able to access your Pyramid application.  However, if"
" you want to open access to other machines on the same network, then edit"
" the ``development.ini`` file, and replace the ``listen`` value in the "
"``[server:main]`` section, changing it from ``localhost:6543`` to "
"``*:6543`` (this is equivalent to ``0.0.0.0:6543 [::]:6543``).  For "
"example:"
msgstr "Pyramidと同じマシン上で動作するブラウザのみがPyramidアプリケーションにアクセスできるようにアクセスが制限されています。しかし、同じネットワーク上の他のマシンへのアクセスを開きたい場合は、 `` development.ini``ファイルを編集し、 `` [server：main] ``セクションの `` listen``値を置き換えてください。 `` localhost：6543``から `` *：6543``に変更します（これは `` 0.0.0.0:6543 [::]：6543``と同じです）。例えば："

#: ../../narr/project.rst:344
msgid ""
"Now when you use ``pserve`` to start the application, it will respond to "
"requests on *all* IP addresses possessed by your system, not just "
"requests to ``localhost``.  This is what the ``0.0.0.0`` in ``serving on "
"http://0.0.0.0:6543`` means.  The server will respond to requests made to"
" ``127.0.0.1`` and on any external IP address. For example, your system "
"might be configured to have an external IP address ``192.168.1.50``.  If "
"that's the case, if you use a browser running on the same system as "
"Pyramid, it will be able to access the application via "
"``http://127.0.0.1:6543/`` as well as via ``http://192.168.1.50:6543/``. "
"However, *other people* on other computers on the same network will also "
"be able to visit your Pyramid application in their browser by visiting "
"``http://192.168.1.50:6543/``. The same holds true if you use IPv6. "
"``[::]`` means the same as ``0.0.0.0`` but for IPv6 protocol."
msgstr "これで、アプリケーションを起動するために `` pserve``を使うと、 `` localhost``へのリクエストだけでなく、あなたのシステムが所有するすべての* IPアドレスに対するリクエストに応答します。これは `` http：//0.0.0.0：6543で提供する `` 0.0.0.0``を意味します。サーバは `` 127.0.0.1``と任意の外部IPアドレスに対する要求に応答します。たとえば、システムが外部IPアドレス「192.168.1.50」を持つように設定されている可能性があります。そうであれば、Pyramidと同じシステム上で動作しているブラウザを使うと、 `` http：//127.0.0.1：6543 / ``と `` http： /192.168.1.50：6543 / ``しかし、同じネットワーク上の他のコンピュータの*他の人も、http：//192.168.1.50：6543 / ``にアクセスして、ブラウザのPyramidアプリケーションにアクセスすることができます。 IPv6を使用している場合も同様です。 `` [::] ``は `` 0.0.0.0``と同じですが、IPv6プロトコルの場合と同じです。"

#: ../../narr/project.rst:357
msgid ""
"You can change the port on which the server runs on by changing the same "
"portion of the ``development.ini`` file.  For example, you can change the"
" ``listen = localhost:6543`` line in the ``development.ini`` file's "
"``[server:main]`` section to ``listen = localhost:8080`` to run the "
"server on port 8080 instead of port 6543."
msgstr "`` development.ini``ファイルの同じ部分を変更することで、サーバが動作するポートを変更することができます。たとえば、 `` development.ini``ファイルの `` [server：main] ``セクションを `` listen = localhost：8080``に変更すると、 `` listen = localhost：ポート6543の代わりにポート8080に接続します。"

#: ../../narr/project.rst:362
msgid ""
"You can shut down a server started this way by pressing ``Ctrl-C`` (or "
"``Ctrl-Break`` on Windows)."
msgstr "`` Ctrl-C``（またはWindowsでは `` Ctrl-Break``）を押すことで、このように起動したサーバをシャットダウンすることができます。"

#: ../../narr/project.rst:365
msgid ""
"The default server used to run your Pyramid application when a project is"
" created from a cookiecutter is named :term:`Waitress`.  This server is "
"what prints the ``Serving on...`` line when you run ``pserve``.  It's a "
"good idea to use this server during development because it's very simple."
"  It can also be used for light production.  Setting your application up "
"under a different server is not advised until you've done some "
"development work under the default server, particularly if you're not yet"
" experienced with Python web development.  Python web server setup can be"
" complex, and you should get some confidence that your application works "
"in a default environment before trying to optimize it or make it \"more "
"like production\".  It's awfully easy to get sidetracked trying to set up"
" a non-default server for hours without actually starting to do any "
"development.  One of the nice things about Python web servers is that "
"they're largely interchangeable, so if your application works under the "
"default server, it will almost certainly work under any other server in "
"production if you eventually choose to use a different one.  Don't worry "
"about it right now."
msgstr "プロジェクトがcookiecutterから作成されたときにPyramidアプリケーションを実行するために使用されるデフォルトのサーバーの名前はterm： `Waitress`です。このサーバは `` pserve``を実行するときに `` Serving on ... ``行を表示します。これは非常に簡単なので、開発中にこのサーバーを使用することをお勧めします。軽量生産にも使用できます。アプリケーションを別のサーバーの下に置くことは、特にPython Web開発にまだ慣れていない場合には、デフォルトサーバーで開発作業を行うまではお勧めしません。 Python Webサーバーの設定は複雑になる可能性があります。アプリケーションをデフォルト環境で動作させる前に、アプリケーションを最適化しようとするか、「生産のように」するという確信を得てください。実際に開発を始めることなく、何時間もデフォルト以外のサーバーを設定しようとしたら、横行することは非常に簡単です。 Python Webサーバーに関する優れた点の1つは、互換性がほとんどないため、アプリケーションがデフォルトのサーバーで動作する場合、最終的に別のサーバーを使用するように選択すると、他のサーバー上で動作することがほぼ確実になります。今は心配しないでください。"

#: ../../narr/project.rst:381
msgid ""
"For more detailed information about the startup process, see "
":ref:`startup_chapter`.  For more information about environment variables"
" and configuration file settings that influence startup and runtime "
"behavior, see :ref:`environment_chapter`."
msgstr "起動プロセスの詳細については、：ref： `startup_chapter`を参照してください。起動と実行時の動作に影響する環境変数と設定ファイルの設定の詳細については、：ref： `environment_chapter`を参照してください。"

#: ../../narr/project.rst:389
msgid "Reloading Code"
msgstr "コードのリロード"

#: ../../narr/project.rst:391
msgid ""
"During development, it's often useful to run ``pserve`` using its "
"``--reload`` option.  When ``--reload`` is passed to ``pserve``, changes "
"to any Python module your project uses will cause the server to restart."
"  This typically makes development easier, as changes to Python code made"
" within a :app:`Pyramid` application is not put into effect until the "
"server restarts."
msgstr "開発中、 `` --reload``オプションを使って `` pserve``を実行すると便利なことがよくあります。 `` --reload``が `` pserve``に渡されると、あなたのプロジェクトが使用するPythonモジュールの変更により、サーバが再起動します。これは、一般的には、：app： `Pyramid`アプリケーション内で作られたPythonコードの変更が、サーバが再起動されるまで有効にならないため、開発が容易になります。"

#: ../../narr/project.rst:397
msgid "For example, on UNIX:"
msgstr "たとえば、UNIXの場合："

#: ../../narr/project.rst:407
msgid ""
"Now if you make a change to any of your project's ``.py`` files or "
"``.ini`` files, you'll see the server restart automatically:"
msgstr "プロジェクトの `` .py``ファイルや `` .ini``ファイルのいずれかを変更すると、自動的にサーバが再起動します："

#: ../../narr/project.rst:418
msgid ""
"Changes to template files (such as ``.pt`` or ``.mak`` files) won't cause"
" the server to restart.  Changes to template files don't require a server"
" restart as long as the ``pyramid.reload_templates`` setting in the "
"``development.ini`` file is ``true``.  Changes made to template files "
"when this setting is ``true`` will take effect immediately without a "
"server restart."
msgstr "テンプレートファイル（ `` .pt`や `` .mak``ファイルなど）を変更しても、サーバは再起動しません。テンプレートファイルの変更は、 `` development.ini``ファイルの `` pyramid.reload_templates``の設定が `` true``である限り、サーバを再起動する必要はありません。この設定が `` true``のときにテンプレートファイルに加えられた変更は、サーバを再起動しなくてもすぐに有効になります。"

#: ../../narr/project.rst:428
msgid "Viewing the Application"
msgstr "アプリケーションの表示"

#: ../../narr/project.rst:430
msgid ""
"Once your application is running via ``pserve``, you may visit "
"``http://localhost:6543/`` in your browser.  You will see something in "
"your browser like what is displayed in the following image:"
msgstr "アプリケーションが `` pserve``で実行されると、あなたのブラウザの `` http：// localhost：6543 / ``にアクセスすることができます。次の画像に表示されているようなものがブラウザに表示されます。"

#: ../../narr/project.rst:436
msgid ""
"This is the page shown by default when you visit an unmodified "
"``cookiecutter`` generated ``pyramid-cookiecutter-starter`` application "
"in a browser."
msgstr "これは、ブラウザで修正された `` cookiecutter``の `` pyramid-cookiecutter-starter``アプリケーションを訪れたときにデフォルトで表示されるページです。"

#: ../../narr/project.rst:445
msgid "The Debug Toolbar"
msgstr "デバッグツールバー"

#: ../../narr/project.rst:449
msgid ""
"If you click on the :app:`Pyramid` logo at the top right of the page, a "
"new target window will open to present a debug toolbar that provides "
"various niceties while you're developing.  This logo will float above "
"every HTML page served by :app:`Pyramid` while you develop an "
"application, and allows you to show the toolbar as necessary."
msgstr "ページの右上に：app： `Pyramid`ロゴをクリックすると、新しいターゲットウィンドウが開き、開発中にさまざまな細かい点を提供するデバッグツールバーが表示されます。このロゴは、アプリケーション開発中に：app： `Pyramid`によって提供されるすべてのHTMLページの上に浮動表示され、必要に応じてツールバーを表示することができます。"

#: ../../narr/project.rst:457
msgid ""
"If you don't see the Pyramid logo on the top right of the page, it means "
"you're browsing from a system that does not have debugging access.  By "
"default, for security reasons, only a browser originating from "
"``localhost`` (``127.0.0.1``) can see the debug toolbar.  To allow your "
"browser on a remote system to access the server, add a line within the "
"``[app:main]`` section of the ``development.ini`` file in the form "
"``debugtoolbar.hosts = X .X.X.X``.  For example, if your Pyramid "
"application is running on a remote system, and you're browsing from a "
"host with the IP address ``192.168.1.1``, you'd add something like this "
"to enable the toolbar when your system contacts Pyramid:"
msgstr "ページの右上にピラミッドのロゴが表示されない場合は、デバッグアクセスのないシステムからブラウズしていることを意味します。デフォルトでは、セキュリティ上の理由から、 `` localhost``（ `` 127.0.0.1``）に由来するブラウザだけがデバッグツールバーを見ることができます。リモートシステム上のブラウザがサーバにアクセスできるようにするには、 `` development.ini``ファイルの `` [app：main] ``セクションに `` debugtoolbar.hosts = X .XXX ``。たとえば、あなたのPyramidアプリケーションがリモートシステム上で動作していて、IPアドレスが `` 192.168.1.1``のホストからブラウズしている場合は、システムがピラミッドに接続しているときにツールバーを有効にするために、 ："

#: ../../narr/project.rst:473
msgid ""
"For more information about what the debug toolbar allows you to do, see "
"the :ref:`documentation for pyramid_debugtoolbar <toolbar:overview>`."
msgstr "デバッグツールバーでできることの詳細については、pyramid_debugtoolbarの：ref： `ドキュメントを参照してください。 <toolbar:overview> `。"

#: ../../narr/project.rst:476
msgid ""
"The debug toolbar will not be shown (and all debugging will be turned "
"off) when you use the ``production.ini`` file instead of the "
"``development.ini`` ini file to run the application."
msgstr "アプリケーションを実行するために `` development.ini`` iniファイルの代わりに `` production.ini``ファイルを使用すると、デバッグツールバーは表示されません（また、すべてのデバッグはオフになります）。"

#: ../../narr/project.rst:480
msgid ""
"You can also turn the debug toolbar off by editing ``development.ini`` "
"and commenting out a line.  For example, instead of:"
msgstr "`` development.ini``を編集して行をコメントアウトすることで、デバッグツールバーをオフにすることもできます。たとえば、次の代わりに："

#: ../../narr/project.rst:491
msgid "Put a hash mark at the beginning of the ``pyramid_debugtoolbar`` line:"
msgstr "`` pyramid_debugtoolbar``行の先頭にハッシュマークをつけます："

#: ../../narr/project.rst:501
msgid "Then restart the application to see that the toolbar has been turned off."
msgstr "次に、アプリケーションを再起動して、ツールバーがオフになっていることを確認します。"

#: ../../narr/project.rst:503
msgid ""
"Note that if you comment out the ``pyramid_debugtoolbar`` line, the ``#``"
" *must* be in the first column.  If you put it anywhere else, and then "
"attempt to restart the application, you'll receive an error that ends "
"something like this:"
msgstr "`` pyramid_debugtoolbar``行をコメントアウトすると、 ``＃ `` *は最初の列になければなりません。他の場所に置いて、アプリケーションを再起動しようとすると、次のようなエラーが返されます。"

#: ../../narr/project.rst:516
msgid "The Project Structure"
msgstr "プロジェクトの構造"

#: ../../narr/project.rst:518
msgid ""
"The ``pyramid-cookiecutter-starter`` cookiecutter generated a "
":term:`project` (named ``myproject``), which contains a Python "
":term:`package`.  The package is *also* named ``myproject``; the "
"cookiecutter generates a project which contains a package that shares its"
" name."
msgstr "`` pyramid-cookiecutter-starter`` cookiecutterは、：term： `project`（` `myproject``という名前）を生成しました。これはPython：term：` package`を含みます。パッケージは `` myproject``とも呼ばれます。 cookiecutterは、その名前を共有するパッケージを含むプロジェクトを生成します。"

#: ../../narr/project.rst:523
msgid ""
"All :app:`Pyramid` ``cookiecutter``-generated projects share a similar "
"structure. The ``myproject`` project we've generated has the following "
"directory structure:"
msgstr "All：app： `Pyramid` `` cookiecutter``で生成されたプロジェクトは、同様の構造を共有しています。生成された `` myproject``プロジェクトは以下のディレクトリ構造を持っています："

#: ../../narr/project.rst:551
msgid "The ``myproject`` :term:`Project`"
msgstr "`` myproject``：term： `Project`"

#: ../../narr/project.rst:553
msgid ""
"The ``myproject`` :term:`project` directory is the distribution and "
"deployment wrapper for your application.  It contains both the "
"``myproject`` :term:`package` representing your application as well as "
"files used to describe, run, and test your application."
msgstr "`` myproject``：term： `project`ディレクトリは、あなたのアプリケーションの配布と展開ラッパーです。これはアプリケーションを表す `` myproject`：term： `package`とアプリケーションの記述、実行、テストに使用されるファイルの両方を含みます。"

#: ../../narr/project.rst:558
msgid "``.coveragerc`` configures coverage when running tests."
msgstr "`` .coveragerc``はテストを実行するときにカバレッジを設定します。"

#: ../../narr/project.rst:560
msgid ""
"``CHANGES.txt`` describes the changes you've made to the application.  It"
" is conventionally written in :term:`reStructuredText` format."
msgstr "`` CHANGES.txt``はあなたがアプリケーションに加えた変更を記述します。これは通常：term： `reStructuredText`形式で書かれています。"

#: ../../narr/project.rst:563
msgid ""
"``MANIFEST.in`` is a :term:`distutils` \"manifest\" file, naming which "
"files should be included in a source distribution of the package when "
"``python setup.py sdist`` is run."
msgstr "`` MANIFEST.in``は：term： `distutils` \&quot;マニフェスト\ &quot;ファイルで、` `python setup.py sdist``が実行されたときにパッケージのソース配布物に含まれるファイル名を指定します。"

#: ../../narr/project.rst:567
msgid ""
"``README.txt`` describes the application in general.  It is "
"conventionally written in :term:`reStructuredText` format."
msgstr "`` README.txt``は一般的なアプリケーションを記述します。これは通常：term： `reStructuredText`形式で書かれています。"

#: ../../narr/project.rst:570
msgid ""
"``development.ini`` is a :term:`PasteDeploy` configuration file that can "
"be used to execute your application during development."
msgstr "`` development.ini``は、開発中にアプリケーションを実行するために使用できる：term： `PasteDeploy`設定ファイルです。"

#: ../../narr/project.rst:573
msgid ""
"``production.ini`` is a :term:`PasteDeploy` configuration file that can "
"be used to execute your application in a production configuration."
msgstr "`` production.ini``は、プロダクション設定でアプリケーションを実行するために使用できる：term： `PasteDeploy`設定ファイルです。"

#: ../../narr/project.rst:576
msgid "``pytest.ini`` is a configuration file for running tests."
msgstr "`` pytest.ini``はテストを実行するための設定ファイルです。"

#: ../../narr/project.rst:578
msgid ""
"``setup.py`` is the file you'll use to test and distribute your "
"application. It is a standard :term:`setuptools` ``setup.py`` file."
msgstr "`` setup.py``は、アプリケーションのテストと配布に使用するファイルです。 term： `setuptools`` `setup.py``ファイルです。"

#: ../../narr/project.rst:588
msgid "``development.ini``"
msgstr "`` development.ini``"

#: ../../narr/project.rst:590
msgid ""
"The ``development.ini`` file is a :term:`PasteDeploy` configuration file."
" Its purpose is to specify an application to run when you invoke "
"``pserve``, as well as the deployment settings provided to that "
"application."
msgstr "`` development.ini``ファイルは：term： `PasteDeploy`設定ファイルです。その目的は、 `` pserve``を起動したときに実行するアプリケーションと、そのアプリケーションに提供されるデプロイメント設定を指定することです。"

#: ../../narr/project.rst:594
msgid "The generated ``development.ini`` file looks like so:"
msgstr "生成された `` development.ini``ファイルは次のようになります："

#: ../../narr/project.rst:600
msgid ""
"This file contains several sections including ``[app:main]``, "
"``[server:main]``, and several other sections related to logging "
"configuration."
msgstr "このファイルには、 `` [app：main] ``、 `` [server：main] ``、その他のロギング設定に関連するセクションが含まれています。"

#: ../../narr/project.rst:603
msgid ""
"The ``[app:main]`` section represents configuration for your "
":app:`Pyramid` application.  The ``use`` setting is the only setting "
"required to be present in the ``[app:main]`` section.  Its default value,"
" ``egg:myproject``, indicates that our myproject project contains the "
"application that should be served. Other settings added to this section "
"are passed as keyword arguments to the function named ``main`` in our "
"package's ``__init__.py`` module.  You can provide startup-time "
"configuration parameters to your application by adding more settings to "
"this section."
msgstr "`` [app：main] ``セクションは：app： `Pyramid`アプリケーションの設定を表します。 `` use``設定は、 `` [app：main] ``セクションに存在する唯一の設定です。デフォルト値の `` egg：myproject``は、私たちのmyprojectプロジェクトが提供されるべきアプリケーションを含んでいることを示します。このセクションに追加された他の設定は、パッケージの `` __init __。py``モジュールの `` main``という名前の関数にキーワード引数として渡されます。このセクションにさらに設定を追加することで、アプリケーションに起動時の構成パラメータを提供できます。"

#: ../../narr/project.rst:612
msgid ""
"See :ref:`pastedeploy_entry_points` for more information about the "
"meaning of the ``use = egg:myproject`` value in this section."
msgstr "このセクションの `` use = egg：myproject``値の意味については、ref： `pastedeploy_entry_points`を参照してください。"

#: ../../narr/project.rst:615
msgid ""
"The ``pyramid.reload_templates`` setting in the ``[app:main]`` section is"
" a :app:`Pyramid`-specific setting which is passed into the framework.  "
"If it exists, and its value is ``true``, supported template changes will "
"not require an application restart to be detected.  See "
":ref:`reload_templates_section` for more information."
msgstr "`` [app：main] ``セクションの `` pyramid.reload_templates``の設定は、：app： `Pyramid`固有の設定で、フレームワークに渡されます。存在し、その値が `` true``の場合、サポートされているテンプレートの変更では、アプリケーションの再起動を検出する必要はありません。詳細は、ref： `reload_templates_section`を参照してください。"

#: ../../narr/project.rst:621
msgid ""
"The ``pyramid.reload_templates`` option should be turned off for "
"production applications, as template rendering is slowed when it is "
"turned on."
msgstr "`` pyramid.reload_templates``オプションは、実稼働アプリケーションではオフにする必要があります。これは、テンプレートレンダリングが有効になっているときに遅くなるためです。"

#: ../../narr/project.rst:625
msgid ""
"The ``pyramid.includes`` setting in the ``[app:main]`` section tells "
"Pyramid to \"include\" configuration from another package.  In this case,"
" the line ``pyramid.includes = pyramid_debugtoolbar`` tells Pyramid to "
"include configuration from the ``pyramid_debugtoolbar`` package.  This "
"turns on a debugging panel in development mode which can be opened by "
"clicking on the :app:`Pyramid` logo on the top right of the screen.  "
"Including the debug toolbar will also make it possible to interactively "
"debug exceptions when an error occurs."
msgstr "`` [app：main] ``セクションの `` pyramid.includes`の設定は、Pyramidに別のパッケージの設定を &quot;含める&quot;ように指示します。この場合、 `` pyramid.includes = pyramid_debugtoolbar``はPyramidに `` pyramid_debugtoolbar``パッケージの設定を含めるように指示します。これは、開発モードのデバッグパネルをオンにします。これは、画面の右上に：app： `Pyramid`ロゴをクリックすることで開くことができます。デバッグツールバーを含めることで、エラーが発生したときに対話的に例外をデバッグすることも可能になります。"

#: ../../narr/project.rst:634
msgid ""
"Various other settings may exist in this section having to do with "
"debugging or influencing runtime behavior of a :app:`Pyramid` "
"application.  See :ref:`environment_chapter` for more information about "
"these settings."
msgstr "このセクションには、app： `Pyramid`アプリケーションの実行時動作をデバッグしたり影響を与えたりするためのさまざまな設定があります。これらの設定の詳細については、ref： `environment_chapter`を参照してください。"

#: ../../narr/project.rst:638
msgid ""
"The name ``main`` in ``[app:main]`` signifies that this is the default "
"application run by ``pserve`` when it is invoked against this "
"configuration file.  The name ``main`` is a convention used by "
"PasteDeploy signifying that it is the default application."
msgstr "`` [app：main] ``の中の `` main``という名前は、これがこの設定ファイルに対して呼び出されたときに `` pserve``が実行するデフォルトのアプリケーションであることを示します。 `` main``という名前は、PasteDeployがデフォルトのアプリケーションであることを示すために使用される規約です。"

#: ../../narr/project.rst:643
msgid ""
"The ``[server:main]`` section of the configuration file configures a WSGI"
" server which listens on TCP port 6543.  It is configured to listen on "
"localhost only (``127.0.0.1``)."
msgstr "設定ファイルの `` [server：main] ``セクションは、TCPポート6543をリッスンするWSGIサーバを設定します。ローカルホストのみ（ `` 127.0.0.1``）でリッスンするように設定されています。"

#: ../../narr/project.rst:649
msgid ""
"The sections after ``# logging configuration`` represent Python's "
"standard library :mod:`logging` module configuration for your "
"application.  These sections are passed to the `logging module's config "
"file configuration engine <https://docs.python.org/2/howto/logging.html"
"#configuring-logging>`_ when the ``pserve`` or ``pshell`` commands are "
"executed.  The default configuration sends application logging output to "
"the standard error output of your terminal. For more information about "
"logging configuration, see :ref:`logging_chapter`."
msgstr "``＃logging configuration``の後のセクションはPythonの標準ライブラリを表しています：アプリケーションのmod： `logging`モジュール設定。これらのセクションは `ロギングモジュールの設定ファイル設定エンジン<https://docs.python.org/2/howto/logging.html#configuring-logging> `` pserve``や `` pshell``コマンドが実行されたときに `_ &#39;を返します。デフォルト設定では、アプリケーションログ出力が端末の標準エラー出力に送信されます。ロギング設定の詳細については、：ref： `logging_chapter`を参照してください。"

#: ../../narr/project.rst:657
msgid ""
"See the :term:`PasteDeploy` documentation for more information about "
"other types of things you can put into this ``.ini`` file, such as other "
"applications, :term:`middleware`, and alternate :term:`WSGI` server "
"implementations."
msgstr "：term： `ミドルウェア`、alternate：term： `WSGI`など、この` `.ini``ファイルに入れることができる他のタイプのものの詳細については、：term：` PasteDeploy`のドキュメントを参照してください。サーバー実装。"

#: ../../narr/project.rst:666
msgid "``production.ini``"
msgstr "`production.ini`"

#: ../../narr/project.rst:668
msgid ""
"The ``production.ini`` file is a :term:`PasteDeploy` configuration file "
"with a purpose much like that of ``development.ini``.  However, it "
"disables the debug toolbar, and filters all log messages except those "
"above the WARN level.  It also turns off template development options "
"such that templates are not automatically reloaded when changed, and "
"turns off all debugging options.  This file is appropriate to use instead"
" of ``development.ini`` when you put your application into production."
msgstr "`` production.ini``ファイルは：term： `PasteDeploy`設定ファイルで、` `development.ini``によく似ています。ただし、デバッグツールバーを無効にし、WARNレベルを超えるすべてのログメッセージをフィルタリングします。また、テンプレートが変更されたときに自動的にリロードされないように、またすべてのデバッグオプションをオフにするようなテンプレート開発オプションもオフにします。このファイルは、アプリケーションを実稼働環境に置くときに `` development.ini``の代わりに使うのに適しています。"

#: ../../narr/project.rst:676
msgid ""
"It's important to use ``production.ini`` (and *not* ``development.ini``) "
"to benchmark your application and put it into production.  "
"``development.ini`` configures your system with a debug toolbar that "
"helps development, but the inclusion of this toolbar slows down page "
"rendering times by over an order of magnitude.  The debug toolbar is also"
" a potential security risk if you have it configured incorrectly."
msgstr "アプリケーションをベンチマークしてプロダクションに入れるには、 `` production.ini``（そして `` development.ini``ではなく*）を使うことが重要です。 `` development.ini``は開発に役立つデバッグツールバーを使ってシステムを設定しますが、このツールバーを組み込むことでページレンダリング時間が一桁以上遅くなります。デバッグツールバーは、正しく構成されていないと、セキュリティリスクの可能性もあります。"

#: ../../narr/project.rst:687
msgid "``MANIFEST.in``"
msgstr "`` MANIFEST.in``"

#: ../../narr/project.rst:689
msgid ""
"The ``MANIFEST.in`` file is a :term:`distutils` configuration file which "
"specifies the non-Python files that should be included when a "
":term:`distribution` of your Pyramid project is created when you run "
"``python setup.py sdist``.  Due to the information contained in the "
"default ``MANIFEST.in``, an sdist of your Pyramid project will include "
"``.txt`` files, ``.ini`` files, ``.rst`` files, graphics files, and "
"template files, as well as ``.py`` files.  See "
"https://docs.python.org/2/distutils/sourcedist.html#the-manifest-in-"
"template for more information about the syntax and usage of "
"``MANIFEST.in``."
msgstr "`` MANIFEST.in``ファイルは：term： `distutils`設定ファイルで、pythonプロジェクトの：term：` distribution`が `` pythonを実行するときに作成されるときに含めるべき非Pythonファイルを指定します。 setup.py sdist``を実行します。デフォルトの `` MANIFEST.in``に​​含まれている情報のため、Pyramidプロジェクトのsdistには `` .txt``ファイル、 `` .ini``ファイル、 `` .rst``ファイル、グラフィックファイル、テンプレートファイル、 `` .py``ファイルなどがあります。 `` MANIFEST.in``の構文と使い方の詳細については、https://docs.python.org/2/distutils/sourcedist.html#the-manifest-in-templateを参照してください。"

#: ../../narr/project.rst:699
msgid ""
"Without the presence of a ``MANIFEST.in`` file or without checking your "
"source code into a version control repository, ``setup.py sdist`` places "
"only *Python source files* (files ending with a ``.py`` extension) into "
"tarballs generated by ``python setup.py sdist``.  This means, for "
"example, if your project was not checked into a setuptools-compatible "
"source control system, and your project directory didn't contain a "
"``MANIFEST.in`` file that told the ``sdist`` machinery to include "
"``*.pt`` files, the ``myproject/templates/mytemplate.pt`` file would not "
"be included in the generated tarball."
msgstr "`` MANIFEST.in``ファイルがないか、ソースコードをバージョン管理リポジトリにチェックしなくても、 `` setup.py sdist``は* Pythonソースファイル*（ `` .py``で終わるファイルのみ） `` python setup.py sdist`で生成されたtarballに変換します。たとえば、プロジェクトがsetuptools互換のソース管理システムにチェックインされておらず、プロジェクトディレクトリに `` MANIFEST.in``ファイルが含まれていない場合、 `` sdist``マシンに ` `* .pt``ファイルの場合、` `myproject / templates / mytemplate.pt``ファイルは生成されたtarballに含まれません。"

#: ../../narr/project.rst:708
msgid ""
"Projects generated by Pyramid cookiecutters include a default "
"``MANIFEST.in`` file. The ``MANIFEST.in`` file contains declarations "
"which tell it to include files like ``*.pt``, ``*.css`` and ``*.js`` in "
"the generated tarball. If you include files with extensions other than "
"the files named in the project's ``MANIFEST.in`` and you don't make use "
"of a setuptools-compatible version control system, you'll need to edit "
"the ``MANIFEST.in`` file and include the statements necessary to include "
"your new files.  See "
"https://docs.python.org/2/distutils/sourcedist.html#principle for more "
"information about how to do this."
msgstr "Pyramid cookiecuttersによって生成されるプロジェクトには、デフォルトの `` MANIFEST.in``ファイルが含まれています。 `` MANIFEST.in``ファイルは生成されたtarballに `` * .pt``、 `` * .css``、 `` * .js``のようなファイルを含めるように宣言しています。プロジェクトの `` MANIFEST.in``に​​指定されたファイル以外の拡張子を持つファイルをインクルードし、setuptoolsと互換性のあるバージョン管理システムを使用していない場合は、 `` MANIFEST.in` `ファイルを開き、新しいファイルをインクルードするのに必要なステートメントを含めます。これを行う方法の詳細については、https://docs.python.org/2/distutils/sourcedist.html#principleをご覧ください。"

#: ../../narr/project.rst:718
msgid ""
"You can also delete ``MANIFEST.in`` from your project and rely on a "
"setuptools feature which simply causes all files checked into a version "
"control system to be put into the generated tarball.  To allow this to "
"happen, check all the files that you'd like to be distributed along with "
"your application's Python files into Subversion.  After you do this, when"
" you rerun ``setup.py sdist``, all files checked into the version control"
" system will be included in the tarball.  If you don't use Subversion, "
"and instead use a different version control system, you may need to "
"install a setuptools add-on such as ``setuptools-git`` or ``setuptools-"
"hg`` for this behavior to work properly."
msgstr "あなたのプロジェクトから `` MANIFEST.in``を削除して、バージョン管理システムにチェックインされたすべてのファイルを生成されたtarballに入れさせるsetuptools機能に依存することもできます。これを可能にするには、アプリケーションのPythonファイルと共に配布するすべてのファイルをSubversionにチェックインしてください。これを実行した後、 `` setup.py sdist``を再実行すると、バージョン管理システムにチェックインされたすべてのファイルがtarballに含まれます。 Subversionを使用せず、代わりに別のバージョン管理システムを使用する場合は、この動作が適切に動作するように `` setuptools-git``や `` setuptools-hg``などのsetuptoolsアドオンをインストールする必要があります。"

#: ../../narr/project.rst:732
msgid "``setup.py``"
msgstr "`` setup.py``"

#: ../../narr/project.rst:734
msgid ""
"The ``setup.py`` file is a :term:`setuptools` setup file.  It is meant to"
" be used to define requirements for installing dependencies for your "
"package and testing, as well as distributing your application."
msgstr "`` setup.py``ファイルは：term： `setuptools`セットアップファイルです。これは、パッケージの依存関係をインストールするための要件を定義したり、アプリケーションを配布したりテストしたりするために使用されます。"

#: ../../narr/project.rst:740
msgid ""
"``setup.py`` is the de facto standard which Python developers use to "
"distribute their reusable code.  You can read more about ``setup.py`` "
"files and their usage in the `Python Packaging User Guide "
"<https://packaging.python.org/>`_ and `Setuptools documentation "
"<http://pythonhosted.org/setuptools/>`_."
msgstr "`` setup.py``は、Python開発者が再利用可能なコードを配布するために使用する事実上の標準です。 `` setup.py``ファイルとその使い方については、 `` Python Packaging User Guide」を参照してください。 <https://packaging.python.org/> `_と` Setuptoolsのドキュメント<http://pythonhosted.org/setuptools/> `_。"

#: ../../narr/project.rst:746
msgid "Our generated ``setup.py`` looks like this:"
msgstr "生成された `` setup.py``は次のようになります："

#: ../../narr/project.rst:752
msgid ""
"The ``setup.py`` file calls the setuptools ``setup`` function, which does"
" various things depending on the arguments passed to ``pip`` on the "
"command line."
msgstr "`` setup.py``ファイルはsetuptoolsの `` setup``関数を呼び出します。これは、コマンドラインで `` pip``に渡される引数に応じて様々なことを行います。"

#: ../../narr/project.rst:756
msgid ""
"Within the arguments to this function call, information about your "
"application is kept.  While it's beyond the scope of this documentation "
"to explain everything about setuptools setup files, we'll provide a "
"whirlwind tour of what exists in this file in this section."
msgstr "この関数呼び出しの引数の中に、アプリケーションに関する情報が保持されます。 setuptoolsのセットアップファイルに関するすべてのことを説明するのは、このドキュメントの範囲を超えていますが、このセクションでは、このファイルに存在するものについての旋風のツアーを提供します。"

#: ../../narr/project.rst:761
msgid ""
"Your application's name can be any string; it is specified in the "
"``name`` field.  The version number is specified in the ``version`` "
"value.  A short description is provided in the ``description`` field.  "
"The ``long_description`` is conventionally the content of the ``README`` "
"and ``CHANGES`` files appended together. The ``classifiers`` field is a "
"list of `Trove classifiers "
"<https://pypi.org/pypi?%3Aaction=list_classifiers>`_ describing your "
"application.  ``author`` and ``author_email`` are text fields which "
"probably don't need any description. ``url`` is a field that should point"
" at your application project's URL (if any). ``packages=find_packages()``"
" causes all packages within the project to be found when packaging the "
"application. ``include_package_data`` will include non-Python files when "
"the application is packaged if those files are checked into version "
"control. ``zip_safe=False`` indicates that this package is not safe to "
"use as a zipped egg; instead it will always unpack as a directory, which "
"is more convenient. ``install_requires`` indicates that this package "
"depends on the ``pyramid`` package. ``extras_require`` is a Python "
"dictionary that defines what is required to be installed for running "
"tests. We examined ``entry_points`` in our discussion of the "
"``development.ini`` file; this file defines the ``main`` entry point that"
" represents our project's application."
msgstr "アプリケーションの名前には任意の文字列を使用できます。 `` name``フィールドに指定されています。バージョン番号は `` version``値で指定されます。 `` description``フィールドに簡単な説明があります。 `` long_description``は、従来、一緒に追加された `` README``と `` CHANGES``ファイルの内容です。 `` classifiers``フィールドは、 `` Trove分類子のリストです<https://pypi.org/pypi?%3Aaction=list_classifiers>あなたのアプリケーションを記述する。 `` author``と `` author_email``は、おそらく何も記述する必要のないテキストフィールドです。 `` url``はアプリケーションプロジェクトのURLを指すフィールドです（存在する場合）。 `` packages = find_packages（） ``は、アプリケーションをパッケージ化するときに、プロジェクト内のすべてのパッケージが見つかるようにします。 `` include_package_data``には、バージョンコントロールにチェックインされているアプリケーションがパッケージされている場合、非Pythonファイルが含まれます。 `` zip_safe = False``は、このパッケージが圧縮された卵として安全に使用できないことを示します。代わりに、常にディレクトリとして解凍されます。これはより便利です。 `` install_requires``は、このパッケージが `` pyramid``パッケージに依存していることを示します。 `` extras_require``は、テストの実行に必要なものを定義するPython辞書です。 `` development.ini``ファイルの議論で `` entry_points``を調べました。このファイルはプロジェクトのアプリケーションを表す `` main``エントリーポイントを定義します。"

#: ../../narr/project.rst:781
msgid ""
"Usually you only need to think about the contents of the ``setup.py`` "
"file when distributing your application to other people, when adding "
"Python package dependencies, or when versioning your application for your"
" own use. For fun, you can try this command now:"
msgstr "通常は、アプリケーションを他の人に配布するとき、Pythonパッケージの依存関係を追加するとき、またはあなたのアプリケーションをバージョン管理するときに `` setup.py``ファイルの内容について考えるだけです。楽しみのために、今すぐこのコマンドを試すことができます："

#: ../../narr/project.rst:790
msgid ""
"This will create a tarball of your application in a ``dist`` subdirectory"
" named ``myproject-0.0.tar.gz``.  You can send this tarball to other "
"people who want to install and use your application."
msgstr "これは `` myproject-0.0.tar.gz``という名前の `` dist``サブディレクトリにアプリケーションのtarballを作成します。アプリケーションをインストールして使用したい他の人にこのtarballを送ることができます。"

#: ../../narr/project.rst:798
msgid "The ``myproject`` :term:`Package`"
msgstr "`` myproject``：term： `Package`"

#: ../../narr/project.rst:800
msgid ""
"The ``myproject`` :term:`package` lives inside the ``myproject`` "
":term:`project`.  It contains:"
msgstr "`` myproject``：term： `package`は` `myproject``：term：` project`の中にあります。を含む："

#: ../../narr/project.rst:803
msgid ""
"An ``__init__.py`` file signifies that this is a Python :term:`package`. "
"It also contains code that helps users run the application, including a "
"``main`` function which is used as a entry point for commands such as "
"``pserve``, ``pshell``, ``pviews``, and others."
msgstr "`` __init __。py``ファイルは、これがPython：term： `package`であることを示します。また、 `` pserve``、 `` pshell``、 `` pviews``などのコマンドのエントリポイントとして使用される `` main``関数を含む、ユーザがアプリケーションを動かせるようにするコードも含まれています。"

#: ../../narr/project.rst:808
msgid ""
"A ``templates`` directory, which contains :term:`Jinja2` (or other types "
"of) templates."
msgstr "`` templates``ディレクトリ：term： `Jinja2`（または他のタイプの）テンプレートを含んでいます。"

#: ../../narr/project.rst:811
msgid "A ``tests.py`` module, which contains unit test code for the application."
msgstr "アプリケーション用のユニットテストコードを含む `` tests.py``モジュールです。"

#: ../../narr/project.rst:813
msgid "A ``views.py`` module, which contains view code for the application."
msgstr "アプリケーションのビューコードを含む `` views.py``モジュールです。"

#: ../../narr/project.rst:815
msgid ""
"These are purely conventions established by the cookiecutter. "
":app:`Pyramid` doesn't insist that you name things in any particular way."
" However, it's generally a good idea to follow Pyramid standards for "
"naming, so that other Pyramid developers can get up to speed quickly on "
"your code when you need help."
msgstr "これらは純粋にcookiecutterによって確立された慣例です。 ：app： `Pyramid`はあなたが何か特別な方法で物事の名前を書いていると主張していません。しかし、Pyramidの標準に従って名前を付けることは、一般的には良い考えです。そのため、他のPyramid開発者は、ヘルプが必要なときに素早くコードをスピードアップできます。"

#: ../../narr/project.rst:826
msgid "``__init__.py``"
msgstr "`` __init __。py``"

#: ../../narr/project.rst:828
msgid ""
"We need a small Python module that configures our application and which "
"advertises an entry point for use by our :term:`PasteDeploy` ``.ini`` "
"file. This is the file named ``__init__.py``.  The presence of an "
"``__init__.py`` also informs Python that the directory which contains it "
"is a *package*."
msgstr "アプリケーションを設定し、term： `PasteDeploy`` `.ini``ファイルで使用するエントリポイントを宣言する小さなPythonモジュールが必要です。これは `` __init __。py``という名前のファイルです。 `` __init __。py``の存在は、それを含むディレクトリが* package *であることをPythonに知らせます。"

#: ../../narr/project.rst:837
msgid ""
"Line 1 imports the :term:`Configurator` class from :mod:`pyramid.config` "
"that we use later."
msgstr "1行目は：term： `Configurator`クラスを：mod：` pyramid.config`からインポートします。"

#: ../../narr/project.rst:840
msgid ""
"Lines 4-12 define a function named ``main`` that returns a :app:`Pyramid`"
" WSGI application.  This function is meant to be called by the "
":term:`PasteDeploy` framework as a result of running ``pserve``."
msgstr "4-12行目では：app： `Pyramid` WSGIアプリケーションを返す` `main``という名前の関数を定義しています。この関数は、 `` pserve``を実行した結果、：term： `PasteDeploy`フレームワークによって呼び出されるようになっています。"

#: ../../narr/project.rst:844
msgid "Within this function, application configuration is performed."
msgstr "この機能では、アプリケーション構成が実行されます。"

#: ../../narr/project.rst:846
msgid "Line 7 creates an instance of a :term:`Configurator`."
msgstr "7行目は：term： `Configurator`のインスタンスを作成します。"

#: ../../narr/project.rst:848
msgid ""
"Line 8 adds support for Jinja2 templating bindings, allowing us to "
"specify renderers with the ``.jinja2`` extension."
msgstr "8行目は、Jinja2テンプレートバインディングのサポートを追加し、レンダラーを `` .jinja2``拡張子で指定できるようにします。"

#: ../../narr/project.rst:851
msgid ""
"Line 9 registers a static view, which will serve up the files from the "
"``myproject:static`` :term:`asset specification` (the ``static`` "
"directory of the ``myproject`` package)."
msgstr "9行目はstaticビューを登録します。これは、 `` myproject：static``：term： `asset specification`（` `myproject``パッケージの` `static``ディレクトリ）のファイルを提供します。"

#: ../../narr/project.rst:855
msgid ""
"Line 10 adds a :term:`route` to the configuration.  This route is later "
"used by a view in the ``views`` module."
msgstr "10行目は：term： `route`を設定に追加します。このルートは後で `` views``モジュールのビューで使用されます。"

#: ../../narr/project.rst:858
msgid ""
"Line 11 calls ``config.scan()``, which picks up view registrations "
"declared elsewhere in the package (in this case, in the ``views.py`` "
"module)."
msgstr "11行目は `` config.scan（） ``を呼び出します。これは、パッケージ内の他の場所で宣言されたビュー登録を受け取ります（この場合、 `` views.py``モジュール内にあります）。"

#: ../../narr/project.rst:861
msgid ""
"Line 12 returns a :term:`WSGI` application to the caller of the function "
"(Pyramid's pserve)."
msgstr "12行目は：term： `WSGI`アプリケーションを関数の呼び出し側（Pyramidのpserve）に返します。"

#: ../../narr/project.rst:868
msgid "``views.py``"
msgstr "`` views.py``"

#: ../../narr/project.rst:870
msgid ""
"Much of the heavy lifting in a :app:`Pyramid` application is done by "
"*view callables*.  A :term:`view callable` is the main tool of a "
":app:`Pyramid` web application developer; it is a bit of code which "
"accepts a :term:`request` and which returns a :term:`response`."
msgstr "a：app： `Pyramid`アプリケーションの大部分は、* view callables *によって行われます。 A：term： `view callable`は、app：` Pyramid`ウェブアプリケーション開発者の主なツールです。 ：term： `request`を受け取り、：term：` response`を返すコードです。"

#: ../../narr/project.rst:879
msgid ""
"Lines 4-6 define and register a :term:`view callable` named ``my_view``."
"  The function named ``my_view`` is decorated with a ``view_config`` "
"decorator (which is processed by the ``config.scan()`` line in our "
"``__init__.py``). The view_config decorator asserts that this view be "
"found when a :term:`route` named ``home`` is matched.  In our case, "
"because our ``__init__.py`` maps the route named ``home`` to the URL "
"pattern ``/``, this route will match when a visitor visits the root URL."
"  The view_config decorator also names a ``renderer``, which in this case"
" is a template that will be used to render the result of the view "
"callable.  This particular view declaration points at "
"``templates/mytemplate.pt``, which is an :term:`asset specification` that"
" specifies the ``mytemplate.pt`` file within the ``templates`` directory "
"of the ``myproject`` package.  The asset specification could have also "
"been specified as ``myproject:templates/mytemplate.pt``; the leading "
"package name and colon is optional.  The template file pointed to is a "
":term:`Jinja2` template file (``templates/my_template.jinja2``)."
msgstr "4行目〜6行目は、 `` my_view``という名前の `` callable``を定義して登録します。 `` my_view``という名前の関数は、 `` __init __。py``の `` config.scan（） ``行によって処理される `` view_config``デコレータで装飾されています。 view_configデコレータは、 `` home``という名前のa：term： `ルート`がマッチしたときに、このビューが見つかると主張します。私たちの場合、私たちの `` __init __。py``は `` home``という名前のルートをURLパターン `` / ``にマップするので、訪問者がルートURLを訪れるとこのルートが一致します。 view_configデコレータは、レンダラーの名前を指定します。この場合、ビューの結果をレンダリングするために使用されるテンプレートです。この特定のビュー宣言は `` templates / mytemplate.pt``を指しています。これは `` myproject``の `` templates``ディレクトリ内の `` mytemplate.pt``ファイルを指定する `` asset specification``です： ``パッケージ。資産仕様は、 `` myproject：templates / mytemplate.pt``として指定されている可能性もあります。先頭のパッケージ名とコロンはオプションです。指されるテンプレートファイルはa：term： `Jinja2`テンプレートファイル（` `templates / my_template.jinja2``）です。"

#: ../../narr/project.rst:895
msgid ""
"This view callable function is handed a single piece of information: the "
":term:`request`.  The *request* is an instance of the :term:`WebOb` "
"``Request`` class representing the browser's request to our server."
msgstr "このビュー呼び出し可能関数は、：term： `request`という単一の情報を渡します。 * request *は、サーバーへのブラウザーの要求を表す：term： `WebOb`` `Request``クラスのインスタンスです。"

#: ../../narr/project.rst:899
msgid ""
"This view is configured to invoke a :term:`renderer` on a template.  The "
"dictionary the view returns (on line 6) provides the value the renderer "
"substitutes into the template when generating HTML.  The renderer then "
"returns the HTML in a :term:`response`."
msgstr "このビューは、テンプレート上で：term： `renderer`を呼び出すように設定されています。ビューが返す辞書（6行目）は、レンダラーがHTMLを生成するときにテンプレートに代入する値を提供します。次に、レンダラーは：term： `response`でHTMLを返します。"

#: ../../narr/project.rst:904
msgid "Dictionaries provide values to :term:`template`\\s."
msgstr "辞書は値を：term： `template` \\ sに提供します。"

#: ../../narr/project.rst:906
msgid ""
"When the application is run with the cookiecutter's :ref:`default "
"development.ini <myproject_ini>` configuration, :ref:`logging is set up "
"<myproject_ini_logging>` to aid debugging.  If an exception is raised, "
"uncaught tracebacks are displayed after the startup messages on :ref:`the"
" console running the server <running_the_project_application>`. Also "
"``print()`` statements may be inserted into the application for debugging"
" to send output to this console."
msgstr "アプリケーションがcookiecutterの：ref： `default development.iniで実行されているとき<myproject_ini> `configuration、：ref：`ロギングが設定されています<myproject_ini_logging> `デバッグを助ける。例外が発生した場合、起動メッセージの後にキャッチされないトレースバックが表示されます：ref： `サーバを実行しているコンソール<running_the_project_application> `。また、 `` print（） ``文をデバッグのためにアプリケーションに挿入して、このコンソールに出力を送ることもできます。"

#: ../../narr/project.rst:914
msgid ""
"``development.ini`` has a setting that controls how templates are "
"reloaded, ``pyramid.reload_templates``."
msgstr "`` development.ini``には、テンプレートがどのように再ロードされるかを制御する設定があります。 `` pyramid.reload_templates``です。"

#: ../../narr/project.rst:917
msgid ""
"When set to ``True`` (as in the cookiecutter ``development.ini``), "
"changed templates automatically reload without a server restart.  This is"
" convenient while developing, but slows template rendering speed."
msgstr "CookieCutterの `` development.ini``のように `` True``に設定すると、変更されたテンプレートはサーバを再起動せずに自動的にリロードされます。開発中は便利ですが、テンプレートのレンダリング速度が遅くなります。"

#: ../../narr/project.rst:921
msgid ""
"When set to ``False`` (the default value), changing templates requires a "
"server restart to reload them.  Production applications should use "
"``pyramid.reload_templates = False``."
msgstr "`` False``（デフォルト値）に設定されている場合、テンプレートを変更するには、テンプレートをリロードするためにサーバを再起動する必要があります。プロダクションアプリケーションは、 `` pyramid.reload_templates = False``を使うべきです。"

#: ../../narr/project.rst:927
msgid ""
"See also :ref:`views_which_use_a_renderer` for more information about how"
" views, renderers, and templates relate and cooperate."
msgstr "ビュー、レンダラー、およびテンプレートがどのように関係し協力するかについての詳細は、：ref： `views_which_use_a_renderer`を参照してください。"

#: ../../narr/project.rst:932
msgid ""
"Pyramid can also dynamically reload changed Python files.  See also "
":ref:`reloading_code`."
msgstr "Pyramidは、変更されたPythonファイルを動的にリロードすることもできます。参照：ref： `reloading_code`を参照してください。"

#: ../../narr/project.rst:937
msgid ""
"See also the :ref:`debug_toolbar`, which provides interactive access to "
"your application's internals and, should an exception occur, allows "
"interactive access to traceback execution stack frames from the Python "
"interpreter."
msgstr "：ref： `debug_toolbar`も参照してください。これは、アプリケーション内部へのインタラクティブなアクセスを提供し、例外が発生した場合、Pythonインタプリタからのトレースバック実行スタックフレームへのインタラクティブなアクセスを可能にします。"

#: ../../narr/project.rst:946
msgid "``static``"
msgstr "「静的」"

#: ../../narr/project.rst:948
msgid ""
"This directory contains static assets which support the ``layout.jinja2``"
" template.  It includes CSS and images."
msgstr "このディレクトリには、 `` layout.jinja2``テンプレートをサポートする静的資産が含まれています。それはCSSと画像を含んでいます。"

#: ../../narr/project.rst:953
msgid "``templates/layout.jinja2``"
msgstr "`` templates / layout.jinja2``"

#: ../../narr/project.rst:955
msgid ""
"This is the base layout content. It contains a single marker for content "
"block. Other templates inherit its content, providing layout for the web "
"application. Its contents are too long to show here, but here is an "
"excerpt:"
msgstr "これが基本レイアウトの内容です。これは、コンテンツブロックのための単一のマーカーを含んでいます。他のテンプレートはコンテンツを継承し、Webアプリケーションのレイアウトを提供します。その内容はここに表示するには長すぎますが、ここに抜粋があります："

#: ../../narr/project.rst:964
msgid "``templates/mytemplate.jinja2``"
msgstr "`` templates / mytemplate.jinja2``"

#: ../../narr/project.rst:966
msgid ""
"This is the content :term:`Jinja2` template that exists in the project.  "
"It is referenced by the call to ``@view_config`` as the ``renderer`` of "
"the ``my_view`` view callable in the ``views.py`` file.  See "
":ref:`views_which_use_a_renderer` for more information about renderers. "
"It inherits (\"extends\") the HTML provided by ``layout.jinja2``, "
"replacing the content block with its own content."
msgstr "これはプロジェクトに存在するcontent：term： `Jinja2`テンプレートです。これは、 `` views.py``ファイルで呼び出し可能な `` my_view``ビューの `` renderer``として `` @ view_config``を呼び出すことによって参照されます。レンダラの詳細については：ref： `views_which_use_a_renderer`を参照してください。 `` layout.jinja2``が提供するHTMLを継承（\ &quot;extend \&quot;）し、コンテンツブロックを独自のコンテンツに置き換えます。"

#: ../../narr/project.rst:974
msgid ""
"Templates are accessed and used by view configurations and sometimes by "
"view functions themselves.  See :ref:`templates_used_directly` and "
":ref:`templates_used_as_renderers`."
msgstr "テンプレートは、ビュー設定によってアクセスされ、使用されることがあります。 ref： `templates_used_directly`と：ref：` templates_used_as_renderers`を参照してください。"

#: ../../narr/project.rst:983
msgid "``tests.py``"
msgstr "`` tests.py``"

#: ../../narr/project.rst:985
msgid "The ``tests.py`` module includes tests for your application."
msgstr "`` tests.py``モジュールにはアプリケーションのテストが含まれています。"

#: ../../narr/project.rst:991
msgid ""
"This sample ``tests.py`` file has one unit test and one functional test "
"defined within it. These tests are executed when you run ``py.test -q``. "
"You may add more tests here as you build your application. You are not "
"required to write tests to use :app:`Pyramid`. This file is simply "
"provided for convenience and example."
msgstr "このサンプルの `` tests.py``ファイルには、ユニットテストと機能テストが1つずつあります。これらのテストは `` py.test -q``を実行すると実行されます。アプリケーションをビルドするときに、ここでさらにテストを追加することができます。 app： `Pyramid`を使うテストを書く必要はありません。このファイルは、便宜と例のために提供されています。"

#: ../../narr/project.rst:997
msgid ""
"See :ref:`testing_chapter` for more information about writing "
":app:`Pyramid` unit tests."
msgstr "app： `Pyramid`単体テストの記述については、ref：` testing_chapter`を参照してください。"

#: ../../narr/project.rst:1006
msgid "Modifying Package Structure"
msgstr "パッケージ構造の変更"

#: ../../narr/project.rst:1008
msgid ""
"It is best practice for your application's code layout to not stray too "
"much from accepted Pyramid cookiecutter defaults.  If you refrain from "
"changing things very much, other Pyramid coders will be able to more "
"quickly understand your application.  However, the code layout choices "
"made for you by a cookiecutter are in no way magical or required.  "
"Despite the choices made for you by any cookiecutter, you can decide to "
"lay your code out any way you see fit."
msgstr "受け入れられたPyramid cookiecutterのデフォルトからあまり大きく外れないように、アプリケーションのコードレイアウトを調整することをお勧めします。あなたが物事を非常に変えることを控えると、他のピラミッドのコーダーがあなたのアプリケーションをより迅速に理解することができます。ただし、cookiecutterによって作成されたコードレイアウトの選択肢は決して魔法でも必要でもありません。任意のcookiecutterによって選択されたにもかかわらず、コードがどのように見えるか決めることができます。"

#: ../../narr/project.rst:1015
msgid ""
"For example, the configuration method named "
":meth:`~pyramid.config.Configurator.add_view` requires you to pass a "
":term:`dotted Python name` or a direct object reference as the class or "
"function to be used as a view.  By default, the ``starter`` cookiecutter "
"would have you add view functions to the ``views.py`` module in your "
"package. However, you might be more comfortable creating a ``views`` "
"*directory*, and adding a single file for each view."
msgstr "たとえば、：meth： `〜pyramid.config.Configurator.add_view`という名前の設定メソッドは、：term：`点線のPython名 `または直接のオブジェクト参照をビューとして使用するクラスまたは関数として渡す必要があります。デフォルトでは、 `` starter`` cookiecutterはあなたのパッケージ内の `` views.py``モジュールにビュー関数を追加します。しかし、 `` views`` *ディレクトリ*を作成し、それぞれのビューに1つのファイルを追加するほうが快適かもしれません。"

#: ../../narr/project.rst:1023
msgid ""
"If your project package name was ``myproject`` and you wanted to arrange "
"all your views in a Python subpackage within the ``myproject`` "
":term:`package` named ``views`` instead of within a single ``views.py`` "
"file, you might do the following."
msgstr "もしあなたのプロジェクトパッケージ名が `` myproject``で、あなたのビューを単一の `` views &#39;の代わりに `` myproject`：term： `package`という名前の` `views``というPythonサブパッケージに配置したいなら、 .py``ファイルを作成するには、次のようにします。"

#: ../../narr/project.rst:1028
msgid ""
"Create a ``views`` directory inside your ``myproject`` package directory "
"(the same directory which holds ``views.py``)."
msgstr "`` myproject``パッケージディレクトリ（ `` views.py``を保持するのと同じディレクトリ）の中に `` views``ディレクトリを作成します。"

#: ../../narr/project.rst:1031
msgid ""
"Create a file within the new ``views`` directory named ``__init__.py``.  "
"(It can be empty.  This just tells Python that the ``views`` directory is"
" a *package*.)"
msgstr "`` __init __。py``という名前の新しい `` views``ディレクトリ内にファイルを作成します。 （これは空でもかまいません。これは単に `` views``ディレクトリが* package *であることをPythonに伝えます）。"

#: ../../narr/project.rst:1035
msgid ""
"*Move* the content from the existing ``views.py`` file to a file inside "
"the new ``views`` directory named, say, ``blog.py``.  Because the "
"``templates`` directory remains in the ``myproject`` package, the "
"template :term:`asset specification` values in ``blog.py`` must now be "
"fully qualified with the project's package name "
"(``myproject:templates/blog.pt``)."
msgstr "*コンテンツを既存の `` views.py``ファイルから `` blog.py``という名前の新しい `` views``ディレクトリ内のファイルに移動します。 `` templates``ディレクトリは `` myproject``パッケージに残っているので、 `` blog.py``のテンプレート：term： `asset specification`の値は、プロジェクトのパッケージ名（` `myproject ：templates / blog.pt``）。"

#: ../../narr/project.rst:1041
msgid ""
"You can then continue to add view callable functions to the ``blog.py`` "
"module, but you can also add other ``.py`` files which contain view "
"callable functions to the ``views`` directory.  As long as you use the "
"``@view_config`` directive to register views in conjunction with "
"``config.scan()``, they will be picked up automatically when the "
"application is restarted."
msgstr "ビュー呼び出し可能関数を `` blog.py``モジュールに追加することもできますが、ビュー呼び出し可能関数を含む `` .py``ファイルを `` views``ディレクトリに追加することもできます。 `` @ view_config``ディレクティブを使用して `` config.scan（） ``と一緒にビューを登録する限り、それらはアプリケーションの再起動時に自動的に取得されます。"

#: ../../narr/project.rst:1048
msgid "Using the Interactive Shell"
msgstr "インタラクティブシェルの使用"

#: ../../narr/project.rst:1050
msgid ""
"It is possible to use the ``pshell`` command to load a Python interpreter"
" prompt with a similar configuration as would be loaded if you were "
"running your Pyramid application via ``pserve``.  This can be a useful "
"debugging tool. See :ref:`interactive_shell` for more details."
msgstr "`` pshell``コマンドを使って、 `` pserve``でPyramidアプリケーションを実行していた場合に読み込まれるのと同じ設定のPythonインタプリタプロンプトを読み込むことができます。これは便利なデバッグツールです。詳細はref： `interactive_shell`を参照してください。"

#: ../../narr/project.rst:1058
msgid "What Is This ``pserve`` Thing"
msgstr "この「pserve」は何ですか？"

#: ../../narr/project.rst:1060
msgid ""
"The code generated by a :app:`Pyramid` cookiecutter assumes that you will"
" be using the ``pserve`` command to start your application while you do "
"development. ``pserve`` is a command that reads a :term:`PasteDeploy` "
"``.ini`` file (e.g., ``development.ini``), and configures a server to "
"serve a :app:`Pyramid` application based on the data in the file."
msgstr "a：app： `Pyramid` cookiecutterによって生成されたコードは、開発中にアプリケーションを起動するために` `pserve``コマンドを使用することを前提としています。 `` pserve``は：term： `PasteDeploy`` `.ini``ファイル（例えば` `development.ini``）を読み込んで、：app：` Pyramid`アプリケーションを提供するようにサーバを設定するコマンドですファイル内のデータに基づいて"

#: ../../narr/project.rst:1066
msgid ""
"``pserve`` is by no means the only way to start up and serve a "
":app:`Pyramid` application.  As we saw in :ref:`firstapp_chapter`, "
"``pserve`` needn't be invoked at all to run a :app:`Pyramid` application."
"  The use of ``pserve`` to run a :app:`Pyramid` application is purely "
"conventional based on the output of its cookiecutter.  But we strongly "
"recommend using ``pserve`` while developing your application because many"
" other convenience introspection commands (such as ``pviews``, "
"``prequest``, ``proutes``, and others) are also implemented in terms of "
"configuration availability of this ``.ini`` file format.  It also "
"configures Pyramid logging and provides the ``--reload`` switch for "
"convenient restarting of the server when code changes."
msgstr "`` pserve``は決して：app： `Pyramid`アプリケーションを起動して提供する唯一の方法ではありません。 ：ref： `firstapp_chapter`で見たように、：app：` Pyramid`アプリケーションを実行するために `` pserve``を全く呼び出す必要はありません。 app： `Pyramid`アプリケーションを実行するための` `pserve``の使用は純粋にcookiecutterの出力に基づいて行われます。しかし、他の便利なイントロスペクションコマンド（ `` pviews``、 `` prequest``、 `` proutes`など）の多くは、以下の点で実装されているので、アプリケーションを開発する際に `` pserve``を使うことを強くお勧めします。この `` .ini``ファイル形式の設定可否Pyramidのロギングを設定し、コードが変更されたときにサーバを再起動するための `` --reload``スイッチも提供します。"

#: ../../narr/project.rst:1080
msgid "Using an Alternate WSGI Server"
msgstr "代替WSGIサーバーの使用"

#: ../../narr/project.rst:1082
msgid ""
"Pyramid cookiecutters generate projects which use the :term:`Waitress` "
"WSGI server. Waitress is a server that is suited for development and "
"light production usage.  It's not the fastest nor the most featureful "
"WSGI server. Instead, its main feature is that it works on all platforms "
"that Pyramid needs to run on, making it a good choice as a default server"
" from the perspective of Pyramid's developers."
msgstr "Pyramid cookiecuttersは、：term： `Waitress` WSGIサーバーを使用するプロジェクトを生成します。ウェイトレスは、開発や軽量生産に適したサーバーです。これは、最も高速で機能的なWSGIサーバーでもありません。その代わりに、Pyramidの開発者の視点から、Pyramidを実行する必要があるすべてのプラットフォーム上で動作するため、デフォルトサーバーとして最適です。"

#: ../../narr/project.rst:1089
msgid ""
"Any WSGI server is capable of running a :app:`Pyramid` application.  But "
"we suggest you stick with the default server for development, and that "
"you wait to investigate other server options until you're ready to deploy"
" your application to production.  Unless for some reason you need to "
"develop on a non-local system, investigating alternate server options is "
"usually a distraction until you're ready to deploy.  But we recommend "
"developing using the default configuration on a local system that you "
"have complete control over; it will provide the best development "
"experience."
msgstr "どのWSGIサーバーでも、：app： `Pyramid`アプリケーションを実行することができます。しかし、開発のためにデフォルトのサーバーを使用することをお勧めします。アプリケーションを本番環境に展開する準備が整うまで、他のサーバーオプションの調査を待つことをお勧めします。なんらかの理由で非ローカルシステムで開発する必要がある場合を除き、代替サーバーオプションを調べることは通常、展開の準備が整うまでは気をそらすものです。しかし、完全に制御できるローカルシステム上のデフォルト設定を使用して開発することをお勧めします。最高の開発経験を提供します。"

#: ../../narr/project.rst:1098
msgid ""
"One popular production alternative to the default Waitress server is "
":term:`mod_wsgi`. You can use ``mod_wsgi`` to serve your :app:`Pyramid` "
"application using the Apache web server rather than any \"pure-Python\" "
"server like Waitress. It is fast and featureful.  See "
":ref:`modwsgi_tutorial` for details."
msgstr "デフォルトのWaitressサーバの代用として、term： `mod_wsgi`があります。 mod_wsgi``を使って、Waitressのような\ &quot;純粋なPython \&quot;サーバではなく、Apache Webサーバを使って：app： `Pyramid`アプリケーションを提供することができます。それは速く、特徴的です。詳細はref： `modwsgi_tutorial`を参照してください。"

#: ../../narr/project.rst:1103
msgid ""
"Another good production alternative is :term:`Green Unicorn` (aka "
"``gunicorn``).  It's faster than Waitress and slightly easier to "
"configure than ``mod_wsgi``, although it depends, in its default "
"configuration, on having a buffering HTTP proxy in front of it.  It does "
"not, as of this writing, work on Windows."
msgstr "もう一つの優れた生産方法は、用語：「グリーンユニコーン」（別名「ガンコーン」）です。これはWaitressよりも速く、 `` mod_wsgi``より少し構成が簡単ですが、デフォルトの設定では、HTTPプロキシをバッファリングすることに依存しています。この執筆時点では、Windows上では動作しません。"

#: ../../narr/project.rst:1110
msgid "Automatically Reloading Your Code"
msgstr "コードの自動リロード"

#: ../../narr/project.rst:1112
msgid ""
"During development, it can be really useful to automatically have the "
"webserver restart when you make changes. ``pserve`` has a ``--reload`` "
"switch to enable this. It uses the `hupper "
"<https://docs.pylonsproject.org/projects/hupper/en/latest/>`_ package to "
"enable this behavior. When your code crashes, ``hupper`` will wait for "
"another change or the ``SIGHUP`` signal before restarting again."
msgstr "開発時には、変更を加えたときにウェブサーバーを自動的に再起動させるのが本当に便利です。 `` pserve``にはこれを有効にする `` --reload``スイッチがあります。これは `hupper <https://docs.pylonsproject.org/projects/hupper/en/latest/> `_ packageこの動作を有効にします。コードがクラッシュすると、 `` hupper``は別の変更や `` SIGHUP``シグナルを待ってから再起動します。"

#: ../../narr/project.rst:1120
msgid "inotify support"
msgstr "inotifyサポート"

#: ../../narr/project.rst:1122
msgid ""
"By default ``hupper`` will poll the filesystem for changes to all Python "
"code. This can be pretty inefficient in larger projects. To be nicer to "
"your hard drive, you should install the `watchdog "
"<http://pythonhosted.org/watchdog/>`_ package in development. ``hupper`` "
"will automatically use ``watchdog`` to more efficiently poll the "
"filesystem."
msgstr "デフォルトで `` hupper``はすべてのPythonコードの変更をファイルシステムにポーリングします。これは、大規模なプロジェクトでは非常に非効率的です。あなたのハードドライブにもっと良くなるためには、 `watchdog <http://pythonhosted.org/watchdog/> `開発中のパッケージ。 `` hupper``は自動的に `` watchdog``を使ってより効率的にファイルシステムをポーリングします。"

#: ../../narr/project.rst:1130
msgid "Monitoring Custom Files"
msgstr "カスタムファイルの監視"

#: ../../narr/project.rst:1132
msgid ""
"By default, ``pserve --reload`` will monitor all imported Python code "
"(everything in ``sys.modules``) as well as the config file passed to "
"``pserve`` (e.g., ``development.ini``). You can instruct ``pserve`` to "
"watch other files for changes as well by defining a ``[pserve]`` section "
"in your configuration file. For example, let's say your application loads"
" the ``favicon.ico`` file at startup and stores it in memory to "
"efficiently serve it many times. When you change it, you want ``pserve`` "
"to restart:"
msgstr "デフォルトでは、 `` pserve --reload``は全てのインポートされたPythonコード（ `` sys.modules``のすべて）と `` pserve``に渡される設定ファイルを監視します（例えば、 `` development.ini`` `）。あなたの設定ファイルに `` [pserve] ``セクションを定義することによって、 `` pserve``に変更のための他のファイルを見るように指示することができます。たとえば、起動時にアプリケーションが `` favicon.ico``ファイルを読み込んでメモリに格納して、何度も効率的にサービスを提供しているとします。あなたがそれを変更すると、 `` pserve``を再起動します："

#: ../../narr/project.rst:1146
msgid ""
"Paths may be absolute or relative to the configuration file. They may "
"also be an :term:`asset specification`. These paths are passed to "
"``hupper``, which has some basic support for globbing. Acceptable glob "
"patterns depend on the version of Python being used."
msgstr "パスはコンフィグレーションファイルに対して絶対パスでも相対パスでもかまいません。彼らはまた、用語：資産仕様書でもよい。これらのパスは `` hupper``に渡されます。 `` hupper``はglobbingの基本的なサポートをしています。許容されるglobパターンは、使用されているPythonのバージョンに依存します。"

