# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../narr/webob.rst:8
msgid "Request and Response Objects"
msgstr "(機械翻訳) 要求オブジェクトと応答オブジェクト"

#: ../../narr/webob.rst:10
msgid ""
"This chapter is adapted from a portion of the :term:`WebOb` "
"documentation, originally written by Ian Bicking."
msgstr "この章は、Ian Bickingが最初に書いた：term： `WebOb`文書の一部から変更されています。"

#: ../../narr/webob.rst:13
msgid ""
":app:`Pyramid` uses the :term:`WebOb` package as a basis for its "
":term:`request` and :term:`response` object implementations.  The "
":term:`request` object that is passed to a :app:`Pyramid` :term:`view` is"
" an instance of the :class:`pyramid.request.Request` class, which is a "
"subclass of :class:`webob.Request`.  The :term:`response` returned from a"
" :app:`Pyramid` :term:`view` :term:`renderer` is an instance of the "
":mod:`pyramid.response.Response` class, which is a subclass of the "
":class:`webob.Response` class.  Users can also return an instance of "
":class:`pyramid.response.Response` directly from a view as necessary."
msgstr "：app： `Pyramid`は：term：` Web`パッケージを：term： `request`と：term：` response`オブジェクト実装の基礎として使います。 ：app： `Pyramid`：term：` view`に渡される：term： `request`オブジェクトは：class：` pyramid.request.Request`クラスのインスタンスです：class： `webob.Request`。 term： `render`：term：` renderer`は：mod： `pyramid.response.Response`クラスのインスタンスです。これはクラスのサブクラスです。 ：class： `webob.Response`クラスです。また、必要に応じてview：class： `pyramid.response.Response`のインスタンスをビューから直接返すこともできます。"

#: ../../narr/webob.rst:23
msgid ""
"WebOb is a project separate from :app:`Pyramid` with a separate set of "
"authors and a fully separate `set of documentation "
"<http://docs.webob.org/en/latest/index.html>`_.  :app:`Pyramid` adds some"
" functionality to the standard WebOb request, which is documented in the "
":ref:`request_module` API documentation."
msgstr "WebObは、app： `Pyramid`とは別のプロジェクトで、別々の作者と完全に別々のドキュメントセット<http://docs.webob.org/en/latest/index.html> `_。 ：app： `Pyramid`は標準のWebObリクエストにいくつかの機能を追加します。これは：ref：` request_module` APIドキュメントに書かれています。"

#: ../../narr/webob.rst:29
msgid ""
"WebOb provides objects for HTTP requests and responses.  Specifically it "
"does this by wrapping the `WSGI "
"<https://wsgi.readthedocs.io/en/latest/>`_ request environment and "
"response status, header list, and app_iter (body) values."
msgstr "WebObは、HTTP要求と応答のオブジェクトを提供します。具体的には、 `WSGI <https://wsgi.readthedocs.io/en/latest/> `_環境と応答のステータス、ヘッダリスト、およびapp_iter（body）値を要求します。"

#: ../../narr/webob.rst:33
msgid ""
"WebOb request and response objects provide many conveniences for parsing "
"WSGI requests and forming WSGI responses.  WebOb is a nice way to "
"represent \"raw\" WSGI requests and responses.  However, we won't cover "
"that use case in this document, as users of :app:`Pyramid` don't "
"typically need to use the WSGI-related features of WebOb directly.  The "
"`reference documentation "
"<http://docs.webob.org/en/latest/reference.html>`_ shows many examples of"
" creating requests and using response objects in this manner, however."
msgstr "WebOb要求オブジェクトと応答オブジェクトは、WSGI要求を解析してWSGI応答を生成する多くの便利さを提供します。 WebObは\ &quot;生の\&quot; WSGI要求と応答を表現する良い方法です。しかし、app： `Pyramid`のユーザーは通常、WebObのWSGI関連の機能を直接使用する必要はありませんので、この文書のこのユースケースはカバーしません。 `リファレンスドキュメント<http://docs.webob.org/en/latest/reference.html> `_では、このようにリクエストを作成し、レスポンスオブジェクトを使用する多くの例が示されています。"

#: ../../narr/webob.rst:46
msgid "Request"
msgstr "要求"

#: ../../narr/webob.rst:48
msgid ""
"The request object is a wrapper around the `WSGI environ dictionary "
"<https://www.python.org/dev/peps/pep-0333/#environ-variables>`_.  This "
"dictionary contains keys for each header, keys that describe the request "
"(including the path and query string), a file-like object for the request"
" body, and a variety of custom keys.  You can always access the environ "
"with ``req.environ``."
msgstr "リクエストオブジェクトは `WSGI environ辞書の周りのラッパーです<https://www.python.org/dev/peps/pep-0333/#environ-variables> `_。この辞書には、各ヘッダーのキー、要求を記述するキー（パスとクエリー文字列を含む）、要求本体のファイルのようなオブジェクト、およびさまざまなカスタムキーが含まれています。あなたはいつでも `` req.environ``でenvironにアクセスできます。"

#: ../../narr/webob.rst:55
msgid ""
"Some of the most important and interesting attributes of a request object"
" are below."
msgstr "要求オブジェクトの最も重要で興味深い属性のいくつかを以下に示します。"

#: ../../narr/webob.rst:59
msgid "``req.method``"
msgstr "`` req.method``"

#: ../../narr/webob.rst:59
msgid "The request method, e.g., ``GET``, ``POST``"
msgstr "リクエストメソッド、例えば `` GET``、 `` POST``"

#: ../../narr/webob.rst:62
msgid "``req.GET``"
msgstr "`` req.GET``"

#: ../../narr/webob.rst:62
msgid "A :term:`multidict` with all the variables in the query string."
msgstr "A：term： `multidict`とクエリ文字列のすべての変数。"

#: ../../narr/webob.rst:66
msgid "``req.POST``"
msgstr "`` req.POST``"

#: ../../narr/webob.rst:65
msgid ""
"A :term:`multidict` with all the variables in the request body.  This "
"only has variables if the request was a ``POST`` and it is a form "
"submission."
msgstr "A：term： `multidict`で、すべての変数がリクエストボディにあります。これは、リクエストが `` POST``でフォーム提出の場合にのみ変数を持ちます。"

#: ../../narr/webob.rst:70
msgid "``req.params``"
msgstr "`` req.params``"

#: ../../narr/webob.rst:69
msgid ""
"A :term:`multidict` with a combination of everything in ``req.GET`` and "
"``req.POST``."
msgstr "A：term： `multidict`で` `req.GET``と` `req.POST``の全てを組み合わせています。"

#: ../../narr/webob.rst:76
msgid "``req.body``"
msgstr "`` req.body``"

#: ../../narr/webob.rst:73
msgid ""
"The contents of the body of the request.  This contains the entire "
"request body as a string.  This is useful when the request is a ``POST`` "
"that is *not* a form submission, or a request like a ``PUT``.  You can "
"also get ``req.body_file`` for a file-like object."
msgstr "要求の本文の内容。これは要求本体全体を文字列として含みます。これは、要求がフォーム提出でない `` POST``や `` PUT``のような要求である場合に便利です。ファイルのようなオブジェクトに対して `` req.body_file``を得ることもできます。"

#: ../../narr/webob.rst:80
msgid "``req.json_body``"
msgstr "`` req.json_body``"

#: ../../narr/webob.rst:79
msgid ""
"The JSON-decoded contents of the body of the request. See "
":ref:`request_json_body`."
msgstr "要求の本文のJSONでデコードされた内容。参照：ref： `request_json_body`を参照してください。"

#: ../../narr/webob.rst:83
msgid "``req.cookies``"
msgstr "`` req.cookies``"

#: ../../narr/webob.rst:83
msgid "A simple dictionary of all the cookies."
msgstr "すべてのクッキーの簡単な辞書。"

#: ../../narr/webob.rst:86
msgid "``req.headers``"
msgstr "`` req.headers``"

#: ../../narr/webob.rst:86
msgid "A dictionary of all the headers.  This dictionary is case-insensitive."
msgstr "すべてのヘッダーの辞書。この辞書は大文字と小文字を区別しません。"

#: ../../narr/webob.rst:92
msgid "``req.urlvars`` and ``req.urlargs``"
msgstr "`` req.urlvars``と `` req.urlargs``"

#: ../../narr/webob.rst:89
msgid ""
"``req.urlvars`` are the keyword parameters associated with the request "
"URL. ``req.urlargs`` are the positional parameters. These are set by "
"products like `Routes <https://routes.readthedocs.io/en/latest/>`_ and "
"`Selector <https://github.com/lukearno/selector>`_."
msgstr "`` req.urlvars``はリクエストURLに関連するキーワードパラメータです。 `` req.urlargs``は位置パラメータです。これらは `Routes <https://routes.readthedocs.io/en/latest/> `_と`セレクタ<https://github.com/lukearno/selector> `_。"

#: ../../narr/webob.rst:94
msgid ""
"Also for standard HTTP request headers, there are usually attributes such"
" as ``req.accept_language``, ``req.content_length``, and "
"``req.user_agent``.  These properties expose the *parsed* form of each "
"header, for whatever parsing makes sense.  For instance, "
"``req.if_modified_since`` returns a :mod:`datetime` object (or None if "
"the header is was not provided)."
msgstr "また、標準のHTTPリクエストヘッダの場合、通常は「req.accept_language」、「req.content_length」、「req.user_agent」などの属性があります。これらのプロパティは、解析が意味を成すものであれば、各ヘッダの*解析された*形式を公開します。例えば、 `` req.if_modified_since``はa：mod： `datetime`オブジェクトを返します（ヘッダが与えられていなければNoneを返します）。"

#: ../../narr/webob.rst:100
msgid ""
"Full API documentation for the :app:`Pyramid` request object is available"
" in :ref:`request_module`."
msgstr "：app： `Pyramid`リクエストオブジェクトの完全なAPIドキュメントは：ref：` request_module`で利用できます。"

#: ../../narr/webob.rst:109
msgid "Special Attributes Added to the Request by :app:`Pyramid`"
msgstr "リクエストに追加された特別な属性：app： `Pyramid`"

#: ../../narr/webob.rst:111
msgid ""
"In addition to the standard :term:`WebOb` attributes, :app:`Pyramid` adds"
" special attributes to every request: ``context``, ``registry``, "
"``root``, ``subpath``, ``traversed``, ``view_name``, ``virtual_root``, "
"``virtual_root_path``, ``session``, ``matchdict``, and ``matched_route``."
" These attributes are documented further within the "
":class:`pyramid.request.Request` API documentation."
msgstr "：app： `Pyramid`は、標準：term：` WebOb`属性に加えて、 `` context``、 `` registry``、 `` root``、 `` subpath``、 virtual_root_path``、 `` session``、 `` matchdict``、 `` matched_route``の3つのオプションがあります。これらの属性は、class： `pyramid.request.Request` APIのドキュメントで詳しく説明されています。"

#: ../../narr/webob.rst:122
msgid "URLs"
msgstr "URL"

#: ../../narr/webob.rst:124
msgid ""
"In addition to these attributes, there are several ways to get the URL of"
" the request and its parts.  We'll show various values for an example URL"
" ``http://localhost/app/blog?id=10``, where the application is mounted at"
" ``http://localhost/app``."
msgstr "これらの属性に加えて、要求のURLとその部分を取得するいくつかの方法があります。アプリケーションが `` http：// localhost / app``にマウントされているURLの例 `` http：// localhost / app / blog？id = 10``のさまざまな値を示します。"

#: ../../narr/webob.rst:131
msgid "``req.url``"
msgstr "`` req.url``"

#: ../../narr/webob.rst:130
msgid ""
"The full request URL with query string, e.g., "
"``http://localhost/app/blog?id=10``"
msgstr "クエリ文字列を含む完全なリクエストURL（例： `` http：// localhost / app / blog？id = 10``）"

#: ../../narr/webob.rst:134
msgid "``req.host``"
msgstr "`` req.host``"

#: ../../narr/webob.rst:134
msgid "The host information in the URL, e.g., ``localhost``"
msgstr "URLのホスト情報（例： `` localhost``）"

#: ../../narr/webob.rst:137
msgid "``req.host_url``"
msgstr "`` req.host_url``"

#: ../../narr/webob.rst:137
msgid "The URL with the host, e.g., ``http://localhost``"
msgstr "ホストとのURL（例： `` http：// localhost``）"

#: ../../narr/webob.rst:141
msgid "``req.application_url``"
msgstr "`` req.application_url``"

#: ../../narr/webob.rst:140
msgid ""
"The URL of the application (just the ``SCRIPT_NAME`` portion of the path,"
" not ``PATH_INFO``), e.g., ``http://localhost/app``"
msgstr "アプリケーションのURL（パスの `` SCRIPT_NAME``部分だけで、 `` PATH_INFO``ではなく）です（例えば `` http：// localhost / app``）。"

#: ../../narr/webob.rst:145
msgid "``req.path_url``"
msgstr "`` req.path_url``"

#: ../../narr/webob.rst:144
msgid ""
"The URL of the application including the ``PATH_INFO``, e.g., "
"``http://localhost/app/blog``"
msgstr "`` http：// localhost / app / blog`のような `` PATH_INFO``を含むアプリケーションのURL"

#: ../../narr/webob.rst:149
msgid "``req.path``"
msgstr "`` req.path``"

#: ../../narr/webob.rst:148
msgid ""
"The URL including ``PATH_INFO`` without the host or scheme, e.g., "
"``/app/blog``"
msgstr "`` / app / blog`のように、ホストやスキームのない `` PATH_INFO``を含むURL"

#: ../../narr/webob.rst:153
msgid "``req.path_qs``"
msgstr "`` req.path_qs``"

#: ../../narr/webob.rst:152
msgid ""
"The URL including ``PATH_INFO`` and the query string, e.g, "
"``/app/blog?id=10``"
msgstr "`` PATH_INFO``とクエリ文字列を含むURL、 `` / app / blog？id = 10``"

#: ../../narr/webob.rst:156
msgid "``req.query_string``"
msgstr "`` req.query_string``"

#: ../../narr/webob.rst:156
msgid "The query string in the URL, e.g., ``id=10``"
msgstr "URL内のクエリ文字列、たとえば `` id = 10``"

#: ../../narr/webob.rst:160
msgid "``req.relative_url(url, to_application=False)``"
msgstr "`` req.relative_url（url、to_application = False） ``"

#: ../../narr/webob.rst:159
msgid ""
"Gives a URL relative to the current URL.  If ``to_application`` is True, "
"then resolves it relative to ``req.application_url``."
msgstr "現在のURLに関連するURLを指定します。 `` to_application``がTrueの場合、それは `` req.application_url``を基準にして解決されます。"

#: ../../narr/webob.rst:166
msgid "Methods"
msgstr "メソッド"

#: ../../narr/webob.rst:168
msgid ""
"There are methods of request objects documented in "
":class:`pyramid.request.Request` but you'll find that you won't use very "
"many of them.  Here are a couple that might be useful:"
msgstr "requestオブジェクトのメソッドはclass： `pyramid.request.Request`に記述されていますが、あまり多くは使用しないことがわかります。役に立つかもしれないカップルがあります："

#: ../../narr/webob.rst:177
msgid "``Request.blank(base_url)``"
msgstr "`` Request.blank（base_url） ``"

#: ../../narr/webob.rst:173
msgid ""
"Creates a new request with blank information, based at the given URL.  "
"This can be useful for subrequests and artificial requests.  You can also"
" use ``req.copy()`` to copy an existing request, or for subrequests "
"``req.copy_get()`` which copies the request but always turns it into a "
"GET (which is safer to share for subrequests)."
msgstr "指定されたURLに基​​づいて空の情報で新しいリクエストを作成します。これは、副依頼と人為的な要求に役立ちます。また、 `` req.copy（） ``を使って既存のリクエストをコピーすることも、 `` req.copy_get（） ``のサブリクエストにコピーすることもできますが、常にそれをGETに変えます（サブリクエスト）。"

#: ../../narr/webob.rst:182
msgid "``req.get_response(wsgi_application)``"
msgstr "`` req.get_response（wsgi_application） ``"

#: ../../narr/webob.rst:180
msgid ""
"This method calls the given WSGI application with this request, and "
"returns a :class:`pyramid.response.Response` object.  You can also use "
"this for subrequests or testing."
msgstr "このメソッドは、この要求で指定されたWSGIアプリケーションを呼び出し、class： `pyramid.response.Response`オブジェクトを返します。サブリクエストやテストにも使用できます。"

#: ../../narr/webob.rst:189
msgid "Text (Unicode)"
msgstr "テキスト（Unicode）"

#: ../../narr/webob.rst:191
msgid ""
"Many of the properties of the request object will be text values "
"(``unicode`` under Python 2 or ``str`` under Python 3) if the request "
"encoding/charset is provided.  If it is provided, the values in "
"``req.POST``, ``req.GET``, ``req.params``, and ``req.cookies`` will "
"contain text.  The client *can* indicate the charset with something like "
"``Content-Type: application/x-www-form-urlencoded; charset=utf8``, but "
"browsers seldom set this.  You can reset the charset of an existing "
"request with ``newreq = req.decode('utf-8')``, or during instantiation "
"with ``Request(environ, charset='utf8')``."
msgstr "リクエストエンコーディング/キャラクタセットが提供されている場合、リクエストオブジェクトのプロパティの多くはテキスト値（Python 2では `` unicode`、Python 3では `` str``）になります。提供されている場合、 `` req.POST``、 `` req.GET``、 `` req.params``、および `` req.cookies``の値にはテキストが含まれます。クライアントは `` Content-Type：application / x-www-form-urlencodedのようなもので文字セットを示すことができます。 charset = utf8``ですが、ブラウザで設定することはめったにありません。 `` newreq = req.decode（ &#39;utf-8&#39;） ``で、または `` Request（environ、charset = &#39;utf8&#39;） ``でインスタンス化中に、既存のリクエストの文字セットをリセットできます。"

#: ../../narr/webob.rst:207
msgid "Multidict"
msgstr "マルチディック"

#: ../../narr/webob.rst:209
msgid ""
"Several attributes of a WebOb request are multidict structures (such as "
"``request.GET``, ``request.POST``, and ``request.params``).  A multidict "
"is a dictionary where a key can have multiple values.  The quintessential"
" example is a query string like ``?pref=red&pref=blue``; the ``pref`` "
"variable has two values: ``red`` and ``blue``."
msgstr "WebOb要求のいくつかの属性は、（ `` request.GET``、 `` request.POST``、 `` request.params``などの）マルチダイレクト構造です。 multidictは、キーが複数の値を持つことができる辞書です。典型的な例は、 ``？pref = red＆pref = blue``のようなクエリ文字列です。 `` pref``変数には `` red``と `` blue``という2つの値があります。"

#: ../../narr/webob.rst:215
msgid ""
"In a multidict, when you do ``request.GET['pref']``, you'll get back only"
" ``\"blue\"`` (the last value of ``pref``).  This returned result might "
"not be expected—sometimes returning a string, and sometimes returning a "
"list—and may be cause of frequent exceptions.  If you want *all* the "
"values back, use ``request.GET.getall('pref')``.  If you want to be sure "
"there is *one and only one* value, use ``request.GET.getone('pref')``, "
"which will raise an exception if there is zero or more than one value for"
" ``pref``."
msgstr "マルチダイクでは、 `` request.GET [&#39;pref&#39;] ``を実行すると `` \ &quot;blue&quot; &quot;（` `pref``の最後の値）だけが返されます。この返された結果は期待通りではないかもしれません。文字列を返したり、時にはリストを返すことがあり、頻繁に例外が発生する可能性があります。 *すべての*値を元に戻すには、 `` request.GET.getall（ &#39;pref&#39;） ``を使用します。 * 1つだけの*値があることを確かめたい場合は、 `` request.GET.getone（ &#39;pref&#39;） ``を使います。これは、 `` pref ``。"

#: ../../narr/webob.rst:223
msgid ""
"When you use operations like ``request.GET.items()``, you'll get back "
"something like ``[('pref', 'red'), ('pref', 'blue')]``.  All the "
"key/value pairs will show up.  Similarly ``request.GET.keys()`` returns "
"``['pref', 'pref']``. Multidict is a view on a list of tuples; all the "
"keys are ordered, and all the values are ordered."
msgstr "`` request.GET.items（） ``のような操作を使うと、 `` [（ &#39;pref&#39;、 &#39;red&#39;）、（ &#39;pref&#39;、 &#39;blue&#39;）] `のようなものが返されます。すべてのキーと値のペアが表示されます。同様に `` request.GET.keys（） ``は `` [&#39;pref&#39;、 &#39;pref&#39;] ``を返します。 Multidictはタプルのリストのビューです。すべてのキーが順序付けされ、すべての値が順序付けられます。"

#: ../../narr/webob.rst:229
msgid ""
"API documentation for a multidict exists as "
":class:`pyramid.interfaces.IMultiDict`."
msgstr "マルチダイクに関するAPIドキュメントは、class： `pyramid.interfaces.IMultiDict`として存在します。"

#: ../../narr/webob.rst:238
msgid "Dealing with a JSON-Encoded Request Body"
msgstr "JSONエンコーディングされたリクエストボディを扱う"

#: ../../narr/webob.rst:242
msgid ""
":attr:`pyramid.request.Request.json_body` is a property that returns a "
":term:`JSON`-decoded representation of the request body.  If the request "
"does not have a body, or the body is not a properly JSON-encoded value, "
"an exception will be raised when this attribute is accessed."
msgstr "：attr： `pyramid.request.Request.json_body`はリクエストボディの：term：` JSON`デコードされた表現を返すプロパティです。要求に本文がない場合、または本文が適切にJSONエンコードされた値でない場合、この属性にアクセスすると例外が発生します。"

#: ../../narr/webob.rst:247
msgid ""
"This attribute is useful when you invoke a :app:`Pyramid` view callable "
"via, for example, jQuery's ``$.ajax`` function, which has the potential "
"to send a request with a JSON-encoded body."
msgstr "この属性は、例えば：jQueryの `` $ .ajax``関数を介して呼び出し可能な：app： `Pyramid`ビューを呼び出すときに便利です。この関数は、JSONでエンコードされたボディでリクエストを送信する可能性があります。"

#: ../../narr/webob.rst:251
msgid "Using ``request.json_body`` is equivalent to:"
msgstr "`` request.json_body``を使うことは次のようになります："

#: ../../narr/webob.rst:258
msgid ""
"Here's how to construct an AJAX request in JavaScript using "
":term:`jQuery` that allows you to use the ``request.json_body`` attribute"
" when the request is sent to a :app:`Pyramid` application:"
msgstr "以下は：term： `jQuery`を使ってJavaScriptでAJAXリクエストを構築する方法です：リクエストが：app：` Pyramid`アプリケーションに送られたときに `` request.json_body``属性を使うことができます："

#: ../../narr/webob.rst:269
msgid ""
"When such a request reaches a view in your application, the "
"``request.json_body`` attribute will be available in the view callable "
"body."
msgstr "このような要求がアプリケーションのビューに到達すると、ビューの呼び出し可能な本体で `` request.json_body``属性が利用可能になります。"

#: ../../narr/webob.rst:279
msgid "For the above view, printed to the console will be:"
msgstr "上記のビューの場合、コンソールに表示されるのは次のようになります。"

#: ../../narr/webob.rst:285
msgid ""
"For bonus points, here's a bit of client-side code that will produce a "
"request that has a body suitable for reading via ``request.json_body`` "
"using Python's ``urllib2`` instead of a JavaScript AJAX request:"
msgstr "ボーナスポイントについては、JavaScript AJAXリクエストの代わりにPythonの `` urllib2``を使って `` request.json_body``を介して読み込むのに適したボディを持つリクエストを生成するクライアント側コードのビットを次に示します："

#: ../../narr/webob.rst:299
msgid ""
"If you are doing Cross-origin resource sharing (CORS), then the standard "
"requires the browser to do a pre-flight HTTP OPTIONS request. The easiest"
" way to handle this is to add an extra ``view_config`` for the same "
"route, with ``request_method`` set to ``OPTIONS``, and set the desired "
"response header before returning. You can find examples of response "
"headers `Access control CORS, Preflighted requests "
"<https://developer.mozilla.org/en-"
"US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests>`_."
msgstr "クロスオリジンリソース共有（CORS）を実行している場合、標準ではブラウザにプリフライトのHTTP OPTIONSリクエストを実行する必要があります。これを処理する最も簡単な方法は、 `` request_method``を `` OPTIONS``に設定して、同じルートに対して特別な `` view_config``を追加し、返す前に目的のレスポンスヘッダを設定することです。応答ヘッダーの例を見ることができます `アクセス制御CORS、プリフライトされたリクエスト<https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests> `_。"

#: ../../narr/webob.rst:313
msgid "Cleaning up after a Request"
msgstr "リクエスト後のクリーンアップ"

#: ../../narr/webob.rst:315
msgid ""
"Sometimes it's required to perform some cleanup at the end of a request "
"when a database connection is involved."
msgstr "場合によっては、データベース接続が関係しているときに、要求の最後にクリーンアップを実行する必要があります。"

#: ../../narr/webob.rst:318
msgid ""
"For example, let's say you have a ``mypackage`` :app:`Pyramid` "
"application package that uses SQLAlchemy, and you'd like the current "
"SQLAlchemy database session to be removed after each request.  Put the "
"following in the ``mypackage.__init__`` module:"
msgstr "たとえば、SQLAlchemyを使用するapp： `Pyramid`アプリケーションパッケージで、各リクエストの後に現在のSQLAlchemyデータベースセッションを削除したい場合、` `mypackage``があるとします。 `` mypackage .__ init__``モジュールに以下を挿入してください："

#: ../../narr/webob.rst:338
msgid ""
"Registering the ``cleanup_callback`` finished callback at the start of a "
"request (by causing the ``add_cleanup_callback`` to receive a "
":class:`pyramid.events.NewRequest` event at the start of each request) "
"will cause the DBSession to be removed whenever request processing has "
"ended. Note that in the example above, for the "
":class:`pyramid.events.subscriber` decorator to work, the "
":meth:`pyramid.config.Configurator.scan` method must be called against "
"your ``mypackage`` package during application initialization."
msgstr "要求の開始時に `` cleanup_callback``終了コールバックを登録すると（ `` add_cleanup_callback``が各要求の開始時にclass： `pyramid.events.NewRequest`イベントを受け取るようになります）、DBSessionは要求処理が終了するたびに削除されます。上記の例では、：class： `pyramid.events.subscriber`デコレータが動作するためには、アプリケーション中に` `mypackage``パッケージに対して：meth：` pyramid.config.Configurator.scan`メソッドを呼び出さなければなりません初期化。"

#: ../../narr/webob.rst:347
msgid ""
"This is only an example.  In particular, it is not necessary to cause "
"``DBSession.remove`` to be called in an application generated from a "
":app:`Pyramid` cookiecutter, because these all use the ``pyramid_tm`` "
"package. The cleanup done by ``DBSession.remove`` is unnecessary when "
"``pyramid_tm`` :term:`middleware` is configured into the application."
msgstr "これはほんの一例です。特に、：app： `Pyramid` cookiecutterから生成されたアプリケーションで` `DBSession.remove``を呼び出す必要はありません。これらはすべて` `pyramid_tm``パッケージを使用するためです。 `` pyramid_tm``：term： `middleware`がアプリケーションに設定されている場合、` `DBSession.remove``で行われるクリーンアップは不要です。"

#: ../../narr/webob.rst:354 ../../narr/webob.rst:494
msgid "More Details"
msgstr "詳細"

#: ../../narr/webob.rst:356
msgid "More detail about the request object API is available as follows."
msgstr "リクエストオブジェクトAPIの詳細は、次のとおりです。"

#: ../../narr/webob.rst:358
msgid ":class:`pyramid.request.Request` API documentation"
msgstr "：class： `pyramid.request.Request` APIドキュメント"

#: ../../narr/webob.rst:360
msgid ""
"`WebOb documentation <http://docs.webob.org/en/latest/index.html>`_.  All"
" methods and attributes of a ``webob.Request`` documented within the "
"WebOb documentation will work with request objects created by "
":app:`Pyramid`."
msgstr "`WebOb documentation <http://docs.webob.org/en/latest/index.html> `_。 WebObのドキュメンテーションに書かれている `` webob.Request``のメソッドと属性は、app： `Pyramid`で作成されたリクエストオブジェクトで動作します。"

#: ../../narr/webob.rst:368
msgid "Response"
msgstr "応答"

#: ../../narr/webob.rst:370
msgid ""
"The :app:`Pyramid` response object can be imported as "
":class:`pyramid.response.Response`.  This class is a subclass of the "
"``webob.Response`` class.  The subclass does not add or change any "
"functionality, so the WebOb Response documentation will be completely "
"relevant for this class as well."
msgstr "：app： `Pyramid`レスポンスオブジェクトは、class：` pyramid.response.Response`としてインポートできます。このクラスは `` webob.Response``クラスのサブクラスです。サブクラスは機能を追加または変更しないため、WebOb Responseのドキュメントはこのクラスにも完全に関連します。"

#: ../../narr/webob.rst:376
msgid "A response object has three fundamental parts:"
msgstr "応答オブジェクトには3つの基本的な部分があります。"

#: ../../narr/webob.rst:380
msgid "``response.status``"
msgstr "`` response.status``"

#: ../../narr/webob.rst:379
msgid ""
"The response code plus reason message, like ``200 OK``.  To set the code "
"without a message, use ``status_int``, i.e., ``response.status_int = "
"200``."
msgstr "`` 200 OK``のような応答コードプラス理由メッセージ。メッセージなしでコードを設定するには、 `` status_int``、つまり `` response.status_int = 200``を使用します。"

#: ../../narr/webob.rst:385
msgid "``response.headerlist``"
msgstr "`` response.headerlist``"

#: ../../narr/webob.rst:383
msgid ""
"A list of all the headers, like ``[('Content-Type', 'text/html')]``. "
"There's a case-insensitive :term:`multidict` in ``response.headers`` that"
" also allows you to access these same headers."
msgstr "`` [（ &#39;Content-Type&#39;、 &#39;text / html&#39;） ``のようなすべてのヘッダーのリスト。 `` response.headers``には大文字小文字を区別しないterm： `multidict`があり、これも同じヘッダにアクセスできます。"

#: ../../narr/webob.rst:392
msgid "``response.app_iter``"
msgstr "`` Response.app_iter``"

#: ../../narr/webob.rst:388
msgid ""
"An iterable (such as a list or generator) that will produce the content "
"of the response.  This is also accessible as ``response.body`` (a "
"string), ``response.text`` (a unicode object, informed by "
"``response.charset``), and ``response.body_file`` (a file-like object; "
"writing to it appends to ``app_iter``)."
msgstr "応答の内容を生成する反復可能なもの（リストやジェネレータなど）。これは、 `` response.body``（文字列）、 `` response.text``（unicodeオブジェクト、 `` response.charset``で通知）、 `` response.body_file``（aファイルに似たオブジェクトで、 `` app_iter``に追加します）。"

#: ../../narr/webob.rst:394
msgid ""
"Everything else in the object typically derives from this underlying "
"state. Here are some highlights:"
msgstr "オブジェクト内の他のすべては、通常、この基底状態から派生します。ここにいくつかのハイライトがあります："

#: ../../narr/webob.rst:402
msgid "``response.content_type``"
msgstr "`` response.content_type``"

#: ../../narr/webob.rst:398
msgid "The content type *not* including the ``charset`` parameter."
msgstr "`` charset``パラメータを含むコンテンツタイプ*ではありません。"

#: ../../narr/webob.rst:400
msgid "Typical use: ``response.content_type = 'text/html'``."
msgstr "典型的な使用法： `` response.content_type = &#39;text / html&#39;``です。"

#: ../../narr/webob.rst:402
msgid "Default value: ``response.content_type = 'text/html'``."
msgstr "デフォルト値： `` response.content_type = &#39;text / html&#39;``。"

#: ../../narr/webob.rst:407
msgid "``response.charset``"
msgstr "`` response.charset``"

#: ../../narr/webob.rst:405
msgid ""
"The ``charset`` parameter of the content-type, it also informs encoding "
"in ``response.text``. ``response.content_type_params`` is a dictionary of"
" all the parameters."
msgstr "content-typeの `` charset``パラメータは、 `` response.text``でエンコーディングも通知します。 `` response.content_type_params``はすべてのパラメータの辞書です。"

#: ../../narr/webob.rst:413
msgid "``response.set_cookie(name, value, max_age=None, path='/', ...)``"
msgstr "`` response.set_cookie（name、value、max_age = None、path = &#39;/&#39;、...） ``"

#: ../../narr/webob.rst:410
msgid ""
"Set a cookie.  The keyword arguments control the various cookie "
"parameters. The ``max_age`` argument is the length for the cookie to live"
" in seconds (you may also use a timedelta object).  The ``Expires`` key "
"will also be set based on the value of ``max_age``."
msgstr "クッキーを設定します。キーワード引数は、さまざまなクッキーパラメータを制御します。 `` max_age``引数は、クッキーの長さを秒単位で表します（timedeltaオブジェクトも使用できます）。 `` Expires``キーも `` max_age``の値に基づいて設定されます。"

#: ../../narr/webob.rst:417
msgid "``response.delete_cookie(name, path='/', domain=None)``"
msgstr "`` response.delete_cookie（name、path = &#39;/&#39;、domain = None） ``"

#: ../../narr/webob.rst:416
msgid ""
"Delete a cookie from the client.  This sets ``max_age`` to 0 and the "
"cookie value to ``''``."
msgstr "クライアントからクッキーを削除します。これは、 `` max_age``を0に設定し、クッキーの値を `` &#39;&#39; ``に設定します。"

#: ../../narr/webob.rst:422
msgid "``response.cache_expires(seconds=0)``"
msgstr "`` response.cache_expires（秒= 0） ``"

#: ../../narr/webob.rst:420
msgid ""
"This makes the response cacheable for the given number of seconds, or if "
"``seconds`` is ``0`` then the response is uncacheable (this also sets the"
" ``Expires`` header)."
msgstr "これにより、応答が秒単位でキャッシュ可能になります。 `` seconds``が `` 0``の場合、レスポンスはキャッシュ不可能になります（ `Expires`ヘッダも設定されます）。"

#: ../../narr/webob.rst:428
msgid "``response(environ, start_response)``"
msgstr "``応答（environ、start_response） ``"

#: ../../narr/webob.rst:425
msgid ""
"The response object is a WSGI application.  As an application, it acts "
"according to how you create it.  It *can* do conditional responses if you"
" pass ``conditional_response=True`` when instantiating (or set that "
"attribute later).  It can also do HEAD and Range requests."
msgstr "応答オブジェクトはWSGIアプリケーションです。アプリケーションとしては、アプリケーションの作成方法に応じて動作します。インスタンス化するときに `` conditional_response = True``を渡すと条件付き応答を行うことができます（またはその属性を後で設定することもできます）。また、HEADおよびRange要求を行うこともできます。"

#: ../../narr/webob.rst:434
msgid "Headers"
msgstr "ヘッダー"

#: ../../narr/webob.rst:436
msgid ""
"Like the request, most HTTP response headers are available as properties."
" These are parsed, so you can do things like ``response.last_modified = "
"os.path.getmtime(filename)``."
msgstr "要求と同様に、ほとんどのHTTP応答ヘッダーはプロパティとして使用できます。これらは解析されるので、 `` response.last_modified = os.path.getmtime（filename） ``のようなことができます。"

#: ../../narr/webob.rst:440
msgid "The details are available in the :mod:`webob.response` API documentation."
msgstr "詳細は、：mod： `webob.response` APIドキュメントを参照してください。"

#: ../../narr/webob.rst:446
msgid "Instantiating the Response"
msgstr "レスポンスのインスタンス化"

#: ../../narr/webob.rst:448
msgid ""
"Of course most of the time you just want to *make* a response.  Generally"
" any attribute of the response can be passed in as a keyword argument to "
"the class, e.g.:"
msgstr "もちろん、ほとんどの場合、あなたはただ応答をしたいだけです。一般的に、レスポンスの属性はキーワードの引数としてクラスに渡すことができます。例："

#: ../../narr/webob.rst:458
msgid "The status defaults to ``'200 OK'``."
msgstr "ステータスは `` &#39;200 OK``にデフォルト設定されています。"

#: ../../narr/webob.rst:460
msgid ""
"The value of ``content_type`` defaults to "
"``webob.response.Response.default_content_type``, which is ``text/html``."
" You can subclass :class:`pyramid.response.Response` and set "
"``default_content_type`` to override this behavior."
msgstr "`` content_type``のデフォルト値は `` webob.response.Response.default_content_type``です。これは `` text / html``です。 ：class： `pyramid.response.Response`をサブクラス化し、` `default_content_type``を設定してこの振る舞いをオーバーライドすることができます。"

#: ../../narr/webob.rst:469
msgid "Exception Responses"
msgstr "例外レスポンス"

#: ../../narr/webob.rst:471
msgid ""
"To facilitate error responses like ``404 Not Found``, the module "
":mod:`pyramid.httpexceptions` contains classes for each kind of error "
"response. These include boring but appropriate error bodies.  The "
"exceptions exposed by this module, when used under :app:`Pyramid`, should"
" be imported from the :mod:`pyramid.httpexceptions` module.  This import "
"location contains subclasses and replacements that mirror those in the "
"``webob.exc`` module."
msgstr "`` 404 Not Found``のようなエラー応答を容易にするために、module：mod： `pyramid.httpexceptions`はエラー応答の種類ごとにクラスを含みます。これらには、退屈だが適切なエラーボディが含まれる。このモジュールによって公開される例外は、：app： `Pyramid`の下で使用された場合、：mod：` pyramid.httpexceptions`モジュールからインポートする必要があります。このインポート場所には、 `` webob.exc``モジュールでそれらを反映するサブクラスと置き換えが含まれています。"

#: ../../narr/webob.rst:478
msgid ""
"Each class is named ``pyramid.httpexceptions.HTTP*``, where ``*`` is the "
"reason for the error.  For instance, "
":class:`pyramid.httpexceptions.HTTPNotFound` subclasses "
":class:`pyramid.response.Response`, so you can manipulate the instances "
"in the same way.  A typical example is:"
msgstr "各クラスの名前は `` pyramid.httpexceptions.HTTP * ``です。ここで、 `` * ``はエラーの原因です。たとえば、：class： `pyramid.httpexceptions.HTTPNotFound`というサブクラス：class：` pyramid.response.Response`を使用すると、同じ方法でインスタンスを操作できます。典型的な例は次のとおりです。"

#: ../../narr/webob.rst:496
msgid ""
"More details about the response object API are available in the "
":mod:`pyramid.response` documentation.  More details about exception "
"responses are in the :mod:`pyramid.httpexceptions` API documentation.  "
"The `WebOb documentation <http://docs.webob.org/en/latest/index.html>`_ "
"is also useful."
msgstr "レスポンスオブジェクトAPIの詳細については、：mod： `pyramid.response`のドキュメントを参照してください。例外応答の詳細については、：mod： `pyramid.httpexceptions` APIドキュメントを参照してください。 `WebOb documentation <http://docs.webob.org/en/latest/index.html> `_も便利です。"

