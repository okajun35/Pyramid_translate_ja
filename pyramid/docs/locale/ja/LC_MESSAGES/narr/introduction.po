# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../narr/introduction.rst:10
msgid ":app:`Pyramid` Introduction"
msgstr "(機械翻訳) :app:`Pyramid` はじめに"

#: ../../narr/introduction.rst:12
msgid ""
":app:`Pyramid` is a Python web application *framework*. It is designed to"
" make creating web applications easier. It is open source."
msgstr "：app： `Pyramid`はPython Webアプリケーション*フレームワークです。 Webアプリケーションを簡単に作成できるように設計されています。オープンソースです。"

msgid "What Is a Framework?"
msgstr "フレームワークとは何ですか？"

#: ../../narr/introduction.rst:16
msgid ""
"A *framework* provides capabilities that developers can enhance or "
"extend. A web application framework provides many of the common needs of "
"building web applications allowing developers to concentrate only on the "
"parts that are specific to their application."
msgstr "A *フレームワーク*は、開発者が拡張または拡張できる機能を提供します。 Webアプリケーションフレームワークは、Webアプリケーションを構築する一般的なニーズの多くを提供します。開発者は、アプリケーション固有の部分にのみ集中することができます。"

#: ../../narr/introduction.rst:18
msgid ""
"Every framework makes choices about how a particular problem should be "
"solved. When developers choose to use a framework, they cede control over"
" the portions of their application that are provided by the framework. It"
" is possible to write a complete web application without any framework, "
"by using Python libraries. In practice, however, it is often more "
"practical to use a framework, so long as your chosen framework fits the "
"requirements of your application."
msgstr "すべてのフレームワークは、特定の問題をどのように解決すべきかを選択します。開発者がフレームワークの使用を選択すると、フレームワークによって提供されるアプリケーションの部分に対する制御が譲り渡されます。 Pythonライブラリを使用することで、フレームワークなしで完全なWebアプリケーションを作成することができます。しかし、実際には、選択したフレームワークがアプリケーションの要件に合っている限り、フレームワークを使用する方が現実的です。"

#: ../../narr/introduction.rst:20
msgid ":app:`Pyramid` follows these design and engineering principles:"
msgstr "：app： `Pyramid`はこれらの設計原理と技術原則に従います："

#: ../../narr/introduction.rst:23
msgid "Simplicity"
msgstr "シンプリシティ"

#: ../../narr/introduction.rst:23
msgid ""
":app:`Pyramid` is designed to be easy to use. You can get started even if"
" you don't understand it all. And when you're ready to do more, "
":app:`Pyramid` will be there for you."
msgstr "：app： `Pyramid`は使いやすいように設計されています。あなたがすべてを理解していなくても、始めることができます。あなたがもっとやる準備ができたら、：app： `Pyramid`があなたのためにあります。"

#: ../../narr/introduction.rst:26
msgid "Minimalism"
msgstr "ミニマリズム"

#: ../../narr/introduction.rst:26
msgid ""
"Out of the box, :app:`Pyramid` provides only the core tools needed for "
"nearly all web applications: mapping URLs to code, security, and serving "
"static assets (files like JavaScript and CSS). Additional tools provide "
"templating, database integration and more. But with :app:`Pyramid` you "
"can *\"pay only for what you eat\"*."
msgstr "すぐに使える：app： `Pyramid`は、URLをコード、セキュリティ、および静的なアセット（JavaScriptやCSSなどのファイル）にマッピングするという、ほぼすべてのWebアプリケーションに必要な主要ツールのみを提供します。その他のツールは、テンプレート作成、データベース統合などを提供します。しかし、：app： `Pyramid`では、あなたが食べるものだけを支払うことができます。"

#: ../../narr/introduction.rst:29
msgid "Documentation"
msgstr "ドキュメンテーション"

#: ../../narr/introduction.rst:29
msgid ":app:`Pyramid` is committed to comprehensive and up-to-date documentation."
msgstr "：app： `Pyramid`は、包括的かつ最新の文書化に取り組んでいます。"

#: ../../narr/introduction.rst:32
msgid "Speed"
msgstr "速度"

#: ../../narr/introduction.rst:32
msgid ":app:`Pyramid` is designed to be noticeably fast."
msgstr "：app： `Pyramid`は著しく高速になるように設計されています。"

#: ../../narr/introduction.rst:35
msgid "Reliability"
msgstr "信頼性"

#: ../../narr/introduction.rst:35
msgid ""
":app:`Pyramid` is developed conservatively and tested exhaustively. Our "
"motto is: \"If it ain't tested, it's broke\"."
msgstr "：app： `Pyramid`は控えめに開発され、徹底的にテストされています。私たちのモットーは： &quot;テストされていなければ、それは壊れています&quot;。"

#: ../../narr/introduction.rst:38
msgid "Openness"
msgstr "開放性"

#: ../../narr/introduction.rst:38
msgid ""
"As with Python, the :app:`Pyramid` software is distributed under a "
"`permissive open source license <http://repoze.org/license.html>`_."
msgstr "Pythonと同様に、：app： `Pyramid`ソフトウェアは、` `許容オープンソースライセンス<http://repoze.org/license.html> `_。"

#: ../../narr/introduction.rst:43
msgid "Why Pyramid?"
msgstr "なぜピラミッド？"

#: ../../narr/introduction.rst:45
msgid ""
"In a world filled with web frameworks, why should you choose "
":app:`Pyramid`\\ ?"
msgstr "Webフレームワークでいっぱいの世界では、なぜあなたが選ぶべきですか？app： `Pyramid` \\？"

#: ../../narr/introduction.rst:48
msgid "Modern"
msgstr "現代"

#: ../../narr/introduction.rst:50
msgid ""
":app:`Pyramid` is fully compatible with Python 3. If you develop a "
":app:`Pyramid` application today, you can rest assured that you'll be "
"able to use the most modern features of your favorite language. And in "
"the years to come, you'll continue to bed working on a framework that is "
"up-to-date and forward-looking."
msgstr "：app： `Pyramid`はPython 3と完全に互換性があります：今日：app：` Pyramid`アプリケーションを開発すると、あなたが好きな言語の最新の機能を使用できるようになります。今後も、最新の将来展望のフレームワークに取り組んでいきます。"

#: ../../narr/introduction.rst:53
msgid "Tested"
msgstr "テスト済み"

#: ../../narr/introduction.rst:55
#, python-format
msgid ""
"Untested code is broken by design. The :app:`Pyramid` community has a "
"strong testing culture and our framework reflects that. Every release of "
":app:`Pyramid` has 100% statement coverage (as measured by `coverage "
"<http://coverage.readthedocs.io/en/latest/>`_) and 95% decision/condition"
" coverage. (as measured by `instrumental "
"<http://instrumental.readthedocs.io/en/latest/intro.html>`_) It is "
"automatically tested using `Travis <https://travis-"
"ci.org/Pylons/pyramid>`_ and `Jenkins "
"<http://jenkins.pylonsproject.org/job/pyramid/>`_ on supported versions "
"of Python after each commit to its GitHub repository. `Official Pyramid "
"add-ons <https://trypyramid.com/resources-extending-pyramid.html>`_ are "
"held to a similar testing standard."
msgstr "テストされていないコードは設計によって壊れています。 ：app： `Pyramid`コミュニティは強力なテストカルチャーを持っており、私たちの枠組みはそれを反映しています。 app： `Pyramid`のすべてのリリースでは、100％のステートメントカバレッジ（`カバレッジ<http://coverage.readthedocs.io/en/latest/> `_ &#39;）と95％の決定/条件カバレッジ。 （計器によって測定される<http://instrumental.readthedocs.io/en/latest/intro.html> `_）これは` Travis &#39;を使って自動的にテストされます<https://travis-ci.org/Pylons/pyramid> `_と`ジェンキンス<http://jenkins.pylonsproject.org/job/pyramid/> `GitHubリポジトリへのコミットのたびにサポートされているバージョンのPython上で動作します。 `公式ピラミッドアドオン<https://trypyramid.com/resources-extending-pyramid.html> `_同様の試験基準に守られている。"

#: ../../narr/introduction.rst:57
msgid ""
"We still find bugs in :app:`Pyramid`, but we've noticed we find a lot "
"fewer of them while working on projects with a solid testing regime."
msgstr "app： `Pyramid`ではまだバグが見つかっていますが、確かなテスト体制のプロジェクトに取り組んでいるうちに、それらの数が少なくなっています。"

#: ../../narr/introduction.rst:60
msgid "Documented"
msgstr "文書化された"

#: ../../narr/introduction.rst:62
msgid ""
"The :app:`Pyramid` documentation is comprehensive. We strive to keep our "
"narrative documentation both complete and friendly to newcomers. We also "
"maintain the :ref:`Pyramid Community Cookbook <cookbook:pyramid-"
"cookbook>` of  recipes demonstrating common scenarios you might face. "
"Contributions in the form of improvements to our documentation are always"
" appreciated. And we always welcome improvements to our `official "
"tutorials <html_tutorials>`_ as well as new contributions to our "
"`community maintained tutorials <tutorials:pyramid-tutorials>`_."
msgstr "：app： `Pyramid`のドキュメントは包括的です。私たちは、私たちの物語のドキュメンテーションを新人に完全かつ親しみやすいものにするよう努力しています。我々はまた：ref： `Pyramid Community Cookbook <cookbook:pyramid-cookbook>あなたが直面するかもしれない共通のシナリオを示すレシピの私たちの文書の改善の形での貢献は常に高く評価されています。そして、私たちは常に、公式のチュートリアル<html_tutorials> `_コミュニティ保守チュートリアルへの新しい貢献<tutorials:pyramid-tutorials> `_。"

#: ../../narr/introduction.rst:65
msgid "Supported"
msgstr "サポートされる"

#: ../../narr/introduction.rst:67
msgid ""
"You can get help quickly with :app:`Pyramid`. It's our goal that no "
":app:`Pyramid` question go unanswered. Whether you ask a question on IRC,"
" on the Pylons-discuss mailing list, or on StackOverflow, you're likely "
"to get a reasonably prompt response."
msgstr "app： `Pyramid`を使うとすぐに助けを受けることができます。 app： `Pyramid`の質問には答えられないという私たちの目標です。 IRC、Pylonsディスカッションメーリングリスト、StackOverflowで質問するかどうかは、合理的に迅速な対応が取れる可能性があります。"

#: ../../narr/introduction.rst:69
msgid ""
":app:`Pyramid` is also a welcoming, friendly space for newcomers. We "
"don't tolerate \"support trolls\" or those who enjoy berating fellow "
"users in our support channels. We try to keep it well-lit and new-user-"
"friendly."
msgstr "：app： `Pyramid`は新入生のための歓迎され、友好的な空間です。 \ &quot;サポートトロール\&quot;またはサポートチャネルで仲間のユーザーを嫌う人を容認するものではありません。私たちはそれを明るく、新しいユーザーフレンドリーに保ちます。"

#: ../../narr/introduction.rst:73
msgid ""
"See also our `#pyramid IRC channel "
"<https://webchat.freenode.net/?channels=pyramid>`_, our `pylons-discuss "
"mailing list <https://groups.google.com/forum/#!forum/pylons-discuss>`_, "
"and :ref:`support-and-development`."
msgstr "`#pyramid IRCチャンネル<https://webchat.freenode.net/?channels=pyramid> `_、私たちの` pylons-discussメーリングリスト<https://groups.google.com/forum/#!forum/pylons-discuss> `_、`： `ref：`のサポートと開発 `"

#: ../../narr/introduction.rst:78
msgid "What makes Pyramid unique"
msgstr "ピラミッドをユニークなものにする理由"

#: ../../narr/introduction.rst:80
msgid ""
"There are many tools available for web development. What would make "
"someone want to use :app:`Pyramid` instead?  What makes :app:`Pyramid` "
"unique?"
msgstr "Web開発には多くのツールがあります。誰かが使いたいと思うもの：app： `Pyramid`？何を作る：app： `Pyramid`は一意？"

#: ../../narr/introduction.rst:82
msgid ""
"With :app:`Pyramid` you can write very small applications without needing"
" to know a lot. And by learning a bit more, you can write very large "
"applications too. :app:`Pyramid` will allow you to become productive "
"quickly, and will grow with you. It won't hold you back when your "
"application is small, and it won't get in your way when your application "
"becomes large. Other application frameworks seem to fall into two non-"
"overlapping categories: those that support \"small apps\" and those "
"designed for \"big apps\"."
msgstr "：app： `Pyramid`を使うと、たくさんのことを知らなくても非常に小さなアプリケーションを書くことができます。もう少し学ぶことで、非常に大きなアプリケーションも作成できます。 ：app： `Pyramid`は、あなたがすぐに生産的になることを可能にし、あなたと共に成長します。あなたのアプリケーションが小さいときにあなたを後押しすることはなく、あなたのアプリケーションが大きくなったときにあなたの道には入りません。他のアプリケーションフレームワークは、「小さなアプリケーション」をサポートするカテゴリと「大きなアプリケーション」を設計するカテゴリの2つの重複しないカテゴリに分類されます。"

#: ../../narr/introduction.rst:84
msgid ""
"We don't believe you should have to make this choice. You can't really "
"know how large your application will become.  You certainly shouldn't "
"have to rewrite a small application in another framework when it gets "
"\"too big\". A well-designed framework should be able to be good at both."
" :app:`Pyramid` is that kind of framework."
msgstr "私たちはあなたがこの選択をしなければならないと信じていません。あなたのアプリケーションがどれくらい大きくなるかは分かりません。小さなアプリケーションを別のフレームワークで書き直す必要はありません。うまく設計されたフレームワークは、両方でうまくいくはずです。 ：app： `Pyramid`はそのようなフレームワークです。"

#: ../../narr/introduction.rst:86
msgid ""
":app:`Pyramid` provides a set of features that are unique among Python "
"web frameworks. Others may provide some, but only :app:`Pyramid` provides"
" them all, in one place, fully documented, and *à la carte* without "
"needing to pay for the whole banquet."
msgstr "：app： `Pyramid`は、PythonのWebフレームワーク内でユニークな一連の機能を提供します。 app： `Pyramid`は、宴会全体の費用を支払う必要なしに、完全に文書化された、1つの場所に、そして*アラカルト*を提供します。"

#: ../../narr/introduction.rst:90
msgid "Build single-file applications"
msgstr "単一ファイルアプリケーションを構築する"

#: ../../narr/introduction.rst:92
msgid ""
"You can write a :app:`Pyramid` application that lives entirely in one "
"Python file. Such an application is easy to understand since everything "
"is in one place. It is easy to deploy because you don't need to know much"
" about Python packaging. :app:`Pyramid` allows you to do almost "
"everything that so-called *microframeworks* can in very similar ways."
msgstr "完全に1つのPythonファイルに存在する：app： `Pyramid`アプリケーションを書くことができます。そのようなアプリケーションは、すべてが1つの場所にあるので、理解しやすいです。 Pythonのパッケージについて多くのことを知る必要がないので、簡単にデプロイできます。 ：app： `Pyramid`は、いわゆる* microframeworks *ができることはほとんど同じようにできます。"

#: ../../narr/introduction.rst:98
msgid "See also :ref:`firstapp_chapter`."
msgstr "参照：ref： `firstapp_chapter`も参照してください。"

#: ../../narr/introduction.rst:101
msgid "Configure applications with decorators"
msgstr "デコレータでアプリケーションを設定する"

#: ../../narr/introduction.rst:103
msgid ""
":app:`Pyramid` allows you to keep your configuration right next to your "
"code. That way you don't have to switch files to see your configuration. "
"For example:"
msgstr "：app： `Pyramid`はあなたのコードのすぐ隣にあなたの設定を保つことを可能にします。そうすれば、設定を見るためにファイルを切り替える必要はありません。例えば："

#: ../../narr/introduction.rst:114
msgid ""
"However, using :app:`Pyramid` configuration decorators does not change "
"your code. It remains easy to extend, test, or reuse. You can test your "
"code as if the decorators were not there. You can instruct the framework "
"to ignore some decorators. You can even use an imperative style to write "
"your configuration, skipping decorators entirely."
msgstr "ただし、：app： `Pyramid`設定デコレータを使用してもコードは変更されません。拡張、テスト、または再利用は容易なままです。あたかもデコレータが存在しないかのようにコードをテストすることができます。いくつかのデコレータを無視するようにフレームワークに指示することができます。あなたは完全にデコレータをスキップして、あなたの設定を書くために命令的なスタイルを使うことさえできます。"

#: ../../narr/introduction.rst:118
msgid "See also :ref:`mapping_views_using_a_decorator_section`."
msgstr "参照：ref： `mapping_views_using_a_decorator_section`を参照してください。"

#: ../../narr/introduction.rst:121
msgid "Generate application URLs"
msgstr "アプリケーションのURLを生成する"

#: ../../narr/introduction.rst:123
msgid ""
"Dynamic web applications produce URLs that can change depending on what "
"you are viewing. :app:`Pyramid` provides flexible, consistent, easy to "
"use tools for generating URLs. When you use these tools to write your "
"application, you can change your configuration without fear of breaking "
"links in your web pages."
msgstr "動的Webアプリケーションでは、表示している内容に応じて変更できるURLが生成されます。 ：app： `Pyramid`は柔軟で、一貫性があり、使いやすいツールを提供します。これらのツールを使用してアプリケーションを作成すると、Webページのリンクを壊すことなく、設定を変更できます。"

#: ../../narr/introduction.rst:127
msgid "See also :ref:`generating_route_urls`."
msgstr "参照：ref： `generate_route_urls`を参照してください。"

#: ../../narr/introduction.rst:130
msgid "Serve static assets"
msgstr "静的資産を提供する"

#: ../../narr/introduction.rst:132
msgid ""
"Web applications often require JavaScript, CSS, images and other so-"
"called *static assets*. :app:`Pyramid` provides flexible tools for "
"serving these kinds of files. You can serve them directly from "
":app:`Pyramid`, or host them on an external server or CDN (content "
"delivery network). Either way, :app:`Pyramid` can help you to generate "
"URLs so you can change where your files come from without changing any "
"code."
msgstr "Webアプリケーションでは、JavaScript、CSS、画像などのいわゆる静的資産が必要になることがあります。 ：app： `Pyramid`は、この種のファイルを扱うための柔軟なツールを提供します。 app： `Pyramid`から直接配信することも、外部のサーバやCDN（コンテンツ配信ネットワーク）でホストすることもできます。どちらの方法でも、：app： `Pyramid`はURLを生成するのに役立ちますので、コードを変更せずにファイルの場所を変更できます。"

#: ../../narr/introduction.rst:136
msgid "See also :ref:`static_assets_section`."
msgstr "参照：ref： `static_assets_section`を参照してください。"

#: ../../narr/introduction.rst:139
msgid "Develop interactively"
msgstr "インタラクティブに開発する"

#: ../../narr/introduction.rst:141
msgid ""
":app:`Pyramid` can automatically detect changes you make to template "
"files and code, so your changes are immediately available in your "
"browser. You can debug using plain old ``print()`` calls, which will "
"display to your console."
msgstr "：app： `Pyramid`は、テンプレートファイルやコードに加えた変更を自動的に検出することができるので、あなたの変更はすぐにブラウザで利用できます。普通の `` print（） ``呼び出しを使ってデバッグできます。これはコンソールに表示されます。"

#: ../../narr/introduction.rst:143
msgid ""
":app:`Pyramid` has a debug toolbar that allows you to see information "
"about how your application is working right in your browser. See "
"configuration, installed packages, SQL queries, logging statements and "
"more."
msgstr "：app： `Pyramid`にはデバッグツールバーがあり、ブラウザでアプリケーションがどのように動作しているかについての情報を見ることができます。構成、インストールされたパッケージ、SQLクエリ、ロギングステートメントなどを参照してください。"

#: ../../narr/introduction.rst:145
msgid ""
"When your application has an error, an interactive debugger allows you to"
" poke around from your browser to find out what happened."
msgstr "アプリケーションにエラーが発生した場合、インタラクティブなデバッガを使用すると、ブラウザから何か起きたことを知ることができます。"

#: ../../narr/introduction.rst:147
msgid ""
"To use the :app:`Pyramid` debug toolbar, build your project with a "
":app:`Pyramid` :term:`cookiecutter`."
msgstr "：app： `Pyramid`デバッグツールバーを使うには、：app：` Pyramid`：term： `cookiecutter`を使ってプロジェクトをビルドします。"

#: ../../narr/introduction.rst:151
msgid "See also :ref:`debug_toolbar`."
msgstr "参照：ref： `debug_toolbar`を参照してください。"

#: ../../narr/introduction.rst:154
msgid "Debug with power"
msgstr "電源でデバッグする"

#: ../../narr/introduction.rst:156
msgid ""
"When things go wrong, :app:`Pyramid` gives you powerful ways to fix the "
"problem."
msgstr "事態がうまくいかないときは、：app： `Pyramid`は、問題を解決する強力な方法を提供します。"

#: ../../narr/introduction.rst:158
msgid ""
"You can configure :app:`Pyramid` to print helpful information to the "
"console. The ``debug_notfound`` setting shows information about URLs that"
" aren't matched. The ``debug_authorization`` setting provides helpful "
"messages about why you aren't allowed to do what you just tried."
msgstr "役に立つ情報をコンソールに表示するには：app： `Pyramid`を設定することができます。 `` debug_notfound``の設定は、一致していないURLに関する情報を表示します。 `` debug_authorization``の設定は、あなたが今試みたことをなぜ許可されていないのかについての有用なメッセージを提供します。"

#: ../../narr/introduction.rst:160
msgid ""
":app:`Pyramid` also has command line tools to help you verify your "
"configuration. You can use ``proutes`` and ``pviews`` to inspect how URLs"
" are connected to your application code."
msgstr "：app： `Pyramid`には、あなたの設定を確認するためのコマンドラインツールもあります。 `` proutes``と `` pviews``を使ってURLがアプリケーションコードにどのように接続されているかを調べることができます。"

#: ../../narr/introduction.rst:164
msgid ""
"See also :ref:`debug_authorization_section`, :ref:`command_line_chapter`,"
" and :doc:`../pscripts/index`"
msgstr "参照：ref： `debug_authorization_section`、：ref：` command_line_chapter`、：doc： `../ pscripts / index`も参照してください。"

#: ../../narr/introduction.rst:168
msgid "Extend your application"
msgstr "アプリケーションを拡張する"

#: ../../narr/introduction.rst:170
msgid ""
":app:`Pyramid` add-ons extend the core of the framework with useful "
"abilities. There are add-ons available for your favorite template "
"language, SQL and NoSQL databases, authentication services and more."
msgstr "：app： `Pyramid`アドオンは、フレームワークの核心を有用な能力で拡張します。あなたのお気に入りのテンプレート言語、SQLとNoSQLのデータベース、認証サービスなどに利用できるアドオンがあります。"

#: ../../narr/introduction.rst:172
msgid ""
"Supported :app:`Pyramid` add-ons are held to the same demanding standards"
" as the framework itself. You will find them to be fully tested and well "
"documented."
msgstr "サポートされている：app： `Pyramid`アドオンは、フレームワーク自体と同じ厳しい基準で保持されています。完全にテストされ、十分に文書化されていることがわかります。"

#: ../../narr/introduction.rst:176
msgid "See also https://trypyramid.com/resources-extending-pyramid.html"
msgstr "https://trypyramid.com/resources-extending-pyramid.htmlも参照してください。"

#: ../../narr/introduction.rst:179
msgid "Write your views, *your* way"
msgstr "あなたの意見を書いてください。"

#: ../../narr/introduction.rst:181
msgid ""
"A fundamental task for any framework is to map URLs to code. In "
":app:`Pyramid`, that code is called a :term:`view callable`. View "
"callables can be functions, class methods or even callable class "
"instances. You are free to choose the approach that best fits your use "
"case. Regardless of your choice, :app:`Pyramid` treats them the same. You"
" can change your mind at any time without any penalty. There are no "
"artificial distinctions between the various approaches."
msgstr "任意のフレームワークの基本的なタスクは、URLをコードにマップすることです。 In：app： `Pyramid`、そのコードは：term：` view callable`と呼ばれます。表示可能な呼び出しは、関数、クラスメソッド、または呼び出し可能なクラスインスタンスでもあります。ユースケースに最も適した方法を自由に選択できます。あなたの選択にかかわらず、：app： `Pyramid`はそれらを同じように扱います。ペナルティなしでいつでもあなたの心を変えることができます。さまざまなアプローチの間に人為的な違いはありません。"

#: ../../narr/introduction.rst:183
msgid "Here's a view callable defined as a function:"
msgstr "ここでは関数として定義されたビュー呼び出し可能関数を示します："

#: ../../narr/introduction.rst:195
msgid "Here's a few views defined as methods of a class instead:"
msgstr "代わりにクラスのメソッドとして定義されたいくつかのビューを次に示します。"

#: ../../narr/introduction.rst:217
msgid "See also :ref:`view_config_placement`."
msgstr "参照：ref： `view_config_placement`を参照してください。"

#: ../../narr/introduction.rst:222
msgid "Find *your* static assets"
msgstr "*あなたの*静的資産を見つける"

#: ../../narr/introduction.rst:224
msgid ""
"In many web frameworks, the static assets required by an application are "
"kept in a globally shared location, \"the *static* directory\". Others "
"use a lookup scheme, like an ordered set of template directories. Both of"
" these approaches have problems when it comes to customization."
msgstr "多くのWebフレームワークでは、アプリケーションが必要とする静的資産は、グローバルに共有される場所の静的ディレクトリ*に保持されます。他のものは、テンプレートディレクトリの順序付けされたセットのようなルックアップスキームを使用します。これらのアプローチのどちらも、カスタマイズには問題があります。"

#: ../../narr/introduction.rst:226
msgid ""
":app:`Pyramid` takes a different approach. Static assets are located "
"using *asset specifications*, strings that contain reference both to a "
"Python package name and a file or directory name, e.g. "
"``MyPackage:static/index.html``. These specifications are used for "
"templates, JavaScript and CSS, translation files, and any other package-"
"bound static resource. By using asset specifications, :app:`Pyramid` "
"makes it easy to extend your application with other packages without "
"worrying about conflicts."
msgstr "：app： `Pyramid`は別のアプローチをとっています。静的資産は、* asset specification *を使用して検索されます。文字列には、Pythonパッケージ名とファイルまたはディレクトリ名の両方に参照が含まれます。たとえば、 `` MyPackage：static / index.html``などです。これらの仕様は、テンプレート、JavaScript、CSS、翻訳ファイル、およびその他のパッケージにバインドされた静的リソースに使用されます。アセット仕様を使うことで、：app： `Pyramid`は競合を心配することなく他のパッケージでアプリケーションを簡単に拡張できます。"

#: ../../narr/introduction.rst:228
msgid ""
"What happens if another :app:`Pyramid` package you are using provides an "
"asset you need to customize? Maybe that page template needs better HTML, "
"or you want to update some CSS. With asset specifications you can "
"override the assets from other packages using simple wrappers."
msgstr "あなたが使用している別の：app： `Pyramid`パッケージがあなたがカスタマイズする必要のある資産を提供するとどうなりますか？たぶん、そのページテンプレートがより良いHTMLを必要とするか、あるいはいくつかのCSSを更新したいと思うかもしれません。アセット仕様を使用すると、単純なラッパーを使用して他のパッケージからアセットをオーバーライドできます。"

#: ../../narr/introduction.rst:230
msgid ""
"Examples: :ref:`asset_specifications` and "
":ref:`overriding_assets_section`."
msgstr "例：：ref： `asset_specifications`と：ref：` overriding_assets_section`です。"

#: ../../narr/introduction.rst:233
msgid "Use *your* templates"
msgstr "*あなたの*テンプレートを使用する"

#: ../../narr/introduction.rst:235
msgid ""
"In :app:`Pyramid`, the job of creating a ``Response`` belongs to a "
":term:`renderer`. Any templating system—Mako, Chameleon, Jinja2—can be a "
"renderer. In fact, packages exist for all of these systems. But if you'd "
"rather use another, a structured API exists allowing you to create a "
"renderer using your favorite templating system. You can use the "
"templating system *you* understand, not one required by the framework."
msgstr "In：app： `Pyramid`、` `Response``を作成する仕事は：term：` renderer`に属します。どのテンプレートシステム（Mako、Chameleon、Jinja2）もレンダラになります。実際、これらのシステムのすべてにパッケージが存在します。しかし、別のものを使用する場合は、構造化されたAPIが存在し、お気に入りのテンプレートシステムを使用してレンダラーを作成することができます。フレームワークが必要とするものではなく、あなたが理解しているテンプレートシステム*を使うことができます。"

#: ../../narr/introduction.rst:237
msgid ""
"What's more, :app:`Pyramid` does not make you use a single templating "
"system exclusively.  You can use multiple templating systems, even in the"
" same project."
msgstr "さらに：app： `Pyramid`では、単一のテンプレートシステムだけを使用するわけではありません。同じプロジェクトでも、複数のテンプレートシステムを使用できます。"

#: ../../narr/introduction.rst:239
msgid "Example: :ref:`templates_used_directly`."
msgstr "例：：ref： `templates_used_directly`です。"

#: ../../narr/introduction.rst:242
msgid "Write testable views"
msgstr "テスト可能なビューを作成する"

#: ../../narr/introduction.rst:244
msgid ""
"When you use a :term:`renderer` with your view callable, you are freed "
"from needing to return a \"webby\" ``Response`` object. Instead your "
"views can return a simple Python dictionary. :app:`Pyramid` will take "
"care of rendering the information in that dictionary to a ``Response`` on"
" your behalf. As a result, your views are more easily tested, since you "
"don't need to parse HTML to evaluate the results. :app:`Pyramid` makes it"
" a snap to write unit tests for your views, instead of requiring you to "
"use functional tests."
msgstr "ビューを呼び出し可能にして：term： `renderer`を使うと、\&quot; webby \ &quot;` `Response``オブジェクトを返す必要がなくなります。代わりに、あなたのビューは単純なPython辞書を返すことができます。 ：app： `Pyramid`は、あなたのために、その辞書の情報を` `Response``にレンダリングします。その結果、結果を評価するためにHTMLを解析する必要がないため、ビューはより簡単にテストされます。 ：app： `Pyramid`は、機能テストを使用するのではなく、ビューの単体テストを書くことを簡単にします。"

#: ../../narr/introduction.rst:252
msgid ""
"For example, a typical web framework might return a ``Response`` object "
"from a ``render_to_response`` call:"
msgstr "例えば、典型的なWebフレームワークは `` render_to_response``呼び出しから `` Response``オブジェクトを返すかもしれません："

#: ../../narr/introduction.rst:263
msgid ""
"While you *can* do this in :app:`Pyramid`, you can also return a Python "
"dictionary:"
msgstr "あなたはapp： `Pyramid`でこれを行うことができますが、Python辞書を返すこともできます："

#: ../../narr/introduction.rst:274
msgid ""
"By configuring your view to use a renderer, you tell :app:`Pyramid` to "
"use the ``{'a':1}`` dictionary and the specified template to render a "
"response on your behalf."
msgstr "レンダラーを使用するようにビューを設定することで、app： `Pyramid`に` `{&#39;a&#39;：1}` `辞書と指定されたテンプレートを使用してあなたの代わりに応答を表示します。"

#: ../../narr/introduction.rst:276
msgid ""
"The string passed as ``renderer=`` above is an :term:`asset "
"specification`. Asset specifications are widely used in :app:`Pyramid`. "
"They allow for more reliable customization. See :ref:`intro_asset_specs` "
"for more information."
msgstr "上記の `` renderer = ``として渡される文字列は：term： `asset specification`です。アセットの仕様は、app： `Pyramid`で広く使用されています。彼らはより信頼性の高いカスタマイズを可能にします。詳細は、：ref： `intro_asset_specs`を参照してください。"

#: ../../narr/introduction.rst:278
msgid "Example: :ref:`renderers_chapter`."
msgstr "例：：ref： `renderers_chapter`です。"

#: ../../narr/introduction.rst:281
msgid "Use events to coordinate actions"
msgstr "イベントを使用してアクションを調整する"

#: ../../narr/introduction.rst:283
msgid ""
"When writing web applications, it is often important to have your code "
"run at a specific point in the lifecycle of a request. In :app:`Pyramid`,"
" you can accomplish this using *subscribers* and *events*."
msgstr "Webアプリケーションを記述する際には、要求のライフサイクルの特定の時点でコードを実行することが重要な場合があります。 In：app： `Pyramid`では、* subscribers *と* events *を使ってこれを実現できます。"

#: ../../narr/introduction.rst:285
msgid ""
"For example, you might have a job that needs to be done each time your "
"application handles a new request. :app:`Pyramid` emits a ``NewRequest`` "
"event at this point in the request handling lifecycle. You can register "
"your code as a subscriber to this event using a clear, declarative style:"
msgstr "たとえば、アプリケーションが新しい要求を処理するたびに実行する必要があるジョブがあるとします。 ：app： `Pyramid`はリクエスト処理ライフサイクルのこの時点で` `NewRequest``イベントを送出します。明確な宣言スタイルを使用して、コードをサブスクライバとしてこのイベントに登録することができます。"

#: ../../narr/introduction.rst:296
msgid ""
":app:`Pyramid`\\ 's event system can be extended as well. If you need, "
"you can create events of your own and send them using :app:`Pyramid`\\ 's"
" event system. Then anyone working with your application can subscribe to"
" your events and coordinate their code with yours."
msgstr "：app： `Pyramid` \\のイベントシステムも拡張できます。必要な場合は、あなた自身のイベントを作成し、app： `Pyramid` \\のイベントシステムを使用して送信することができます。それで、あなたのアプリケーションを使って作業している人なら誰でもあなたのイベントを購読して、あなたのコードとあなたのコードを調整することができます。"

#: ../../narr/introduction.rst:298
msgid "Example: :ref:`events_chapter` and :ref:`event_types`."
msgstr "例：：ref： `events_chapter`と：ref：` event_types`です。"

#: ../../narr/introduction.rst:301
msgid "Build international applications"
msgstr "国際的なアプリケーションを構築する"

#: ../../narr/introduction.rst:303
msgid ""
":app:`Pyramid` ships with internationalization-related features in its "
"core: localization, pluralization, and creating message catalogs from "
"source files and templates.  :app:`Pyramid` allows for a plurality of "
"message catalogs via the use of translation domains.  You can create a "
"system that has its own translations without conflict with other "
"translations in other domains."
msgstr "：app： `Pyramid`は、ローカリゼーション、多元化、ソースファイルやテンプレートからのメッセージカタログの作成という、国際化関連の機能を核にしています。 ：app： `Pyramid`は、翻訳ドメインを使用して複数のメッセージカタログを可能にします。他のドメインの他の翻訳と矛盾することなく、独自の翻訳を持つシステムを作成することができます。"

#: ../../narr/introduction.rst:305
msgid "Example: :ref:`i18n_chapter`."
msgstr "例：：ref： `i18n_chapter`です。"

#: ../../narr/introduction.rst:308
msgid "Build efficient applications"
msgstr "効率的なアプリケーションを構築する"

#: ../../narr/introduction.rst:310
msgid ""
":app:`Pyramid` provides an easy way to *cache* the results of slow or "
"expensive views. You can indicate in view configuration that you want a "
"view to be cached:"
msgstr "：app： `Pyramid`は、遅いまたは高価なビューの結果を簡単にキャッシュする*方法を提供します。ビューの設定で、ビューをキャッシュするように指定することができます。"

#: ../../narr/introduction.rst:318
msgid ""
":app:`Pyramid` will automatically add the appropriate ``Cache-Control`` "
"and ``Expires`` headers to the response it creates."
msgstr "：app： `Pyramid`は自動的に適切な` `Cache-Control``と` Expires``ヘッダを作成したレスポンスに追加します。"

#: ../../narr/introduction.rst:320
msgid ""
"See the :meth:`~pyramid.config.Configurator.add_view` method's "
"``http_cache`` documentation for more information."
msgstr "詳細は、：meth： `〜pyramid.config.Configurator.add_view`メソッドの` `http_cache``ドキュメントを参照してください。"

#: ../../narr/introduction.rst:323
msgid "Build fast applications"
msgstr "高速アプリケーションの構築"

#: ../../narr/introduction.rst:325
msgid ""
"The :app:`Pyramid` core is fast. It has been engineered from the ground "
"up for speed. It only does as much work as absolutely necessary when you "
"ask it to get a job done. If you need speed from your application, "
":app:`Pyramid` is the right choice for you."
msgstr "：app： `Pyramid`コアは高速です。スピードを追求して設計されています。あなたが仕事を遂行するためにそれを求めるとき、それは絶対に必要なだけの仕事をします。アプリケーションからスピードが必要な場合は、：app： `Pyramid`が最適です。"

#: ../../narr/introduction.rst:327
msgid ""
"Example: https://blog.curiasolutions.com/pages/the-great-web-framework-"
"shootout.html"
msgstr "例：https://blog.curiasolutions.com/pages/the-great-web-framework-shootout.html"

#: ../../narr/introduction.rst:330
msgid "Store session data"
msgstr "セッションデータを保存する"

#: ../../narr/introduction.rst:332
msgid ""
":app:`Pyramid` has built-in support for HTTP sessions, so you can "
"associate data with specific users between requests. Lots of other "
"frameworks also support sessions. But :app:`Pyramid` allows you to plug "
"in your own custom sessioning system. So long as your system conforms to "
"a documented interface, you can drop it in in place of the provided "
"system."
msgstr "：app： `Pyramid`には、HTTPセッションの組み込みサポートがあるので、リクエスト間で特定のユーザーとデータを関連付けることができます。他の多くのフレームワークもセッションをサポートしています。しかし、：app： `Pyramid`では、独自のカスタムセッションシステムをプラグインすることができます。システムが文書化されたインターフェイスに準拠している限り、提供されたシステムの代わりにドロップすることができます。"

#: ../../narr/introduction.rst:334
msgid ""
"Currently there is a binding package for the third-party Redis sessioning"
" system that does exactly this. But if you have a specialized need "
"(perhaps you want to store your session data in MongoDB), you can.  You "
"can even switch between implementations without changing your application"
" code."
msgstr "現在、正確にこれを行うサードパーティのRedisセッションシステム用のバインディングパッケージがあります。しかし、特殊なニーズがある場合（多分、セッションデータをMongoDBに保存したい場合）、そうすることができます。アプリケーションコードを変更することなく、実装を切り替えることさえできます。"

#: ../../narr/introduction.rst:336
msgid "Example: :ref:`sessions_chapter`."
msgstr "例：：ref： `sessions_chapter`"

#: ../../narr/introduction.rst:339
msgid "Handle problems with grace"
msgstr "恵みの問題を扱う"

#: ../../narr/introduction.rst:341
msgid ""
"Mistakes happen. Problems crop up. No one writes bug-free code. "
":app:`Pyramid`provides a way to handle the exceptions your code "
"encounters. An :term:`exception view` is a special kind of view which is "
"automatically called when a particular exception type arises without "
"being handled by your application."
msgstr "間違いが起こります。問題が発生する。誰もバグのないコードを書く人はいません。 ：app： `Pyramid`はあなたのコードが遭遇する例外を処理する方法を提供します。 An：term： `例外ビュー &#39;は、アプリケーションによって処理されずに特定の例外タイプが発生したときに自動的に呼び出される特殊なビューです。"

#: ../../narr/introduction.rst:343
msgid ""
"For example, you might register an exception view for the "
":exc:`Exception` exception type, which will catch *all* exceptions, and "
"present a pretty \"well, this is embarrassing\" page.  Or you might "
"choose to register an exception view for only certain application-"
"specific exceptions. You can make one for when a file is not found, or "
"when the user doesn't have permission to do something. In the former "
"case, you can show a pretty \"Not Found\" page; in the latter case you "
"might show a login form."
msgstr "たとえば、：exc： `Exception`例外タイプの例外ビューを登録すると、* all *例外を捕捉して、かなり&quot;うーん、これは恥ずかしい &quot;というページが表示されます。または、特定のアプリケーション固有の例外のみの例外ビューを登録することもできます。ファイルが見つからない場合や、ユーザーが何かを実行する権限を持っていない場合に使用できます。前者の場合は、 &quot;Not Found&quot;ページを表示することができます。後者の場合、ログインフォームを表示することがあります。"

#: ../../narr/introduction.rst:345
msgid "Example: :ref:`exception_views`."
msgstr "例：：ref： `exception_views`。"

#: ../../narr/introduction.rst:348
msgid "And much, much more..."
msgstr "そして、はるかに多く..."

#: ../../narr/introduction.rst:350
msgid ""
":app:`Pyramid` has been built with a number of other sophisticated design"
" features that make it adaptable. Read more about them below."
msgstr "：app： `Pyramid`は他にも洗練されたデザインがいくつか用意されています。それらについて詳しくは以下をご覧ください。"

#: ../../narr/introduction.rst:365
msgid "What Is The Pylons Project?"
msgstr "Pylonsプロジェクトとは何ですか？"

#: ../../narr/introduction.rst:367
msgid ""
":app:`Pyramid` is a member of the collection of software published under "
"the Pylons Project.  Pylons software is written by a loose-knit community"
" of contributors.  The `Pylons Project website "
"<https://pylonsproject.org>`_ includes details about how :app:`Pyramid` "
"relates to the Pylons Project."
msgstr "：app： `Pyramid`は、Pylonsプロジェクトで公開されているソフトウェアのコレクションのメンバーです。 Pylonsソフトウェアは、寄稿者のルーズニットコミュニティによって書かれています。 `Pylons Projectウェブサイト<https://pylonsproject.org> `app：` Pyramid`はPylonsプロジェクトに関連しています。"

#: ../../narr/introduction.rst:377
msgid ":app:`Pyramid` and Other Web Frameworks"
msgstr "：app： `Pyramid`とその他のWebフレームワーク"

#: ../../narr/introduction.rst:379
msgid ""
"The first release of :app:`Pyramid`\\ 's predecessor (named "
":mod:`repoze.bfg`) was made in July of 2008.  At the end of 2010, we "
"changed the name of :mod:`repoze.bfg` to :app:`Pyramid`.  It was merged "
"into the Pylons project as :app:`Pyramid` in November of that year."
msgstr "：app： `Pyramid`の前身（名前：mod：` repoze.bfg`）の最初のリリースは2008年の7月に行われました。2010年の終わりに、mod： `repoze &#39;という名前を変更しました。 bfg`：app： `ピラミッド`。その年の11月にapp： `Pyramid`としてPylonsプロジェクトに統合されました。"

#: ../../narr/introduction.rst:381
msgid ""
":app:`Pyramid` was inspired by :term:`Zope`, :term:`Pylons` (version "
"1.0), and :term:`Django`.  As a result, :app:`Pyramid` borrows several "
"concepts and features from each, combining them into a unique web "
"framework."
msgstr "：app：Pyramidは、term： `Zope`、：term：` Pylons`（バージョン1.0）、 `term：` Django`からインスピレーションを受けています。結果として、：app： `Pyramid`はそれぞれからいくつかの概念と特徴を借用し、それらをユニークなWebフレームワークに結合します。"

#: ../../narr/introduction.rst:383
msgid ""
"Similar to :term:`Zope`, :app:`Pyramid` applications may easily be "
"extended. If you work within the constraints of the framework, you can "
"produce applications that can be reused, modified, or extended without "
"needing to modify the original application code. :app:`Pyramid` also "
"inherits the concepts of :term:`traversal` and declarative security from "
"Zope."
msgstr "term： `Zope`、：app：` Pyramid`アプリケーションは簡単に拡張できます。フレームワークの制約内で作業する場合は、元のアプリケーションコードを変更することなく、再利用、変更、拡張が可能なアプリケーションを作成できます。 ：app： `Pyramid`は、term：` traversal`とZopeの宣言型セキュリティという概念も継承しています。"

#: ../../narr/introduction.rst:385
msgid ""
"Similar to :term:`Pylons` version 1.0, :app:`Pyramid` is largely free of "
"policy. It makes no assertions about which database or template system "
"you should use. You are free to use whatever third-party components fit "
"the needs of your specific application. :app:`Pyramid` also inherits its "
"approach to :term:`URL dispatch` from Pylons."
msgstr "term： `Pylons`バージョン1.0と同様：：app：` Pyramid`はほとんどポリシーから解放されています。どのデータベースやテンプレートシステムを使用すべきかについては何の主張もしていません。特定のアプリケーションのニーズに合ったサードパーティのコンポーネントを自由に使用できます。 ：app： `Pyramid`はPylonsからterm：` URL dispatch`へのアプローチも継承しています。"

#: ../../narr/introduction.rst:387
msgid ""
"Similar to :term:`Django`, :app:`Pyramid` values extensive documentation."
" In addition, the concept of a :term:`view` is used by :app:`Pyramid` "
"much as it would be by Django."
msgstr "term： `Django`と同様：：app：` Pyramid`は広範なドキュメントを評価します。さらに、：term： `view`のコンセプトは、app：` Pyramid`によってDjangoのように使われます。"

#: ../../narr/introduction.rst:389
#, python-format
msgid ""
"Other Python web frameworks advertise themselves as members of a class of"
" web frameworks named `model-view-controller "
"<https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller>`_ "
"frameworks. The authors of :app:`Pyramid` do not believe that the MVC "
"pattern fits the web particularly well. However, if this abstraction "
"works for you, :app:`Pyramid` also generally fits into this class."
msgstr "他のPython Webフレームワークは、 `model-view-controllerという名前のWebフレームワークのクラスのメンバーとして自分自身を宣伝します<https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller> `_フレームワーク。 app： `Pyramid`の作者は、MVCパターンがウェブによく合うとは考えていません。しかし、この抽象化がうまくいくとすれば、：app： `Pyramid`も一般にこのクラスに適合します。"

