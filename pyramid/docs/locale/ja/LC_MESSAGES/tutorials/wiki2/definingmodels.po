# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorials/wiki2/definingmodels.rst:5
msgid "Defining the Domain Model"
msgstr "(機械翻訳)ドメインモデルの定義"

#: ../../tutorials/wiki2/definingmodels.rst:7
msgid ""
"The first change we'll make to our stock cookiecutter-generated "
"application will be to define a wiki page :term:`domain model`."
msgstr "株式cookiecutterで生成されたアプリケーションの最初の変更は、wikiページ：term： `domain model`を定義することです。"

#: ../../tutorials/wiki2/definingmodels.rst:12
msgid ""
"There is nothing special about the filename ``user.py`` or ``page.py`` "
"except that they are Python modules.  A project may have many models "
"throughout its codebase in arbitrarily named modules.  Modules "
"implementing models often have ``model`` in their names or they may live "
"in a Python subpackage of your application package named ``models`` (as "
"we've done in this tutorial), but this is only a convention and not a "
"requirement."
msgstr "ファイル名 `` user.py``や `` page.py``は、Pythonモジュールであることを除いて特別なことは何もありません。プロジェクトは、コードベース全体に任意の名前のモジュールで多くのモデルを持つことができます。モデルを実装するモジュールは、しばしば名前に `` model``を持つか、 `` models``という名前のアプリケーションパッケージのPythonサブパッケージに入っています（このチュートリアルで行ったように）。要件。"

#: ../../tutorials/wiki2/definingmodels.rst:21
msgid "Declaring dependencies in our ``setup.py`` file"
msgstr "`` setup.py``ファイルの依存関係を宣言しています"

#: ../../tutorials/wiki2/definingmodels.rst:23
msgid ""
"The models code in our application will depend on a package which is not "
"a dependency of the original \"tutorial\" application.  The original "
"\"tutorial\" application was generated by the cookiecutter; it doesn't "
"know about our custom application requirements."
msgstr "アプリケーションのモデルコードは、オリジナルの &quot;チュートリアル&quot;アプリケーションの依存関係ではないパッケージに依存します。オリジナルの &quot;チュートリアル&quot;アプリケーションは、cookiecutterによって生成されました。カスタムアプリケーションの要件についてはわかりません。"

#: ../../tutorials/wiki2/definingmodels.rst:28
msgid ""
"We need to add a dependency, the `bcrypt "
"<https://pypi.org/project/bcrypt/>`_ package, to our ``tutorial`` "
"package's ``setup.py`` file by assigning this dependency to the "
"``requires`` parameter in the ``setup()`` function."
msgstr "依存関係を追加する必要があります。 `bcrypt <https://pypi.org/project/bcrypt/> `_パッケージを` `チュートリアル` `パッケージの` `setup.py``ファイルに、` `setup（）` `関数の` `requires``パラメータにこの依存関係を割り当てます。"

#: ../../tutorials/wiki2/definingmodels.rst:32
msgid "Open ``tutorial/setup.py`` and edit it to look like the following:"
msgstr "`` tutorial / setup.py``を開き、以下のように編集してください："

#: ../../tutorials/wiki2/definingmodels.rst:39
msgid "Only the highlighted line needs to be added."
msgstr "強調表示された行だけを追加する必要があります。"

#: ../../tutorials/wiki2/definingmodels.rst:43
msgid ""
"We are using the ``bcrypt`` package from PyPI to hash our passwords "
"securely. There are other one-way hash algorithms for passwords if "
"``bcrypt`` is an issue on your system. Just make sure that it's an "
"algorithm approved for storing passwords versus a generic one-way hash."
msgstr "PyPIの `` bcrypt``パッケージを使ってパスワードを安全にハッシュしています。 `` bcrypt``があなたのシステム上の問題である場合、パスワード用の他の一方向ハッシュアルゴリズムがあります。これは、パスワードの保存に対して一般的な一方向ハッシュに対して承認されたアルゴリズムであることを確認するだけです。"

#: ../../tutorials/wiki2/definingmodels.rst:47
msgid "Running ``pip install -e .``"
msgstr "`` pip install -e .``を実行しています。"

#: ../../tutorials/wiki2/definingmodels.rst:49
msgid ""
"Since a new software dependency was added, you will need to run ``pip "
"install -e .`` again inside the root of the ``tutorial`` package to "
"obtain and register the newly added dependency distribution."
msgstr "新しいソフトウェア依存関係が追加されたので、 `` tutorial``パッケージのルートの中で `` pip install -e .``を再度実行して、新たに追加された依存関係を取得して登録する必要があります。"

#: ../../tutorials/wiki2/definingmodels.rst:53
msgid ""
"Make sure your current working directory is the root of the project (the "
"directory in which ``setup.py`` lives) and execute the following command."
msgstr "現在の作業ディレクトリがプロジェクトのルート（ `` setup.py``が存在するディレクトリ）であることを確認し、次のコマンドを実行してください。"

#: ../../tutorials/wiki2/definingmodels.rst:56
msgid "On UNIX:"
msgstr "UNIXの場合："

#: ../../tutorials/wiki2/definingmodels.rst:62
msgid "On Windows:"
msgstr "Windowsの場合："

#: ../../tutorials/wiki2/definingmodels.rst:68
msgid ""
"Success executing this command will end with a line to the console "
"something like the following."
msgstr "このコマンドを実行すると、次のような行がコンソールに表示されます。"

#: ../../tutorials/wiki2/definingmodels.rst:77
msgid "Remove ``mymodel.py``"
msgstr "`` mymodel.py`を削除する"

#: ../../tutorials/wiki2/definingmodels.rst:79
msgid ""
"Let's delete the file ``tutorial/models/mymodel.py``. The ``MyModel`` "
"class is only a sample and we're not going to use it."
msgstr "ファイル `` tutorial / models / mymodel.py``を削除しましょう。 `` MyModel``クラスは単なるサンプルであり、私たちはそれを使用しません。"

#: ../../tutorials/wiki2/definingmodels.rst:84
msgid "Add ``user.py``"
msgstr "`` user.py``を追加してください"

#: ../../tutorials/wiki2/definingmodels.rst:86
msgid "Create a new file ``tutorial/models/user.py`` with the following contents:"
msgstr "`` tutorial / models / user.py``ファイルを次の内容で作成します："

#: ../../tutorials/wiki2/definingmodels.rst:92
msgid "This is a very basic model for a user who can authenticate with our wiki."
msgstr "これは、私たちのwikiで認証できるユーザーのための非常に基本的なモデルです。"

#: ../../tutorials/wiki2/definingmodels.rst:94
msgid ""
"We discussed briefly in the previous chapter that our models will inherit"
" from an SQLAlchemy :func:`sqlalchemy.ext.declarative.declarative_base`. "
"This will attach the model to our schema."
msgstr "前の章で、私たちのモデルがSQLAlchemy：func： `sqlalchemy.ext.declarative.declarative_base`から継承することを簡単に説明しました。モデルをスキーマに添付します。"

#: ../../tutorials/wiki2/definingmodels.rst:98
msgid ""
"As you can see, our ``User`` class has a class-level attribute "
"``__tablename__`` which equals the string ``users``. Our ``User`` class "
"will also have class-level attributes named ``id``, ``name``, "
"``password_hash``, and ``role`` (all instances of "
":class:`sqlalchemy.schema.Column`). These will map to columns in the "
"``users`` table. The ``id`` attribute will be the primary key in the "
"table. The ``name`` attribute will be a text column, each value of which "
"needs to be unique within the column. The ``password_hash`` is a nullable"
" text attribute that will contain a securely hashed password. Finally, "
"the ``role`` text attribute will hold the role of the user."
msgstr "ご覧のように、 `` User``クラスにはクラスレベルの属性 `` __tablename__``があります。この属性は文字列 `` users``に相当します。私たちの `` User``クラスには `` id``、 `` name``、 `` password_hash``、 `` role``というクラスレベルの属性もあります（class： `sqlalchemy.schema 。列 `）。これらは `` users``テーブルの列にマップされます。 `` id``属性がテーブルの主キーになります。 `` name``属性はテキスト列になり、各値は列内で一意である必要があります。 `` password_hash``は、安全にハッシュされたパスワードを含むnull可能なテキスト属性です。最後に、 `` role``のテキスト属性がユーザの役割を担います。"

#: ../../tutorials/wiki2/definingmodels.rst:108
msgid ""
"There are two helper methods that will help us later when using the user "
"objects. The first is ``set_password`` which will take a raw password and"
" transform it using ``bcrypt`` into an irreversible representation, a "
"process known as \"hashing\". The second method, ``check_password``, will"
" allow us to compare the hashed value of the submitted password against "
"the hashed value of the password stored in the user's record in the "
"database. If the two hashed values match, then the submitted password is "
"valid, and we can authenticate the user."
msgstr "後でユーザーオブジェクトを使用するときに役立つ2つのヘルパーメソッドがあります。最初は `` set_password``です。これは未処理のパスワードをとり、 `` bcrypt``を使って非可逆的な表現に変換します。プロセスは\ &quot;ハッシング\&quot;と呼ばれます。 2番目の方法である `` check_password``では、送信されたパスワードのハッシュ値と、データベースのユーザーレコードに保存されているパスワードのハッシュ値を比較することができます。 2つのハッシュ値が一致すると、送信されたパスワードが有効であり、ユーザーを認証できます。"

#: ../../tutorials/wiki2/definingmodels.rst:116
msgid ""
"We hash passwords so that it is impossible to decrypt them and use them "
"to authenticate in the application. If we stored passwords foolishly in "
"clear text, then anyone with access to the database could retrieve any "
"password to authenticate as any user."
msgstr "私たちはパスワードをハッシュし、解読してアプリケーションで認証することは不可能です。パスワードを平文で愚かに保存した場合、データベースにアクセスできる人は誰でもパスワードを取得して認証することができます。"

#: ../../tutorials/wiki2/definingmodels.rst:123
msgid "Add ``page.py``"
msgstr "`` page.py``を追加してください"

#: ../../tutorials/wiki2/definingmodels.rst:125
msgid "Create a new file ``tutorial/models/page.py`` with the following contents:"
msgstr "`` tutorial / models / page.py``ファイルを次の内容で作成します："

#: ../../tutorials/wiki2/definingmodels.rst:131
msgid ""
"As you can see, our ``Page`` class is very similar to the ``User`` "
"defined above, except with attributes focused on storing information "
"about a wiki page, including ``id``, ``name``, and ``data``. The only new"
" construct introduced here is the ``creator_id`` column, which is a "
"foreign key referencing the ``users`` table. Foreign keys are very useful"
" at the schema-level, but since we want to relate ``User`` objects with "
"``Page`` objects, we also define a ``creator`` attribute as an ORM-level "
"mapping between the two tables. SQLAlchemy will automatically populate "
"this value using the foreign key referencing the user. Since the foreign "
"key has ``nullable=False``, we are guaranteed that an instance of "
"``page`` will have a corresponding ``page.creator``, which will be a "
"``User`` instance."
msgstr "見て分かるように、私たちの `` Page``クラスは、 `` id``、 `` name``、wikiページを含むwikiページに関する情報を格納することに焦点を当てた属性を除けば、上で定義した `` User``と非常に似ています。 「データ」という。ここで紹介した唯一の新しい構文は `` creator_id``カラムで、これは `` users``テーブルを参照する外部キーです。外部キーはスキーマレベルで非常に便利ですが、 `` User``オブジェクトと `` Page``オブジェクトを関連付けるため、 `` creator``属性を2つのORMレベルのマッピングとして定義しますテーブル。 SQLAlchemyは、ユーザーを参照する外部キーを使用してこの値を自動的に設定します。外部キーには `` nullable = False``があるので、 `` page``のインスタンスに対応する `` page.creator``があることが保証されます。これは `` User``インスタンスになります。"

#: ../../tutorials/wiki2/definingmodels.rst:145
msgid "Edit ``models/__init__.py``"
msgstr "``モデル/ __ init __。py``を編集する"

#: ../../tutorials/wiki2/definingmodels.rst:147
msgid ""
"Since we are using a package for our models, we also need to update our "
"``__init__.py`` file to ensure that the models are attached to the "
"metadata."
msgstr "モデルにパッケージを使用しているので、 `` __init __。py``ファイルを更新してモデルがメタデータに添付されていることを確認する必要もあります。"

#: ../../tutorials/wiki2/definingmodels.rst:150
msgid ""
"Open the ``tutorial/models/__init__.py`` file and edit it to look like "
"the following:"
msgstr "`` tutorial / models / __ init __。py``ファイルを開き、以下のように編集してください："

#: ../../tutorials/wiki2/definingmodels.rst:158
msgid ""
"Here we align our imports with the names of the models, ``Page`` and "
"``User``."
msgstr "ここでは、インポートとモデルの名前、 `` Page``、 `` User``を合わせています。"

#: ../../tutorials/wiki2/definingmodels.rst:162
msgid "Edit ``scripts/initializedb.py``"
msgstr "`` scripts / initializedb.py``を編集する"

#: ../../tutorials/wiki2/definingmodels.rst:164
msgid ""
"We haven't looked at the details of this file yet, but within the "
"``scripts`` directory of your ``tutorial`` package is a file named "
"``initializedb.py``. Code in this file is executed whenever we run the "
"``initialize_tutorial_db`` command, as we did in the installation step of"
" this tutorial."
msgstr "このファイルの詳細はまだ見ていませんが、チュートリアルパッケージの `` scripts``ディレクトリに `` initializedb.py``という名前のファイルがあります。このファイルのコードは、このチュートリアルのインストール手順で行ったように、 `` initialize_tutorial_db``コマンドを実行するたびに実行されます。"

#: ../../tutorials/wiki2/definingmodels.rst:171
msgid ""
"The command is named ``initialize_tutorial_db`` because of the mapping "
"defined in the ``[console_scripts]`` entry point of our project's "
"``setup.py`` file."
msgstr "このコマンドは、プロジェクトの `` setup.py``ファイルの `` [console_scripts] ``エントリポイントで定義されたマッピングのため、 `` initialize_tutorial_db``という名前です。"

#: ../../tutorials/wiki2/definingmodels.rst:173
msgid ""
"Since we've changed our model, we need to make changes to our "
"``initializedb.py`` script.  In particular, we'll replace our import of "
"``MyModel`` with those of ``User`` and ``Page``. We'll also change the "
"very end of the script to create two ``User`` objects (``basic`` and "
"``editor``) as well as a ``Page``, rather than a ``MyModel``, and add "
"them to our ``dbsession``."
msgstr "モデルを変更したので、 `` initializedb.py``スクリプトを変更する必要があります。具体的には、MyModelのインポートを `` User``と `` Page``のものに置き換えます。また、スクリプトの最後を &quot;MyModel&quot;ではなく &quot;User&quot;オブジェクト（ `` basic``と `` editor``）と `` Page``を作成するように変更します。 `を` `dbsession``に追加します。"

#: ../../tutorials/wiki2/definingmodels.rst:179
msgid ""
"Open ``tutorial/scripts/initializedb.py`` and edit it to look like the "
"following:"
msgstr "`` tutorial / scripts / initializedb.py``を開き、以下のように編集してください："

#: ../../tutorials/wiki2/definingmodels.rst:187
msgid "Only the highlighted lines need to be changed."
msgstr "強調表示されている行だけを変更する必要があります。"

#: ../../tutorials/wiki2/definingmodels.rst:191
msgid "Installing the project and re-initializing the database"
msgstr "プロジェクトのインストールとデータベースの再初期化"

#: ../../tutorials/wiki2/definingmodels.rst:193
msgid ""
"Because our model has changed, and in order to reinitialize the database,"
" we need to rerun the ``initialize_tutorial_db`` command to pick up the "
"changes we've made to both the models.py file and to the initializedb.py "
"file. See :ref:`initialize_db_wiki2` for instructions."
msgstr "私たちのモデルは変更されており、データベースを再初期化するためには、 `` initialize_tutorial_db``コマンドを再実行して、models.pyファイルとinitializedb.pyファイルの両方の変更を取り上げる必要があります。指示については：ref： `initialize_db_wiki2`を参照してください。"

#: ../../tutorials/wiki2/definingmodels.rst:198
msgid "Success will look something like this:"
msgstr "成功は次のようになります。"

#: ../../tutorials/wiki2/definingmodels.rst:248
msgid "View the application in a browser"
msgstr "ブラウザでアプリケーションを表示する"

#: ../../tutorials/wiki2/definingmodels.rst:250
msgid ""
"We can't.  At this point, our system is in a \"non-runnable\" state; "
"we'll need to change view-related files in the next chapter to be able to"
" start the application successfully.  If you try to start the application"
" (see :ref:`wiki2-start-the-application`), you'll wind up with a Python "
"traceback on your console that ends with this exception:"
msgstr "私たちはできません。この時点で、私たちのシステムは\ &quot;実行不可能な\&quot;状態にあります。次の章のビュー関連のファイルを変更して、アプリケーションを正常に起動できるようにする必要があります。アプリケーションを起動しようとすると（：ref： `wiki2-start-the-application`参照）、この例外で終わるコンソールにPythonのトレースバックが表示されます："

#: ../../tutorials/wiki2/definingmodels.rst:260
msgid "This will also happen if you attempt to run the tests."
msgstr "これは、テストを実行しようとした場合にも発生します。"

