# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-28 18:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorials/wiki/authorization.rst:5
msgid "Adding authorization"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:7
msgid ""
":app:`Pyramid` provides facilities for :term:`authentication` and "
":term:`authorization`. We'll make use of both features to provide "
"security to our application. Our application currently allows anyone with"
" access to the server to view, edit, and add pages to our wiki. We'll "
"change that to allow only people who are members of a *group* named "
"``group:editors`` to add and edit wiki pages, but we'll continue allowing"
" anyone with access to the server to view pages."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:15
msgid ""
"We will also add a login page and a logout link on all the pages.  The "
"login page will be shown when a user is denied access to any of the views"
" that require permission, instead of a default \"403 Forbidden\" page."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:19
msgid "We will implement the access control with the following steps:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:21
msgid "Add password hashing dependencies."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:22
msgid "Add users and groups (``security.py``, a new module)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:23
msgid "Add an :term:`ACL` (``models.py``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:24
msgid ""
"Add an :term:`authentication policy` and an :term:`authorization policy` "
"(``__init__.py``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:26
msgid ""
"Add :term:`permission` declarations to the ``edit_page`` and ``add_page``"
" views (``views.py``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:29
msgid "Then we will add the login and logout features:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:31
msgid "Add ``login`` and ``logout`` views (``views.py``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:32
msgid "Add a login template (``login.pt``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:33
msgid ""
"Make the existing views return a ``logged_in`` flag to the renderer "
"(``views.py``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:35
msgid ""
"Add a \"Logout\" link to be shown when logged in and viewing or editing a"
" page (``view.pt``, ``edit.pt``)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:40
msgid "Access control"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:44
msgid "Add dependencies"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:46
msgid ""
"Just like in :ref:`wiki_defining_views`, we need a new dependency. We "
"need to add the `bcrypt <https://pypi.org/project/bcrypt/>`_ package, to "
"our tutorial package's ``setup.py`` file by assigning this dependency to "
"the ``requires`` parameter in the ``setup()`` function."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:48
msgid "Open ``setup.py`` and edit it to look like the following:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:55
msgid "Only the highlighted line needs to be added."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:57
msgid ""
"Do not forget to run ``pip install -e .`` just like in :ref:`wiki-"
"running-pip-install`."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:61
msgid ""
"We are using the ``bcrypt`` package from PyPI to hash our passwords "
"securely. There are other one-way hash algorithms for passwords if bcrypt"
" is an issue on your system. Just make sure that it's an algorithm "
"approved for storing passwords versus a generic one-way hash."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:65
msgid "Add users and groups"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:67
msgid "Create a new ``tutorial/security.py`` module with the following content:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:73
msgid ""
"The ``groupfinder`` function accepts a userid and a request and returns "
"one of these values:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:76
msgid ""
"If ``userid`` exists in the system, it will return a sequence of group "
"identifiers (or an empty sequence if the user isn't a member of any "
"groups)."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:78
msgid "If the userid *does not* exist in the system, it will return ``None``."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:80
msgid ""
"For example, ``groupfinder('editor', request )`` returns "
"``['group:editor']``, ``groupfinder('viewer', request)`` returns ``[]``, "
"and ``groupfinder('admin', request)`` returns ``None``.  We will use "
"``groupfinder()`` as an :term:`authentication policy` \"callback\" that "
"will provide the :term:`principal` or principals for a user."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:86
msgid ""
"There are two helper methods that will help us later to authenticate "
"users. The first is ``hash_password`` which takes a raw password and "
"transforms it using bcrypt into an irreversible representation, a process"
" known as \"hashing\". The second method, ``check_password``, will allow "
"us to compare the hashed value of the submitted password against the "
"hashed value of the password stored in the user's record. If the two "
"hashed values match, then the submitted password is valid, and we can "
"authenticate the user."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:94
msgid ""
"We hash passwords so that it is impossible to decrypt and use them to "
"authenticate in the application. If we stored passwords foolishly in "
"clear text, then anyone with access to the database could retrieve any "
"password to authenticate as any user."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:99
msgid ""
"In a production system, user and group data will most often be saved and "
"come from a database, but here we use \"dummy\" data to represent user "
"and groups sources."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:103
msgid "Add an ACL"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:105
msgid ""
"Open ``tutorial/models.py`` and add the following import statement near "
"the top:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:113
msgid "Add the following lines to the ``Wiki`` class:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:121
msgid ""
"We import :data:`~pyramid.security.Allow`, an action that means that "
"permission is allowed, and :data:`~pyramid.security.Everyone`, a special "
":term:`principal` that is associated to all requests.  Both are used in "
"the :term:`ACE` entries that make up the ACL."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:126
msgid ""
"The ACL is a list that needs to be named ``__acl__`` and be an attribute "
"of a class.  We define an :term:`ACL` with two :term:`ACE` entries: the "
"first entry allows any user the ``view`` permission.  The second entry "
"allows the ``group:editors`` principal the ``edit`` permission."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:131
msgid ""
"The ``Wiki`` class that contains the ACL is the :term:`resource` "
"constructor for the :term:`root` resource, which is a ``Wiki`` instance."
"  The ACL is provided to each view in the :term:`context` of the request "
"as the ``context`` attribute."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:136
msgid ""
"It's only happenstance that we're assigning this ACL at class scope.  An "
"ACL can be attached to an object *instance* too; this is how \"row level "
"security\" can be achieved in :app:`Pyramid` applications.  We actually "
"need only *one* ACL for the entire system, however, because our security "
"requirements are simple, so this feature is not demonstrated.  See "
":ref:`assigning_acls` for more information about what an :term:`ACL` "
"represents."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:144
msgid "Add authentication and authorization policies"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:146
msgid "Open ``tutorial/__init__.py`` and add the highlighted import statements:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:155
msgid "Now add those policies to the configuration:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:163
msgid "Only the highlighted lines need to be added."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:165
msgid ""
"We are enabling an ``AuthTktAuthenticationPolicy``, which is based in an "
"auth ticket that may be included in the request. We are also enabling an "
"``ACLAuthorizationPolicy``, which uses an ACL to determine the *allow* or"
" *deny* outcome for a view."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:170
msgid ""
"Note that the :class:`pyramid.authentication.AuthTktAuthenticationPolicy`"
" constructor accepts two arguments: ``secret`` and ``callback``.  "
"``secret`` is a string representing an encryption key used by the "
"\"authentication ticket\" machinery represented by this policy: it is "
"required.  The ``callback`` is the ``groupfinder()`` function that we "
"created before."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:177
msgid "Add permission declarations"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:178
msgid ""
"Open ``tutorial/views.py`` and add a ``permission='edit'`` parameter to "
"the ``@view_config`` decorators for ``add_page()`` and ``edit_page()``:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:191
#: ../../tutorials/wiki/authorization.rst:210
msgid ""
"Only the highlighted lines, along with their preceding commas, need to be"
" edited and added."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:194
msgid ""
"The result is that only users who possess the ``edit`` permission at the "
"time of the request may invoke those two views."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:197
msgid ""
"Add a ``permission='view'`` parameter to the ``@view_config`` decorator "
"for ``view_wiki()`` and ``view_page()`` as follows:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:213
msgid "This allows anyone to invoke these two views."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:215
msgid ""
"We are done with the changes needed to control access.  The changes that "
"follow will add the login and logout feature."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:219
msgid "Login, logout"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:222
msgid "Add login and logout views"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:224
msgid ""
"We'll add a ``login`` view which renders a login form and processes the "
"post from the login form, checking credentials."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:227
msgid ""
"We'll also add a ``logout`` view callable to our application and provide "
"a link to it.  This view will clear the credentials of the logged in user"
" and redirect back to the front page."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:231
msgid "Add the following import statements to the head of ``tutorial/views.py``:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:239
msgid "All the highlighted lines need to be added or edited."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:241
msgid ""
":meth:`~pyramid.view.forbidden_view_config` will be used to customize the"
" default 403 Forbidden page. :meth:`~pyramid.security.remember` and "
":meth:`~pyramid.security.forget` help to create and expire an auth ticket"
" cookie."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:246
msgid "Now add the ``login`` and ``logout`` views at the end of the file:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:253
msgid "``login()`` has two decorators:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:255
msgid ""
"a ``@view_config`` decorator which associates it with the ``login`` route"
" and makes it visible when we visit ``/login``,"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:257
msgid ""
"a ``@forbidden_view_config`` decorator which turns it into a "
":term:`forbidden view`. ``login()`` will be invoked when a user tries to "
"execute a view callable for which they lack authorization.  For example, "
"if a user has not logged in and tries to add or edit a Wiki page, they "
"will be shown the login form before being allowed to continue."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:263
msgid ""
"The order of these two :term:`view configuration` decorators is "
"unimportant."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:265
msgid ""
"``logout()`` is decorated with a ``@view_config`` decorator which "
"associates it with the ``logout`` route.  It will be invoked when we "
"visit ``/logout``."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:269
msgid "Add the ``login.pt`` Template"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:271
msgid "Create ``tutorial/templates/login.pt`` with the following content:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:276
msgid ""
"The above template is referenced in the login view that we just added in "
"``views.py``."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:280
msgid "Return a ``logged_in`` flag to the renderer"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:282
msgid ""
"Open ``tutorial/views.py`` again. Add a ``logged_in`` parameter to the "
"return value of ``view_page()``, ``add_page()``, and ``edit_page()`` as "
"follows:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:301
#: ../../tutorials/wiki/authorization.rst:333
#: ../../tutorials/wiki/authorization.rst:342
#: ../../tutorials/wiki/authorization.rst:351
#: ../../tutorials/wiki/authorization.rst:361
#: ../../tutorials/wiki/authorization.rst:371
msgid "Only the highlighted lines need to be added or edited."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:303
msgid ""
"The :meth:`pyramid.request.Request.authenticated_userid` will be ``None``"
" if the user is not authenticated, or a userid if the user is "
"authenticated."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:307
msgid "Add a \"Logout\" link when logged in"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:309
msgid ""
"Open ``tutorial/templates/edit.pt`` and ``tutorial/templates/view.pt`` "
"and add the following code as indicated by the highlighted lines."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:318
msgid ""
"The attribute ``tal:condition=\"logged_in\"`` will make the element be "
"included when ``logged_in`` is any user id. The link will invoke the "
"logout view.  The above element will not be included if ``logged_in`` is "
"``None``, such as when a user is not authenticated."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:324
msgid "Reviewing our changes"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:326
msgid "Our ``tutorial/__init__.py`` will look like this when we're done:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:335
msgid "Our ``tutorial/models.py`` will look like this when we're done:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:344
msgid "Our ``tutorial/views.py`` will look like this when we're done:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:353
msgid ""
"Our ``tutorial/templates/edit.pt`` template will look like this when "
"we're done:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:363
msgid ""
"Our ``tutorial/templates/view.pt`` template will look like this when "
"we're done:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:374
msgid "Viewing the application in a browser"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:376
msgid ""
"We can finally examine our application in a browser (See :ref:`wiki-"
"start-the-application`).  Launch a browser and visit each of the "
"following URLs, checking that the result is as expected:"
msgstr ""

#: ../../tutorials/wiki/authorization.rst:380
msgid ""
"http://localhost:6543/ invokes the ``view_wiki`` view.  This always "
"redirects to the ``view_page`` view of the ``FrontPage`` Page resource.  "
"It is executable by any user."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:384
msgid ""
"http://localhost:6543/FrontPage invokes the ``view_page`` view of the "
"``FrontPage`` Page resource. This is because it's the :term:`default "
"view` (a view without a ``name``) for ``Page`` resources.  It is "
"executable by any user."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:389
msgid ""
"http://localhost:6543/FrontPage/edit_page invokes the edit view for the "
"FrontPage object.  It is executable by only the ``editor`` user.  If a "
"different user (or the anonymous user) invokes it, a login form will be "
"displayed.  Supplying the credentials with the username ``editor``, "
"password ``editor`` will display the edit page form."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:395
msgid ""
"http://localhost:6543/add_page/SomePageName invokes the add view for a "
"page. It is executable by only the ``editor`` user.  If a different user "
"(or the anonymous user) invokes it, a login form will be displayed. "
"Supplying the credentials with the username ``editor``, password "
"``editor`` will display the edit page form."
msgstr ""

#: ../../tutorials/wiki/authorization.rst:401
msgid ""
"After logging in (as a result of hitting an edit or add page and "
"submitting the login form with the ``editor`` credentials), we'll see a "
"Logout link in the upper right hand corner.  When we click it, we're "
"logged out, and redirected back to the front page."
msgstr ""

