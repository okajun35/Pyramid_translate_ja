# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../tutorials/wiki/definingviews.rst:5
msgid "Defining Views"
msgstr "(機械翻訳)ビューの定義"

#: ../../tutorials/wiki/definingviews.rst:7
msgid ""
"A :term:`view callable` in a :term:`traversal`-based :app:`Pyramid` "
"application is typically a simple Python function that accepts two "
"parameters: :term:`context` and :term:`request`.  A view callable is "
"assumed to return a :term:`response` object."
msgstr "A：term： `view callable`：term：` traversal`-based：app： `Pyramid`アプリケーションは通常、term：` context`と：term： `request`という2つのパラメータを受け入れる単純なPython関数です。ビューcallableは：term： `response`オブジェクトを返すものとします。"

#: ../../tutorials/wiki/definingviews.rst:14
msgid ""
"A :app:`Pyramid` view can also be defined as callable which accepts "
"*only* a :term:`request` argument.  You'll see this one-argument pattern "
"used in other :app:`Pyramid` tutorials and applications.  Either calling "
"convention will work in any :app:`Pyramid` application; the calling "
"conventions can be used interchangeably as necessary. In "
":term:`traversal`-based applications, URLs are mapped to a context "
":term:`resource`, and since our :term:`resource tree` also represents our"
" application's \"domain model\", we're often interested in the context "
"because it represents the persistent storage of our application.  For "
"this reason, in this tutorial we define views as callables that accept "
"``context`` in the callable argument list.  If you do need the "
"``context`` within a view function that only takes the request as a "
"single argument, you can obtain it via ``request.context``."
msgstr "A：app： `Pyramid`ビューは* only * a：term：` request`引数を受け入れる呼び出し可能関数として定義することもできます。他の：app： `Pyramid`チュートリアルやアプリケーションで使用されているこの1つの引数のパターンが表示されます。いずれかの呼び出し規約は、app： `Pyramid`アプリケーションで動作します。呼び出し規約は必要に応じて互換的に使用できます。 in：term： `traversal`ベースのアプリケーションでは、URLはcontext：term：` resource`にマップされ、term： `resource tree`もアプリケーションの\&quot;ドメインモデル\ &quot;を表します。これは、アプリケーションの永続的なストレージを表すためです。このため、このチュートリアルでは、ビューを呼び出し可能引数リストに `` context``を受け入れる呼び出し可能関数として定義します。要求を単一の引数として取るビュー関数内で `` context``が必要な場合は、 `` request.context` &quot;で取得できます。"

#: ../../tutorials/wiki/definingviews.rst:30
msgid ""
"We're going to define several :term:`view callable` functions, then wire "
"them into :app:`Pyramid` using some :term:`view configuration`."
msgstr "term： `view callable`関数をいくつか定義し、次に：term：` view configuration`を使って：app： `Pyramid`に配線します。"

#: ../../tutorials/wiki/definingviews.rst:35
msgid "Declaring Dependencies in Our ``setup.py`` File"
msgstr "`` setup.py``ファイルの依存関係の宣言"

#: ../../tutorials/wiki/definingviews.rst:37
msgid ""
"The view code in our application will depend on a package which is not a "
"dependency of the original \"tutorial\" application.  The original "
"\"tutorial\" application was generated by the cookiecutter; it doesn't "
"know about our custom application requirements."
msgstr "アプリケーションのビューコードは、オリジナルの &quot;チュートリアル&quot;アプリケーションの依存関係ではないパッケージに依存します。オリジナルの &quot;チュートリアル&quot;アプリケーションは、cookiecutterによって生成されました。カスタムアプリケーションの要件についてはわかりません。"

#: ../../tutorials/wiki/definingviews.rst:42
msgid ""
"We need to add a dependency on the ``docutils`` package to our "
"``tutorial`` package's ``setup.py`` file by assigning this dependency to "
"the ``requires`` parameter in the ``setup()`` function."
msgstr "`` docutils``パッケージの依存関係を ``チュートリアル ``パッケージの `` setup.py``ファイルに追加する必要があります。この依存関係は `` setup（） ``の `` requires``パラメータに割り当てます。 `関数。"

#: ../../tutorials/wiki/definingviews.rst:46
msgid "Open ``setup.py`` and edit it to look like the following:"
msgstr "`` setup.py``を開き、以下のように編集してください："

#: ../../tutorials/wiki/definingviews.rst:53
msgid "Only the highlighted line needs to be added."
msgstr "強調表示された行だけを追加する必要があります。"

#: ../../tutorials/wiki/definingviews.rst:58
msgid "Running ``pip install -e .``"
msgstr "`` pip install -e .``を実行しています。"

#: ../../tutorials/wiki/definingviews.rst:60
msgid ""
"Since a new software dependency was added, you will need to run ``pip "
"install -e .`` again inside the root of the ``tutorial`` package to "
"obtain and register the newly added dependency distribution."
msgstr "新しいソフトウェア依存関係が追加されたので、 `` tutorial``パッケージのルートの中で `` pip install -e .``を再度実行して、新たに追加された依存関係を取得して登録する必要があります。"

#: ../../tutorials/wiki/definingviews.rst:64
msgid ""
"Make sure your current working directory is the root of the project (the "
"directory in which ``setup.py`` lives) and execute the following command."
msgstr "現在の作業ディレクトリがプロジェクトのルート（ `` setup.py``が存在するディレクトリ）であることを確認し、次のコマンドを実行してください。"

#: ../../tutorials/wiki/definingviews.rst:67
msgid "On UNIX:"
msgstr "UNIXの場合："

#: ../../tutorials/wiki/definingviews.rst:74
msgid "On Windows:"
msgstr "Windowsの場合："

#: ../../tutorials/wiki/definingviews.rst:81
msgid ""
"Success executing this command will end with a line to the console "
"something like:"
msgstr "このコマンドを実行すると、次のような行がコンソールに表示されます。"

#: ../../tutorials/wiki/definingviews.rst:90
msgid "Adding view functions in ``views.py``"
msgstr "`` views.py``にビュー関数を追加する"

#: ../../tutorials/wiki/definingviews.rst:92
msgid ""
"It's time for a major change.  Open ``tutorial/views.py`` and edit it to "
"look like the following:"
msgstr "大きな変化の時です。 `` tutorial / views.py``を開き、以下のように編集してください："

#: ../../tutorials/wiki/definingviews.rst:99
msgid ""
"We added some imports and created a regular expression to find "
"\"WikiWords\"."
msgstr "いくつかのインポートを追加し、\ &quot;WikiWords \&quot;を見つける正規表現を作成しました。"

#: ../../tutorials/wiki/definingviews.rst:101
msgid ""
"We got rid of the ``my_view`` view function and its decorator that was "
"added when we originally rendered the ``zodb`` cookiecutter.  It was only"
" an example and isn't relevant to our application."
msgstr "もともと `` zodb`` cookiecutterをレンダリングしたときに追加された `` my_view``ビュー関数とそのデコレータを取り除きました。これは単なる例であり、私たちのアプリケーションには関係ありません。"

#: ../../tutorials/wiki/definingviews.rst:105
msgid ""
"Then we added four :term:`view callable` functions to our ``views.py`` "
"module:"
msgstr "次に、term： `view callable`関数を` `views.py``モジュールに追加しました："

#: ../../tutorials/wiki/definingviews.rst:108
msgid ""
"``view_wiki()`` - Displays the wiki itself. It will answer on the root "
"URL."
msgstr "`` view_wiki（） ``  -  wiki自体を表示します。それはルートURLで答えるでしょう。"

#: ../../tutorials/wiki/definingviews.rst:109
msgid "``view_page()`` - Displays an individual page."
msgstr "`` view_page（） ``  - 個々のページを表示します。"

#: ../../tutorials/wiki/definingviews.rst:110
msgid "``add_page()`` - Allows the user to add a page."
msgstr "`` add_page（） ``  - ユーザーがページを追加できるようにします。"

#: ../../tutorials/wiki/definingviews.rst:111
msgid "``edit_page()`` - Allows the user to edit a page."
msgstr "`` edit_page（） ``  - ユーザがページを編集できるようにします。"

#: ../../tutorials/wiki/definingviews.rst:113
msgid "We'll describe each one briefly in the following sections."
msgstr "以下のセクションでは、それぞれを簡単に説明します。"

#: ../../tutorials/wiki/definingviews.rst:117
msgid ""
"There is nothing special about the filename ``views.py``.  A project may "
"have many view callables throughout its codebase in arbitrarily named "
"files.  Files implementing view callables often have ``view`` in their "
"filenames (or may live in a Python subpackage of your application package"
" named ``views``), but this is only by convention."
msgstr "ファイル名 `` views.py``には何も特別なものはありません。プロジェクトは、コードベース全体で、任意の名前のファイルで多くのビュー呼び出し可能ファイルを持つことができます。ビュー呼び出し可能ファイルを実装しているファイルは、ファイル名に `` view``を持つことが多い（または `` views``という名前のアプリケーションパッケージのPythonサブパッケージにあるかもしれませんが）、これは慣例によるものです。"

#: ../../tutorials/wiki/definingviews.rst:124
msgid "The ``view_wiki`` view function"
msgstr "`` view_wiki``ビュー関数"

#: ../../tutorials/wiki/definingviews.rst:126
msgid ""
"Following is the code for the ``view_wiki`` view function and its "
"decorator:"
msgstr "以下は `` view_wiki``ビュー関数とそのデコレータのコードです："

#: ../../tutorials/wiki/definingviews.rst:133
msgid ""
"In our code, we use an *import* that is *relative* to our package named "
"``tutorial``, meaning we can omit the name of the package in the "
"``import`` and ``context`` statements. In our narrative, however, we "
"refer to a *class* and thus we use the *absolute* form, meaning that the "
"name of the package is included."
msgstr "私たちのコードでは、 `` tutorial``という名前のパッケージに* relative *という* import *を使用しています。つまり、 `` import``と `` context``の中でパッケージの名前を省略することができます。しかし、私たちの物語では、クラス*を参照するので、パッケージの名前が含まれていることを意味する*絶対*形式を使用します。"

#: ../../tutorials/wiki/definingviews.rst:139
msgid ""
"``view_wiki()`` is the :term:`default view` that gets called when a "
"request is made to the root URL of our wiki.  It always redirects to an "
"URL which represents the path to our \"FrontPage\"."
msgstr "`` view_wiki（） ``は、wikiのルートURLへのリクエストがあったときに呼び出される：term： `default view`です。常に\ &quot;FrontPage \&quot;へのパスを表すURLにリダイレクトされます。"

#: ../../tutorials/wiki/definingviews.rst:143
msgid ""
"We provide it with a ``@view_config`` decorator which names the class "
"``tutorial.models.Wiki`` as its context. This means that when a Wiki "
"resource is the context and no :term:`view name` exists in the request, "
"then this view will be used.  The view configuration associated with "
"``view_wiki`` does not use a ``renderer`` because the view callable "
"always returns a :term:`response` object rather than a dictionary. No "
"renderer is necessary when a view returns a response object."
msgstr "私たちは `` @ view_config``デコレータを提供します。このデコレータは、そのコンテキストとして `` tutorial.models.Wiki``というクラスを命名します。つまり、Wikiリソースがコンテキストであり、要求にno：term： `view name`が存在する場合、このビューが使用されます。 `` view_wiki``に関連したビュー設定は、 `` renderer``を使用しません。なぜなら、callableビューは常に辞書ではなく：term： `response`オブジェクトを返すからです。ビューが応答オブジェクトを返すとき、レンダラーは必要ありません。"

#: ../../tutorials/wiki/definingviews.rst:151
msgid ""
"The ``view_wiki`` view callable always redirects to the URL of a Page "
"resource named \"FrontPage\".  To do so, it returns an instance of the "
":class:`pyramid.httpexceptions.HTTPFound` class (instances of which "
"implement the :class:`pyramid.interfaces.IResponse` interface, like "
":class:`pyramid.response.Response` does). It uses the "
":meth:`pyramid.request.Request.route_url` API to construct an URL to the "
"``FrontPage`` page resource (i.e., ``http://localhost:6543/FrontPage``), "
"and uses it as the \"location\" of the ``HTTPFound`` response, forming an"
" HTTP redirect."
msgstr "`` view_wiki``ビューcallableは、常に\ &quot;FrontPage \&quot;という名前のページリソースのURLにリダイレクトします。これを行うには、：class： `pyramid.httpexceptions.HTTPFound`クラスのインスタンスを返します（インスタンスは：class：` pyramid.interfaces.IResponse`インターフェイスを実装しています：class： `pyramid.response.Response`そうです）。 ：meth： `pyramid.request.Request.route_url` APIを使用して` `FrontPage``ページリソース（` `http：// localhost：6543 / FrontPage``）へのURLを構築し、それを使用します`` HTTPFound``レスポンスの\ &quot;location \&quot;として、HTTPリダイレクトを形成します。"

#: ../../tutorials/wiki/definingviews.rst:162
msgid "The ``view_page`` view function"
msgstr "`` view_page``ビュー関数"

#: ../../tutorials/wiki/definingviews.rst:164
msgid "Here is the code for the ``view_page`` view function and its decorator:"
msgstr "`` view_page``ビュー関数とそのデコレータのコードを以下に示します："

#: ../../tutorials/wiki/definingviews.rst:171
msgid ""
"The ``view_page`` function is configured to respond as the default view "
"of a Page resource.  We provide it with a ``@view_config`` decorator "
"which names the class ``tutorial.models.Page`` as its context.  This "
"means that when a Page resource is the context, and no :term:`view name` "
"exists in the request, this view will be used.  We inform :app:`Pyramid` "
"this view will use the ``templates/view.pt`` template file as a "
"``renderer``."
msgstr "`` view_page``関数は、Pageリソースのデフォルトビューとして応答するように設定されています。私たちは `` @ view_config``デコレータを提供します。このデコレータは、そのコンテキストとして `` tutorial.models.Page``というクラスを名付けます。これは、Pageリソースがコンテキストで、リクエストに `term：` view name`が存在しない場合、このビューが使用されることを意味します。 app： `Pyramid`このビューは` `templates / view.pt``テンプレートファイルをレンダラーとして使用します。"

#: ../../tutorials/wiki/definingviews.rst:178
msgid ""
"The ``view_page`` function generates the :term:`reStructuredText` body of"
" a page (stored as the ``data`` attribute of the context passed to the "
"view; the context will be a ``Page`` resource) as HTML.  Then it "
"substitutes an HTML anchor for each *WikiWord* reference in the rendered "
"HTML using a compiled regular expression."
msgstr "`` view_page``関数はページの：term： `reStructuredText`ボディを生成します（ビューに渡されるコンテキストの` `data``属性として保存されます;コンテキストは` `Page``リソースです）。 HTML。次に、コンパイルされた正規表現を使用して、レンダリングされたHTMLの* WikiWord *参照ごとにHTMLアンカーを置き換えます。"

#: ../../tutorials/wiki/definingviews.rst:184
msgid ""
"The curried function named ``check`` is used as the first argument to "
"``wikiwords.sub``, indicating that it should be called to provide a value"
" for each WikiWord match found in the content.  If the wiki (our page's "
"``__parent__``) already contains a page with the matched WikiWord name, "
"the ``check`` function generates a view link to be used as the "
"substitution value and returns it.  If the wiki does not already contain "
"a page with the matched WikiWord name, the function generates an \"add\" "
"link as the substitution value and returns it."
msgstr "`` check``と呼ばれるカリー化された関数は、 `` wikiwords.sub``の最初の引数として使われ、コンテンツ内で見つかる各WikiWordの一致の値を提供するために呼び出されるべきであることを示します。 wiki（私たちのページの `` __parent__``）にWikiWordの名前が一致するページがすでに含まれている場合、 `` check``関数は置換値として使用されるビューリンクを生成して返します。 wikiに一致するWikiWord名のページがまだ含まれていない場合、関数は置換値として\ &quot;add \&quot;リンクを生成して返します。"

#: ../../tutorials/wiki/definingviews.rst:193
msgid ""
"As a result, the ``content`` variable is now a fully formed bit of HTML "
"containing various view and add links for WikiWords based on the content "
"of our current page resource."
msgstr "その結果、 `` content``変数は、現在のページリソースの内容に基づいて、さまざまなビューを含むHTMLの完全に形成されたビットであり、WikiWordsのリンクを追加します。"

#: ../../tutorials/wiki/definingviews.rst:197
msgid ""
"We then generate an edit URL because it's easier to do here than in the "
"template, and we wrap up a number of arguments in a dictionary and return"
" it."
msgstr "テンプレートよりもここでやる方が簡単であるため、編集URLを生成し、辞書にいくつかの引数をまとめて返します。"

#: ../../tutorials/wiki/definingviews.rst:201
msgid ""
"The arguments we wrap into a dictionary include ``page``, ``content``, "
"and ``edit_url``.  As a result, the *template* associated with this view "
"callable (via ``renderer=`` in its configuration) will be able to use "
"these names to perform various rendering tasks.  The template associated "
"with this view callable will be a template which lives in "
"``templates/view.pt``."
msgstr "辞書にラップする引数には、 `` page``、 `` content``、 `` edit_url``などがあります。その結果、このビューを呼び出し可能にする*テンプレート*は、それらの名前を使ってさまざまなレンダリングタスクを実行することができます。このビュー呼び出し可能に関連付けられたテンプレートは `` templates / view.pt``にあるテンプレートになります。"

#: ../../tutorials/wiki/definingviews.rst:207
msgid ""
"Note the contrast between this view callable and the ``view_wiki`` view "
"callable.  In the ``view_wiki`` view callable, we unconditionally return "
"a :term:`response` object.  In the ``view_page`` view callable, we return"
" a *dictionary*.  It is *always* fine to return a :term:`response` object"
" from a :app:`Pyramid` view.  Returning a dictionary is allowed only when"
" there is a :term:`renderer` associated with the view callable in the "
"view configuration."
msgstr "このビューの呼び出し可能と、 `` view_wiki``ビューの呼び出し可能との対比に注意してください。 `` view_wiki``ビューのcallableでは、無条件にa：term： `response`オブジェクトを返します。 `` view_page``ビューのcallableでは、* dictionary *を返します。 ：app： `Pyramid`ビューから：term：` response`オブジェクトを返すことは常に*素晴らしい*です。ビューの設定で呼び出し可能なビューに関連付けられた：term： `renderer`がある場合にのみ、辞書を返すことができます。"

#: ../../tutorials/wiki/definingviews.rst:215
msgid "The ``add_page`` view function"
msgstr "`` add_page``ビュー関数"

#: ../../tutorials/wiki/definingviews.rst:217
msgid "Here is the code for the ``add_page`` view function and its decorator:"
msgstr "`` add_page``ビュー関数とそのデコレータのコードを以下に示します："

#: ../../tutorials/wiki/definingviews.rst:224
msgid ""
"The ``add_page`` function is configured to respond when the context "
"resource is a Wiki and the :term:`view name` is ``add_page``.  We provide"
" it with a ``@view_config`` decorator which names the string ``add_page``"
" as its :term:`view name` (via ``name=``), the class "
"``tutorial.models.Wiki`` as its context, and the renderer named "
"``templates/edit.pt``.  This means that when a Wiki resource is the "
"context, and a :term:`view name` named ``add_page`` exists as the result "
"of traversal, this view will be used.  We inform :app:`Pyramid` this view"
" will use the ``templates/edit.pt`` template file as a ``renderer``.  We "
"share the same template between add and edit views, thus ``edit.pt`` "
"instead of ``add.pt``."
msgstr "`` add_page``関数は、コンテキストリソースがWikiであり、：term： `view name`が` `add_page``であるときに応答するように設定されています。私たちは `` @ view_config``デコレータを提供します。このデコレータは、文字列 `` add_page``をterm： `view name`（` `name =` `を介して）、クラス` `tutorial.models.Wiki` `をコンテキストとして使用し、レンダラを` `templates / edit.pt``と呼びます。つまり、Wikiリソースがコンテキストであり、トラバーサルの結果として `` add_page``という名前のa：term： `view name`が存在する場合、このビューが使用されます。 app： `Pyramid`このビューは、` `templates / edit.pt``テンプレートファイルを` `renderer``として使用します。私たちは、追加ビューと編集ビューの間で同じテンプレートを共有します。つまり、 `` add.pt``ではなく `` edit.pt``です。"

#: ../../tutorials/wiki/definingviews.rst:235
msgid ""
"The ``add_page`` function will be invoked when a user clicks on a "
"WikiWord which isn't yet represented as a page in the system.  The "
"``check`` function within the ``view_page`` view generates URLs to this "
"view.  It also acts as a handler for the form that is generated when we "
"want to add a page resource. The ``context`` of the ``add_page`` view is "
"always a Wiki resource (*not* a Page resource)."
msgstr "`` add_page``関数は、ユーザがまだシステム内のページとして表現されていないWikiWordをクリックしたときに呼び出されます。 `` view_page``ビュー内の `` check``関数は、このビューへのURLを生成します。また、ページリソースを追加するときに生成されるフォームのハンドラとしても機能します。 `` add_page``ビューの `` context``は常にWikiリソースです（ページリソースではありません）。"

#: ../../tutorials/wiki/definingviews.rst:242
msgid ""
"The request :term:`subpath` in :app:`Pyramid` is the sequence of names "
"that are found *after* the :term:`view name` in the URL segments given in"
" the ``PATH_INFO`` of the WSGI request as the result of "
":term:`traversal`.  If our add view is invoked via, e.g., "
"``http://localhost:6543/add_page/SomeName``, the :term:`subpath` will be "
"a tuple: ``('SomeName',)``."
msgstr "app： `Pyramid`の中のrequest：term：` subpath`は、WSGIリクエストの `` PATH_INFO``で与えられたURLセグメントの*：*：*： `view name`の後に* term： `traversal`の結果です。 addビューが、例えば `` http：// localhost：6543 / add_page / SomeName``を介して呼び出された場合、：term： `subpath`は` `（ &#39;SomeName&#39;、）` `のタプルになります。"

#: ../../tutorials/wiki/definingviews.rst:248
msgid ""
"The add view takes the zero\\ :sup:`th` element of the subpath (the wiki "
"page name), and aliases it to the name attribute in order to know the "
"name of the page we're trying to add."
msgstr "addビューは、サブパス（wikiページ名）のゼロ\\：sup： `th`要素をとり、追加しようとしているページの名前を知るためにname属性にエイリアスします。"

#: ../../tutorials/wiki/definingviews.rst:252
msgid ""
"If the view rendering is *not* a result of a form submission (if the "
"expression ``'form.submitted' in request.params`` is ``False``), the view"
" renders a template.  To do so, it generates a \"save url\" which the "
"template uses as the form post URL during rendering.  We're lazy here, so"
" we're trying to use the same template (``templates/edit.pt``) for the "
"add view as well as the page edit view.  To do so, we create a dummy Page"
" resource object in order to satisfy the edit form's desire to have "
"*some* page object exposed as ``page``, and we'll render the template to "
"a response."
msgstr "ビューのレンダリングがフォーム提出の結果でない*（ `` form.modified &#39;が `` False``である場合）、ビューはテンプレートをレンダリングします。これを行うために、テンプレートはレンダリング時にフォームの投稿URLとして使用する\ &quot;保存URL \&quot;を生成します。ここでは怠惰なので、追加ビューとページ編集ビューに同じテンプレート（ `` templates / edit.pt``）を使用しようとしています。これを行うために、* pageオブジェクトを* `` page``として公開する編集フォームの要求を満たすためにダミーのPage resourceオブジェクトを作成し、そのテンプレートをレスポンスにレンダリングします。"

#: ../../tutorials/wiki/definingviews.rst:261
msgid ""
"If the view rendering *is* a result of a form submission (if the "
"expression ``'form.submitted' in request.params`` is ``True``), we grab "
"the page body from the form data, create a Page object using the name in "
"the subpath and the page body, and save it into \"our context\" (the "
"Wiki) using the ``__setitem__`` method of the context. We then redirect "
"back to the ``view_page`` view (the default view for a page) for the "
"newly created page."
msgstr "ビューレンダリング*がフォーム提出の結果である場合（フォーム `` &#39;request.params``の中のform.submittedが `` True``の場合）、フォームデータからページ本文を取得し、ページオブジェクトは、サブパスの名前とページ本文を使用し、コンテキストの `` __setitem__``メソッドを使用して\ &quot;our context \&quot;（Wiki）に保存します。新しく作成したページの `` view_page``ビュー（ページのデフォルトビュー）にリダイレクトします。"

#: ../../tutorials/wiki/definingviews.rst:269
msgid "The ``edit_page`` view function"
msgstr "`` edit_page``ビュー関数"

#: ../../tutorials/wiki/definingviews.rst:271
msgid "Here is the code for the ``edit_page`` view function and its decorator:"
msgstr "`` edit_page``ビュー関数とそのデコレータのコードは次のとおりです："

#: ../../tutorials/wiki/definingviews.rst:278
msgid ""
"The ``edit_page`` function is configured to respond when the context is a"
" Page resource and the :term:`view name` is ``edit_page``.  We provide it"
" with a ``@view_config`` decorator which names the string ``edit_page`` "
"as its :term:`view name` (via ``name=``), the class "
"``tutorial.models.Page`` as its context, and the renderer named "
"``templates/edit.pt``.  This means that when a Page resource is the "
"context, and a :term:`view name` exists as the result of traversal named "
"``edit_page``, this view will be used.  We inform :app:`Pyramid` this "
"view will use the ``templates/edit.pt`` template file as a ``renderer``."
msgstr "`` edit_page``関数は、コンテキストがページリソースであり、：term： `view name`が` `edit_page``であるときに応答するように設定されています。 term： `view name`（` `name =` `を介して）、` `tutorial.models.Page``クラスの文字列` `edit_page``を` `@ view_config``デコレータで提供します。 `をコンテキストとして使用し、レンダラを` `templates / edit.pt``と呼びます。つまり、Pageリソースがコンテキストで、 `` edit_page``という名前のトラバーサルの結果として：term： `view name`が存在する場合、このビューが使用されます。 app： `Pyramid`このビューは、` `templates / edit.pt``テンプレートファイルを` `renderer``として使用します。"

#: ../../tutorials/wiki/definingviews.rst:288
msgid ""
"The ``edit_page`` function will be invoked when a user clicks the \"Edit "
"this Page\" button on the view form.  It renders an edit form but it also"
" acts as the form post view callable for the form it renders.  The "
"``context`` of the ``edit_page`` view will *always* be a Page resource "
"(never a Wiki resource)."
msgstr "`` edit_page``関数は、ユーザがビューフォームの\ &quot;Edit this Page \&quot;ボタンをクリックすると呼び出されます。これは編集フォームをレンダリングしますが、レンダリングするフォームで呼び出すことのできるフォームポストビューとしても機能します。 `` edit_page``ビューの `` context``は常に*ページリソース（決してWikiリソースではありません）になります。"

#: ../../tutorials/wiki/definingviews.rst:293
msgid ""
"If the view execution is *not* a result of a form submission (if the "
"expression ``'form.submitted' in request.params`` is ``False``), the view"
" simply renders the edit form, passing the page resource, and a "
"``save_url`` which will be used as the action of the generated form."
msgstr "ビューの実行がフォームのサブミットの結果でない場合（ビュー `` &#39;form`mitted&#39; in request.params``が `` False``の場合）、ビューは単純にフォームをレンダリングし、ページを渡しますリソースと、生成されたフォームのアクションとして使用される `` save_url``があります。"

#: ../../tutorials/wiki/definingviews.rst:298
msgid ""
"If the view execution *is* a result of a form submission (if the "
"expression ``'form.submitted' in request.params`` is ``True``), the view "
"grabs the ``body`` element of the request parameter and sets it as the "
"``data`` attribute of the page context.  It then redirects to the default"
" view of the context (the page), which will always be the ``view_page`` "
"view."
msgstr "ビューの実行*がフォーム提出の結果である場合（ビュー `` &#39;request.params``の中のform.submittedが `` True``の場合）、ビューは `` body``要素を取得します。 requestパラメータを設定し、それをページコンテキストの `` data``属性として設定します。次に、コンテキストのデフォルトビュー（ページ）にリダイレクトします。このビューは常に `` view_page``ビューになります。"

#: ../../tutorials/wiki/definingviews.rst:305
msgid "Adding templates"
msgstr "テンプレートの追加"

#: ../../tutorials/wiki/definingviews.rst:307
msgid ""
"The ``view_page``, ``add_page`` and ``edit_page`` views that we've added "
"reference a :term:`template`.  Each template is a :term:`Chameleon` "
":term:`ZPT` template.  These templates will live in the ``templates`` "
"directory of our tutorial package.  Chameleon templates must have a "
"``.pt`` extension to be recognized as such."
msgstr "`` view_page``、 `` add_page``、 `` edit_page``ビューは、参照：a：term： `template`を追加しました。各テンプレートは：term： `Chameleon`：term：` ZPT`テンプレートです。これらのテンプレートはチュートリアルパッケージの `` templates``ディレクトリにあります。カメレオンのテンプレートは、そのように認識されるには `` .pt``拡張子を持たなければなりません。"

#: ../../tutorials/wiki/definingviews.rst:314
msgid "The ``view.pt`` template"
msgstr "`` view.pt``テンプレート"

#: ../../tutorials/wiki/definingviews.rst:316
msgid ""
"Rename ``tutorial/templates/mytemplate.pt`` to "
"``tutorial/templates/view.pt`` and edit the emphasized lines to look like"
" the following:"
msgstr "`tutorial / templates / mytemplate.pt``の名前を` `tutorial / templates / view.pt``に変更し、強調された行を以下のように編集します："

#: ../../tutorials/wiki/definingviews.rst:323
msgid ""
"This template is used by ``view_page()`` for displaying a single wiki "
"page. It includes:"
msgstr "このテンプレートは、単一のwikiページを表示するために `` view_page（） ``によって使用されます。それは以下を含む："

#: ../../tutorials/wiki/definingviews.rst:326
msgid ""
"A ``div`` element that is replaced with the ``content`` value provided by"
" the view (lines 37-39).  ``content`` contains HTML, so the ``structure``"
" keyword is used to prevent escaping it (i.e., changing \">\" to "
"\"&gt;\", etc.)"
msgstr "ビューによって提供される `` content``値で置き換えられる `` div``要素です（行37-39）。 `` content``はHTMLを含んでいるので、 `` structure``キーワードはそれをエスケープするのを防ぐために使われます（\ &quot;&gt; \&quot;を\ &quot;&gt; \&quot;などに変更する）"

#: ../../tutorials/wiki/definingviews.rst:329
msgid ""
"A link that points at the \"edit\" URL which invokes the ``edit_page`` "
"view for the page being viewed (lines 41-43)."
msgstr "表示されているページの `` edit_page``ビューを呼び出す\ &quot;編集\&quot; URLを指すリンク（41-43行目）。"

#: ../../tutorials/wiki/definingviews.rst:333
msgid "The ``edit.pt`` template"
msgstr "`` edit.pt``テンプレート"

#: ../../tutorials/wiki/definingviews.rst:335
msgid ""
"Copy ``tutorial/templates/view.pt`` to ``tutorial/templates/edit.pt`` and"
" edit the emphasized lines to look like the following:"
msgstr "`` tutorial / templates / view.pt``を `` tutorial / templates / edit.pt``にコピーし、強調表示された行を以下のように編集します："

#: ../../tutorials/wiki/definingviews.rst:341
msgid ""
"This template is used by ``add_page()`` and ``edit_page()`` for adding "
"and editing a wiki page.  It displays a page containing a form that "
"includes:"
msgstr "このテンプレートは、 `` add_page（） ``と `` edit_page（） ``によってwikiページの追加と編集に使用されます。以下を含むフォームを含むページが表示されます。"

#: ../../tutorials/wiki/definingviews.rst:344
msgid ""
"A 10-row by 60-column ``textarea`` field named ``body`` that is filled "
"with any existing page data when it is rendered (line 46)."
msgstr "既存のページデータがレンダリングされると（行46）、すべてのページデータで満たされる、 `body &#39;という名前の10行×60列の` textarea`フィールド。"

#: ../../tutorials/wiki/definingviews.rst:346
msgid "A submit button that has the name ``form.submitted`` (line 49)."
msgstr "「form.submitted」という名前の送信ボタン（49行目）。"

#: ../../tutorials/wiki/definingviews.rst:348
msgid ""
"The form POSTs back to the ``save_url`` argument supplied by the view "
"(line 44).  The view will use the ``body`` and ``form.submitted`` values."
msgstr "フォームは、ビューが提供する `` save_url``引数に戻ります（行44）。ビューは `` body``と `` form.submitted``の値を使用します。"

#: ../../tutorials/wiki/definingviews.rst:351
msgid ""
"Our templates use a ``request`` object that none of our tutorial views "
"return in their dictionary. ``request`` is one of several names that are "
"available \"by default\" in a template when a template renderer is used. "
"See :ref:`renderer_system_values` for information about other names that "
"are available by default when a template is used as a renderer."
msgstr "私たちのテンプレートは、私たちのチュートリアルビューのどれもが辞書に返されない `` request``オブジェクトを使います。 `` request``は、テンプレートレンダラーが使用されているときに、テンプレート内でデフォルトで利用可能ないくつかの名前の1つです。テンプレートがレンダラーとして使われるときにデフォルトで利用可能な他の名前については、ref： `renderer_system_values`を参照してください。"

#: ../../tutorials/wiki/definingviews.rst:359
msgid "Static assets"
msgstr "静的資産"

#: ../../tutorials/wiki/definingviews.rst:361
msgid ""
"Our templates name static assets, including CSS and images.  We don't "
"need to create these files within our package's ``static`` directory "
"because they were provided at the time we created the project."
msgstr "テンプレートには、CSSや画像などの静的資産の名前が付けられます。これらのファイルは、プロジェクトの作成時に提供されたものであるため、パッケージの `` static``ディレクトリ内に作成する必要はありません。"

#: ../../tutorials/wiki/definingviews.rst:365
msgid ""
"As an example, the CSS file will be accessed via "
"``http://localhost:6543/static/theme.css`` by virtue of the call to the "
"``add_static_view`` directive we've made in the ``__init__.py`` file.  "
"Any number and type of static assets can be placed in this directory (or "
"subdirectories) and are just referred to by URL or by using the "
"convenience method ``static_url``, e.g., "
"``request.static_url('<package>:static/foo.css')`` within templates."
msgstr "例として、CSSファイルは、 `` __init__で作った `` add_static_view``ディレクティブを呼び出すことによって、 `` http：// localhost：6543 / static / theme.css``を介してアクセスされます.py``ファイル。任意の数とタイプの静的アセットをこのディレクトリ（またはサブディレクトリ）に配置することができ、単にURLで、または `` static_url``という便利なメソッドを使用するだけです。たとえば、 `` request.static_url（ &#39; <package> ：static / foo.css &#39;） ``テンプレート内にあります。"

#: ../../tutorials/wiki/definingviews.rst:375
msgid "Viewing the application in a browser"
msgstr "ブラウザでのアプリケーションの表示"

#: ../../tutorials/wiki/definingviews.rst:377
msgid ""
"We can finally examine our application in a browser (See :ref:`wiki-"
"start-the-application`).  Launch a browser and visit each of the "
"following URLs, checking that the result is as expected:"
msgstr "最後に、ブラウザでアプリケーションを調べることができます（参照：ref： `wiki-start-the-application`）。ブラウザを起動し、次の各URLにアクセスして、結果が期待どおりであることを確認します。"

#: ../../tutorials/wiki/definingviews.rst:381
msgid ""
"http://localhost:6543/ invokes the ``view_wiki`` view.  This always "
"redirects to the ``view_page`` view of the ``FrontPage`` Page resource."
msgstr "http：// localhost：6543 / `` view_wiki``ビューを呼び出します。これは常に `` FrontPage``ページリソースの `` view_page``ビューにリダイレクトされます。"

#: ../../tutorials/wiki/definingviews.rst:384
msgid ""
"http://localhost:6543/FrontPage/ invokes the ``view_page`` view of the "
"front page resource.  This is because it's the :term:`default view` (a "
"view without a ``name``) for Page resources."
msgstr "http：// localhost：6543 / FrontPage /は、フロントページリソースの `` view_page``ビューを呼び出します。これは、ページリソースの：term： `default view`（` `name``のないビュー）です。"

#: ../../tutorials/wiki/definingviews.rst:388
msgid ""
"http://localhost:6543/FrontPage/edit_page invokes the edit view for the "
"``FrontPage`` Page resource."
msgstr "http：// localhost：6543 / FrontPage / edit_pageは、 `` FrontPage``ページリソースの編集ビューを呼び出します。"

#: ../../tutorials/wiki/definingviews.rst:391
msgid ""
"http://localhost:6543/add_page/SomePageName invokes the add view for a "
"Page."
msgstr "http：// localhost：6543 / add_page / SomePageNameは、ページの追加ビューを呼び出します。"

#: ../../tutorials/wiki/definingviews.rst:393
msgid ""
"To generate an error, visit http://localhost:6543/add_page which will "
"generate an ``IndexError: tuple index out of range`` error. You'll see an"
" interactive traceback facility provided by :term:`pyramid_debugtoolbar`."
msgstr "エラーを生成するには、http：// localhost：6543 / add_pageを参照してください。これは、 `` IndexError：tuple index to range``エラーを生成します。対話的なトレースバック機能がterm： `pyramid_debugtoolbar`によって提供されます。"

