# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""

#: ../../changes.rst:4
msgid ":app:`Pyramid` Change History"
msgstr "(機械翻訳) :app:`Pyramid` 変更履歴"

#: ../../../CHANGES.txt:4
msgid "1.9.3 (Unreleased)"
msgstr "1.9.3（未リリース）"

#: ../../../CHANGES.txt:6
msgid ""
"Set appropriate ``code`` and ``title`` attributes on the "
"``HTTPClientError`` and ``HTTPServerError`` exception classes. This "
"prevents inadvertently returning a 520 error code. See "
"https://github.com/Pylons/pyramid/pull/3280"
msgstr "`` HTTPClientError``と `` HTTPServerError``例外クラスに適切な `` code``と `` title``属性を設定してください。これにより、誤って520エラーコードが返されることを防ぎます。 https://github.com/Pylons/pyramid/pull/3280を参照してください。"

#: ../../../CHANGES.txt:14
msgid "1.9.2 (2018-04-23)"
msgstr "1.9.2（2018-04-23）"

#: ../../../CHANGES.txt:16
msgid ""
"Pin to ``webob >= 1.7.0`` instead of ``1.7.0rc2`` to avoid accidentally "
"opting users into pre-releases because a downstream dependency allowed "
"it. See https://github.com/Pylons/pyramid/issues/3220"
msgstr "`` 1.7.0rc2``ではなく `` webob&gt; = 1.7.0``に固定してください。 https://github.com/Pylons/pyramid/issues/3220を参照してください。"

#: ../../../CHANGES.txt:20
msgid ""
"Fix ``pyramid.scripting.get_root`` which was broken by the execution "
"policy feature added in the 1.9 release. See "
"https://github.com/Pylons/pyramid/pull/3265"
msgstr "1.9リリースで追加された実行ポリシー機能によって壊れた `` pyramid.scripting.get_root``を修正しました。 https://github.com/Pylons/pyramid/pull/3265を参照してください。"

#: ../../../CHANGES.txt:27
msgid "1.9.1 (2017-07-13)"
msgstr "1.9.1（2017-07-13）"

#: ../../../CHANGES.txt:29
msgid ""
"Add a ``_depth`` and ``_category`` arguments to all of the venusian "
"decorators. The ``_category`` argument can be used to affect which "
"actions are registered when performing a ``config.scan(..., "
"category=...)`` with a specific category. The ``_depth`` argument should "
"be used when wrapping the decorator in your own. This change affects "
"``pyramid.view.view_config``, ``pyramid.view.exception_view_config``, "
"``pyramid.view.forbidden_view_config``, "
"``pyramid.view.notfound_view_config``, ``pyramid.events.subscriber`` and "
"``pyramid.response.response_adapter`` decorators. See "
"https://github.com/Pylons/pyramid/pull/3121 and "
"https://github.com/Pylons/pyramid/pull/3123"
msgstr "すべてのvenusianデコレータに `` _depth``と `` _category``引数を追加してください。 `` _category``引数は、特定のカテゴリで `` config.scan（...、category = ...） ``を実行するときに登録されるアクションに影響を与えるために使用できます。独自のデコレータをラップするときは、 `` _depth``引数を使用する必要があります。この変更は、 `` pyramid.view.view_config``、 `` pyramid.view.exception_view_config``、 `` pyramid.view.forbidden_​​view_config``、 `` pyramid.view.notfound_view_config``、 `` pyramid.events.subscriber ``と `` pyramid.response.response_adapter``のデコレータです。 https://github.com/Pylons/pyramid/pull/3121およびhttps://github.com/Pylons/pyramid/pull/3123を参照してください。"

#: ../../../CHANGES.txt:40
msgid ""
"Fix a circular import which made it impossible to import "
"``pyramid.viewderivers`` before ``pyramid.config``. See "
"https://github.com/Pylons/pyramid/pull/3124"
msgstr "Pyramid.config`の前に `` pyramid.viewderivers``をインポートすることができなかった循環インポートを修正しました。 https://github.com/Pylons/pyramid/pull/3124を参照してください。"

#: ../../../CHANGES.txt:44
msgid ""
"Improve documentation to show the ``pyramid.config.Configurator`` being "
"used as a context manager in more places. See "
"https://github.com/Pylons/pyramid/pull/3126"
msgstr "`` pyramid.config.Configurator``がより多くの場所でコンテキストマネージャとして使用されていることを示すためにドキュメントを改善してください。 https://github.com/Pylons/pyramid/pull/3126を参照してください。"

#: ../../../CHANGES.txt:49
msgid "1.9 (2017-06-26)"
msgstr "1.9（2017-06-26）"

#: ../../../CHANGES.txt:51
msgid "No major changes from 1.9b1."
msgstr "1.9b1からの大きな変更はありません。"

#: ../../../CHANGES.txt:53
msgid "Updated documentation links for ``docs.pylonsproject.org`` to use HTTPS."
msgstr "`` docs.pylonsproject.org``がHTTPSを使うためのドキュメントリンクを更新しました。"

#: ../../../CHANGES.txt:56
msgid "1.9b1 (2017-06-19)"
msgstr "1.9b1（2017-06-19）"

#: ../../../CHANGES.txt:58
msgid ""
"Add an informative error message when unknown predicates are supplied. "
"The new message suggests alternatives based on the list of known "
"predicates. See https://github.com/Pylons/pyramid/pull/3054"
msgstr "未知の述部が提供されているときに、情報メッセージを追加してください。新しいメッセージは、既知の述語のリストに基づいて選択肢を提案します。 https://github.com/Pylons/pyramid/pull/3054を参照してください。"

#: ../../../CHANGES.txt:62
msgid ""
"Added integrity attributes for JavaScripts in cookiecutters, scaffolds, "
"and resulting source files in tutorials. See "
"https://github.com/Pylons/pyramid/issues/2548"
msgstr "チュートリアルのcookiecutters、足場、および結果のソースファイルにJavaScriptの整合性属性を追加しました。 https://github.com/Pylons/pyramid/issues/2548を参照してください。"

#: ../../../CHANGES.txt:66
msgid ""
"Update RELEASING.txt for updating cookiecutters. Change cookiecutter URLs"
" to use shortcut. See https://github.com/Pylons/pyramid/issues/3042"
msgstr "cookiecuttersを更新するためにRELEASING.txtを更新してください。ショートカットを使用するようにcookiecutterのURLを変更してください。 https://github.com/Pylons/pyramid/issues/3042を参照してください。"

#: ../../../CHANGES.txt:70
msgid ""
"Ensure the correct threadlocals are pushed during view execution when "
"invoked from ``request.invoke_exception_view``. See "
"https://github.com/Pylons/pyramid/pull/3060"
msgstr "`` request.invoke_exception_view``から呼び出されたときに、ビューの実行中に正しいスレッドコードがプッシュされていることを確認してください。 https://github.com/Pylons/pyramid/pull/3060を参照してください。"

#: ../../../CHANGES.txt:74
msgid ""
"Fix a bug in which ``pyramid.security.ALL_PERMISSIONS`` failed to return "
"a valid iterator in its ``__iter__`` implementation. See "
"https://github.com/Pylons/pyramid/pull/3074"
msgstr "`` pyramid.security.ALL_PERMISSIONS``が `` __iter__``の実装で有効なイテレータを返さなかったバグを修正しました。 https://github.com/Pylons/pyramid/pull/3074を参照してください。"

#: ../../../CHANGES.txt:78
msgid ""
"Normalize the permission results to a proper class hierarchy. "
"``pyramid.security.ACLAllowed`` is now a subclass of "
"``pyramid.security.Allowed`` and ``pyramid.security.ACLDenied`` is now a "
"subclass of ``pyramid.security.Denied``. See "
"https://github.com/Pylons/pyramid/pull/3084"
msgstr "許可の結果を適切なクラス階層に正規化します。 `` pyramid.security.ACLAllowed``は `` pyramid.security.Allowed``のサブクラスであり、 `` pyramid.security.ACLDenied``は `` pyramid.security.Denied``のサブクラスです。 https://github.com/Pylons/pyramid/pull/3084を参照してください。"

#: ../../../CHANGES.txt:84
msgid ""
"Add a ``quote_via`` argument to ``pyramid.encode.urlencode`` to follow "
"the stdlib's version and enable custom quoting functions. See "
"https://github.com/Pylons/pyramid/pull/3088"
msgstr "`` pyramid.encode.urlencode``に `` quote_via``引数を追加してstdlibのバージョンに従い、カスタム引用関数を有効にします。 https://github.com/Pylons/pyramid/pull/3088を参照してください。"

#: ../../../CHANGES.txt:88
msgid ""
"Support `_query=None` and `_anchor=None` in ``request.route_url`` as well"
" as ``query=None`` and ``anchor=None`` in ``request.resource_url``. "
"Previously this would cause an `?` and a `#`, respectively, in the url "
"with nothing after it. Now the unnecessary parts are dropped from the "
"generated URL. See https://github.com/Pylons/pyramid/pull/3034"
msgstr "`` request.resource_url``と `` query = None``と `` anchor = None``に `_query = None`と` _anchor = None`をサポートしています。これまでは、URLの中に `？`と `＃ &#39;がそれぞれ付いていました。生成されたURLから不要な部分が削除されました。 https://github.com/Pylons/pyramid/pull/3034を参照してください。"

#: ../../../CHANGES.txt:94
msgid ""
"Revamp the ``IRouter`` API used by ``IExecutionPolicy`` to force "
"pushing/popping the request threadlocals. The "
"``IRouter.make_request(environ)`` API has been replaced by "
"``IRouter.request_context(environ)`` which should be used as a context "
"manager. See https://github.com/Pylons/pyramid/pull/3086"
msgstr "`` IExecutionPolicy``で使用される `` IRouter`` APIを、リクエストthreadlocalsのプッシュ/ポップを強制的に行うために改訂します。 `` IRouter.make_request（environ） `` APIはコンテキストマネージャーとして使われる `` IRouter.request_context（environ） ``に置き換えられました。 https://github.com/Pylons/pyramid/pull/3086を参照してください。"

#: ../../../CHANGES.txt:101
msgid "1.9a2 (2017-05-09)"
msgstr "1.9a2（2017-05-09）"

#: ../../../CHANGES.txt:104 ../../../HISTORY.txt:40 ../../../HISTORY.txt:411
#: ../../../HISTORY.txt:561 ../../../HISTORY.txt:604
msgid "Backward Incompatibilities"
msgstr "後方の非互換性"

#: ../../../CHANGES.txt:106
msgid ""
"``request.exception`` and ``request.exc_info`` will only be set if the "
"response was generated by the EXCVIEW tween. This is to avoid any "
"confusion where a response was generated elsewhere in the pipeline and "
"not in direct relation to the original exception. If anyone upstream "
"wants to catch and render responses for exceptions they should set "
"``request.exception`` and ``request.exc_info`` themselves to indicate the"
" exception that was squashed when generating the response."
msgstr "応答がEXCVIEWトゥイーンによって生成された場合にのみ、 `` request.exception``と `` request.exc_info``がセットされます。これは、応答がパイプラインのどこかで生成され、元の例外とは直接関係しない混乱を避けるためです。アップストリームの誰かが例外に対する応答を捕捉してレンダリングしたい場合、応答を生成するときに押しつぶされた例外を示すために、 `` request.exception``と `` request.exc_info``をそれ自身で設定するべきです。"

#: ../../../CHANGES.txt:114
msgid ""
"Similar behavior occurs with ``request.invoke_exception_view`` in which "
"the exception properties are set to reflect the exception if a response "
"is successfully generated by the method."
msgstr "同様の挙動が、 `` request.invoke_exception_view``で発生します。例外のプロパティは、メソッドによって応答が正常に生成された場合に例外を反映するように設定されています。"

#: ../../../CHANGES.txt:118
msgid ""
"This is a very minor incompatibility. Most tweens right now would give "
"priority to the raised exception and ignore ``request.exception``. This "
"change just improves and clarifies that bookkeeping by trying to be more "
"clear about the relationship between the response and its squashed "
"exception. See https://github.com/Pylons/pyramid/pull/3029 and "
"https://github.com/Pylons/pyramid/pull/3031"
msgstr "これは非常に小さな不一致です。現在、ほとんどのtweensは、発生した例外を優先し、 `` request.exception``を無視します。この変更では、レスポンスとその押しつぶされた例外との関係をより明確にしようとすることによって、その簿記が改善され、明確化されます。 https://github.com/Pylons/pyramid/pull/3029およびhttps://github.com/Pylons/pyramid/pull/3031を参照してください。"

#: ../../../CHANGES.txt:126
msgid "1.9a1 (2017-05-01)"
msgstr "1.9a1（2017-05-01）"

#: ../../../CHANGES.txt:129
msgid "Major Features"
msgstr "主な特長"

#: ../../../CHANGES.txt:131
msgid ""
"The file format used by all ``p*`` command line scripts such as "
"``pserve`` and ``pshell``, as well as the ``pyramid.paster.bootstrap`` "
"function is now replaceable thanks to a new dependency on `plaster "
"<https://docs.pylonsproject.org/projects/plaster/en/latest/>`_."
msgstr "`` pserve``や `` pshell``や `` pyramid.paster.bootstrap``などのすべての `` p * ``コマンドラインスクリプトで使用されているファイル形式は、新しい`石膏への依存<https://docs.pylonsproject.org/projects/plaster/en/latest/> `_。"

#: ../../../CHANGES.txt:136
msgid ""
"For now, Pyramid is still shipping with integrated support for the "
"PasteDeploy INI format by depending on the `plaster_pastedeploy "
"<https://github.com/Pylons/plaster_pastedeploy>`_ binding library. This "
"may change in the future."
msgstr "今のところ、Pyramidは `plaster_pastedeployに依存してPasteDeploy INIフォーマットの統合サポートを提供しています<https://github.com/Pylons/plaster_pastedeploy> `バインディングライブラリ。これは将来変更される可能性があります。"

#: ../../../CHANGES.txt:141
msgid "See https://github.com/Pylons/pyramid/pull/2985"
msgstr "https://github.com/Pylons/pyramid/pull/2985を参照してください。"

#: ../../../CHANGES.txt:143
msgid ""
"Added an execution policy hook to the request pipeline. An execution "
"policy has the ability to control creation and execution of the request "
"objects before they enter the rest of the pipeline. This means for a "
"single request environ the policy may create more than one request "
"object."
msgstr "要求パイプラインに実行ポリシーフックを追加しました。実行ポリシーには、要求オブジェクトがパイプラインの残りの部分に入る前に、その要求オブジェクトの作成と実行を制御する機能があります。これは、単一の要求環境に対して、ポリシーが複数の要求オブジェクトを作成する可能性があることを意味します。"

#: ../../../CHANGES.txt:148
msgid ""
"The first library to use this feature is `pyramid_retry "
"<https://docs.pylonsproject.org/projects/pyramid-retry/en/latest/>`_."
msgstr "この機能を使うための最初のライブラリは `pyramid_retry <https://docs.pylonsproject.org/projects/pyramid-retry/en/latest/> `_。"

#: ../../../CHANGES.txt:152
msgid "See https://github.com/Pylons/pyramid/pull/2964"
msgstr "https://github.com/Pylons/pyramid/pull/2964を参照してください。"

#: ../../../CHANGES.txt:154
msgid ""
"CSRF support has been refactored out of sessions and into its own "
"independent API in the ``pyramid.csrf`` module. It supports a pluggable "
"``pyramid.interfaces.ICSRFStoragePolicy`` which can be used to define "
"your own mechanism for generating and validating CSRF tokens. By default,"
" Pyramid continues to use the "
"``pyramid.csrf.LegacySessionCSRFStoragePolicy`` that uses the "
"``request.session.get_csrf_token`` and ``request.session.new_csrf_token``"
" APIs under the hood to preserve compatibility. Two new policies are "
"shipped as well, ``pyramid.csrf.SessionCSRFStoragePolicy`` and "
"``pyramid.csrf.CookieCSRFStoragePolicy`` which will store the CSRF tokens"
" in the session and in a standalone cookie, respectively. The storage "
"policy can be changed by using the new "
"``pyramid.config.Configurator.set_csrf_storage_policy`` config directive."
msgstr "CSRFのサポートは、 `` pyramid.csrf``モジュールの中で、セッションから独立したAPIにリファクタリングされました。これは、プラグイン可能な `` pyramid.interfaces.ICSRFStoragePolicy``をサポートしています。これは、CSRFトークンを生成し、検証する独自のメカニズムを定義するために使用できます。デフォルトでは、Pyramidは互換性を保つために `` request.session.get_csrf_token``と `` request.session.new_csrf_token`` APIをフードの下で使用する `` pyramid.csrf.LegacySessionCSRFStoragePolicy``を引き続き使用します。 CSRFトークンをセッションとスタンドアロンのクッキーにそれぞれ格納する `` pyramid.csrf.SessionCSRFStoragePolicy``と `` pyramid.csrf.CookieCSRFStoragePolicy``の2つの新しいポリシーも出荷されています。ストレージポリシーは、新しい `` pyramid.config.Configurator.set_csrf_storage_policy``設定ディレクティブを使用して変更できます。"

#: ../../../CHANGES.txt:168
msgid ""
"CSRF tokens should be used via the new ``pyramid.csrf.get_csrf_token``, "
"``pyramid.csrf.new_csrf_token`` and ``pyramid.csrf.check_csrf_token`` "
"APIs in order to continue working if the storage policy is changed. Also,"
" the ``pyramid.csrf.get_csrf_token`` function is injected into templates "
"to be used conveniently in UI code."
msgstr "ストレージポリシーが変更された場合、CSRTトークンは、新しいpyramid.csrf.get_csrf_token``、 `` pyramid.csrf.new_csrf_token``、および `` pyramid.csrf.check_csrf_token`` APIを使用して作業を続行する必要があります。また、 `` pyramid.csrf.get_csrf_token``関数はテンプレートに注入され、UIコードに便利に使用されます。"

#: ../../../CHANGES.txt:174 ../../../CHANGES.txt:238
msgid ""
"See https://github.com/Pylons/pyramid/pull/2854 and "
"https://github.com/Pylons/pyramid/pull/3019"
msgstr "https://github.com/Pylons/pyramid/pull/2854およびhttps://github.com/Pylons/pyramid/pull/3019を参照してください。"

#: ../../../CHANGES.txt:178
msgid "Minor Features"
msgstr "マイナー機能"

#: ../../../CHANGES.txt:180
msgid ""
"Support an ``open_url`` config setting in the ``pserve`` section of the "
"config file. This url is used to open a web browser when ``pserve "
"--browser`` is invoked. When this setting is unavailable the ``pserve`` "
"script will attempt to guess the port the server is using from the "
"``server:<server_name>`` section of the config file but there is no "
"requirement that the server is being run in this format so it may fail. "
"See https://github.com/Pylons/pyramid/pull/2984"
msgstr "設定ファイルの `` pserve``セクションで `` open_url``設定をサポートしてください。このurlは `` pserve  -  browser &#39;`が呼び出されたときにウェブブラウザを開くために使われます。この設定が利用できない場合、 `` pserve``スクリプトはサーバが使用しているポートを `` server： <server_name> configファイルの ``セクションには書かれていますが、サーバがこのフォーマットで実行されているため、失敗する可能性はありません。 https://github.com/Pylons/pyramid/pull/2984を参照してください。"

#: ../../../CHANGES.txt:188
msgid ""
"The ``pyramid.config.Configurator`` can now be used as a context manager "
"which will automatically push/pop threadlocals (similar to "
"``config.begin()`` and ``config.end()``). It will also automatically "
"perform a ``config.commit()`` and thus it is only recommended to be used "
"at the top-level of your app. See "
"https://github.com/Pylons/pyramid/pull/2874"
msgstr "`` pyramid.config.Configurator``は、（ `` config.begin（） ``や `` config.end（） ``に似た）スレッドマネージャを自動的にプッシュ/ポップするコンテキストマネージャとして使用できるようになりました。また、 `` config.commit（） ``も自動的に実行されるため、アプリの最上位レベルでのみ使用することをお勧めします。 https://github.com/Pylons/pyramid/pull/2874を参照してください。"

#: ../../../CHANGES.txt:194
msgid ""
"The threadlocals are now available inside any function invoked via "
"``config.include``. This means the only config-time code that cannot rely"
" on threadlocals is code executed from non-actions inside the main. This "
"can be alleviated by invoking ``config.begin()`` and ``config.end()`` "
"appropriately or using the new context manager feature of the "
"configurator. See https://github.com/Pylons/pyramid/pull/2989"
msgstr "threadlocalsは `` config.include``で呼び出された関数の中で利用できるようになりました。つまり、threadlocalsに依存できない唯一のコンフィギュレーションタイムコードは、メイン内部の非アクションから実行されるコードです。これは、 `` config.begin（） ``と `` config.end（） ``を適切に呼び出すか、コンフィギュレータの新しいコンテキストマネージャ機能を使用することで軽減できます。 https://github.com/Pylons/pyramid/pull/2989を参照してください。"

#: ../../../BFG_HISTORY.txt:11 ../../../BFG_HISTORY.txt:57
#: ../../../BFG_HISTORY.txt:101 ../../../BFG_HISTORY.txt:226
#: ../../../BFG_HISTORY.txt:321 ../../../BFG_HISTORY.txt:388
#: ../../../BFG_HISTORY.txt:617 ../../../BFG_HISTORY.txt:760
#: ../../../BFG_HISTORY.txt:906 ../../../BFG_HISTORY.txt:1281
#: ../../../BFG_HISTORY.txt:1290 ../../../BFG_HISTORY.txt:1313
#: ../../../BFG_HISTORY.txt:1355 ../../../BFG_HISTORY.txt:1392
#: ../../../BFG_HISTORY.txt:1431 ../../../BFG_HISTORY.txt:1455
#: ../../../BFG_HISTORY.txt:1584 ../../../BFG_HISTORY.txt:1733
#: ../../../BFG_HISTORY.txt:1821 ../../../BFG_HISTORY.txt:1835
#: ../../../BFG_HISTORY.txt:1861 ../../../BFG_HISTORY.txt:1992
#: ../../../BFG_HISTORY.txt:2264 ../../../BFG_HISTORY.txt:2292
#: ../../../BFG_HISTORY.txt:2342 ../../../BFG_HISTORY.txt:2373
#: ../../../BFG_HISTORY.txt:2430 ../../../BFG_HISTORY.txt:2474
#: ../../../BFG_HISTORY.txt:2609 ../../../BFG_HISTORY.txt:2958
#: ../../../BFG_HISTORY.txt:3163 ../../../BFG_HISTORY.txt:3519
#: ../../../BFG_HISTORY.txt:3585 ../../../BFG_HISTORY.txt:3712
#: ../../../BFG_HISTORY.txt:3731 ../../../BFG_HISTORY.txt:3778
#: ../../../BFG_HISTORY.txt:3980 ../../../BFG_HISTORY.txt:4026
#: ../../../BFG_HISTORY.txt:4047 ../../../BFG_HISTORY.txt:4114
#: ../../../BFG_HISTORY.txt:4185 ../../../BFG_HISTORY.txt:4599
#: ../../../BFG_HISTORY.txt:4953 ../../../BFG_HISTORY.txt:5024
#: ../../../BFG_HISTORY.txt:5277 ../../../BFG_HISTORY.txt:5346
#: ../../../BFG_HISTORY.txt:5505 ../../../BFG_HISTORY.txt:5884
#: ../../../BFG_HISTORY.txt:5942 ../../../BFG_HISTORY.txt:6010
#: ../../../BFG_HISTORY.txt:6021 ../../../BFG_HISTORY.txt:6054
#: ../../../BFG_HISTORY.txt:6175 ../../../CHANGES.txt:202
#: ../../../HISTORY.txt:208 ../../../HISTORY.txt:522 ../../../HISTORY.txt:584
#: ../../../HISTORY.txt:645 ../../../HISTORY.txt:680 ../../../HISTORY.txt:835
#: ../../../HISTORY.txt:1003 ../../../HISTORY.txt:1090
#: ../../../HISTORY.txt:1190 ../../../HISTORY.txt:1551
#: ../../../HISTORY.txt:1849 ../../../HISTORY.txt:1900
#: ../../../HISTORY.txt:1961 ../../../HISTORY.txt:2028
#: ../../../HISTORY.txt:2058 ../../../HISTORY.txt:2345
#: ../../../HISTORY.txt:2363 ../../../HISTORY.txt:2392
#: ../../../HISTORY.txt:2424 ../../../HISTORY.txt:2527
#: ../../../HISTORY.txt:2691 ../../../HISTORY.txt:2730
#: ../../../HISTORY.txt:2748 ../../../HISTORY.txt:2777
#: ../../../HISTORY.txt:2867 ../../../HISTORY.txt:2970
#: ../../../HISTORY.txt:3087 ../../../HISTORY.txt:3096
#: ../../../HISTORY.txt:3114 ../../../HISTORY.txt:3144
#: ../../../HISTORY.txt:3183 ../../../HISTORY.txt:3231
#: ../../../HISTORY.txt:3253 ../../../HISTORY.txt:3535
#: ../../../HISTORY.txt:3610 ../../../HISTORY.txt:3677
#: ../../../HISTORY.txt:3721 ../../../HISTORY.txt:3835
#: ../../../HISTORY.txt:3861 ../../../HISTORY.txt:3938
#: ../../../HISTORY.txt:4139 ../../../HISTORY.txt:4412
#: ../../../HISTORY.txt:4429 ../../../HISTORY.txt:4451
#: ../../../HISTORY.txt:4499 ../../../HISTORY.txt:4580
#: ../../../HISTORY.txt:4705 ../../../HISTORY.txt:4851
#: ../../../HISTORY.txt:5013 ../../../HISTORY.txt:5077
#: ../../../HISTORY.txt:5151 ../../../HISTORY.txt:5256
#: ../../../HISTORY.txt:5334
msgid "Bug Fixes"
msgstr "バグの修正"

#: ../../../CHANGES.txt:204
msgid ""
"HTTPException's accepts a detail kwarg that may be used to pass "
"additional details to the exception. You may now pass objects so long as "
"they have a valid __str__ method. See "
"https://github.com/Pylons/pyramid/pull/2951"
msgstr "HTTPExceptionは、例外に追加の詳細を渡すために使用されるディテールkwargを受け入れます。 __str__メソッドが有効な限り、オブジェクトを渡すことができます。 https://github.com/Pylons/pyramid/pull/2951を参照してください。"

#: ../../../CHANGES.txt:208
msgid ""
"Fix a reference cycle causing memory leaks in which the registry would "
"keep a ``Configurator`` instance alive even after the configurator was "
"discarded. Another fix was also added for the ``global_registries`` "
"object in which the registry was stored in a closure preventing it from "
"being deallocated. See https://github.com/Pylons/pyramid/pull/2967"
msgstr "コンフィグレータが破棄された後でも、レジストリが `` Configurator``インスタンスを生きたままにするメモリリークの原因となる参照サイクルを修正しました。レジストリがクロージャ内に格納されている `` global_registries``オブジェクトに対して、もう一つの修正が追加されました。 https://github.com/Pylons/pyramid/pull/2967を参照してください。"

#: ../../../CHANGES.txt:214
msgid ""
"Fix a bug directly invoking ``pyramid.scripts.pserve.main`` with the "
"``--reload`` option in which ``sys.argv`` is always used in the "
"subprocess instead of the supplied ``argv``. See "
"https://github.com/Pylons/pyramid/pull/2962"
msgstr "指定された `` argv``の代わりに `` sys.argv``が常にサブプロセスで使われる `` --reload``オプションで `` pyramid.scripts.pserve.main``を直接呼び出すバグを修正しました。 。 https://github.com/Pylons/pyramid/pull/2962を参照してください。"

#: ../../../BFG_HISTORY.txt:168 ../../../BFG_HISTORY.txt:770
#: ../../../BFG_HISTORY.txt:1185 ../../../BFG_HISTORY.txt:1615
#: ../../../BFG_HISTORY.txt:2235 ../../../BFG_HISTORY.txt:2317
#: ../../../BFG_HISTORY.txt:2914 ../../../BFG_HISTORY.txt:3086
#: ../../../BFG_HISTORY.txt:3301 ../../../BFG_HISTORY.txt:3492
#: ../../../BFG_HISTORY.txt:3907 ../../../BFG_HISTORY.txt:4119
#: ../../../BFG_HISTORY.txt:4208 ../../../BFG_HISTORY.txt:4280
#: ../../../BFG_HISTORY.txt:4383 ../../../BFG_HISTORY.txt:4458
#: ../../../BFG_HISTORY.txt:4637 ../../../BFG_HISTORY.txt:5404
#: ../../../BFG_HISTORY.txt:5561 ../../../BFG_HISTORY.txt:5589
#: ../../../BFG_HISTORY.txt:5920 ../../../BFG_HISTORY.txt:6060
#: ../../../BFG_HISTORY.txt:6140 ../../../CHANGES.txt:220
#: ../../../HISTORY.txt:247 ../../../HISTORY.txt:531 ../../../HISTORY.txt:551
#: ../../../HISTORY.txt:669 ../../../HISTORY.txt:906 ../../../HISTORY.txt:1143
#: ../../../HISTORY.txt:1377 ../../../HISTORY.txt:1923
#: ../../../HISTORY.txt:2224 ../../../HISTORY.txt:2433
#: ../../../HISTORY.txt:2513 ../../../HISTORY.txt:3417
#: ../../../HISTORY.txt:3669 ../../../HISTORY.txt:3899
#: ../../../HISTORY.txt:4209 ../../../HISTORY.txt:4539
#: ../../../HISTORY.txt:4691 ../../../HISTORY.txt:5196
#: ../../../HISTORY.txt:5287 ../../../HISTORY.txt:5359
msgid "Deprecations"
msgstr "廃止"

#: ../../../CHANGES.txt:222
msgid ""
"Pyramid currently depends on ``plaster_pastedeploy`` to simplify the "
"transition to ``plaster`` by maintaining integrated support for INI "
"files. This dependency on ``plaster_pastedeploy`` should be considered "
"subject to Pyramid's deprecation policy and may be removed in the future."
" Applications should depend on the appropriate plaster binding to satisfy"
" their needs."
msgstr "Pyramidは現在、 `` plaster_pastedeploy``に依存して、INIファイルの統合サポートを維持して ``石膏 &#39;&#39;への移行を単純化しています。 `` plaster_pastedeploy``へのこの依存性は、Pyramidの非推奨ポリシーの対象となり、将来削除される可能性があります。アプリケーションは、ニーズを満たすために適切な石膏製本に依存する必要があります。"

#: ../../../CHANGES.txt:229
msgid ""
"Retrieving CSRF token from the session has been deprecated in favor of "
"equivalent methods in the ``pyramid.csrf`` module. The CSRF methods "
"(``ISession.get_csrf_token`` and ``ISession.new_csrf_token``) are no "
"longer required on the ``ISession`` interface except when using the "
"default ``pyramid.csrf.LegacySessionCSRFStoragePolicy``."
msgstr "セッションからCSRFトークンを取得することは、 `` pyramid.csrf``モジュールの同等のメソッドを使うことを前提に廃止されました。デフォルトの `` pyramid.csrf.LegacySessionCSRFStoragePolicy``を使用する場合を除いて、 `` ISession``インタフェースでCSRFメソッド（ `` ISession.get_csrf_token``と `` Session_new_csrf_token``）は不要になりました。"

#: ../../../CHANGES.txt:235
msgid ""
"Also, ``pyramid.session.check_csrf_token`` is now located at "
"``pyramid.csrf.check_csrf_token``."
msgstr "また、 `` pyramid.session.check_csrf_token``は `` pyramid.csrf.check_csrf_token``にあります。"

#: ../../../CHANGES.txt:242 ../../../HISTORY.txt:17 ../../../HISTORY.txt:268
#: ../../../HISTORY.txt:501
msgid "Documentation Changes"
msgstr "ドキュメントの変更点"

#: ../../../CHANGES.txt:244
msgid ""
"Added the execution policy to the routing diagram in the Request "
"Processing chapter. See https://github.com/Pylons/pyramid/pull/2993"
msgstr "要求処理の章のルーティングダイアグラムに実行ポリシーを追加しました。 https://github.com/Pylons/pyramid/pull/2993を参照してください。"

#: ../../../HISTORY.txt:2
msgid "1.8 (2017-01-21)"
msgstr "1.8（2017-01-21）"

#: ../../../HISTORY.txt:4
msgid "No major changes from 1.8b1."
msgstr "1.8b1から大きな変更はありません。"

#: ../../../HISTORY.txt:7
msgid "1.8b1 (2017-01-17)"
msgstr "1.8b1（2017-01-17）"

#: ../../../BFG_HISTORY.txt:5 ../../../BFG_HISTORY.txt:33
#: ../../../BFG_HISTORY.txt:64 ../../../BFG_HISTORY.txt:107
#: ../../../BFG_HISTORY.txt:243 ../../../BFG_HISTORY.txt:330
#: ../../../BFG_HISTORY.txt:439 ../../../BFG_HISTORY.txt:532
#: ../../../BFG_HISTORY.txt:605 ../../../BFG_HISTORY.txt:660
#: ../../../BFG_HISTORY.txt:893 ../../../BFG_HISTORY.txt:930
#: ../../../BFG_HISTORY.txt:1051 ../../../BFG_HISTORY.txt:1093
#: ../../../BFG_HISTORY.txt:1320 ../../../BFG_HISTORY.txt:1365
#: ../../../BFG_HISTORY.txt:1441 ../../../BFG_HISTORY.txt:1465
#: ../../../BFG_HISTORY.txt:1480 ../../../BFG_HISTORY.txt:1572
#: ../../../BFG_HISTORY.txt:1625 ../../../BFG_HISTORY.txt:1686
#: ../../../BFG_HISTORY.txt:1760 ../../../BFG_HISTORY.txt:1811
#: ../../../BFG_HISTORY.txt:1884 ../../../BFG_HISTORY.txt:2334
#: ../../../BFG_HISTORY.txt:2398 ../../../BFG_HISTORY.txt:2483
#: ../../../BFG_HISTORY.txt:2586 ../../../BFG_HISTORY.txt:2673
#: ../../../BFG_HISTORY.txt:2729 ../../../BFG_HISTORY.txt:2862
#: ../../../BFG_HISTORY.txt:2984 ../../../BFG_HISTORY.txt:3041
#: ../../../BFG_HISTORY.txt:3142 ../../../BFG_HISTORY.txt:3174
#: ../../../BFG_HISTORY.txt:3454 ../../../BFG_HISTORY.txt:3478
#: ../../../BFG_HISTORY.txt:3504 ../../../BFG_HISTORY.txt:3535
#: ../../../BFG_HISTORY.txt:3600 ../../../BFG_HISTORY.txt:3687
#: ../../../BFG_HISTORY.txt:3751 ../../../BFG_HISTORY.txt:3784
#: ../../../BFG_HISTORY.txt:3812 ../../../BFG_HISTORY.txt:4017
#: ../../../BFG_HISTORY.txt:4054 ../../../BFG_HISTORY.txt:4096
#: ../../../BFG_HISTORY.txt:4135 ../../../BFG_HISTORY.txt:4152
#: ../../../BFG_HISTORY.txt:4169 ../../../BFG_HISTORY.txt:4194
#: ../../../BFG_HISTORY.txt:4268 ../../../BFG_HISTORY.txt:4291
#: ../../../BFG_HISTORY.txt:4409 ../../../BFG_HISTORY.txt:4450
#: ../../../BFG_HISTORY.txt:4561 ../../../BFG_HISTORY.txt:4580
#: ../../../BFG_HISTORY.txt:4622 ../../../BFG_HISTORY.txt:4663
#: ../../../BFG_HISTORY.txt:4686 ../../../BFG_HISTORY.txt:4696
#: ../../../BFG_HISTORY.txt:4731 ../../../BFG_HISTORY.txt:4809
#: ../../../BFG_HISTORY.txt:4976 ../../../BFG_HISTORY.txt:5043
#: ../../../BFG_HISTORY.txt:5125 ../../../BFG_HISTORY.txt:5157
#: ../../../BFG_HISTORY.txt:5201 ../../../BFG_HISTORY.txt:5354
#: ../../../BFG_HISTORY.txt:5450 ../../../BFG_HISTORY.txt:5597
#: ../../../BFG_HISTORY.txt:5762 ../../../BFG_HISTORY.txt:5874
#: ../../../BFG_HISTORY.txt:5894 ../../../BFG_HISTORY.txt:5908
#: ../../../BFG_HISTORY.txt:5959 ../../../BFG_HISTORY.txt:6040
#: ../../../BFG_HISTORY.txt:6075 ../../../BFG_HISTORY.txt:6116
#: ../../../BFG_HISTORY.txt:6154 ../../../BFG_HISTORY.txt:6167
#: ../../../BFG_HISTORY.txt:6190 ../../../BFG_HISTORY.txt:6218
#: ../../../HISTORY.txt:10 ../../../HISTORY.txt:81 ../../../HISTORY.txt:382
#: ../../../HISTORY.txt:429 ../../../HISTORY.txt:578 ../../../HISTORY.txt:594
#: ../../../HISTORY.txt:622 ../../../HISTORY.txt:702 ../../../HISTORY.txt:987
#: ../../../HISTORY.txt:998 ../../../HISTORY.txt:1020 ../../../HISTORY.txt:1182
#: ../../../HISTORY.txt:1387 ../../../HISTORY.txt:1685
#: ../../../HISTORY.txt:1865 ../../../HISTORY.txt:1984
#: ../../../HISTORY.txt:2035 ../../../HISTORY.txt:2094
#: ../../../HISTORY.txt:2447 ../../../HISTORY.txt:2562
#: ../../../HISTORY.txt:2678 ../../../HISTORY.txt:2717
#: ../../../HISTORY.txt:2766 ../../../HISTORY.txt:2855
#: ../../../HISTORY.txt:2888 ../../../HISTORY.txt:2928
#: ../../../HISTORY.txt:3078 ../../../HISTORY.txt:3198
#: ../../../HISTORY.txt:3267 ../../../HISTORY.txt:3275
#: ../../../HISTORY.txt:3545 ../../../HISTORY.txt:3600
#: ../../../HISTORY.txt:3621 ../../../HISTORY.txt:3692
#: ../../../HISTORY.txt:3757 ../../../HISTORY.txt:3893
#: ../../../HISTORY.txt:3917 ../../../HISTORY.txt:4027
#: ../../../HISTORY.txt:4484 ../../../HISTORY.txt:4634
#: ../../../HISTORY.txt:4719 ../../../HISTORY.txt:4857
#: ../../../HISTORY.txt:5022 ../../../HISTORY.txt:5107
#: ../../../HISTORY.txt:5216 ../../../HISTORY.txt:5311
msgid "Features"
msgstr "特徴"

#: ../../../HISTORY.txt:12
msgid ""
"Added an ``override`` option to ``config.add_translation_dirs`` to allow "
"later calls to place translation directories at a higher priority than "
"earlier calls. See https://github.com/Pylons/pyramid/pull/2902"
msgstr "`` config.add_translation_dirs``に `` override``オプションを追加して、後の呼び出しで以前の呼び出しよりも高い優先度で翻訳ディレクトリを配置できるようにしました。 https://github.com/Pylons/pyramid/pull/2902を参照してください。"

#: ../../../HISTORY.txt:19
msgid ""
"Improve registry documentation to discuss uses as a component registry "
"and as a dictionary. See https://github.com/Pylons/pyramid/pull/2893"
msgstr "レジストリのドキュメントを改善して、コンポーネントレジストリや辞書としての用途について話し合うhttps://github.com/Pylons/pyramid/pull/2893を参照してください。"

#: ../../../HISTORY.txt:22
msgid ""
"Quick Tour, Quick Tutorial, and most other remaining documentation "
"updated to use cookiecutters instead of pcreate and scaffolds. See "
"https://github.com/Pylons/pyramid/pull/2888 and "
"https://github.com/Pylons/pyramid/pull/2889"
msgstr "クイックツアー、クイックチュートリアル、およびその他のほとんどのドキュメントは、pcreateや足場の代わりにcookiecuttersを使用するように更新されました。 https://github.com/Pylons/pyramid/pull/2888およびhttps://github.com/Pylons/pyramid/pull/2889を参照してください。"

#: ../../../HISTORY.txt:27
msgid ""
"Fix unittests in wiki2 to work without different dependencies between py2"
" and py3. See https://github.com/Pylons/pyramid/pull/2899"
msgstr "py2とpy3の依存関係がなくても動作するようにwiki2のunittestを修正しました。 https://github.com/Pylons/pyramid/pull/2899を参照してください。"

#: ../../../HISTORY.txt:30
msgid ""
"Update Windows documentation to track newer Python 3 improvements to the "
"installer. See https://github.com/Pylons/pyramid/pull/2900"
msgstr "インストーラの最新のPython 3の改善を追跡するために、Windowsのドキュメントを更新してください。 https://github.com/Pylons/pyramid/pull/2900を参照してください。"

#: ../../../HISTORY.txt:33
msgid ""
"Updated the ``mod_wsgi`` tutorial to use cookiecutters and Apache 2.4+. "
"See https://github.com/Pylons/pyramid/pull/2901"
msgstr "cookiecuttersとApache 2.4+を使うための `` mod_wsgi``チュートリアルを更新しました。 https://github.com/Pylons/pyramid/pull/2901を参照してください。"

#: ../../../HISTORY.txt:37
msgid "1.8a1 (2016-12-25)"
msgstr "1.8a1（2016-12-25）"

#: ../../../HISTORY.txt:42
msgid ""
"Support for the ``IContextURL`` interface that was deprecated in Pyramid "
"1.3 has been removed.  See https://github.com/Pylons/pyramid/pull/2822"
msgstr "Pyramid 1.3で廃止された `` IContextURL``インターフェースのサポートが削除されました。 https://github.com/Pylons/pyramid/pull/2822を参照してください。"

#: ../../../HISTORY.txt:45
msgid ""
"Following the Pyramid deprecation period (1.6 -> 1.8), daemon support for"
" pserve has been removed. This includes removing the daemon commands "
"(start, stop, restart, status) as well as the following arguments: "
"``--daemon``, ``--pid-file``, ``--log-file``, ``--monitor-restart``, "
"``--status``, ``--user``, ``--group``, ``--stop-daemon``"
msgstr "ピラミッドの非推奨期間（1.6  - &gt; 1.8）の後、pserveのデーモンサポートは削除されました。これには、デーモンコマンド（start、stop、restart、status）と `` --daemon``、 `` --pid-file``、 `` -log-file``、 `` --monitor-restart``、 `` --status``、 `` --user``、 `` --group``、 `` --stop-daemon``"

#: ../../../HISTORY.txt:52
msgid ""
"To run your server as a daemon you should use a process manager instead "
"of pserve."
msgstr "サーバをデーモンとして実行するには、pserveではなくプロセスマネージャを使用する必要があります。"

#: ../../../HISTORY.txt:55
msgid "See https://github.com/Pylons/pyramid/pull/2615"
msgstr "https://github.com/Pylons/pyramid/pull/2615を参照してください。"

#: ../../../HISTORY.txt:57
msgid ""
"``pcreate`` is now interactive by default. You will be prompted if a file"
" already exists with different content. Previously if there were similar "
"files it would silently skip them unless you specified ``--interactive`` "
"or ``--overwrite``. See https://github.com/Pylons/pyramid/pull/2775"
msgstr "`` pcreate``はデフォルトで対話型になりました。異なる内容のファイルがすでに存在するかどうかを確認するメッセージが表示されます。これまでは、 `` --interactive``や `` --overwrite``を指定しない限り、類似したファイルがあった場合、それらを静かにスキップしていました。 https://github.com/Pylons/pyramid/pull/2775を参照してください。"

#: ../../../HISTORY.txt:63
msgid ""
"Removed undocumented argument ``cachebust_match`` from "
"``pyramid.static.static_view``. This argument was shipped accidentally in"
" Pyramid 1.6. See https://github.com/Pylons/pyramid/pull/2681"
msgstr "`` pyramid.static.static_view``から文書化されていない引数 `` cachebust_match``を削除しました。この議論は、Pyramid 1.6で誤って出荷されました。 https://github.com/Pylons/pyramid/pull/2681を参照してください。"

#: ../../../HISTORY.txt:67
msgid ""
"Change static view to avoid setting the ``Content-Encoding`` response "
"header to an encoding guessed using Python's ``mimetypes`` module. This "
"was causing clients to decode the content of gzipped files when "
"downloading them. The client would end up with a ``foo.txt.gz`` file on "
"disk that was already decoded, thus should really be ``foo.txt``. Also, "
"the ``Content-Encoding`` should only have been used if the client itself "
"broadcast support for the encoding via ``Accept-Encoding`` request "
"headers. See https://github.com/Pylons/pyramid/pull/2810"
msgstr "静的ビューを変更して、 `` Content-Encoding``レスポンスヘッダをPythonの `` mimetypes``モジュールを使って推測されるエンコーディングに設定しないようにします。これは、クライアントがgzipファイルをダウンロードするときにその内容をデコードする原因となっていました。クライアントは、既にデコードされたディスク上の `` foo.txt.gz``ファイルで終わるので、実際は `` foo.txt``でなければなりません。また、 `` Content-Encoding``は、クライアント自身が `` Accept-Encoding``リクエストヘッダを使ってエンコーディングをサポートしている場合にのみ使われるべきです。 https://github.com/Pylons/pyramid/pull/2810を参照してください。"

#: ../../../HISTORY.txt:76
msgid ""
"Settings are no longer accessible as attributes on the settings object "
"(e.g. ``request.registry.settings.foo``). This was deprecated in Pyramid "
"1.2. See https://github.com/Pylons/pyramid/pull/2823"
msgstr "設定は、設定オブジェクトの属性としてアクセスできなくなりました（ `` request.registry.settings.foo``など）。これはPyramid 1.2では推奨されていませんでした。 https://github.com/Pylons/pyramid/pull/2823を参照してください。"

#: ../../../HISTORY.txt:83
msgid "Python 3.6 compatibility. https://github.com/Pylons/pyramid/issues/2835"
msgstr "Python 3.6との互換性。 https://github.com/Pylons/pyramid/issues/2835"

#: ../../../HISTORY.txt:86
msgid ""
"``pcreate`` learned about ``--package-name`` to allow you to create a new"
" project in an existing folder with a different package name than the "
"project name. See https://github.com/Pylons/pyramid/pull/2783"
msgstr "`` pcreate``は `` --package-name``について学びました。プロジェクト名とは異なるパッケージ名で既存のフォルダに新しいプロジェクトを作成することができます。 https://github.com/Pylons/pyramid/pull/2783を参照してください。"

#: ../../../HISTORY.txt:90
msgid ""
"The ``_get_credentials`` private method of "
"``BasicAuthAuthenticationPolicy`` has been extracted into standalone "
"function ``extract_http_basic_credentials`` in ``pyramid.authentication``"
" module, this function extracts HTTP Basic credentials from a ``request``"
" object, and returns them as a named tuple. See "
"https://github.com/Pylons/pyramid/pull/2662"
msgstr "`` DefaultAuthAuthenticationPolicy``の `` _get_credentials``プライベートメソッドは、 `` pyramid.authentication``モジュールのスタンドアロン関数 `` extract_http_basic_credentials``に展開されています。この関数は `` request``オブジェクトからHTTP基本認証情報を抽出し、名前付きタプルとして返します。 https://github.com/Pylons/pyramid/pull/2662を参照してください。"

#: ../../../HISTORY.txt:96
msgid ""
"Pyramid 1.4 silently dropped a feature of the configurator that has been "
"restored. It's again possible for action discriminators to conflict "
"across different action orders. See "
"https://github.com/Pylons/pyramid/pull/2757"
msgstr "Pyramid 1.4は、復元されたコンフィギュレータの機能を静かに削除しました。行動弁別者が異なる行動秩序にぶつかり合うことも可能です。 https://github.com/Pylons/pyramid/pull/2757を参照してください。"

#: ../../../HISTORY.txt:101
msgid ""
"``pyramid.paster.bootstrap`` and its sibling "
"``pyramid.scripting.prepare`` can now be used as context managers to "
"automatically invoke the ``closer`` and pop threadlocals off of the stack"
" to prevent memory leaks. See https://github.com/Pylons/pyramid/pull/2760"
msgstr "`` pyramid.paster.bootstrap``とその兄弟の `` pyramid.scripting.prepare``をコンテクストマネージャーとして使うことができるようになりました。自動的に `` close``を呼び出し、メモリリークを防ぐためにスレッドロックをスタックから外しました。 https://github.com/Pylons/pyramid/pull/2760を参照してください。"

#: ../../../HISTORY.txt:106
msgid ""
"Added ``pyramid.config.Configurator.add_exception_view`` and the "
"``pyramid.view.exception_view_config`` decorator. It is now possible "
"using these methods or via the new ``exception_only=True`` option to "
"``add_view`` to add a view which will only be matched when handling an "
"exception. Previously any exception views were also registered for a "
"traversal context that inherited from the exception class which prevented"
" any exception-only optimizations. See "
"https://github.com/Pylons/pyramid/pull/2660"
msgstr "`` pyramid.config.Configurator.add_exception_view``と `` pyramid.view.exception_view_config``デコレータを追加しました。これらのメソッドを使うか、新しい `` exception_only = True``オプションを使って、 `` add_view``を使って例外を扱うときにのみマッチするビューを追加することが可能になりました。以前は、例外クラスから継承されたトラバーサルコンテキストに対して例外ビューも登録されていたため、例外のみの最適化はできませんでした。 https://github.com/Pylons/pyramid/pull/2660を参照してください。"

#: ../../../HISTORY.txt:115
msgid ""
"Added the ``exception_only`` boolean to "
"``pyramid.interfaces.IViewDeriverInfo`` which can be used by view "
"derivers to determine if they are wrapping a view which only handles "
"exceptions. This means that it is no longer necessary to perform request-"
"time checks for ``request.exception`` to determine if the view is "
"handling an exception - the pipeline can be optimized at config-time. See"
" https://github.com/Pylons/pyramid/pull/2660"
msgstr "`` pyramid.interfaces.IViewDeriverInfo``に `` exception_only``ブーリアンを追加しました。これは、ビューデリバーが例外を処理するだけのビューをラッピングしているかどうかを判断するのに使うことができます。これは、ビューが例外を処理しているかどうかを判断するために `` request.exception``のために要求時間チェックを実行する必要がなくなり、パイプラインを設定時に最適化できることを意味します。 https://github.com/Pylons/pyramid/pull/2660を参照してください。"

#: ../../../HISTORY.txt:123
msgid ""
"``pserve`` should now work with ``gevent`` and other workers that need to"
" monkeypatch the process, assuming the server and / or the app do so as "
"soon as possible before importing the rest of pyramid. See "
"https://github.com/Pylons/pyramid/pull/2797"
msgstr "`` pserve``は、サーバやアプリケーションがピラミッドの残りの部分をインポートする前にできるだけ早くそれを行うと仮定して、プロセスをmonkeypatchする必要がある `` gevent``や他のワーカーで動作するはずです。 https://github.com/Pylons/pyramid/pull/2797を参照してください。"

#: ../../../HISTORY.txt:128
msgid ""
"Pyramid no longer copies the settings object passed to the "
"``pyramid.config.Configurator(settings=)``. The original ``dict`` is "
"kept. See https://github.com/Pylons/pyramid/pull/2823"
msgstr "Pyramidは `` pyramid.config.Configurator（settings =） ``に渡された設定オブジェクトをコピーしません。元の `` dict``が保持されます。 https://github.com/Pylons/pyramid/pull/2823を参照してください。"

#: ../../../HISTORY.txt:132
msgid ""
"The csrf trusted origins setting may now be a whitespace-separated list "
"of domains. Previously only a python list was allowed. Also, it can now "
"be set using the ``PYRAMID_CSRF_TRUSTED_ORIGINS`` environment variable "
"similar to other settings. See "
"https://github.com/Pylons/pyramid/pull/2823"
msgstr "csrf trusted origininsの設定は、空白で区切られたドメインのリストになりました。以前は、Pythonのリストだけが許可されていました。また、他の設定と同様の `` PYRAMID_CSRF_TRUSTED_ORIGINS``環境変数を使って設定することもできます。 https://github.com/Pylons/pyramid/pull/2823を参照してください。"

#: ../../../HISTORY.txt:137
msgid ""
"``pserve --reload`` now uses the `hupper "
"<http://docs.pylonsproject.org/projects/hupper/en/latest/>` library to "
"monitor file changes. This comes with many improvements:"
msgstr "`` pserve --reload``は `` hupper <http://docs.pylonsproject.org/projects/hupper/en/latest/> `ライブラリを使用してファイルの変更を監視します。これには多くの改善が伴います："

#: ../../../HISTORY.txt:141
msgid ""
"If the `watchdog <http://pythonhosted.org/watchdog/>`_ package is "
"installed then monitoring will be done using inotify instead of cpu and "
"disk-intensive polling."
msgstr "`watchdog <http://pythonhosted.org/watchdog/> `_パッケージがインストールされていれば、cpuとディスク集約的なポーリングの代わりにinotifyを使って監視が行われます。"

#: ../../../HISTORY.txt:145
msgid ""
"The monitor is now a separate process that will not crash and starts up "
"before any of your code."
msgstr "モニタは、コードの前にクラッシュしたり起動したりすることのない別のプロセスになりました。"

#: ../../../HISTORY.txt:148
msgid ""
"The monitor will not restart the process after a crash until a file is "
"saved."
msgstr "ファイルが保存されるまで、クラッシュ後にモニターはプロセスを再始動しません。"

#: ../../../HISTORY.txt:151
msgid "The monitor works on windows."
msgstr "モニターはウィンドウ上で動作します。"

#: ../../../HISTORY.txt:153
msgid ""
"You can now trigger a reload manually from a pyramid view or any other "
"code via ``hupper.get_reloader().trigger_reload()``. Kind of neat."
msgstr "`` hupper.get_reloader（）。trigger_reload（） ``を使ってピラミッドビューやその他のコードから手動でリロードをトリガできるようになりました。ちょっとしたもの。"

#: ../../../HISTORY.txt:156
msgid "You can trigger a reload by issuing a ``SIGHUP`` to the monitor process."
msgstr "監視プロセスに対して `` SIGHUP``を発行することによって、再ロードをトリガーすることができます。"

#: ../../../HISTORY.txt:158
msgid "See https://github.com/Pylons/pyramid/pull/2805"
msgstr "https://github.com/Pylons/pyramid/pull/2805を参照してください。"

#: ../../../HISTORY.txt:160
msgid ""
"A new ``[pserve]`` section is supported in your config files with a "
"``watch_files`` key that can configure ``pserve --reload`` to monitor "
"custom file paths. See https://github.com/Pylons/pyramid/pull/2827"
msgstr "新しい `` [pserve] ``セクションは、カスタムファイルパスを監視する `` pserve --reload``を設定できる `` watch_files``キーで設定ファイルでサポートされています。 https://github.com/Pylons/pyramid/pull/2827を参照してください。"

#: ../../../HISTORY.txt:164
msgid ""
"Allow streaming responses to be made from subclasses of "
"``pyramid.httpexceptions.HTTPException``. Previously the response would "
"be unrolled while testing for a body, making it impossible to stream a "
"response. See https://github.com/Pylons/pyramid/pull/2863"
msgstr "`` pyramid.httpexceptions.HTTPException`のサブクラスからストリーミング応答を作成できるようにします。以前は、ボディのテスト中に応答が展開され、応答をストリーミングできなくなりました。 https://github.com/Pylons/pyramid/pull/2863を参照してください。"

#: ../../../HISTORY.txt:170
msgid ""
"Update starter, alchemy and zodb scaffolds to support IPv6 by using the "
"new ``listen`` directives in waitress. See "
"https://github.com/Pylons/pyramid/pull/2853"
msgstr "ウェイトレスの新しい &quot;listen&quot;ディレクティブを使用して、IPv6をサポートするためのスターター、錬金術、zodbの足場を更新します。 https://github.com/Pylons/pyramid/pull/2853を参照してください。"

#: ../../../HISTORY.txt:174
msgid ""
"All p* scripts now use argparse instead of optparse. This improves their "
"``--help`` output as well as enabling nicer documentation of their "
"options. See https://github.com/Pylons/pyramid/pull/2864"
msgstr "すべてのp *スクリプトは、optparseではなくargparseを使用するようになりました。これは `` --help``の出力を改善するだけでなく、それらのオプションのより良いドキュメントを可能にします。 https://github.com/Pylons/pyramid/pull/2864を参照してください。"

#: ../../../HISTORY.txt:178
msgid ""
"Any deferred configuration action registered via ``config.action`` may "
"now depend on threadlocal state, such as asset overrides, being active "
"when the action is executed. See "
"https://github.com/Pylons/pyramid/pull/2873"
msgstr "`` config.action`によって登録された遅延コンフィグレーションアクションは、アセットのオーバーライドなどのスレッドローカル状態に依存するようになり、アクションの実行時にアクティブになります。 https://github.com/Pylons/pyramid/pull/2873を参照してください。"

#: ../../../HISTORY.txt:183
msgid ""
"Asset specifications for directories passed to "
"``config.add_translation_dirs`` now support overriding the entire asset "
"specification, including the folder name. Previously only the package "
"name was supported and the folder would always need to have the same "
"name. See https://github.com/Pylons/pyramid/pull/2873"
msgstr "`` config.add_translation_dirs``に渡されるディレクトリのアセット仕様は、フォルダ名を含むアセット仕様全体をオーバーライドできるようになりました。以前はパッケージ名のみがサポートされていたため、フォルダの名前は常に同じにする必要がありました。 https://github.com/Pylons/pyramid/pull/2873を参照してください。"

#: ../../../HISTORY.txt:189
msgid ""
"``config.begin()`` will propagate the current threadlocal request through"
" as long as the registry is the same. For example:"
msgstr "`` config.begin（） ``は、レジストリが同じである限り、現在のスレッドローカルリクエストを伝播します。例えば："

#: ../../../HISTORY.txt:199
msgid "See https://github.com/Pylons/pyramid/pull/2873"
msgstr "https://github.com/Pylons/pyramid/pull/2873を参照してください。"

#: ../../../HISTORY.txt:201
msgid ""
"Added a new ``callback`` option to ``config.set_default_csrf_options`` "
"which can be used to determine per-request whether CSRF checking should "
"be enabled to allow for a mix authentication methods. Only cookie-based "
"methods generally require CSRF checking. See "
"https://github.com/Pylons/pyramid/pull/2778"
msgstr "`` config.set_default_csrf_options``に新しい `` callback``オプションを追加しました。これは、リクエストごとにCSRFチェックを有効にして、混在認証方法を許可する必要があるかどうかを判断するために使用できます。 Cookieベースの方法だけでは、一般的にCSRFチェックが必要です。 https://github.com/Pylons/pyramid/pull/2778を参照してください。"

#: ../../../HISTORY.txt:210
msgid ""
"Fixed bug in ``proutes`` such that it now shows the correct view when a "
"class and ``attr`` is involved. See: "
"https://github.com/Pylons/pyramid/pull/2687"
msgstr "`` proutes``のバグを修正し、クラスと `` attr``が関わっているときに正しいビューを表示するようになりました。参照：https://github.com/Pylons/pyramid/pull/2687"

#: ../../../HISTORY.txt:214
msgid ""
"Fix a ``FutureWarning`` in Python 3.5 when using ``re.split`` on the "
"``format`` setting to the ``proutes`` script. See "
"https://github.com/Pylons/pyramid/pull/2714"
msgstr "`` proutes``スクリプトの `` format``設定で `` re.split``を使うとき、Python 3.5で `` FutureWarning``を修正してください。 https://github.com/Pylons/pyramid/pull/2714を参照してください。"

#: ../../../HISTORY.txt:218
msgid ""
"Fix a ``RuntimeWarning`` emitted by WebOb when using arbitrary objects as"
" the ``userid`` in the ``AuthTktAuthenticationPolicy``. This is now "
"caught by the policy and the object is serialized as a base64 string to "
"avoid the cryptic warning. Since the userid will be read back as a string"
" on subsequent requests a more useful warning is emitted encouraging you "
"to use a primitive type instead. See "
"https://github.com/Pylons/pyramid/pull/2715"
msgstr "`` AuthTktAuthenticationPolicy``の `` userid``として任意のオブジェクトを使用するときにWebObが出力する `` RuntimeWarning``を修正しました。これは現在、ポリシーによって捕捉され、オブジェクトは暗号の警告を回避するためにbase64文字列としてシリアル化されます。以降のリクエストでは、ユーザーIDは文字列として読み込まれるため、より有用な警告が表示され、代わりにプリミティブ型を使用するように促します。 https://github.com/Pylons/pyramid/pull/2715を参照してください。"

#: ../../../HISTORY.txt:226
msgid ""
"Pyramid 1.6 introduced the ability for an action to invoke another "
"action. There was a bug in the way that ``config.add_view`` would "
"interact with custom view derivers introduced in Pyramid 1.7 because the "
"view's discriminator cannot be computed until view derivers and view "
"predicates have been created in earlier orders. Invoking an action from "
"another action would trigger an unrolling of the pipeline and would "
"compute discriminators before they were ready. The new behavior respects "
"the ``order`` of the action and ensures the discriminators are not "
"computed until dependent actions from previous orders have executed. See "
"https://github.com/Pylons/pyramid/pull/2757"
msgstr "Pyramid 1.6では、アクションが別のアクションを呼び出す機能が導入されました。 「config.add_view」がPyramid 1.7で導入されたカスタムビューデリバーとやりとりするというバグがありました。これは、ビューデリバーとビュー述語が以前のオーダーで作成されるまでビューの弁別子が計算できないためです。別のアクションからアクションを呼び出すと、パイプラインのアンロールがトリガーされ、ディスティメーターが準備される前にそれらが計算されます。新しい動作はアクションの「順序付け」を尊重し、以前の命令からの依存アクションが実行されるまで弁別器が計算されないようにします。 https://github.com/Pylons/pyramid/pull/2757を参照してください。"

#: ../../../HISTORY.txt:237
msgid ""
"Fix bug in i18n where the default domain would always use the Germanic "
"plural style, even if a different plural function is defined in the "
"relevant messages file. See https://github.com/Pylons/pyramid/pull/2859"
msgstr "関連するメッセージファイル内に異なる複数の関数が定義されていても、デフォルトのドメインが常にドイツ語の複数形を使用するi18nのバグを修正しました。 https://github.com/Pylons/pyramid/pull/2859を参照してください。"

#: ../../../HISTORY.txt:241
msgid ""
"The ``config.override_asset`` method now occurs during "
"``pyramid.config.PHASE1_CONFIG`` such that it is ordered to execute "
"before any calls to ``config.add_translation_dirs``. See "
"https://github.com/Pylons/pyramid/pull/2873"
msgstr "`` config.override_asset``メソッドは `` pyramid.config.PHASE1_CONFIG`の間に `` config.add_translation_dirs``の呼び出しの前に実行するように命令されるようになりました。 https://github.com/Pylons/pyramid/pull/2873を参照してください。"

#: ../../../HISTORY.txt:249
msgid ""
"The ``pcreate`` script and related scaffolds have been deprecated in "
"favor of the popular `cookiecutter "
"<https://cookiecutter.readthedocs.io/en/latest/>`_ project."
msgstr "`` pcreate``スクリプトと関連する足場は、人気の `` cookiecutter <https://cookiecutter.readthedocs.io/en/latest/> `_ project。"

#: ../../../HISTORY.txt:253
msgid ""
"All of Pyramid's official scaffolds as well as the tutorials have been "
"ported to cookiecutters:"
msgstr "ピラミッドの公式の足場とチュートリアルは、すべてcookiecuttersに移植されています："

#: ../../../HISTORY.txt:256
msgid ""
"`pyramid-cookiecutter-starter <https://github.com/Pylons/pyramid-"
"cookiecutter-starter>`_"
msgstr "`pyramid-cookiecutter-starter <https://github.com/Pylons/pyramid-cookiecutter-starter> `_"

#: ../../../HISTORY.txt:259
msgid ""
"`pyramid-cookiecutter-alchemy <https://github.com/Pylons/pyramid-"
"cookiecutter-alchemy>`_"
msgstr "`ピラミッド - クッキーカッター - 錬金術<https://github.com/Pylons/pyramid-cookiecutter-alchemy> `_"

#: ../../../HISTORY.txt:262
msgid ""
"`pyramid-cookiecutter-zodb <https://github.com/Pylons/pyramid-"
"cookiecutter-zodb>`_"
msgstr "`pyramid-cookiecutter-zodb <https://github.com/Pylons/pyramid-cookiecutter-zodb> `_"

#: ../../../HISTORY.txt:265
msgid "See https://github.com/Pylons/pyramid/pull/2780"
msgstr "https://github.com/Pylons/pyramid/pull/2780を参照してください。"

#: ../../../HISTORY.txt:270
msgid ""
"Update Typographical Conventions. "
"https://github.com/Pylons/pyramid/pull/2838"
msgstr "印刷慣習を更新する。 https://github.com/Pylons/pyramid/pull/2838"

#: ../../../HISTORY.txt:273
msgid ""
"Add `pyramid_nacl_session <http://docs.pylonsproject.org/projects"
"/pyramid-nacl-session/en/latest/>`_ to session factories. See "
"https://github.com/Pylons/pyramid/issues/2791"
msgstr "`pyramid_nacl_sessionを追加する<http://docs.pylonsproject.org/projects/pyramid-nacl-session/en/latest/> `_セッションファクトリに。 https://github.com/Pylons/pyramid/issues/2791を参照してください。"

#: ../../../HISTORY.txt:277
msgid ""
"Update ``HACKING.txt`` from stale branch that was never merged to master."
" See https://github.com/Pylons/pyramid/pull/2782"
msgstr "`HACKING.txt`をマスタにマージされた古いブランチから更新してください。 https://github.com/Pylons/pyramid/pull/2782を参照してください。"

#: ../../../HISTORY.txt:280
msgid ""
"Updated Windows installation instructions and related bits. See "
"https://github.com/Pylons/pyramid/issues/2661"
msgstr "更新されたWindowsのインストール手順と関連するビット。 https://github.com/Pylons/pyramid/issues/2661を参照してください。"

#: ../../../HISTORY.txt:283
msgid ""
"Fix an inconsistency in the documentation between view predicates and "
"route predicates and highlight the differences in their APIs. See "
"https://github.com/Pylons/pyramid/pull/2764"
msgstr "ビュー述語とルート述語の間のドキュメントの不整合を修正し、APIの違いを強調表示します。 https://github.com/Pylons/pyramid/pull/2764を参照してください。"

#: ../../../HISTORY.txt:287
msgid ""
"Clarify a possible misuse of the ``headers`` kwarg to subclasses of "
"``pyramid.httpexceptions.HTTPException`` in which more appropriate kwargs"
" from the parent class ``pyramid.response.Response`` should be used "
"instead. See https://github.com/Pylons/pyramid/pull/2750"
msgstr "`` pyramid.httpexceptions.HTTPException`のサブクラスに ``ヘッダー `` kwargが誤って使用される可能性があることを明示してください。親クラス `` pyramid.response.Response``のより適切なkwargが代わりに使われるべきです。 https://github.com/Pylons/pyramid/pull/2750を参照してください。"

#: ../../../HISTORY.txt:292
msgid ""
"The SQLAlchemy + URL Dispatch + Jinja2 (``wiki2``) and ZODB + Traversal +"
" Chameleon (``wiki``) tutorials have been updated to utilize the new "
"cookiecutters and drop support for the ``pcreate`` scaffolds."
msgstr "SQLAlchemy + URL Dispatch + Jinja2（ `` wiki2``）とZODB + Traversal + Chameleon（ `` wiki``）チュートリアルは、新しいcookiecuttersと `` pcreate``スカフォールドのサポートを利用するように更新されました。"

#: ../../../HISTORY.txt:297
msgid ""
"See https://github.com/Pylons/pyramid/pull/2881 and "
"https://github.com/Pylons/pyramid/pull/2883."
msgstr "https://github.com/Pylons/pyramid/pull/2881およびhttps://github.com/Pylons/pyramid/pull/2883を参照してください。"

#: ../../../HISTORY.txt:300
msgid ""
"Improve output of p* script descriptions for help. See "
"https://github.com/Pylons/pyramid/pull/2886"
msgstr "ヘルプのためのp *スクリプト記述の出力を向上させます。 https://github.com/Pylons/pyramid/pull/2886を参照してください。"

#: ../../../HISTORY.txt:303
msgid ""
"Quick Tour updated to use cookiecutters instead of pcreate and scaffolds."
" See https://github.com/Pylons/pyramid/pull/2888"
msgstr "クイックツアーは、pcreateや足場の代わりにcookiecuttersを使用するように更新されました。 https://github.com/Pylons/pyramid/pull/2888を参照してください。"

#: ../../../HISTORY.txt:307
msgid "1.7 (2016-05-19)"
msgstr "1.7（2016-05-19）"

#: ../../../HISTORY.txt:309
msgid ""
"Fix a bug in the wiki2 tutorial where bcrypt is always expecting byte "
"strings. See https://github.com/Pylons/pyramid/pull/2576"
msgstr "bcryptが常にバイト文字列を期待しているwiki2チュートリアルのバグを修正しました。 https://github.com/Pylons/pyramid/pull/2576を参照してください。"

#: ../../../HISTORY.txt:312
msgid ""
"Simplify windows detection code and remove some duplicated data. See "
"https://github.com/Pylons/pyramid/pull/2585 and "
"https://github.com/Pylons/pyramid/pull/2586"
msgstr "ウィンドウ検出コードを単純化し、重複したデータを削除します。 https://github.com/Pylons/pyramid/pull/2585およびhttps://github.com/Pylons/pyramid/pull/2586を参照してください。"

#: ../../../HISTORY.txt:317
msgid "1.7b4 (2016-05-12)"
msgstr "1.7b4（2016-05-12）"

#: ../../../HISTORY.txt:319
msgid ""
"Fixed the exception view tween to re-raise the original exception if no "
"exception view could be found to handle the exception. This better allows"
" tweens further up the chain to handle exceptions that were left "
"unhandled. Previously they would be converted into a "
"``PredicateMismatch`` exception if predicates failed to allow the view to"
" handle the exception. See https://github.com/Pylons/pyramid/pull/2567"
msgstr "例外を処理するための例外ビューが見つからない場合、元の例外を再発生させるように例外ビューのtweenを修正しました。これにより、未処理のまま残った例外を処理するために、チェーンの上にトゥイーンをさらに上げることができます。以前は、述部がビューの例外処理に失敗した場合、それらは `` PredicateMismatch``例外に変換されていました。 https://github.com/Pylons/pyramid/pull/2567を参照してください。"

#: ../../../HISTORY.txt:327
msgid ""
"Exposed the ``pyramid.interfaces.IRequestFactory`` interface to mirror "
"the public ``pyramid.interfaces.IResponseFactory`` interface."
msgstr "`` pyramid.interfaces.IRequestFactory``インターフェースを公開して、 `` pyramid.interfaces.IResponseFactory``インターフェースを反映させました。"

#: ../../../HISTORY.txt:331
msgid "1.7b3 (2016-05-10)"
msgstr "1.7b3（2016-05-10）"

#: ../../../HISTORY.txt:333
msgid ""
"Fix ``request.invoke_exception_view`` to raise an ``HTTPNotFound`` "
"exception if no view is matched. Previously ``None`` would be returned if"
" no views were matched and a ``PredicateMismatch`` would be raised if a "
"view \"almost\" matched (a view was found matching the context). See "
"https://github.com/Pylons/pyramid/pull/2564"
msgstr "ビューが一致しない場合、 `` request.invoke_exception_view``を `` HTTPNotFound``例外を発生させるように修正しました。以前は `` None``が返されます。ビューが一致しなかった場合には `` PredicateMismatch``が返されます。ビューが\ &quot;ほとんど\&quot;一致した場合（コンテキストに一致するビューが見つかった場合） https://github.com/Pylons/pyramid/pull/2564を参照してください。"

#: ../../../HISTORY.txt:339
msgid ""
"Add defaults for py.test configuration and coverage to all three "
"scaffolds, and update documentation accordingly. See "
"https://github.com/Pylons/pyramid/pull/2550"
msgstr "py.testの設定とカバレッジのデフォルトを3つすべてのスカフォールドに追加し、それに従ってドキュメントを更新します。 https://github.com/Pylons/pyramid/pull/2550を参照してください。"

#: ../../../HISTORY.txt:343
msgid ""
"Add ``linkcheck`` to ``Makefile`` for Sphinx. To check the documentation "
"for broken links, use the command ``make linkcheck SPHINXBUILD=$VENV/bin"
"/sphinx-build``. Also removed and fixed dozens of broken external links."
msgstr "Sphinxの `` Makefile``に `` linkcheck``を追加してください。ドキュメントの壊れたリンクを調べるには、 `` make linkcheck SPHINXBUILD = $ VENV / bin / sphinx-build``コマンドを使います。また、数十の壊れた外部リンクを削除して修正しました。"

#: ../../../HISTORY.txt:348
msgid ""
"Fix the internal runner for scaffold tests to ensure they work with pip "
"and py.test. See https://github.com/Pylons/pyramid/pull/2565"
msgstr "内部ランナーを足場テストのために修正して、pipとpy.testで動作するようにします。 https://github.com/Pylons/pyramid/pull/2565を参照してください。"

#: ../../../HISTORY.txt:353
msgid "1.7b2 (2016-05-01)"
msgstr "1.7b2（2016-05-01）"

#: ../../../HISTORY.txt:355
msgid ""
"Removed inclusion of pyramid_tm in development.ini for alchemy scaffold "
"See https://github.com/Pylons/pyramid/issues/2538"
msgstr "developmental.iniのpyramid_tmを錬金術足場に含めるのを削除しました。https://github.com/Pylons/pyramid/issues/2538を参照してください。"

#: ../../../HISTORY.txt:358
msgid ""
"A default permission set via ``config.set_default_permission`` will no "
"longer be enforced on an exception view. This has been the case for a "
"while with the default exception views (``config.add_notfound_view`` and "
"``config.add_forbidden_view``), however for any other exception view a "
"developer had to remember to set ``permission=NO_PERMISSION_REQUIRED`` or"
" be surprised when things didn't work. It is still possible to force a "
"permission check on an exception view by setting the ``permission`` "
"argument manually to ``config.add_view``. This behavior is consistent "
"with the new CSRF features added in the 1.7 series. See "
"https://github.com/Pylons/pyramid/pull/2534"
msgstr "`` config.set_default_permission``で設定されたデフォルトの権限は、もはや例外ビューでは強制されません。これはデフォルトの例外ビュー（ `` config.add_notfound_view``と `` config.add_forbidden_​​view``）を使ってしばらくの間そうなっていましたが、他の例外ビューでは開発者は `` permission = NO_PERMISSION_REQUIRED``物事がうまくいかなかった時には驚いた。 `` permission``引数を手動で `` config.add_view``に設定することによって、例外ビューのパーミッションチェックを強制することも可能です。この動作は、1.7シリーズで追加された新しいCSRF機能と一致しています。 https://github.com/Pylons/pyramid/pull/2534を参照してください。"

#: ../../../HISTORY.txt:370
msgid "1.7b1 (2016-04-25)"
msgstr "1.7b1（2016-04-25）"

#: ../../../HISTORY.txt:372
msgid "This release announces the beta period for 1.7."
msgstr "このリリースでは、1.7のベータ期間が発表されます。"

#: ../../../HISTORY.txt:374
msgid ""
"Fix an issue where some files were being included in the alchemy "
"scafffold which had been removed from the 1.7 series. See "
"https://github.com/Pylons/pyramid/issues/2525"
msgstr "1.7シリーズから削除された錬金術足場にいくつかのファイルが含まれていた問題を修正しました。 https://github.com/Pylons/pyramid/issues/2525を参照してください。"

#: ../../../HISTORY.txt:379
msgid "1.7a2 (2016-04-19)"
msgstr "1.7a2（2016-04-19）"

#: ../../../HISTORY.txt:384
msgid ""
"Automatic CSRF checks are now disabled by default on exception views. "
"They can be turned back on by setting the appropriate `require_csrf` "
"option on the view. See https://github.com/Pylons/pyramid/pull/2517"
msgstr "例外ビューでは、自動CSRFチェックはデフォルトで無効になっています。彼らは、ビューに適切な `require_csrf`オプションを設定することによって、再び有効にすることができます。 https://github.com/Pylons/pyramid/pull/2517を参照してください。"

#: ../../../HISTORY.txt:389
msgid ""
"The automatic CSRF API was reworked to use a config directive for setting"
" the options. The ``pyramid.require_default_csrf`` setting is no longer "
"supported. Instead, a new ``config.set_default_csrf_options`` directive "
"has been introduced that allows the developer to specify the default "
"value for ``require_csrf`` as well as change the CSRF token, header and "
"safe request methods. The ``pyramid.csrf_trusted_origins`` setting is "
"still supported. See https://github.com/Pylons/pyramid/pull/2518"
msgstr "自動CSRF APIは、オプションを設定するためのconfigディレクティブを使用するように修正されました。 `` pyramid.require_default_csrf``の設定はサポートされなくなりました。代わりに、新しい `` config.set_default_csrf_options``ディレクティブが導入されました。これにより開発者は `` require_csrf``のデフォルト値を指定し、CSRFトークン、ヘッダ、安全なリクエストメソッドを変更することができます。 `` pyramid.csrf_trusted_origins``の設定は引き続きサポートされています。 https://github.com/Pylons/pyramid/pull/2518を参照してください。"

#: ../../../BFG_HISTORY.txt:6110 ../../../BFG_HISTORY.txt:6159
#: ../../../HISTORY.txt:399 ../../../HISTORY.txt:3924
msgid "Bug fixes"
msgstr "バグの修正"

#: ../../../HISTORY.txt:401
msgid ""
"CSRF origin checks had a bug causing the checks to always fail. See "
"https://github.com/Pylons/pyramid/pull/2512"
msgstr "CSRF起点チェックには、チェックが常に失敗するバグがありました。 https://github.com/Pylons/pyramid/pull/2512を参照してください。"

#: ../../../HISTORY.txt:404
msgid ""
"Fix the test suite to pass on windows. See "
"https://github.com/Pylons/pyramid/pull/2520"
msgstr "ウィンドウにテストスイートを渡すように修正する。 https://github.com/Pylons/pyramid/pull/2520を参照してください。"

#: ../../../HISTORY.txt:408
msgid "1.7a1 (2016-04-16)"
msgstr "1.7a1（2016-04-16）"

#: ../../../HISTORY.txt:413
msgid ""
"Following the Pyramid deprecation period (1.4 -> 1.6), "
"AuthTktAuthenticationPolicy's default hashing algorithm is changing from "
"md5 to sha512. If you are using the authentication policy and need to "
"continue using md5, please explicitly set hashalg to 'md5'."
msgstr "ピラミッドの非推奨期間（1.4  - &gt; 1.6）の後、AuthTktAuthenticationPolicyのデフォルトハッシュアルゴリズムはmd5からsha512に変更されています。認証ポリシーを使用しており、md5を引き続き使用する必要がある場合は、明示的にhashalgを &#39;md5&#39;に設定してください。"

#: ../../../HISTORY.txt:418
msgid ""
"This change does mean that any existing auth tickets (and associated "
"cookies) will no longer be valid, and users will no longer be logged in, "
"and have to login to their accounts again."
msgstr "この変更は、既存の認証チケット（および関連するCookie）が有効でなくなり、ユーザーはもうログインしなくなり、アカウントに再度ログインする必要があることを意味します。"

#: ../../../HISTORY.txt:422
msgid "See https://github.com/Pylons/pyramid/pull/2496"
msgstr "https://github.com/Pylons/pyramid/pull/2496を参照してください。"

#: ../../../HISTORY.txt:424
msgid ""
"The ``check_csrf_token`` function no longer validates a csrf token in the"
" query string of a request. Only headers and request bodies are "
"supported. See https://github.com/Pylons/pyramid/pull/2500"
msgstr "`` check_csrf_token``関数は、リクエストのクエリ文字列中のcsrfトークンをもはや検証しません。ヘッダーとリクエストボディのみがサポートされています。 https://github.com/Pylons/pyramid/pull/2500を参照してください。"

#: ../../../HISTORY.txt:431
msgid ""
"Added a new setting, ``pyramid.require_default_csrf`` which may be used "
"to turn on CSRF checks globally for every POST request in the "
"application. This should be considered a good default for websites built "
"on Pyramid. It is possible to opt-out of CSRF checks on a per-view basis "
"by setting ``require_csrf=False`` on those views. See "
"https://github.com/Pylons/pyramid/pull/2413"
msgstr "新しい設定、 `` pyramid.require_default_csrf``を追加しました。これは、アプリケーションのPOST要求ごとにCSRFチェックをグローバルに有効にするために使用されます。これは、Pyramid上に構築されたウェブサイトのための良いデフォルトと見なされるべきです。これらのビューに対して `` require_csrf = False``を設定することで、ビュー単位でCSRFチェックをオプトアウトすることができます。 https://github.com/Pylons/pyramid/pull/2413を参照してください。"

#: ../../../HISTORY.txt:438
msgid ""
"Added a ``require_csrf`` view option which will enforce CSRF checks on "
"any request with an unsafe method as defined by RFC2616. If the CSRF "
"check fails a ``BadCSRFToken`` exception will be raised and may be caught"
" by exception views (the default response is a ``400 Bad Request``). This"
" option should be used in place of the deprecated ``check_csrf`` view "
"predicate which would normally result in unexpected ``404 Not Found`` "
"response to the client instead of a catchable exception.  See "
"https://github.com/Pylons/pyramid/pull/2413 and "
"https://github.com/Pylons/pyramid/pull/2500"
msgstr "`` require_csrf``ビューオプションを追加しました。これは、RFC2616で定義されている安全でないメソッドを使って、すべての要求に対してCSRFチェックを強制します。 CSRFチェックが失敗した場合、 `` BadCSRFToken``例外が発生し、例外ビュー（デフォルトの応答は `` 400 Bad Request``です）によって捕捉されます。このオプションは、非推奨の `` check_csrf``ビュー述語の代わりに使用されるべきです。この述語は通常、キャッチ可能な例外の代わりに予期しない `` 404 Not Found``応答をクライアントに送ります。 https://github.com/Pylons/pyramid/pull/2413およびhttps://github.com/Pylons/pyramid/pull/2500を参照してください。"

#: ../../../HISTORY.txt:448
msgid ""
"Added an additional CSRF validation that checks the origin/referrer of a "
"request and makes sure it matches the current ``request.domain``. This "
"particular check is only active when accessing a site over HTTPS as "
"otherwise browsers don't always send the required information. If this "
"additional CSRF validation fails a ``BadCSRFOrigin`` exception will be "
"raised and may be caught by exception views (the default response is "
"``400 Bad Request``). Additional allowed origins may be configured by "
"setting ``pyramid.csrf_trusted_origins`` to a list of domain names (with "
"ports if on a non standard port) to allow. Subdomains are not allowed "
"unless the domain name has been prefixed with a ``.``. See "
"https://github.com/Pylons/pyramid/pull/2501"
msgstr "要求の起点/参照元をチェックし、現在の `` request.domain``と一致することを確認する追加のCSRF検証を追加しました。この特定のチェックは、HTTPS経由でサイトにアクセスする場合にのみ有効です。そうしないと、ブラウザが常に必要な情報を送信するとは限りません。この追加のCSRF検証に失敗した場合、 `` BadCSRFOrigin``例外が発生し、例外ビュー（デフォルトの応答は `` 400 Bad Request``です）によって捕捉される可能性があります。 `` pyramid.csrf_trusted_origins``を許可するドメイン名のリスト（非標準ポートの場合はポート付き）に設定することにより、追加の許可されたオリジンを設定することができます。サブドメインはドメイン名の前に `` .``が付いていなければ許されません。 https://github.com/Pylons/pyramid/pull/2501を参照してください。"

#: ../../../HISTORY.txt:460
msgid ""
"Added a new ``pyramid.session.check_csrf_origin`` API for validating the "
"origin or referrer headers against the request's domain. See "
"https://github.com/Pylons/pyramid/pull/2501"
msgstr "リクエストのドメインに対してオリジンまたはリファラーヘッダを検証するための新しい `` pyramid.session.check_csrf_origin`` APIを追加しました。 https://github.com/Pylons/pyramid/pull/2501を参照してください。"

#: ../../../HISTORY.txt:464
msgid ""
"Pyramid HTTPExceptions will now take into account the best match for the "
"clients Accept header, and depending on what is requested will return "
"text/html, application/json or text/plain. The default for */* is still "
"text/html, but if application/json is explicitly mentioned it will now "
"receive a valid JSON response. See "
"https://github.com/Pylons/pyramid/pull/2489"
msgstr "Pyramid HTTPExceptionsはクライアントのAcceptヘッダーに最も適したものを考慮に入れ、要求されたものに応じてtext / html、application / jsonまたはtext / plainを返します。 * / *のデフォルトはtext / htmlですが、application / jsonが明示的に記述されている場合は、有効なJSON応答を受け取ります。 https://github.com/Pylons/pyramid/pull/2489を参照してください。"

#: ../../../HISTORY.txt:471
msgid ""
"A new event and interface (BeforeTraversal) has been introduced that will"
" notify listeners before traversal starts in the router. See "
"https://github.com/Pylons/pyramid/pull/2469 and "
"https://github.com/Pylons/pyramid/pull/1876"
msgstr "新しいイベントとインタフェース（BeforeTraversal）が導入されました。このインタフェースは、ルータ内でトラバーサルが開始される前にリスナーに通知します。 https://github.com/Pylons/pyramid/pull/2469およびhttps://github.com/Pylons/pyramid/pull/1876を参照してください。"

#: ../../../HISTORY.txt:476
msgid ""
"Add a new \"view deriver\" concept to Pyramid to allow framework authors "
"to inject elements into the standard Pyramid view pipeline and affect all"
" views in an application. This is similar to a decorator except that it "
"has access to options passed to ``config.add_view`` and can affect other "
"stages of the pipeline such as the raw response from a view or prior to "
"security checks. See https://github.com/Pylons/pyramid/pull/2021"
msgstr "ピラミッドに新しい\ &quot;ビューデリバー\&quot;の概念を追加すると、フレームワークの作成者はピラミッドビューの標準パイプラインに要素を挿入し、アプリケーション内のすべてのビューに影響を与えることができます。これはデコレータに似ていますが、 `` config.add_view``に渡されるオプションにアクセスでき、ビューからの生のレスポンスやセキュリティチェックの前にパイプラインの他のステージに影響を与える可能性があります。 https://github.com/Pylons/pyramid/pull/2021を参照してください。"

#: ../../../HISTORY.txt:483
msgid ""
"Allow a leading ``=`` on the key of the request param predicate. For "
"example, '=abc=1' is equivalent down to ``request.params['=abc'] == "
"'1'``. See https://github.com/Pylons/pyramid/pull/1370"
msgstr "要求パラメタ述語のキーに先行する `` = ``を許可します。たとえば、 &#39;= abc = 1&#39;は `` request.params [&#39;= abc&#39;] == &#39;1&#39;``と同等です。 https://github.com/Pylons/pyramid/pull/1370を参照してください。"

#: ../../../HISTORY.txt:488
msgid ""
"A new ``request.invoke_exception_view(...)`` method which can be used to "
"invoke an exception view and get back a response. This is useful for "
"rendering an exception view outside of the context of the excview tween "
"where you may need more control over the request. See "
"https://github.com/Pylons/pyramid/pull/2393"
msgstr "例外ビューを呼び出して応答を返すために使用できる新しい `` request.invoke_exception_view（...） ``メソッド。これは、あなたがリクエストをより詳細に制御する必要があるかもしれないexcview tweenのコンテキスト外で例外ビューをレンダリングする場合に便利です。 https://github.com/Pylons/pyramid/pull/2393を参照してください。"

#: ../../../HISTORY.txt:494
#, python-format
msgid ""
"Allow using variable substitutions like ``%(LOGGING_LOGGER_ROOT_LEVEL)s``"
" for logging sections of the .ini file and populate these variables from "
"the ``pserve`` command line -- e.g.: ``pserve development.ini "
"LOGGING_LOGGER_ROOT_LEVEL=DEBUG`` See "
"https://github.com/Pylons/pyramid/pull/2399"
msgstr ".iniファイルのロギングセクションに ``％（LOGGING_LOGGER_ROOT_LEVEL）s``のような変数の置き換えを許可し、 `` pserve``コマンドラインからこれらの変数を設定します - 例えば `` pserve development.ini LOGGING_LOGGER_ROOT_LEVEL = DEBUG`` https://github.com/Pylons/pyramid/pull/2399を参照してください。"

#: ../../../HISTORY.txt:503
msgid "A complete overhaul of the docs:"
msgstr "ドキュメントの完全なオーバーホール："

#: ../../../HISTORY.txt:505
msgid "Use pip instead of easy_install."
msgstr "easy_installの代わりにpipを使用してください。"

#: ../../../HISTORY.txt:506
msgid ""
"Become opinionated by preferring Python 3.4 or greater to simplify "
"installation of Python and its required packaging tools."
msgstr "Python 3.4以上を好むことで、Pythonとその必要なパッケージングツールのインストールを簡素化することで、意見を表明してください。"

#: ../../../HISTORY.txt:508
msgid ""
"Use venv for the tool, and virtual environment for the thing created, "
"instead of virtualenv."
msgstr "virtualenvの代わりに、venvをツール用に、仮想環境を作成用に使用してください。"

#: ../../../HISTORY.txt:510
msgid "Use py.test and pytest-cov instead of nose and coverage."
msgstr "noseとカバレッジの代わりにpy.testとpytest-covを使用してください。"

#: ../../../HISTORY.txt:511
msgid "Further updates to the scaffolds as well as tutorials and their src files."
msgstr "チュートリアルとそのsrcファイルだけでなく、足場への更なるアップデート。"

#: ../../../HISTORY.txt:513
msgid "See https://github.com/Pylons/pyramid/pull/2468"
msgstr "https://github.com/Pylons/pyramid/pull/2468を参照してください。"

#: ../../../HISTORY.txt:515
msgid ""
"A complete overhaul of the ``alchemy`` scaffold as well as the Wiki2 "
"SQLAlchemy + URLDispatch tutorial to introduce more modern features into "
"the usage of SQLAlchemy with Pyramid and provide a better starting point "
"for new projects. See https://github.com/Pylons/pyramid/pull/2024"
msgstr "`` alchemy`足場とWiki2 SQLAlchemy + URLDispatchチュートリアルを完全に見直して、PyramidでSQLAlchemyを使用する際のより現代的な機能を紹介し、新しいプロジェクトの出発点を提供します。 https://github.com/Pylons/pyramid/pull/2024を参照してください。"

#: ../../../HISTORY.txt:524
msgid ""
"Fix ``pserve --browser`` to use the ``--server-name`` instead of the app "
"name when selecting a section to use. This was only working for people "
"who had server and app sections with the same name, for example "
"``[app:main]`` and ``[server:main]``. See "
"https://github.com/Pylons/pyramid/pull/2292"
msgstr "使用するセクションを選択するときに、アプリケーション名の代わりに `` --server-name``を使うように `` pserve  -  browser &#39;&#39;を修正しました。これは、 `` [app：main] ``と `` [server：main] ``のように、同じ名前のサーバーセクションとアプリケーションセクションを持っていた人たちのためだけに働いていました。 https://github.com/Pylons/pyramid/pull/2292を参照してください。"

#: ../../../HISTORY.txt:533
msgid ""
"The ``check_csrf`` view predicate has been deprecated. Use the new "
"``require_csrf`` option or the ``pyramid.require_default_csrf`` setting "
"to ensure that the ``BadCSRFToken`` exception is raised. See "
"https://github.com/Pylons/pyramid/pull/2413"
msgstr "`` check_csrf``ビュー述語は非推奨です。新しい `` require_csrf``オプションまたは `` pyramid.require_default_csrf``設定を使って、 `` BadCSRFToken``例外が確実に発生するようにしてください。 https://github.com/Pylons/pyramid/pull/2413を参照してください。"

#: ../../../HISTORY.txt:538
msgid ""
"Support for Python 3.3 will be removed in Pyramid 1.8. "
"https://github.com/Pylons/pyramid/issues/2477"
msgstr "Python 3.3のサポートはPyramid 1.8で削除されます。 https://github.com/Pylons/pyramid/issues/2477"

#: ../../../HISTORY.txt:541
msgid ""
"Python 2.6 is no longer supported by Pyramid. See "
"https://github.com/Pylons/pyramid/issues/2368"
msgstr "Python 2.6ではPyramidがサポートされなくなりました。 https://github.com/Pylons/pyramid/issues/2368を参照してください。"

#: ../../../HISTORY.txt:544
msgid ""
"Dropped Python 3.2 support. See "
"https://github.com/Pylons/pyramid/pull/2256"
msgstr "Python 3.2のサポートを終了しました。 https://github.com/Pylons/pyramid/pull/2256を参照してください。"

#: ../../../HISTORY.txt:548
msgid "1.6 (2016-01-03)"
msgstr "1.6（2016-01-03）"

#: ../../../HISTORY.txt:553
msgid ""
"Continue removal of ``pserve`` daemon/process management features by "
"deprecating ``--user`` and ``--group`` options. See "
"https://github.com/Pylons/pyramid/pull/2190"
msgstr "`` --user``と `` --group``オプションを非推奨にして、 `` pserve``デーモン/プロセス管理機能の削除を続けてください。 https://github.com/Pylons/pyramid/pull/2190を参照してください。"

#: ../../../HISTORY.txt:558
msgid "1.6b3 (2015-12-17)"
msgstr "1.6b3（2015-12-17）"

#: ../../../HISTORY.txt:563
msgid ""
"Remove the ``cachebust`` option from ``config.add_static_view``. See "
"``config.add_cache_buster`` for the new way to attach cache busters to "
"static assets. See https://github.com/Pylons/pyramid/pull/2186"
msgstr "`` config.add_static_view``から `` cachebust``オプションを削除してください。キャッシュバスターを静的資産に付加する新しい方法については、 `` config.add_cache_buster``を参照してください。 https://github.com/Pylons/pyramid/pull/2186を参照してください。"

#: ../../../HISTORY.txt:568
msgid ""
"Modify the ``pyramid.interfaces.ICacheBuster`` API to be a simple "
"callable instead of an object with ``match`` and ``pregenerate`` methods."
" Cache busters are now focused solely on generation. Matching has been "
"dropped."
msgstr "`` pyramid.interfaces.ICacheBuster`` APIを `` match``メソッドと `` pregenerate``メソッドを持つオブジェクトではなく単純な呼び出し可能オブジェクトに変更してください。キャッシュ・バスターは現在、世代だけに焦点を当てています。マッチングは削除されました。"

#: ../../../HISTORY.txt:572
msgid ""
"Note this affects usage of ``pyramid.static.QueryStringCacheBuster`` and "
"``pyramid.static.ManifestCacheBuster``."
msgstr "これは `` pyramid.static.QueryStringCacheBuster``と `` pyramid.static.ManifestCacheBuster``の使用に影響します。"

#: ../../../HISTORY.txt:575
msgid "See https://github.com/Pylons/pyramid/pull/2186"
msgstr "https://github.com/Pylons/pyramid/pull/2186を参照してください。"

#: ../../../HISTORY.txt:580
msgid ""
"Add a new ``config.add_cache_buster`` API for attaching cache busters to "
"static assets. See https://github.com/Pylons/pyramid/pull/2186"
msgstr "静的アセットにキャッシュバスターを追加するための新しい `` config.add_cache_buster`` APIを追加してください。 https://github.com/Pylons/pyramid/pull/2186を参照してください。"

#: ../../../HISTORY.txt:586
msgid ""
"Ensure that ``IAssetDescriptor.abspath`` always returns an absolute path."
" There were cases depending on the process CWD that a relative path would"
" be returned. See https://github.com/Pylons/pyramid/issues/2188"
msgstr "`` IAssetDescriptor.abspath``は常に絶対パスを返すようにしてください。プロセスのCWDに応じて、相対パスが返されるケースがありました。 https://github.com/Pylons/pyramid/issues/2188を参照してください。"

#: ../../../HISTORY.txt:591
msgid "1.6b2 (2015-10-15)"
msgstr "1.6b2（2015-10-15）"

#: ../../../HISTORY.txt:596
msgid ""
"Allow asset specifications to be supplied to "
"``pyramid.static.ManifestCacheBuster`` instead of requiring a filesystem "
"path."
msgstr "ファイルシステムのパスを必要とするのではなく、 `` pyramid.static.ManifestCacheBuster``にアセット仕様を与えることができます。"

#: ../../../HISTORY.txt:601
msgid "1.6b1 (2015-10-15)"
msgstr "1.6b1（2015-10-15）"

#: ../../../HISTORY.txt:606
msgid ""
"IPython and BPython support have been removed from pshell in the core. To"
" continue using them on Pyramid 1.6+ you must install the binding "
"packages explicitly::"
msgstr "IPythonとBPythonのサポートはコアのpshellから削除されました。 Pyramid 1.6以降で引き続き使用するには、バインディングパッケージを明示的にインストールする必要があります。"

#: ../../../HISTORY.txt:616
msgid ""
"Remove default cache busters introduced in 1.6a1 including "
"``PathSegmentCacheBuster``, ``PathSegmentMd5CacheBuster``, and "
"``QueryStringMd5CacheBuster``. See "
"https://github.com/Pylons/pyramid/pull/2116"
msgstr "`` PathSegmentCacheBuster``、 `` PathSegmentMd5C​​acheBuster``、および `` QueryStringMd5CacheBuster``を含む1.6a1で導入されたデフォルトのキャッシュバスターを削除してください。 https://github.com/Pylons/pyramid/pull/2116を参照してください。"

#: ../../../HISTORY.txt:624
msgid ""
"Additional shells for ``pshell`` can now be registered as entrypoints. "
"See https://github.com/Pylons/pyramid/pull/1891 and "
"https://github.com/Pylons/pyramid/pull/2012"
msgstr "`` pshell``用の追加のシェルをエントリーポイントとして登録できるようになりました。 https://github.com/Pylons/pyramid/pull/1891およびhttps://github.com/Pylons/pyramid/pull/2012を参照してください。"

#: ../../../HISTORY.txt:628
msgid ""
"The variables injected into ``pshell`` are now displayed with their "
"docstrings instead of the default ``str(obj)`` when possible. See "
"https://github.com/Pylons/pyramid/pull/1929"
msgstr "可能であれば、 `` pshell``に注入された変数はデフォルトの `` str（obj） ``ではなくdocstringで表示されます。 https://github.com/Pylons/pyramid/pull/1929を参照してください。"

#: ../../../HISTORY.txt:632
msgid ""
"Add new ``pyramid.static.ManifestCacheBuster`` for use with external "
"asset pipelines as well as examples of common usages in the narrative. "
"See https://github.com/Pylons/pyramid/pull/2116"
msgstr "外部資産パイプラインで使用するための新しい `` pyramid.static.ManifestCacheBuster``と、物語の一般的な使用例を追加してください。 https://github.com/Pylons/pyramid/pull/2116を参照してください。"

#: ../../../HISTORY.txt:636
msgid ""
"Fix ``pserve --reload`` to not crash on syntax errors!!! See "
"https://github.com/Pylons/pyramid/pull/2125"
msgstr "構文エラーで `` pserve --reload``がクラッシュしないように修正しました！ https://github.com/Pylons/pyramid/pull/2125を参照してください。"

#: ../../../HISTORY.txt:639
msgid ""
"Fix an issue when user passes unparsed strings to "
"``pyramid.session.CookieSession`` and "
"``pyramid.authentication.AuthTktCookieHelper`` for time related "
"parameters ``timeout``, ``reissue_time``, ``max_age`` that expect an "
"integer value. See https://github.com/Pylons/pyramid/pull/2050"
msgstr "時刻関連パラメータ `` timeout``、 `` reissue_time``、 `` max_age``に対して、ユーザが未解析の文字列を `` pyramid.session.CookieSession``と `` pyramid.authentication.AuthTktCookieHelper``に渡すときの問題を修正しました。整数値が必要です。 https://github.com/Pylons/pyramid/pull/2050を参照してください。"

#: ../../../HISTORY.txt:647
msgid ""
"``pyramid.httpexceptions.HTTPException`` now defaults to ``520 Unknown "
"Error`` instead of ``None None`` to conform with changes in WebOb 1.5. "
"See https://github.com/Pylons/pyramid/pull/1865"
msgstr "`` pyramid.httpexceptions.HTTPException``は、WebOb 1.5の変更に適合するよう `` None None``ではなく `` Unknown Error``をデフォルトにしました。 https://github.com/Pylons/pyramid/pull/1865を参照してください。"

#: ../../../HISTORY.txt:652
msgid ""
"``pshell`` will now preserve the capitalization of variables in the "
"``[pshell]`` section of the INI file. This makes exposing classes to the "
"shell a little more straightfoward. See "
"https://github.com/Pylons/pyramid/pull/1883"
msgstr "`` pshell``はINIファイルの `` [pshell] ``セクションに変数の大文字を保存します。これにより、シェルへのクラスの公開がより簡単になります。 https://github.com/Pylons/pyramid/pull/1883を参照してください。"

#: ../../../HISTORY.txt:657
msgid ""
"Fixed usage of ``pserve --monitor-restart --daemon`` which would fail in "
"horrible ways. See https://github.com/Pylons/pyramid/pull/2118"
msgstr "恐ろしい方法で失敗する `` pserve --monitor-restart --daemon``の使用を修正しました。 https://github.com/Pylons/pyramid/pull/2118を参照してください。"

#: ../../../HISTORY.txt:660
msgid ""
"Explicitly prevent ``pserve --reload --daemon`` from being used. It's "
"never been supported but would work and fail in weird ways. See "
"https://github.com/Pylons/pyramid/pull/2119"
msgstr "明示的に `` pserve --reload  -  daemon``が使用されないようにしてください。それは決してサポートされていませんが、奇妙な方法で動作し、失敗するでしょう。 https://github.com/Pylons/pyramid/pull/2119を参照してください。"

#: ../../../HISTORY.txt:664
msgid ""
"Fix an issue on Windows when running ``pserve --reload`` in which the "
"process failed to fork because it could not find the pserve script to "
"run. See https://github.com/Pylons/pyramid/pull/2138"
msgstr "実行するpserveスクリプトが見つからなかったためプロセスがforkできなかった `` pserve --reload``を実行しているときに、Windows上の問題を修正しました。 https://github.com/Pylons/pyramid/pull/2138を参照してください。"

#: ../../../HISTORY.txt:671
msgid ""
"Deprecate ``pserve --monitor-restart`` in favor of user's using a real "
"process manager such as Systemd or Upstart as well as Python-based "
"solutions like Circus and Supervisor. See "
"https://github.com/Pylons/pyramid/pull/2120"
msgstr "CircusやSupervisorのようなPythonベースのソリューションだけでなく、SystemdやUpstartなどの実際のプロセスマネージャを使用するユーザのために、 `` pserve --monitor-restart``を非難してください。 https://github.com/Pylons/pyramid/pull/2120を参照してください。"

#: ../../../HISTORY.txt:677
msgid "1.6a2 (2015-06-30)"
msgstr "1.6a2（2015-06-30）"

#: ../../../HISTORY.txt:682
msgid ""
"Ensure that ``pyramid.httpexceptions.exception_response`` returns the "
"appropriate \"concrete\" class for ``400`` and ``500`` status codes. See "
"https://github.com/Pylons/pyramid/issues/1832"
msgstr "`` pyramid.httpexceptions.exception_response``が `` 400``と `` 500``ステータスコードの適切な &quot;concrete&quot;クラスを返すことを確認してください。 https://github.com/Pylons/pyramid/issues/1832を参照してください。"

#: ../../../HISTORY.txt:686
msgid ""
"Fix an infinite recursion bug introduced in 1.6a1 when "
"``pyramid.view.render_view_to_response`` was called directly or "
"indirectly. See https://github.com/Pylons/pyramid/issues/1643"
msgstr "`` pyramid.view.render_view_to_response``が直接的または間接的に呼び出されたときに1.6a1で導入された無限再帰バグを修正しました。 https://github.com/Pylons/pyramid/issues/1643を参照してください。"

#: ../../../HISTORY.txt:690
msgid ""
"Further fix the JSONP renderer by prefixing the returned content with a "
"comment. This should mitigate attacks from Flash (See CVE-2014-4671). See"
" https://github.com/Pylons/pyramid/pull/1649"
msgstr "JSONPレンダラを修正するには、返されたコンテンツの先頭にコメントを付けます。これにより、Flashからの攻撃を軽減する必要があります（CVE-2014-4671を参照）。 https://github.com/Pylons/pyramid/pull/1649を参照してください。"

#: ../../../HISTORY.txt:694
msgid ""
"Allow periods and brackets (``[]``) in the JSONP callback. The original "
"fix was overly-restrictive and broke Angular. See "
"https://github.com/Pylons/pyramid/pull/1649"
msgstr "JSONPコールバックにピリオドと大括弧（ `` [] ``）を付けてください。元の修正は過度に制限的であり、Angularを破った。 https://github.com/Pylons/pyramid/pull/1649を参照してください。"

#: ../../../HISTORY.txt:699
msgid "1.6a1 (2015-04-15)"
msgstr "1.6a1（2015-04-15）"

#: ../../../HISTORY.txt:704
msgid ""
"pcreate will now ask for confirmation if invoked with an argument for a "
"project name that already exists or is importable in the current "
"environment. See https://github.com/Pylons/pyramid/issues/1357 and "
"https://github.com/Pylons/pyramid/pull/1837"
msgstr "現在存在するプロジェクト名、または現在の環境でインポート可能なプロジェクト名の引数を指定して起動すると、確認メッセージが表示されます。 https://github.com/Pylons/pyramid/issues/1357およびhttps://github.com/Pylons/pyramid/pull/1837を参照してください。"

#: ../../../HISTORY.txt:710
msgid ""
"Make it possible to subclass ``pyramid.request.Request`` and also use "
"``pyramid.request.Request.add_request.method``.  See "
"https://github.com/Pylons/pyramid/issues/1529"
msgstr "`` pyramid.request.Request``をサブクラス化し、 `` pyramid.request.Request.add_request.method``を使うことも可能です。 https://github.com/Pylons/pyramid/issues/1529を参照してください。"

#: ../../../HISTORY.txt:714
msgid ""
"The ``pyramid.config.Configurator`` has grown the ability to allow "
"actions to call other actions during a commit-cycle. This enables much "
"more logic to be placed into actions, such as the ability to invoke other"
" actions or group them for improved conflict detection. We have also "
"exposed and documented the config phases that Pyramid uses in order to "
"further assist in building conforming addons. See "
"https://github.com/Pylons/pyramid/pull/1513"
msgstr "`` pyramid.config.Configurator``は、アクションがコミットサイクル中に他のアクションを呼び出すことを可能にする機能を拡張しました。これにより、他のアクションを呼び出す機能や、競合検出を改善するためにそれらをグループ化する機能など、より多くのロジックをアクションに配置できます。また、適合したアドオンの構築をさらに支援するために、Pyramidが使用する設定フェーズを公開し、文書化しました。 https://github.com/Pylons/pyramid/pull/1513を参照してください。"

#: ../../../HISTORY.txt:722
msgid ""
"Add ``pyramid.request.apply_request_extensions`` function which can be "
"used in testing to apply any request extensions configured via "
"``config.add_request_method``. Previously it was only possible to test "
"the extensions by going through Pyramid's router. See "
"https://github.com/Pylons/pyramid/pull/1581"
msgstr "`` config.add_request_method``で設定されたリクエストエクステンションを適用するためのテストで使用できる `` pyramid.request.apply_request_extensions``関数を追加してください。以前は、Pyramidのルーターを経由して拡張機能をテストすることしかできませんでした。 https://github.com/Pylons/pyramid/pull/1581を参照してください。"

#: ../../../HISTORY.txt:728
msgid ""
"pcreate when run without a scaffold argument will now print information "
"on the missing flag, as well as a list of available scaffolds. See "
"https://github.com/Pylons/pyramid/pull/1566 and "
"https://github.com/Pylons/pyramid/issues/1297"
msgstr "scaffold引数を指定せずに実行すると、足りないフラグに関する情報だけでなく、使用可能な足場のリストも表示されるようになりました。 https://github.com/Pylons/pyramid/pull/1566およびhttps://github.com/Pylons/pyramid/issues/1297を参照してください。"

#: ../../../HISTORY.txt:733
msgid ""
"Added support / testing for 'pypy3' under Tox and Travis. See "
"https://github.com/Pylons/pyramid/pull/1469"
msgstr "ToxとTravisの下に &#39;pypy3&#39;のサポート/テストを追加しました。 https://github.com/Pylons/pyramid/pull/1469を参照してください。"

#: ../../../HISTORY.txt:736
msgid ""
"Automate code coverage metrics across py2 and py3 instead of just py2. "
"See https://github.com/Pylons/pyramid/pull/1471"
msgstr "py2の代わりにpy2とpy3のコードカバレッジメトリックを自動化します。 https://github.com/Pylons/pyramid/pull/1471を参照してください。"

#: ../../../HISTORY.txt:739
msgid ""
"Cache busting for static resources has been added and is available via a "
"new argument to ``pyramid.config.Configurator.add_static_view``: "
"``cachebust``. Core APIs are shipped for both cache busting via query "
"strings and path segments and may be extended to fit into custom asset "
"pipelines. See https://github.com/Pylons/pyramid/pull/1380 and "
"https://github.com/Pylons/pyramid/pull/1583"
msgstr "静的リソース用のキャッシュ破棄が追加され、 `` pyramid.config.Configurator.add_static_view``： `` cachebust``の新しい引数で利用できます。コアAPIは、クエリ文字列とパスセグメントによるキャッシュ破棄のために出荷され、カスタムアセットパイプラインに適合するように拡張できます。 https://github.com/Pylons/pyramid/pull/1380およびhttps://github.com/Pylons/pyramid/pull/1583を参照してください。"

#: ../../../HISTORY.txt:746
msgid ""
"Add ``pyramid.config.Configurator.root_package`` attribute and init "
"parameter to assist with includeable packages that wish to resolve "
"resources relative to the package in which the ``Configurator`` was "
"created. This is especially useful for addons that need to load asset "
"specs from settings, in which case it is may be natural for a developer "
"to define imports or assets relative to the top-level package. See "
"https://github.com/Pylons/pyramid/pull/1337"
msgstr "`` Configurator``が作成されたパッケージに関連するリソースを解決したいインクルード可能なパッケージを支援するために `` pyramid.config.Configurator.root_package``属性とinitパラメータを追加してください。これは、設定からアセット仕様をロードする必要のあるアドオンで特に便利です。その場合、開発者がトップレベルパッケージを基準にしてインポートまたはアセットを定義するのが自然かもしれません。 https://github.com/Pylons/pyramid/pull/1337を参照してください。"

#: ../../../HISTORY.txt:754
msgid ""
"Added line numbers to the log formatters in the scaffolds to assist with "
"debugging. See https://github.com/Pylons/pyramid/pull/1326"
msgstr "デバッグを支援する足場のログフォーマッタに行番号を追加しました。 https://github.com/Pylons/pyramid/pull/1326を参照してください。"

#: ../../../HISTORY.txt:757
msgid ""
"Add new HTTP exception objects for status codes ``428 Precondition "
"Required``, ``429 Too Many Requests`` and ``431 Request Header Fields Too"
" Large`` in ``pyramid.httpexceptions``. See "
"https://github.com/Pylons/pyramid/pull/1372/files"
msgstr "`` pyramid.httpexceptions``のステータスコード `` 428前提条件必須 &quot;、&quot; 429 &quot;、&quot; 431リクエストヘッダフィールドが大きすぎます &quot;という新しいHTTP例外オブジェクトを追加しました。 https://github.com/Pylons/pyramid/pull/1372/filesを参照してください。"

#: ../../../HISTORY.txt:762
msgid ""
"The ``pshell`` script will now load a ``PYTHONSTARTUP`` file if one is "
"defined in the environment prior to launching the interpreter. See "
"https://github.com/Pylons/pyramid/pull/1448"
msgstr "`` pshell``スクリプトは、インタープリタを起動する前に環境に定義されている場合、 `` PYTHONSTARTUP``ファイルを読み込みます。 https://github.com/Pylons/pyramid/pull/1448を参照してください。"

#: ../../../HISTORY.txt:766
msgid ""
"Make it simple to define notfound and forbidden views that wish to use "
"the default exception-response view but with altered predicates and other"
" configuration options. The ``view`` argument is now optional in "
"``config.add_notfound_view`` and ``config.add_forbidden_view``.. See "
"https://github.com/Pylons/pyramid/issues/494"
msgstr "デフォルトの例外レスポンス・ビューを使用するが、変更された述部およびその他の構成オプションを使用したい、ノーファンドおよび禁止ビューを簡単に定義できるようにする。 `` view``引数は、 `` config.add_notfound_view``と `` config.add_forbidden_​​view``ではオプションです。https://github.com/Pylons/pyramid/issues/494を参照してください。"

#: ../../../HISTORY.txt:772
msgid ""
"Greatly improve the readability of the ``pcreate`` shell script output. "
"See https://github.com/Pylons/pyramid/pull/1453"
msgstr "`` pcreate``シェルスクリプト出力の可読性を大幅に改善します。 https://github.com/Pylons/pyramid/pull/1453を参照してください。"

#: ../../../HISTORY.txt:775
msgid ""
"Improve robustness to timing attacks in the ``AuthTktCookieHelper`` and "
"the ``SignedCookieSessionFactory`` classes by using the stdlib's "
"``hmac.compare_digest`` if it is available (such as Python 2.7.7+ and "
"3.3+). See https://github.com/Pylons/pyramid/pull/1457"
msgstr "`` AuthTktCookieHelper``と `` SignedCookieSessionFactory``クラスのタイミング攻撃に対する堅牢性を向上させるには、stdlibの `` hmac.compare_digest``が利用可能な場合（Python 2.7.7+や3.3+など）、 https://github.com/Pylons/pyramid/pull/1457を参照してください。"

#: ../../../HISTORY.txt:780
msgid ""
"Assets can now be overidden by an absolute path on the filesystem when "
"using the ``config.override_asset`` API. This makes it possible to fully "
"support serving up static content from a mutable directory while still "
"being able to use the ``request.static_url`` API and "
"``config.add_static_view``. Previously it was not possible to use "
"``config.add_static_view`` with an absolute path **and** generate urls to"
" the content. This change replaces the call, "
"``config.add_static_view('/abs/path', 'static')``, with "
"``config.add_static_view('myapp:static', 'static')`` and "
"``config.override_asset(to_override='myapp:static/', "
"override_with='/abs/path/')``. The ``myapp:static`` asset spec is "
"completely made up and does not need to exist - it is used for generating"
" urls via ``request.static_url('myapp:static/foo.png')``. See "
"https://github.com/Pylons/pyramid/issues/1252"
msgstr "アセットは、 `` config.override_asset`` APIを使用するとき、ファイルシステム上の絶対パスによって上書きされるようになりました。これにより、 `` request.static_url`` APIと `` config.add_static_view``を使えるようにしながら、変更可能なディレクトリから静的コンテンツを提供することを完全にサポートすることができます。以前は、 `` config.add_static_view``を絶対パス**と**を使ってコンテンツにURLを生成することはできませんでした。この変更は `` config.add_static_view（ &#39;/ abs / path&#39;、 &#39;static&#39;） ``を `` config.add_static_view（ &#39;myapp：static&#39;、 &#39;static&#39;） ``と `` config &#39;に置き換えます。 override_asset（to_override = &#39;myapp：static /&#39;、override_with = &#39;/ abs / path /&#39;） ``です。 `` myapp：static``アセット仕様は完全に作られており、存在する必要はありません。これは `` request.static_url（ &#39;myapp：static / foo.png&#39;） ``でURLを生成するために使用されます。 https://github.com/Pylons/pyramid/issues/1252を参照してください。"

#: ../../../HISTORY.txt:794
msgid ""
"Added ``pyramid.config.Configurator.set_response_factory`` and the "
"``response_factory`` keyword argument to the ``Configurator`` for "
"defining a factory that will return a custom ``Response`` class. See "
"https://github.com/Pylons/pyramid/pull/1499"
msgstr "カスタム `` Response``クラスを返すファクトリを定義するための `` Configurator``に `` pyramid.config.Configurator.set_response_factory``と `` response_factory``キーワード引数を追加しました。 https://github.com/Pylons/pyramid/pull/1499を参照してください。"

#: ../../../HISTORY.txt:799
msgid ""
"Allow an iterator to be returned from a renderer. Previously it was only "
"possible to return bytes or unicode. See "
"https://github.com/Pylons/pyramid/pull/1417"
msgstr "イテレータがレンダラから返されるようにします。以前は、バイトまたはユニコードを返すことしかできませんでした。 https://github.com/Pylons/pyramid/pull/1417を参照してください。"

#: ../../../HISTORY.txt:803
msgid ""
"``pserve`` can now take a ``-b`` or ``--browser`` option to open the "
"server URL in a web browser. See "
"https://github.com/Pylons/pyramid/pull/1533"
msgstr "`` pserve``は `` -b``または `` --browser``オプションを使って、WebブラウザでサーバURLを開きます。 https://github.com/Pylons/pyramid/pull/1533を参照してください。"

#: ../../../HISTORY.txt:806
msgid ""
"Overall improvments for the ``proutes`` command. Added ``--format`` and "
"``--glob`` arguments to the command, introduced the ``method`` column for"
" displaying available request methods, and improved the ``view`` output "
"by showing the module instead of just ``__repr__``. See "
"https://github.com/Pylons/pyramid/pull/1488"
msgstr "`` proutes``コマンドの全体的な改良。コマンドに `` --format``と `` --glob``引数を追加し、利用可能なリクエストメソッドを表示するための `` method``カラムを導入し、 `` view``の出力を改善しました。ちょうど `` __repr__``です。 https://github.com/Pylons/pyramid/pull/1488を参照してください。"

#: ../../../HISTORY.txt:812
msgid ""
"Support keyword-only arguments and function annotations in views in "
"Python 3. See https://github.com/Pylons/pyramid/pull/1556"
msgstr "Python 3のビューでキーワードのみの引数と関数アノテーションをサポートしています。https://github.com/Pylons/pyramid/pull/1556を参照してください。"

#: ../../../HISTORY.txt:815
msgid ""
"``request.response`` will no longer be mutated when using the "
"``pyramid.renderers.render_to_response()`` API.  It is now necessary to "
"pass in a ``response=`` argument to ``render_to_response`` if you wish to"
" supply the renderer with a custom response object for it to use. If you "
"do not pass one then a response object will be created using the "
"application's ``IResponseFactory``. Almost all renderers mutate the "
"``request.response`` response object (for example, the JSON renderer sets"
" ``request.response.content_type`` to ``application/json``). However, "
"when invoking ``render_to_response`` it is not expected that the response"
" object being returned would be the same one used later in the request. "
"The response object returned from ``render_to_response`` is now "
"explicitly different from ``request.response``. This does not change the "
"API of a renderer. See https://github.com/Pylons/pyramid/pull/1563"
msgstr "`` request.response``は `` pyramid.renderers.render_to_response（） `` APIを使用してもはや変更されません。レンダラーにカスタム応答オブジェクトを提供したい場合は、 `` render_to_response``に `` response = ``引数を渡す必要があります。それを渡さないと、アプリケーションの `` IResponseFactory``を使ってレスポンスオブジェクトが作成されます。ほぼすべてのレンダラーが `` request.response``レスポンスオブジェクトを変更します（例えば、JSONレンダラーは `` application / json``に `` request.response.content_type``を設定します）。しかし、 `` render_to_response``を呼び出すとき、返される応答オブジェクトは、要求の中で後で使用されるものと同じであるとは限りません。 `` render_to_response``から返された応答オブジェクトは、 `` request.response``と明示的に異なっています。これはレンダラーのAPIを変更しません。 https://github.com/Pylons/pyramid/pull/1563を参照してください。"

#: ../../../HISTORY.txt:829
msgid ""
"The ``append_slash`` argument of ```Configurator().add_notfound_view()`` "
"will now accept anything that implements the ``IResponse`` interface and "
"will use that as the response class instead of the default ``HTTPFound``."
"  See https://github.com/Pylons/pyramid/pull/1610"
msgstr "`` Configurator（）。add_notfound_view（） ``の `` append_slash``引数は、 `` IResponse``インターフェースを実装したものを受け入れ、デフォルトの `` HTTPFound``の代わりにレスポンスクラスとして使用します。 https://github.com/Pylons/pyramid/pull/1610を参照してください。"

#: ../../../HISTORY.txt:837
msgid ""
"The JSONP renderer created JavaScript code in such a way that a callback "
"variable could be used to arbitrarily inject javascript into the response"
" object. https://github.com/Pylons/pyramid/pull/1627"
msgstr "JSONPレンダラーはJavaScriptコードを作成し、コールバック変数を使用して任意にjavascriptを応答オブジェクトに挿入することができます。 https://github.com/Pylons/pyramid/pull/1627"

#: ../../../HISTORY.txt:841
msgid ""
"Work around an issue where ``pserve --reload`` would leave terminal echo "
"disabled if it reloaded during a pdb session. See "
"https://github.com/Pylons/pyramid/pull/1577, "
"https://github.com/Pylons/pyramid/pull/1592"
msgstr "`` pserve --reload``がpdbセッション中にリロードされた場合、ターミナルエコーを無効にしてしまう問題を回避してください。 https://github.com/Pylons/pyramid/pull/1577、https://github.com/Pylons/pyramid/pull/1592を参照してください。"

#: ../../../HISTORY.txt:846
msgid ""
"``pyramid.wsgi.wsgiapp`` and ``pyramid.wsgi.wsgiapp2`` now raise "
"``ValueError`` when accidentally passed ``None``. See "
"https://github.com/Pylons/pyramid/pull/1320"
msgstr "`` pyramid.wsgi.wsgiapp``と `` pyramid.wsgi.wsgiapp2``は、誤って `` None``を渡したときに `` ValueError``を送出します。 https://github.com/Pylons/pyramid/pull/1320を参照してください。"

#: ../../../HISTORY.txt:850
msgid ""
"Fix an issue whereby predicates would be resolved as maybe_dotted in the "
"introspectable but not when passed for registration. This would mean that"
" ``add_route_predicate`` for example can not take a string and turn it "
"into the actual callable function. See "
"https://github.com/Pylons/pyramid/pull/1306"
msgstr "イントロスペクティブでは述語がmaybe_dottedとして解決されますが、登録に渡されたときには述語が解決されないという問題を修正しました。これは、例えば `` add_route_predicate``が文字列を受け取り、それを実際の呼び出し可能な関数に変換することができないことを意味します。 https://github.com/Pylons/pyramid/pull/1306を参照してください。"

#: ../../../HISTORY.txt:856
msgid ""
"Fix ``pyramid.testing.setUp`` to return a ``Configurator`` with a proper "
"package. Previously it was not possible to do package-relative includes "
"using the returned ``Configurator`` during testing. There is now a "
"``package`` argument that can override this behavior as well. See "
"https://github.com/Pylons/pyramid/pull/1322"
msgstr "`` pyramid.testing.setUp``が適切なパッケージで `` Configurator``を返すように修正しました。以前は、テスト中に返された `` Configurator``を使ってパッケージ相対インクルードを行うことはできませんでした。この動作を上書きできる `` package``引数があります。 https://github.com/Pylons/pyramid/pull/1322を参照してください。"

#: ../../../HISTORY.txt:862
msgid ""
"Fix an issue where a ``pyramid.response.FileResponse`` may apply a "
"charset where it does not belong. See "
"https://github.com/Pylons/pyramid/pull/1251"
msgstr "`` pyramid.response.FileResponse``が、それが属していない文字セットを適用するかもしれない問題を修正しました。 https://github.com/Pylons/pyramid/pull/1251を参照してください。"

#: ../../../HISTORY.txt:865
msgid ""
"Work around a bug introduced in Python 2.7.7 on Windows where "
"``mimetypes.guess_type`` returns Unicode rather than str for the content "
"type, unlike any previous version of Python.  See "
"https://github.com/Pylons/pyramid/issues/1360 for more information."
msgstr "Pythonの以前のバージョンとは違って、 `` mimetypes.guess_type``がコンテンツタイプのstrではなくUnicodeを返すWindows上のPython 2.7.7で導入されたバグを回避しましょう。詳細については、https://github.com/Pylons/pyramid/issues/1360を参照してください。"

#: ../../../HISTORY.txt:870
msgid ""
"``pcreate`` now normalizes the package name by converting hyphens to "
"underscores. See https://github.com/Pylons/pyramid/pull/1376"
msgstr "`` pcreate``はハイフンをアンダースコアに変換することでパッケージ名を正規化します。 https://github.com/Pylons/pyramid/pull/1376を参照してください。"

#: ../../../HISTORY.txt:873
msgid ""
"Fix an issue with the final response/finished callback being unable to "
"add another callback to the list. See "
"https://github.com/Pylons/pyramid/pull/1373"
msgstr "最終応答/完了コールバックで問題を修正し、別のコールバックをリストに追加できないようにしました。 https://github.com/Pylons/pyramid/pull/1373を参照してください。"

#: ../../../HISTORY.txt:877
msgid ""
"Fix a failing unittest caused by differing mimetypes across various OSs. "
"See https://github.com/Pylons/pyramid/issues/1405"
msgstr "さまざまなOSの異なるMIMEタイプに起因する失敗したユニットテストを修正しました。 https://github.com/Pylons/pyramid/issues/1405を参照してください。"

#: ../../../HISTORY.txt:880
msgid ""
"Fix route generation for static view asset specifications having no path."
" See https://github.com/Pylons/pyramid/pull/1377"
msgstr "パスのない静的ビューのアセット仕様のルート生成を修正しました。 https://github.com/Pylons/pyramid/pull/1377を参照してください。"

#: ../../../HISTORY.txt:883
msgid ""
"Allow the ``pyramid.renderers.JSONP`` renderer to work even if there is "
"no valid request object. In this case it will not wrap the object in a "
"callback and thus behave just like the ``pyramid.renderers.JSON`` "
"renderer. See https://github.com/Pylons/pyramid/pull/1561"
msgstr "有効なリクエストオブジェクトがなくても、 `` pyramid.renderers.JSONP``レンダラを動作させることができます。この場合、オブジェクトをコールバックにラップすることはないので、 `` pyramid.renderers.JSON``レンダラーのように動作します。 https://github.com/Pylons/pyramid/pull/1561を参照してください。"

#: ../../../HISTORY.txt:888
msgid ""
"Prevent \"parameters to load are deprecated\" ``DeprecationWarning`` from"
" setuptools>=11.3. See https://github.com/Pylons/pyramid/pull/1541"
msgstr "Prevent \ &quot;パラメータは非推奨です\&quot; `` DeprecationWarning``からsetuptools&gt; = 11.3。 https://github.com/Pylons/pyramid/pull/1541を参照してください。"

#: ../../../HISTORY.txt:891
msgid ""
"Avoiding sharing the ``IRenderer`` objects across threads when attached "
"to a view using the `renderer=` argument. These renderers were "
"instantiated at time of first render and shared between requests, causing"
" potentially subtle effects like `pyramid.reload_templates = true` "
"failing to work in `pyramid_mako`. See "
"https://github.com/Pylons/pyramid/pull/1575 and "
"https://github.com/Pylons/pyramid/issues/1268"
msgstr "`renderer =`引数を使用してビューにアタッチするときにスレッド間で `` IRenderer``オブジェクトを共有することを避けてください。これらのレンダラーは最初のレンダリング時にインスタンス化され、要求間で共有され、 `pyramid.reload_templates = true`のような微妙な効果を引き起こし、` pyramid_mako`で機能しませんでした。 https://github.com/Pylons/pyramid/pull/1575およびhttps://github.com/Pylons/pyramid/issues/1268を参照してください。"

#: ../../../HISTORY.txt:898
msgid ""
"Avoiding timing attacks against CSRF tokens. See "
"https://github.com/Pylons/pyramid/pull/1574"
msgstr "CSRFトークンに対するタイミング攻撃を回避する。 https://github.com/Pylons/pyramid/pull/1574を参照してください。"

#: ../../../HISTORY.txt:901
msgid ""
"``request.finished_callbacks`` and ``request.response_callbacks`` now "
"default to an iterable instead of ``None``. It may be checked for a "
"length of 0. This was the behavior in 1.5."
msgstr "`` request.finished_callbacks``と `` request.response_callbacks``はデフォルトで `` None``ではなく `` iterable``になりました。長さが0であるかどうかを調べることができます。これは1.5の動作です。"

#: ../../../HISTORY.txt:908
msgid ""
"The ``pserve`` command's daemonization features have been deprecated. "
"This includes the ``[start,stop,restart,status]`` subcommands as well as "
"the ``--daemon``, ``--stop-server``, ``--pid-file``, and ``--status`` "
"flags."
msgstr "`` pserve``コマンドのデーモン化機能は廃止されました。これには、 `` --daemon``、 `` --stop-server``、 `` -pid-file``、 `` -daemon``と同様に、 ``開始、停止、再起動、ステータス ``サブコマンドも含まれます。 `` --status``フラグ。"

#: ../../../HISTORY.txt:912
msgid ""
"Please use a real process manager in the future instead of relying on the"
" ``pserve`` to daemonize itself. Many options exist including your "
"Operating System's services such as Systemd or Upstart, as well as "
"Python-based solutions like Circus and Supervisor."
msgstr "`` pserve``に依存するのではなく、実際のプロセスマネージャを使って、自分自身をデーモン化してください。あなたのオペレーティングシステムのサービス（SystemdやUpstartなど）やサーカスやスーパーバイザなどのPythonベースのソリューションを含む多くのオプションが存在します。"

#: ../../../HISTORY.txt:917
msgid "See https://github.com/Pylons/pyramid/pull/1641"
msgstr "https://github.com/Pylons/pyramid/pull/1641を参照してください。"

#: ../../../HISTORY.txt:919
msgid ""
"Renamed the ``principal`` argument to ``pyramid.security.remember()`` to "
"``userid`` in order to clarify its intended purpose. See "
"https://github.com/Pylons/pyramid/pull/1399"
msgstr "目的を明確にするために、 `` principal``引数を `` pyramid.security.remember（） ``から `` userid``に改名しました。 https://github.com/Pylons/pyramid/pull/1399を参照してください。"

#: ../../../BFG_HISTORY.txt:6034 ../../../BFG_HISTORY.txt:6105
#: ../../../HISTORY.txt:924 ../../../HISTORY.txt:1648 ../../../HISTORY.txt:1662
msgid "Docs"
msgstr "ドキュメント"

#: ../../../HISTORY.txt:926
msgid ""
"Moved the documentation for ``accept`` on ``Configurator.add_view`` to no"
" longer be part of the predicate list. See "
"https://github.com/Pylons/pyramid/issues/1391 for a bug report stating "
"``not_`` was failing on ``accept``. Discussion with @mcdonc led to the "
"conclusion that it should not be documented as a predicate. See "
"https://github.com/Pylons/pyramid/pull/1487 for this PR"
msgstr "`` Configurator.add_view``の `` accept``のドキュメントをもはや述語リストの一部に移動しませんでした。 `` not_``が `` accept``で失敗したというバグレポートについては、https://github.com/Pylons/pyramid/issues/1391を参照してください。 @mcdoncとの議論は、それが述語として文書化されるべきではないという結論に導いた。このPRについては、https://github.com/Pylons/pyramid/pull/1487を参照してください。"

#: ../../../HISTORY.txt:933
msgid ""
"Removed logging configuration from Quick Tutorial ini files except for "
"scaffolding- and logging-related chapters to avoid needing to explain it "
"too early."
msgstr "クイックチュートリアルのiniファイルからロギング設定を削除しました。スキャフォールディングやロギング関連の章を除いて、早すぎる説明は不要です。"

#: ../../../HISTORY.txt:937
msgid ""
"Clarify a previously-implied detail of the ``ISession.invalidate`` API "
"documentation."
msgstr "`` ISession.invalidate`` APIドキュメントの暗黙の詳細を明確にしてください。"

#: ../../../HISTORY.txt:940
msgid ""
"Improve and clarify the documentation on what Pyramid defines as a "
"``principal`` and a ``userid`` in its security APIs. See "
"https://github.com/Pylons/pyramid/pull/1399"
msgstr "ピラミッドがセキュリティAPIで「プリンシパル」と「ユーザーID」と定義しているドキュメントを改善し、明確にします。 https://github.com/Pylons/pyramid/pull/1399を参照してください。"

#: ../../../HISTORY.txt:944
msgid ""
"Add documentation of command line programs (``p*`` scripts). See "
"https://github.com/Pylons/pyramid/pull/2191"
msgstr "コマンドラインプログラムのドキュメントを追加する（ `` p * ``スクリプト）。 https://github.com/Pylons/pyramid/pull/2191を参照してください。"

#: ../../../HISTORY.txt:948 ../../../HISTORY.txt:2374 ../../../HISTORY.txt:3064
#: ../../../HISTORY.txt:3174 ../../../HISTORY.txt:3517
msgid "Scaffolds"
msgstr "足場"

#: ../../../HISTORY.txt:950
msgid ""
"Update scaffold generating machinery to return the version of pyramid and"
" pyramid docs for use in scaffolds. Updated starter, alchemy and zodb "
"templates to have links to correctly versioned documentation and reflect "
"which pyramid was used to generate the scaffold."
msgstr "足場に使用するためのピラミッドとピラミッドのドキュメントのバージョンを返すように足場を生成する機械を更新します。開始版、錬金術、zodbのテンプレートを更新し、正しくバージョン管理されたドキュメントへのリンクを提供し、足場を生成するために使用されたピラミッドを反映させました。"

#: ../../../HISTORY.txt:955
msgid ""
"Removed non-ascii copyright symbol from templates, as this was causing "
"the scaffolds to fail for project generation."
msgstr "テンプレートから非ascii著作権シンボルを削除しました。これにより、足場がプロジェクト生成に失敗する原因となりました。"

#: ../../../HISTORY.txt:958
msgid ""
"You can now run the scaffolding func tests via ``tox py2-scaffolds`` and "
"``tox py3-scaffolds``."
msgstr "scaffolding funcテストは、 `` tox py2-scaffolds``と `` tox py3-scaffolds``を使って実行できます。"

#: ../../../HISTORY.txt:963
msgid "1.5 (2014-04-08)"
msgstr "1.5（2014-04-08）"

#: ../../../HISTORY.txt:965
msgid "Python 3.4 compatibility."
msgstr "Python 3.4との互換性。"

#: ../../../HISTORY.txt:967
msgid ""
"Avoid crash in ``pserve --reload`` under Py3k, when iterating over "
"possibly mutated ``sys.modules``."
msgstr "おそらく変更された `` sys.modules``を反復するとき、Py3kの `` pserve --reload``でクラッシュを避けてください。"

#: ../../../HISTORY.txt:970
msgid ""
"``UnencryptedCookieSessionFactoryConfig`` failed if the secret contained "
"higher order characters. See "
"https://github.com/Pylons/pyramid/issues/1246"
msgstr "秘密に上位の文字が含まれていると、 `` UnencryptedCookieSessionFactoryConfig``が失敗しました。 https://github.com/Pylons/pyramid/issues/1246を参照してください。"

#: ../../../HISTORY.txt:973
msgid ""
"Fixed a bug in ``UnencryptedCookieSessionFactoryConfig`` and "
"``SignedCookieSessionFactory`` where ``timeout=None`` would cause a new "
"session to always be created. Also in ``SignedCookieSessionFactory`` a "
"``reissue_time=None`` would cause an exception when modifying the "
"session. See https://github.com/Pylons/pyramid/issues/1247"
msgstr "`` UnencryptedCookieSessionFactoryConfig``と `` SignedCookieSessionFactory``のバグを修正しました。 `` timeout = None``を指定すると、常に新しいセッションが作成されます。また、 `` SignedCookieSessionFactory``の `` reissue_time = None``は、セッションを変更する際に例外を引き起こします。 https://github.com/Pylons/pyramid/issues/1247を参照してください。"

#: ../../../HISTORY.txt:979
msgid ""
"Updated docs and scaffolds to keep in step with new 2.0 release of "
"``Lingua``.  This included removing all ``setup.cfg`` files from "
"scaffolds and documentation environments."
msgstr "ドキュメンテーションとスキャフォールドを更新し、 ``ングワ（Lingua） `の新バージョン2.0を続ける。これには、すべての `` setup.cfg``ファイルを足場やドキュメント環境から削除することが含まれていました。"

#: ../../../HISTORY.txt:984
msgid "1.5b1 (2014-02-08)"
msgstr "1.5b1（2014-02-08）"

#: ../../../HISTORY.txt:989
msgid ""
"We no longer eagerly clear ``request.exception`` and ``request.exc_info``"
" in the exception view tween.  This makes it possible to inspect "
"exception information within a finished callback.  See "
"https://github.com/Pylons/pyramid/issues/1223."
msgstr "我々は、もはや `` request.exception``と `` request.exc_info``を例外ビューtweenで熱心にクリアしません。これにより、完了したコールバック内の例外情報を検査することができます。 https://github.com/Pylons/pyramid/issues/1223を参照してください。"

#: ../../../HISTORY.txt:995
msgid "1.5a4 (2014-01-28)"
msgstr "1.5a4（2014-01-28）"

#: ../../../HISTORY.txt:1000
msgid "Updated scaffolds with new theme, fixed documentation and sample project."
msgstr "新しいテーマ、固定ドキュメント、サンプルプロジェクトで足場を更新しました。"

#: ../../../HISTORY.txt:1005
msgid ""
"Depend on a newer version of WebOb so that we pull in some crucial bug-"
"fixes that were showstoppers for functionality in Pyramid."
msgstr "新しいバージョンのWebObに依存して、Pyramidの機能性を支える重要なバグフィックスを引き出します。"

#: ../../../HISTORY.txt:1008
msgid ""
"Add a trailing semicolon to the JSONP response. This fixes JavaScript "
"syntax errors for old IE versions. See "
"https://github.com/Pylons/pyramid/pull/1205"
msgstr "末尾のセミコロンをJSONPレスポンスに追加します。これにより、古いIEバージョンのJavaScript構文エラーが修正されます。 https://github.com/Pylons/pyramid/pull/1205を参照してください。"

#: ../../../HISTORY.txt:1011
msgid ""
"Fix a memory leak when the configurator's ``set_request_property`` method"
" was used or when the configurator's ``add_request_method`` method was "
"used with the ``property=True`` attribute.  See "
"https://github.com/Pylons/pyramid/issues/1212 ."
msgstr "コンフィグレータの `` set_request_property``メソッドが使用されたとき、またはコンフィグレータの `` add_request_method``メソッドが `` property = True``属性とともに使われたときにメモリリークを修正しました。 https://github.com/Pylons/pyramid/issues/1212を参照してください。"

#: ../../../HISTORY.txt:1017
msgid "1.5a3 (2013-12-10)"
msgstr "1.5a3（2013-12-10）"

#: ../../../HISTORY.txt:1022
msgid ""
"An authorization API has been added as a method of the request: "
"``request.has_permission``."
msgstr "要求のメソッドとして許可APIが追加されました： `` request.has_permission``。"

#: ../../../HISTORY.txt:1025
msgid ""
"``request.has_permission`` is a method-based alternative to the "
"``pyramid.security.has_permission`` API and works exactly the same.  The "
"older API is now deprecated."
msgstr "`` request.has_permission``は `` pyramid.security.has_permission`` APIのメソッドベースの代替であり、まったく同じ働きをします。古いAPIは廃止されました。"

#: ../../../HISTORY.txt:1029
msgid ""
"Property API attributes have been added to the request for easier access "
"to authentication data: ``request.authenticated_userid``, "
"``request.unauthenticated_userid``, and ``request.effective_principals``."
msgstr "認証データへのアクセスを容易にするために、プロパティAPI属性がリクエストに追加されました： `` request.authenticated_userid``、 `` request.unauthenticated_userid``、 `` request.effective_principals``です。"

#: ../../../HISTORY.txt:1033
msgid ""
"These are analogues, respectively, of "
"``pyramid.security.authenticated_userid``, "
"``pyramid.security.unauthenticated_userid``, and "
"``pyramid.security.effective_principals``.  They operate exactly the "
"same, except they are attributes of the request instead of functions "
"accepting a request.  They are properties, so they cannot be assigned to."
"  The older function-based APIs are now deprecated."
msgstr "これらは、それぞれ `` pyramid.security.authenticated_userid``、 `` pyramid.security.unauthenticated_userid``、および `` pyramid.security.effective_principals``のアナログです。要求を受け入れる関数ではなく、要求の属性である点を除いて、まったく同じように動作します。それらはプロパティなので、割り当てることはできません。古い関数ベースのAPIは非推奨になりました。"

#: ../../../HISTORY.txt:1041
msgid ""
"Pyramid's console scripts (``pserve``, ``pviews``, etc) can now be run "
"directly, allowing custom arguments to be sent to the python interpreter "
"at runtime. For example::"
msgstr "Pyramidのコンソールスクリプト（ `` pserve``、 `` pviews``など）は、実行時にPythonインタプリタにカスタム引数を送ることができるようになりました。例えば：："

#: ../../../HISTORY.txt:1047
msgid ""
"Added a specific subclass of ``HTTPBadRequest`` named "
"``pyramid.exceptions.BadCSRFToken`` which will now be raised in response "
"to failures in ``check_csrf_token``. See "
"https://github.com/Pylons/pyramid/pull/1149"
msgstr "`` pyramid.exceptions.BadCSRFToken``という名前の `` HTTPBadRequest``の特定のサブクラスを追加しました。これは `` check_csrf_token``の失敗に対応して呼び出されます。 https://github.com/Pylons/pyramid/pull/1149を参照してください。"

#: ../../../HISTORY.txt:1052
msgid ""
"Added a new ``SignedCookieSessionFactory`` which is very similar to the "
"``UnencryptedCookieSessionFactoryConfig`` but with a clearer focus on "
"signing content. The custom serializer arguments to this function should "
"only focus on serializing, unlike its predecessor which required the "
"serializer to also perform signing.  See "
"https://github.com/Pylons/pyramid/pull/1142 .  Note that cookies "
"generated using ``SignedCookieSessionFactory`` are not compatible with "
"cookies generated using ``UnencryptedCookieSessionFactory``, so existing "
"user session data will be destroyed if you switch to it."
msgstr "`` UnencryptedCookieSessionFactoryConfig``に非常に似ていますが、署名にもっと焦点を当てた新しい `` SignedCookieSessionFactory``を追加しました。この関数のカスタムシリアライザ引数は、シリアライザにも署名を実行することを要求していた前のバージョンとは異なり、シリアライズにのみ焦点を合わせる必要があります。 https://github.com/Pylons/pyramid/pull/1142を参照してください。 `` SignedCookieSessionFactory``を使って生成されたクッキーは `` UnencryptedCookieSessionFactory``を使って生成されたクッキーと互換性がないので、既存のユーザセッションデータはあなたがそれに切り替えると破壊されることに注意してください。"

#: ../../../HISTORY.txt:1061
msgid ""
"Added a new ``BaseCookieSessionFactory`` which acts as a generic cookie "
"factory that can be used by framework implementors to create their own "
"session implementations. It provides a reusable API which focuses "
"strictly on providing a dictionary-like object that properly handles "
"renewals, timeouts, and conformance with the ``ISession`` API. See "
"https://github.com/Pylons/pyramid/pull/1142"
msgstr "独自のセッション実装を作成するためにフレームワーク実装者が使用できる汎用クッキーファクトリとして機能する新しい `` BaseCookieSessionFactory``を追加しました。これは、再利用、タイムアウト、および `` Session API`の適合性を適切に処理する辞書のようなオブジェクトを提供することに厳密に焦点を当てた、再利用可能なAPIを提供します。 https://github.com/Pylons/pyramid/pull/1142を参照してください。"

#: ../../../HISTORY.txt:1068
msgid ""
"The anchor argument to ``pyramid.request.Request.route_url`` and "
"``pyramid.request.Request.resource_url`` and their derivatives will now "
"be escaped via URL quoting to ensure minimal conformance.  See "
"https://github.com/Pylons/pyramid/pull/1183"
msgstr "`` pyramid.request.Request.route_url``と `` pyramid.request.Request.resource_url``のアンカー引数とその派生派生物は、最小の適合性を保証するためにURLクォートでエスケープされます。 https://github.com/Pylons/pyramid/pull/1183を参照してください。"

#: ../../../HISTORY.txt:1073
msgid ""
"Allow sending of ``_query`` and ``_anchor`` options to "
"``pyramid.request.Request.static_url`` when an external URL is being "
"generated. See https://github.com/Pylons/pyramid/pull/1183"
msgstr "外部URLが生成されているときに `` pyramid.request.Request.static_url``に `` _query``と `` _anchor``オプションを送ることを許可します。 https://github.com/Pylons/pyramid/pull/1183を参照してください。"

#: ../../../HISTORY.txt:1078
msgid ""
"You can now send a string as the ``_query`` argument to "
"``pyramid.request.Request.route_url`` and "
"``pyramid.request.Request.resource_url`` and their derivatives.  When a "
"string is sent instead of a list or dictionary. it is URL-quoted however "
"it does not need to be in ``k=v`` form.  This is useful if you want to be"
" able to use a different query string format than ``x-www-form-"
"urlencoded``.  See https://github.com/Pylons/pyramid/pull/1183"
msgstr "`` pyramid.request.Request.route_url``と `` pyramid.request.Request.resource_url``とその派生語に文字列を `` _query``引数として送ることができます。リストまたは辞書の代わりに文字列が送信されるとき。それはURLで引用されますが、 `` k = v``形式である必要はありません。これは、 `` x-www-form-urlencoded``とは異なるクエリ文字列形式を使用できるようにする場合に便利です。 https://github.com/Pylons/pyramid/pull/1183を参照してください。"

#: ../../../HISTORY.txt:1086
msgid ""
"``pyramid.testing.DummyRequest`` now has a ``domain`` attribute to match "
"the new WebOb 1.3 API.  Its value is ``example.com``."
msgstr "`` pyramid.testing.DummyRequest``には新しいWebOb 1.3 APIにマッチする `` domain``属性が追加されました。その値は `` example.com``です。"

#: ../../../HISTORY.txt:1092
msgid ""
"Fix the ``pcreate`` script so that when the target directory name ends "
"with a slash it does not produce a non-working project directory "
"structure. Previously saying ``pcreate -s starter /foo/bar/`` produced "
"different output than  saying ``pcreate -s starter /foo/bar``.  The "
"former did not work properly."
msgstr "ターゲットディレクトリ名がスラッシュで終わっても、動作していないプロジェクトディレクトリ構造が生成されないように、 `` pcreate``スクリプトを修正してください。これまでは、 `` pcreate -s startter / foo / bar / ``と言っても、 `` pcreate -s starter / foo / bar``とは異なる出力を生成していました。前者は正しく機能しませんでした。"

#: ../../../HISTORY.txt:1098
msgid ""
"Fix the ``principals_allowed_by_permission`` method of "
"``ACLAuthorizationPolicy`` so it anticipates a callable ``__acl__`` on "
"resources.  Previously it did not try to call the ``__acl__`` if it was "
"callable."
msgstr "`` ACLAuthorizationPolicy``の `` principals_allowed_by_permission``メソッドを修正し、リソース上で呼び出し可能な `` __acl__``を予期します。以前は、呼び出し可能であれば `` __acl__``を呼び出そうとしませんでした。"

#: ../../../HISTORY.txt:1103
msgid ""
"The ``pviews`` script did not work when a url required custom request "
"methods in order to perform traversal. Custom methods and descriptors "
"added via ``pyramid.config.Configurator.add_request_method`` will now be "
"present, allowing traversal to continue. See "
"https://github.com/Pylons/pyramid/issues/1104"
msgstr "`` pviews``スクリプトは、urlがトラバーサルを実行するためにカスタムリクエストメソッドを必要とするときには機能しませんでした。 `` pyramid.config.Configurator.add_request_method``で追加されたカスタムメソッドと記述子が表示され、トラバーサルを続行できます。 https://github.com/Pylons/pyramid/issues/1104を参照してください。"

#: ../../../HISTORY.txt:1109
msgid "Remove unused ``renderer`` argument from ``Configurator.add_route``."
msgstr "未使用の `` renderer``引数を `` Configurator.add_route``から削除してください。"

#: ../../../HISTORY.txt:1111
msgid ""
"Allow the ``BasicAuthenticationPolicy`` to work with non-ascii usernames "
"and passwords. The charset is not passed as part of the header and "
"different browsers alternate between UTF-8 and Latin-1, so the policy now"
" attempts to decode with UTF-8 first, and will fallback to Latin-1. See "
"https://github.com/Pylons/pyramid/pull/1170"
msgstr "`` BasicAuthenticationPolicy``が非ASCIIのユーザ名とパスワードで動作することを許可します。この文字セットはヘッダーの一部として渡されず、さまざまなブラウザーがUTF-8とLatin-1を交互に使用するため、ポリシーはまずUTF-8でデコードしようとし、Latin-1にフォールバックします。 https://github.com/Pylons/pyramid/pull/1170を参照してください。"

#: ../../../HISTORY.txt:1117
msgid ""
"The ``@view_defaults`` now apply to notfound and forbidden views that are"
" defined as methods of a decorated class. See "
"https://github.com/Pylons/pyramid/issues/1173"
msgstr "`` @ view_defaults``は修飾されたクラスのメソッドとして定義されているnotfoundビューとforbiddenビューに適用されます。 https://github.com/Pylons/pyramid/issues/1173を参照してください。"

#: ../../../BFG_HISTORY.txt:17 ../../../BFG_HISTORY.txt:191
#: ../../../BFG_HISTORY.txt:256 ../../../BFG_HISTORY.txt:407
#: ../../../BFG_HISTORY.txt:489 ../../../BFG_HISTORY.txt:577
#: ../../../BFG_HISTORY.txt:645 ../../../BFG_HISTORY.txt:742
#: ../../../BFG_HISTORY.txt:914 ../../../BFG_HISTORY.txt:995
#: ../../../BFG_HISTORY.txt:1035 ../../../BFG_HISTORY.txt:1081
#: ../../../BFG_HISTORY.txt:1224 ../../../BFG_HISTORY.txt:1307
#: ../../../BFG_HISTORY.txt:1415 ../../../BFG_HISTORY.txt:1447
#: ../../../BFG_HISTORY.txt:1549 ../../../BFG_HISTORY.txt:1597
#: ../../../BFG_HISTORY.txt:1726 ../../../BFG_HISTORY.txt:1781
#: ../../../BFG_HISTORY.txt:1875 ../../../BFG_HISTORY.txt:1959
#: ../../../BFG_HISTORY.txt:2282 ../../../BFG_HISTORY.txt:2299
#: ../../../BFG_HISTORY.txt:2387 ../../../BFG_HISTORY.txt:2458
#: ../../../BFG_HISTORY.txt:2515 ../../../BFG_HISTORY.txt:2622
#: ../../../BFG_HISTORY.txt:2712 ../../../BFG_HISTORY.txt:2774
#: ../../../BFG_HISTORY.txt:2840 ../../../BFG_HISTORY.txt:2970
#: ../../../BFG_HISTORY.txt:3035 ../../../BFG_HISTORY.txt:3289
#: ../../../BFG_HISTORY.txt:3464 ../../../BFG_HISTORY.txt:3559
#: ../../../BFG_HISTORY.txt:3706 ../../../BFG_HISTORY.txt:3742
#: ../../../BFG_HISTORY.txt:3791 ../../../BFG_HISTORY.txt:3994
#: ../../../BFG_HISTORY.txt:4032 ../../../BFG_HISTORY.txt:4081
#: ../../../BFG_HISTORY.txt:4146 ../../../BFG_HISTORY.txt:4201
#: ../../../BFG_HISTORY.txt:4545 ../../../BFG_HISTORY.txt:4589
#: ../../../BFG_HISTORY.txt:5014 ../../../BFG_HISTORY.txt:5053
#: ../../../BFG_HISTORY.txt:6002 ../../../HISTORY.txt:1122
#: ../../../HISTORY.txt:1856 ../../../HISTORY.txt:1932
#: ../../../HISTORY.txt:2049 ../../../HISTORY.txt:2324
#: ../../../HISTORY.txt:2384 ../../../HISTORY.txt:2538
#: ../../../HISTORY.txt:2648 ../../../HISTORY.txt:2709
#: ../../../HISTORY.txt:2873 ../../../HISTORY.txt:2905
#: ../../../HISTORY.txt:3047 ../../../HISTORY.txt:3105
#: ../../../HISTORY.txt:3135 ../../../HISTORY.txt:3472
#: ../../../HISTORY.txt:3575 ../../../HISTORY.txt:3587
#: ../../../HISTORY.txt:3744 ../../../HISTORY.txt:3843
#: ../../../HISTORY.txt:3905 ../../../HISTORY.txt:3984
#: ../../../HISTORY.txt:4376 ../../../HISTORY.txt:4439
#: ../../../HISTORY.txt:4509 ../../../HISTORY.txt:4671
#: ../../../HISTORY.txt:4792 ../../../HISTORY.txt:4885
#: ../../../HISTORY.txt:5038 ../../../HISTORY.txt:5090
#: ../../../HISTORY.txt:5172 ../../../HISTORY.txt:5250
#: ../../../HISTORY.txt:5295 ../../../HISTORY.txt:5347
#: ../../../HISTORY.txt:5392
msgid "Documentation"
msgstr "ドキュメンテーション"

#: ../../../HISTORY.txt:1124
msgid "Added a \"Quick Tutorial\" to go with the Quick Tour"
msgstr "クイックツアーには\ &quot;クイックチュートリアル\&quot;が追加されました"

#: ../../../HISTORY.txt:1126
msgid ""
"Removed mention of ``pyramid_beaker`` from docs.  Beaker is no longer "
"maintained.  Point people at ``pyramid_redis_sessions`` instead."
msgstr "docsから `` pyramid_beaker``を削除しました。ビーカーはもはや維持されていません。代わりに、 `` pyramid_redis_sessions``をポイントします。"

#: ../../../HISTORY.txt:1129
msgid ""
"Add documentation for ``pyramid.interfaces.IRendererFactory`` and "
"``pyramid.interfaces.IRenderer``."
msgstr "`` pyramid.interfaces.IRendererFactory``と `` pyramid.interfaces.IRenderer``のドキュメントを追加してください。"

#: ../../../BFG_HISTORY.txt:74 ../../../BFG_HISTORY.txt:153
#: ../../../BFG_HISTORY.txt:399 ../../../BFG_HISTORY.txt:471
#: ../../../BFG_HISTORY.txt:631 ../../../BFG_HISTORY.txt:798
#: ../../../BFG_HISTORY.txt:920 ../../../BFG_HISTORY.txt:1068
#: ../../../BFG_HISTORY.txt:1273 ../../../BFG_HISTORY.txt:1327
#: ../../../BFG_HISTORY.txt:1852 ../../../BFG_HISTORY.txt:2363
#: ../../../BFG_HISTORY.txt:2571 ../../../BFG_HISTORY.txt:2634
#: ../../../BFG_HISTORY.txt:2791 ../../../BFG_HISTORY.txt:2927
#: ../../../BFG_HISTORY.txt:3000 ../../../BFG_HISTORY.txt:3101
#: ../../../BFG_HISTORY.txt:3307 ../../../BFG_HISTORY.txt:3759
#: ../../../BFG_HISTORY.txt:3797 ../../../BFG_HISTORY.txt:3932
#: ../../../BFG_HISTORY.txt:4373 ../../../BFG_HISTORY.txt:4472
#: ../../../BFG_HISTORY.txt:4484 ../../../BFG_HISTORY.txt:4673
#: ../../../BFG_HISTORY.txt:4745 ../../../BFG_HISTORY.txt:4874
#: ../../../BFG_HISTORY.txt:4989 ../../../BFG_HISTORY.txt:5070
#: ../../../BFG_HISTORY.txt:5286 ../../../BFG_HISTORY.txt:5616
#: ../../../BFG_HISTORY.txt:5706 ../../../BFG_HISTORY.txt:5746
#: ../../../BFG_HISTORY.txt:5855 ../../../HISTORY.txt:1133
#: ../../../HISTORY.txt:1196 ../../../HISTORY.txt:1617
#: ../../../HISTORY.txt:1669 ../../../HISTORY.txt:2233
#: ../../../HISTORY.txt:2486 ../../../HISTORY.txt:2631
#: ../../../HISTORY.txt:2702 ../../../HISTORY.txt:2755
#: ../../../HISTORY.txt:2825 ../../../HISTORY.txt:2917
#: ../../../HISTORY.txt:3000 ../../../HISTORY.txt:3431
#: ../../../HISTORY.txt:3593 ../../../HISTORY.txt:3952
#: ../../../HISTORY.txt:4332 ../../../HISTORY.txt:4545
#: ../../../HISTORY.txt:4586 ../../../HISTORY.txt:4777
#: ../../../HISTORY.txt:5281
msgid "Backwards Incompatibilities"
msgstr "後方の非互換性"

#: ../../../HISTORY.txt:1135
msgid ""
"The key/values in the ``_query`` parameter of ``request.route_url`` and "
"the ``query`` parameter of ``request.resource_url`` (and their variants),"
" used to encode a value of ``None`` as the string ``'None'``, leaving the"
" resulting query string to be ``a=b&key=None``. The value is now dropped "
"in this situation, leaving a query string of ``a=b&key=``. See "
"https://github.com/Pylons/pyramid/issues/1119"
msgstr "`` request.route_url``の `` _query``パラメータと `` request.resource_url``の `` query``パラメータ（とその変形）のキー/値は、 `` None``を文字列 `` &#39;None&#39;``として返し、結果のクエリ文字列を `` a = b＆key = None``のままにします。この状況では値が削除され、 `` a = b＆key = ``というクエリ文字列が残っています。 https://github.com/Pylons/pyramid/issues/1119を参照してください。"

#: ../../../HISTORY.txt:1145
msgid ""
"Deprecate the ``pyramid.interfaces.ITemplateRenderer`` interface. It was "
"ill-defined and became unused when Mako and Chameleon template bindings "
"were split into their own packages."
msgstr "`` pyramid.interfaces.ITemplateRenderer``インタフェースを非推奨にしてください。 MakoとChameleonのテンプレートバインディングを独自のパッケージに分割すると、定義が不明瞭になり、使用されなくなりました。"

#: ../../../HISTORY.txt:1149
msgid ""
"The ``pyramid.session.UnencryptedCookieSessionFactoryConfig`` API has "
"been deprecated and is superseded by the "
"``pyramid.session.SignedCookieSessionFactory``.  Note that while the "
"cookies generated by the ``UnencryptedCookieSessionFactoryConfig`` are "
"compatible with cookies generated by old releases, cookies generated by "
"the SignedCookieSessionFactory are not. See "
"https://github.com/Pylons/pyramid/pull/1142"
msgstr "`` pyramid.session.UnencryptedCookieSessionFactoryConfig`` APIは廃止され、 `` pyramid.session.SignedCookieSessionFactory``に置き換えられました。 `` UnencryptedCookieSessionFactoryConfig``によって生成されたクッキーは古いリリースで生成されたクッキーと互換性がありますが、SignedCookieSessionFactoryによって生成されるクッキーはそうではありません。 https://github.com/Pylons/pyramid/pull/1142を参照してください。"

#: ../../../HISTORY.txt:1157
msgid ""
"The ``pyramid.security.has_permission`` API is now deprecated.  Instead, "
"use the newly-added ``has_permission`` method of the request object."
msgstr "`` pyramid.security.has_permission`` APIは廃止されました。代わりに、要求オブジェクトの新しく追加された `` has_permission``メソッドを使用してください。"

#: ../../../HISTORY.txt:1160
msgid ""
"The ``pyramid.security.effective_principals`` API is now deprecated. "
"Instead, use the newly-added ``effective_principals`` attribute of the "
"request object."
msgstr "`` pyramid.security.effective_principals`` APIは廃止されました。代わりに、要求オブジェクトの新しく追加された `` effective_principals``属性を使用してください。"

#: ../../../HISTORY.txt:1164
msgid ""
"The ``pyramid.security.authenticated_userid`` API is now deprecated. "
"Instead, use the newly-added ``authenticated_userid`` attribute of the "
"request object."
msgstr "`` pyramid.security.authenticated_userid`` APIは廃止されました。代わりに、要求オブジェクトの新しく追加された `` authenticated_userid``属性を使用してください。"

#: ../../../HISTORY.txt:1168
msgid ""
"The ``pyramid.security.unauthenticated_userid`` API is now deprecated. "
"Instead, use the newly-added ``unauthenticated_userid`` attribute of the "
"request object."
msgstr "`` pyramid.security.unauthenticated_userid`` APIは廃止されました。代わりに、要求オブジェクトの新しく追加された `` unauthenticated_userid``属性を使用してください。"

#: ../../../BFG_HISTORY.txt:275 ../../../BFG_HISTORY.txt:1195
#: ../../../BFG_HISTORY.txt:1346 ../../../BFG_HISTORY.txt:1423
#: ../../../BFG_HISTORY.txt:1800 ../../../BFG_HISTORY.txt:2252
#: ../../../BFG_HISTORY.txt:2419 ../../../BFG_HISTORY.txt:3080
#: ../../../HISTORY.txt:1173 ../../../HISTORY.txt:2335
#: ../../../HISTORY.txt:2661 ../../../HISTORY.txt:3034
#: ../../../HISTORY.txt:3190 ../../../HISTORY.txt:3222
#: ../../../HISTORY.txt:4365 ../../../HISTORY.txt:5069
#: ../../../HISTORY.txt:5146
msgid "Dependencies"
msgstr "依存関係"

#: ../../../HISTORY.txt:1175
msgid ""
"Pyramid now depends on WebOb>=1.3 (it uses "
"``webob.cookies.CookieProfile`` from 1.3+)."
msgstr "PyramidはWebOb&gt; = 1.3（1.3+から `` webob.cookies.CookieProfile``を使います）に依存しています。"

#: ../../../HISTORY.txt:1179
msgid "1.5a2 (2013-09-22)"
msgstr "1.5a2（2013-09-22）"

#: ../../../HISTORY.txt:1184
msgid ""
"Users can now provide dotted Python names to as the ``factory`` argument "
"the Configurator methods named ``add_{view,route,subscriber}_predicate`` "
"(instead of passing the predicate factory directly, you can pass a dotted"
" name which refers to the factory)."
msgstr "ユーザは、 `` add_ {view、route、subscriber} _predicate``という名前のConfiguratorメソッドを `` factory``引数としてドット付きのPython名を提供できるようになりました（述語ファクトリを直接渡すのではなく、工場へ）。"

#: ../../../HISTORY.txt:1192
msgid ""
"Fix an exception in ``pyramid.path.package_name`` when resolving the "
"package name for namespace packages that had no ``__file__`` attribute."
msgstr "`` __file__`属性を持たない名前空間パッケージのパッケージ名を解決する際に、 `` pyramid.path.package_name``に例外を修正しました。"

#: ../../../HISTORY.txt:1198
msgid ""
"Pyramid no longer depends on or configures the Mako and Chameleon "
"templating system renderers by default.  Disincluding these templating "
"systems by default means that the Pyramid core has fewer dependencies and"
" can run on future platforms without immediate concern for the "
"compatibility of its templating add-ons.  It also makes maintenance "
"slightly more effective, as different people can maintain the templating "
"system add-ons that they understand and care about without needing commit"
" access to the Pyramid core, and it allows users who just don't want to "
"see any packages they don't use come along for the ride when they install"
" Pyramid."
msgstr "Pyramidは、デフォルトでMakoとChameleonのテンプレートシステムレンダラに依存したり、設定したりしません。デフォルトでこれらのテンプレートシステムを含めないということは、Pyramidコアの依存性が少なく、テンプレートアドオンの互換性がすぐに気になることなく将来のプラットフォームで実行できることを意味します。 Pyramidコアへのコミットアクセスを必要とせずに理解して気にするテンプレートシステムのアドオンをメンテナンスできるようになり、メンテナンスが少し効率的になります。彼らはピラミッドをインストールするときに乗るために来ることはありません。"

#: ../../../HISTORY.txt:1208
msgid ""
"This means that upon upgrading to Pyramid 1.5a2+, projects that use "
"either of these templating systems will see a traceback that ends "
"something like this when their application attempts to render a Chameleon"
" or Mako template::"
msgstr "つまり、Pyramid 1.5a2 +にアップグレードすると、これらのテンプレートシステムのいずれかを使用するプロジェクトで、アプリケーションがカメレオンまたはMakoテンプレートをレンダリングしようとすると、次のような終わりのトレースバックが表示されます。"

#: ../../../HISTORY.txt:1214 ../../../HISTORY.txt:1218
#: ../../../HISTORY.txt:1303
msgid "Or::"
msgstr "または::"

#: ../../../HISTORY.txt:1222
msgid ""
"Support for Mako templating has been moved into an add-on package named "
"``pyramid_mako``, and support for Chameleon templating has been moved "
"into an add-on package named ``pyramid_chameleon``.  These packages are "
"drop-in replacements for the old built-in support for these templating "
"langauges. All you have to do is install them and make them active in "
"your configuration to register renderer factories for ``.pt`` and/or "
"``.mako`` (or ``.mak``) to make your application work again."
msgstr "Makoテンプレートのサポートは `` pyramid_mako``というアドオンパッケージに移行し、カメレオンテンプレートのサポートは `` pyramid_chameleon``というアドオンパッケージに移行しました。これらのパッケージは、これらのテンプレートランゲージの古い組み込みサポートのためのドロップイン置換です。インストールするだけで設定を有効にして、 `` .pt``や `` .mako``（または `` .mak``）のレンダラファクトリを登録してアプリケーションを再び動作させるだけです。"

#: ../../../HISTORY.txt:1230
msgid ""
"To re-add support for Chameleon and/or Mako template renderers into your "
"existing projects, follow the below steps."
msgstr "ChameleonまたはMakoテンプレートレンダラーのサポートを既存のプロジェクトに再度追加するには、以下の手順に従います。"

#: ../../../HISTORY.txt:1233
msgid "If you depend on Mako templates:"
msgstr "Makoテンプレートに依存している場合："

#: ../../../HISTORY.txt:1235
msgid ""
"Make sure the ``pyramid_mako`` package is installed.  One way to do this "
"is by adding ``pyramid_mako`` to the ``install_requires`` section of your"
" package's ``setup.py`` file and afterwards rerunning ``setup.py "
"develop``::"
msgstr "`` pyramid_mako``パッケージがインストールされていることを確認してください。これを行う1つの方法は、パッケージの `` setup.py``ファイルの `` install_requires``セクションに `` pyramid_mako``を追加した後、 `` setup.py develop``を再実行することです::"

#: ../../../HISTORY.txt:1248
msgid ""
"Within the portion of your application which instantiates a Pyramid "
"``pyramid.config.Configurator`` (often the ``main()`` function in your "
"project's ``__init__.py`` file), tell Pyramid to include the "
"``pyramid_mako`` includeme::"
msgstr "Pyramidの `` pyramid.config.Configurator``（プロジェクトの `` __init __。py``ファイルの `` main（） ``関数であることが多い）をインスタンス化するアプリケーションの部分では、Pyramidに `` `ピラミッド・マコ `` includeme ::"

#: ../../../HISTORY.txt:1256
msgid "If you depend on Chameleon templates:"
msgstr "カメレオンのテンプレートに依存している場合："

#: ../../../HISTORY.txt:1258
msgid ""
"Make sure the ``pyramid_chameleon`` package is installed.  One way to do "
"this is by adding ``pyramid_chameleon`` to the ``install_requires`` "
"section of your package's ``setup.py`` file and afterwards rerunning "
"``setup.py develop``::"
msgstr "`` pyramid_chameleon``パッケージがインストールされていることを確認してください。これを行う1つの方法は、パッケージの `` setup.py``ファイルの `` install_requires``セクションに `` pyramid_chameleon``を追加し、 `` setup.py develop``を再実行することです::"

#: ../../../HISTORY.txt:1272
msgid ""
"Within the portion of your application which instantiates a Pyramid "
"``~pyramid.config.Configurator`` (often the ``main()`` function in your "
"project's ``__init__.py`` file), tell Pyramid to include the "
"``pyramid_chameleon`` includeme::"
msgstr "Pyramidの ``〜pyramid.config.Configurator`（プロジェクトの `` __init __。py``ファイルの `` main（） ``関数であることが多い）をインスタンス化するアプリケーションの部分で、Pyramidに ` `pyramid_chameleon`` includeme ::"

#: ../../../HISTORY.txt:1280
msgid ""
"Note that it's also fine to install these packages into *older* Pyramids "
"for forward compatibility purposes.  Even if you don't upgrade to Pyramid"
" 1.5 immediately, performing the above steps in a Pyramid 1.4 "
"installation is perfectly fine, won't cause any difference, and will give"
" you forward compatibility when you eventually do upgrade to Pyramid 1.5."
msgstr "これらのパッケージを互換性のために古い*ピラミッドにインストールすることもできます。 Pyramid 1.5に直ちにアップグレードしなくても、Pyramid 1.4のインストールで上記の手順を実行すると問題はありません。Pyramid 1.5にアップグレードすると、互換性があります。"

#: ../../../HISTORY.txt:1286
msgid ""
"With the removal of Mako and Chameleon support from the core, some unit "
"tests that use the ``pyramid.renderers.render*`` methods may begin to "
"fail.  If any of your unit tests are invoking either "
"``pyramid.renderers.render()``  or "
"``pyramid.renderers.render_to_response()`` with either Mako or Chameleon "
"templates then the ``pyramid.config.Configurator`` instance in effect "
"during the unit test should be also be updated to include the addons, as "
"shown above. For example::"
msgstr "コアからのMakoとChameleonのサポートを削除すると、 `` pyramid.renderers.render * ``メソッドを使用するいくつかの単体テストが失敗することがあります。あなたのユニットテストのいずれかがMakoかChameleonのいずれかのテンプレートで `` pyramid.renderers.render（） ``または `` pyramid.renderers.render_to_response（） ``を呼び出す場合、 `` pyramid.config.Configurator``インスタンス上記のようにアドオンを含むように更新する必要があります。例えば：："

#: ../../../HISTORY.txt:1313
msgid ""
"If you're using the Pyramid debug toolbar, when you upgrade Pyramid to "
"1.5a2+, you'll also need to upgrade the ``pyramid_debugtoolbar`` package "
"to at least version 1.0.8, as older toolbar versions are not compatible "
"with Pyramid 1.5a2+ due to the removal of Mako support from the core.  "
"It's fine to use this newer version of the toolbar code with older "
"Pyramids too."
msgstr "Pyramidデバッグツールバーを使用している場合は、Pyramidを1.5a2 +にアップグレードする際に、Pyramid 1.5と互換性がないため、Pyramid_debugtoolbarパッケージを少なくとも1.0.8にアップグレードする必要があります。 a2 +はコアからのMakoサポートの削除によるものです。旧バージョンのPyramidsでもこの新しいバージョンのツールバーコードを使用するのは良いことです。"

#: ../../../HISTORY.txt:1319
msgid ""
"Removed the ``request.response_*`` varying attributes. These attributes "
"have been deprecated since Pyramid 1.1, and as per the deprecation "
"policy, have now been removed."
msgstr "`` request.response_ * ``属性を削除しました。これらの属性は、Pyramid 1.1以降、非推奨ポリシーに従って廃止されました。"

#: ../../../HISTORY.txt:1323
msgid ""
"``request.response`` will no longer be mutated when using the "
"``pyramid.renderers.render()`` API.  Almost all renderers mutate the "
"``request.response`` response object (for example, the JSON renderer sets"
" ``request.response.content_type`` to ``application/json``), but this is "
"only necessary when the renderer is generating a response; it was a bug "
"when it was done as a side effect of calling "
"``pyramid.renderers.render()``."
msgstr "`` request.response``は `` pyramid.renderers.render（） `` APIを使うときにもはや変更されません。ほとんどのレンダラが `` request.response``レスポンスオブジェクトを変更します（例えば、JSONレンダラが `` application / json``に `` request.response.content_type``を設定します）が、これはレンダラが応答を生成する。それは `` pyramid.renderers.render（） ``を呼び出す副作用として行われたときのバグでした。"

#: ../../../HISTORY.txt:1330
msgid "Removed the ``bfg2pyramid`` fixer script."
msgstr "`` bfg2pyramid``フィーダスクリプトを削除しました。"

#: ../../../HISTORY.txt:1332
msgid ""
"The ``pyramid.events.NewResponse`` event is now sent **after** response "
"callbacks are executed.  It previously executed before response callbacks"
" were executed.  Rationale: it's more useful to be able to inspect the "
"response after response callbacks have done their jobs instead of before."
msgstr "** `** pyramid.events.NewResponse``イベントは**応答コールバックが実行された後に送信されます。以前は応答コールバックが実行される前に実行されていました。理論的根拠：応答コールバックが前回ではなく仕事をした後に、応答を検査できる方が便利です。"

#: ../../../HISTORY.txt:1337
msgid ""
"Removed the class named ``pyramid.view.static`` that had been deprecated "
"since Pyramid 1.1.  Instead use ``pyramid.static.static_view`` with "
"``use_subpath=True`` argument."
msgstr "Pyramid 1.1以来廃止されていた `` pyramid.view.static``という名前のクラスを削除しました。その代わりに `` py_id_static.static_view``を `` use_subpath = True``引数とともに使用してください。"

#: ../../../HISTORY.txt:1341
msgid ""
"Removed the ``pyramid.view.is_response`` function that had been "
"deprecated since Pyramid 1.1.  Use the "
"``pyramid.request.Request.is_response`` method instead."
msgstr "Pyramid 1.1以来廃止されていた `` pyramid.view.is_response``関数を削除しました。代わりに `` pyramid.request.Request.is_response``メソッドを使用してください。"

#: ../../../HISTORY.txt:1345
msgid ""
"Removed the ability to pass the following arguments to "
"``pyramid.config.Configurator.add_route``: ``view``, ``view_context``. "
"``view_for``, ``view_permission``, ``view_renderer``, and ``view_attr``. "
"Using these arguments had been deprecated since Pyramid 1.1.  Instead of "
"passing view-related arguments to ``add_route``, use a separate call to "
"``pyramid.config.Configurator.add_view`` to associate a view with a route"
" using its ``route_name`` argument.  Note that this impacts the "
"``pyramid.config.Configurator.add_static_view`` function too, because it "
"delegates to ``add_route``."
msgstr "`` pyramid.config.Configurator.add_route``： `` view``、 `` view_context``に以下の引数を渡す機能を削除しました。 `` view_for``、 `` view_permission``、 `` view_renderer``、 `` view_attr``です。これらの引数を使用することは、Pyramid 1.1以降では廃止されました。ビュー関連の引数を `` add_route``に渡すのではなく、 `` pyramid.config.Configurator.add_view``を別々に呼び出して、 `` route_name``引数を使ってビューをルートに関連づけます。これは `` pyramid.config.Configurator.add_static_view``関数にも影響します。なぜなら、それは `` add_route``に委譲するからです。"

#: ../../../HISTORY.txt:1355
msgid ""
"Removed the ability to influence and query a ``pyramid.request.Request`` "
"object as if it were a dictionary.  Previously it was possible to use "
"methods like ``__getitem__``, ``get``, ``items``, and other dictlike "
"methods to access values in the WSGI environment.  This behavior had been"
" deprecated since Pyramid 1.1.  Use methods of ``request.environ`` (a "
"real dictionary) instead."
msgstr "`` pyramid.request.Request``オブジェクトに影響を及ぼす機能を辞書のように削除しました。以前は、 `` __getitem__``、 `` get``、 `` items``などのメソッドを使用して、WSGI環境の値にアクセスするためのメソッドを使用することができました。この動作はPyramid 1.1以降では廃止されました。代わりに、 `` request.environ``（実際の辞書）のメソッドを使用してください。"

#: ../../../HISTORY.txt:1362
msgid ""
"Removed ancient backwards compatibily hack in "
"``pyramid.traversal.DefaultRootFactory`` which populated the ``__dict__``"
" of the factory with the matchdict values for compatibility with BFG 0.9."
msgstr "`` pyramid.traversal.DefaultRootFactory``の古くからの互換性のあるハックを削除し、BFG 0.9との互換性のためのマッチディック値で工場の `` __dict__``を設定しました。"

#: ../../../HISTORY.txt:1366
msgid ""
"The ``renderer_globals_factory`` argument to the "
"``pyramid.config.Configurator` constructor and its ``setup_registry`` "
"method has been removed.  The ``set_renderer_globals_factory`` method of "
"``pyramid.config.Configurator`` has also been removed.  The (internal) "
"``pyramid.interfaces.IRendererGlobals`` interface was also removed.  "
"These arguments, methods and interfaces had been deprecated since 1.1.  "
"Use a ``BeforeRender`` event subscriber as documented in the \"Hooks\" "
"chapter of the Pyramid narrative documentation instead of providing "
"renderer globals values to the configurator."
msgstr "`` pyramid.config.Configurator`コンストラクタの `` renderer_globals_factory``引数と `` setup_registry``メソッドは削除されました。 `` pyramid.config.Configurator``の `` set_renderer_globals_factory``メソッドも削除されました。 （内部の） `` pyramid.interfaces.IRendererGlobals``インターフェースも削除されました。これらの引数、メソッド、およびインタフェースは、1.1以降で非難されていました。コンフィギュレータにレンダラグローバル値を提供するのではなく、ピラミッドの説明文書の\ &quot;Hooks \&quot;章に書かれているように、 `` BeforeRender``イベントサブスクライバを使用してください。"

#: ../../../HISTORY.txt:1379
msgid ""
"The ``pyramid.config.Configurator.set_request_property`` method now "
"issues a deprecation warning when used.  It had been docs-deprecated in "
"1.4 but did not issue a deprecation warning when used."
msgstr "`` pyramid.config.Configurator.set_request_property``メソッドは、使用時に非推奨警告を発行するようになりました。 1.4ではdocs-deprecatedとなっていましたが、使用すると非推奨の警告は発行されませんでした。"

#: ../../../HISTORY.txt:1384
msgid "1.5a1 (2013-08-30)"
msgstr "1.5a1（2013-08-30）"

#: ../../../HISTORY.txt:1389
msgid ""
"A new http exception subclass named "
"``pyramid.httpexceptions.HTTPSuccessful`` was added.  You can use this "
"class as the ``context`` of an exception view to catch all 200-series "
"\"exceptions\" (e.g. \"raise HTTPOk\").  This also allows you to catch "
"*only* the ``HTTPOk`` exception itself; previously this was impossible "
"because a number of other exceptions (such as ``HTTPNoContent``) "
"inherited from ``HTTPOk``, but now they do not."
msgstr "`` pyramid.httpexceptions.HTTPSuccessful``という名前の新しいhttp例外サブクラスが追加されました。このクラスを例外ビューの `` context``として使用して、すべての200シリーズ\ &quot;例外\&quot;（たとえば &quot;raise HTTPOk \&quot;）をキャッチすることができます。これはまた、 `` HTTPOk``例外自体を捕まえることができます。他の多くの例外（ `` HTTPNoContent``など）は `` HTTPOk``から継承されましたが、今はそうではありません。"

#: ../../../HISTORY.txt:1396
msgid ""
"You can now generate \"hybrid\" urldispatch/traversal URLs more easily by"
" using the new ``route_name``, ``route_kw`` and ``route_remainder_name`` "
"arguments to  ``request.resource_url`` and ``request.resource_path``.  "
"See the new section of the \"Combining Traversal and URL Dispatch\" "
"documentation chapter entitled  \"Hybrid URL Generation\"."
msgstr "`` request.resource_url``と `` requestに新しい `` route_name``、 `` route_kw``、 `` route_remainder_name``引数を使うことで、より簡単に\ &quot;hybrid \&quot; urldispatch / traversal URLを生成することができます。 resource_path``です。 \ &quot;ハイブリッドURL生成\&quot;と題された\ &quot;トラバースとURLディスパッチの結合\&quot;ドキュメントの章の新しいセクションを参照してください。"

#: ../../../HISTORY.txt:1402
msgid ""
"It is now possible to escape double braces in Pyramid scaffolds "
"(unescaped, these represent replacement values).  You can use "
"``\\{\\{a\\}\\}`` to represent a \"bare\" ``{{a}}``.  See "
"https://github.com/Pylons/pyramid/pull/862"
msgstr "Pyramid足場で二重の括弧をエスケープすることが可能になりました（エスケープされていない、これらは置換値を表しています）。 `` \\ {\\ {a \\} \\} ``を使って\ &quot;bare \&quot; `` {{a}} ``を表すことができます。 https://github.com/Pylons/pyramid/pull/862を参照してください。"

#: ../../../HISTORY.txt:1407
msgid ""
"Add ``localizer`` and ``locale_name`` properties (reified) to the "
"request. See https://github.com/Pylons/pyramid/issues/508.  Note that the"
" ``pyramid.i18n.get_localizer`` and ``pyramid.i18n.get_locale_name`` "
"functions now simply look up these properties on the request."
msgstr "リクエストに `` localizer``と `` locale_name``のプロパティー（reified）を追加してください。 https://github.com/Pylons/pyramid/issues/508を参照してください。 `` pyramid.i18n.get_localizer``と `` pyramid.i18n.get_locale_name``関数は、単にリクエストでこれらのプロパティを検索するようになりました。"

#: ../../../HISTORY.txt:1412
msgid ""
"Add ``pdistreport`` script, which prints the Python version in use, the "
"Pyramid version in use, and the version number and location of all Python"
" distributions currently installed."
msgstr "使用中のPythonバージョン、使用中のPyramidバージョン、現在インストールされているすべてのPythonディストリビューションのバージョン番号と場所を表示する `` pdistreport``スクリプトを追加してください。"

#: ../../../HISTORY.txt:1416
msgid ""
"Add the ability to invert the result of any view, route, or subscriber "
"predicate using the ``not_`` class.  For example::"
msgstr "`` not_``クラスを使ってビュー、ルート、サブスクライバ述語の結果を逆転させる機能を追加します。例えば：："

#: ../../../HISTORY.txt:1424
msgid ""
"The above example will ensure that the view is called if the request "
"method is not POST (at least if no other view is more specific)."
msgstr "上記の例では、リクエストメソッドがPOSTでない場合（少なくとも他のビューがより特定的でない場合）、ビューが確実に呼び出されます。"

#: ../../../HISTORY.txt:1427
msgid ""
"The ``pyramid.config.not_`` class can be used against any value that is a"
" predicate value passed in any of these contexts:"
msgstr "`` pyramid.config.not_``クラスは、これらのコンテキストのいずれかで渡される述語値である任意の値に対して使用できます。"

#: ../../../HISTORY.txt:1430
msgid "``pyramid.config.Configurator.add_view``"
msgstr "`` pyramid.config.Configurator.add_view``"

#: ../../../HISTORY.txt:1432
msgid "``pyramid.config.Configurator.add_route``"
msgstr "`` pyramid.config.Configurator.add_route``"

#: ../../../HISTORY.txt:1434
msgid "``pyramid.config.Configurator.add_subscriber``"
msgstr "`` pyramid.config.Configurator.add_subscriber``"

#: ../../../HISTORY.txt:1436
msgid "``pyramid.view.view_config``"
msgstr "`` pyramid.view.view_config``"

#: ../../../HISTORY.txt:1438
msgid "``pyramid.events.subscriber``"
msgstr "`` pyramid.events.subscriber``"

#: ../../../HISTORY.txt:1440
msgid ""
"``scripts/prequest.py``: add support for submitting ``PUT`` and ``PATCH``"
" requests.  See https://github.com/Pylons/pyramid/pull/1033.  add support"
" for submitting ``OPTIONS`` and ``PROPFIND`` requests, and  allow users "
"to specify basic authentication credentials in the request via a "
"``--login`` argument to the script.  See "
"https://github.com/Pylons/pyramid/pull/1039."
msgstr "`` scripts / prequest.py``： `` PUT``と `` PATCH``要求を提出するためのサポートを追加します。 https://github.com/Pylons/pyramid/pull/1033を参照してください。 `` OPTIONS``と `` PROPFIND``リクエストを提出するためのサポートを追加し、ユーザがスクリプトの `` --login``引数を使って要求の中で基本認証資格を指定できるようにします。 https://github.com/Pylons/pyramid/pull/1039を参照してください。"

#: ../../../HISTORY.txt:1446
msgid ""
"``ACLAuthorizationPolicy`` supports ``__acl__`` as a callable. This "
"removes the ambiguity between the potential ``AttributeError`` that would"
" be raised on the ``context`` when the property was not defined and the "
"``AttributeError`` that could be raised from any user-defined code within"
" a dynamic property. It is recommended to define a dynamic ACL as a "
"callable to avoid this ambiguity. See "
"https://github.com/Pylons/pyramid/issues/735."
msgstr "`` ACLAuthorizationPolicy``は、 `` __acl__``を呼び出し可能としてサポートしています。これは、プロパティが定義されていないときに `` context``で生成される可能性のある `` AttributeError``と動的プロパティ内のユーザ定義コードから生成される `` AttributeError``のあいまいさを取り除きます。このあいまいさを避けるために、動的ACLを呼び出し可能として定義することをお勧めします。 https://github.com/Pylons/pyramid/issues/735を参照してください。"

#: ../../../HISTORY.txt:1453
msgid ""
"Allow a protocol-relative URL (e.g. ``//example.com/images``) to be "
"passed to ``pyramid.config.Configurator.add_static_view``. This allows "
"externally-hosted static URLs to be generated based on the current "
"protocol."
msgstr "`` pyramid.config.Configurator.add_static_view``に渡すプロトコル相対URL（ `` // example.com / images``など）を許可します。これにより、外部でホストされている静的URLを現在のプロトコルに基づいて生成することができます。"

#: ../../../HISTORY.txt:1457
msgid ""
"The ``AuthTktAuthenticationPolicy`` has two new options to configure its "
"domain usage:"
msgstr "`` AuthTktAuthenticationPolicy``にはドメイン使用を設定するための2つの新しいオプションがあります："

#: ../../../HISTORY.txt:1460
msgid ""
"``parent_domain``: if set the authentication cookie is set on the parent "
"domain. This is useful if you have multiple sites sharing the same "
"domain."
msgstr "`` parent_domain``：もし設定されていれば、認証クッキーは親ドメイン上に設定されます。複数のサイトが同じドメインを共有している場合に便利です。"

#: ../../../HISTORY.txt:1463
msgid ""
"``domain``: if provided the cookie is always set for this domain, "
"bypassing all usual logic."
msgstr "`` domain``：提供されていれば、いつものすべてのロジックをバイパスして、このドメインに対して常にクッキーが設定されます。"

#: ../../../HISTORY.txt:1466
msgid ""
"See https://github.com/Pylons/pyramid/pull/1028, "
"https://github.com/Pylons/pyramid/pull/1072 and "
"https://github.com/Pylons/pyramid/pull/1078."
msgstr "https://github.com/Pylons/pyramid/pull/1028、https://github.com/Pylons/pyramid/pull/1072およびhttps://github.com/Pylons/pyramid/pull/1078を参照してください。"

#: ../../../HISTORY.txt:1470
msgid ""
"The ``AuthTktAuthenticationPolicy`` now supports IPv6 addresses when "
"using the ``include_ip=True`` option. This is possibly incompatible with "
"alternative ``auth_tkt`` implementations, as the specification does not "
"define how to properly handle IPv6. See "
"https://github.com/Pylons/pyramid/issues/831."
msgstr "`` AuthTktAuthenticationPolicy``は `` include_ip = True``オプションを使うときにIPv6アドレスをサポートするようになりました。これは、仕様がIPv6を適切に扱う方法を定義していないため、代替の `` auth_tkt``実装とは互換性がありません。 https://github.com/Pylons/pyramid/issues/831を参照してください。"

#: ../../../HISTORY.txt:1476
msgid ""
"Make it possible to use variable arguments via "
"``pyramid.paster.get_appsettings``. This also allowed the generated "
"``initialize_db`` script from the ``alchemy`` scaffold to grow support "
"for options in the form ``a=1 b=2`` so you can fill in values in a "
"parameterized ``.ini`` file, e.g. ``initialize_myapp_db "
"etc/development.ini a=1 b=2``. See "
"https://github.com/Pylons/pyramid/pull/911"
msgstr "`` pyramid.paster.get_appsettings``で可変引数を使うことができます。これにより、生成された `` alchemy`` scaffoldの `` initialize_db``スクリプトは `` a = 1 b = 2``の形式でオプションをサポートできるようになり、パラメータ化された `` .ini ``ファイル、例えば `` initialize_myapp_db etc / development.ini a = 1 b = 2``のようなものです。 https://github.com/Pylons/pyramid/pull/911を参照してください。"

#: ../../../HISTORY.txt:1484
msgid ""
"The ``request.session.check_csrf_token()`` method and the ``check_csrf`` "
"view predicate now take into account the value of the HTTP header named "
"``X-CSRF-Token`` (as well as the ``csrf_token`` form parameter, which "
"they always did).  The header is tried when the form parameter does not "
"exist."
msgstr "`` request.session.check_csrf_token（） ``メソッドと `` check_csrf``ビュー述語は、 `` X-CSRF-Token``という名前のHTTPヘッダーの値を考慮に入れます（ `` csrf_token彼らが常にやった ``フォームパラメータ）。フォームパラメータが存在しない場合、ヘッダーが試されます。"

#: ../../../HISTORY.txt:1489
msgid ""
"View lookup will now search for valid views based on the inheritance "
"hierarchy of the context. It tries to find views based on the most "
"specific context first, and upon predicate failure, will move up the "
"inheritance chain to test views found by the super-type of the context. "
"In the past, only the most specific type containing views would be "
"checked and if no matching view could be found then a PredicateMismatch "
"would be raised. Now predicate mismatches don't hide valid views "
"registered on super-types. Here's an example that now works::"
msgstr "ビュールックアップは、コンテキストの継承階層に基づいて有効なビューを検索します。最も具体的なコンテキストに基づいてビューを最初に見つけようとします。そして、述部の失敗時に、スーパータイプのコンテキストによって検出されたビューをテストするために継承チェーンを上げます。過去には、ビューを含む最も特定の型だけがチェックされ、一致するビューが見つからない場合には、PredicateMismatchが発生しました。今や述語の不一致は、スーパータイプに登録された有効なビューを隠さない。ここでは今働く例があります::"

#: ../../../HISTORY.txt:1527
msgid ""
"Previously the override_post view registration would hide the get and "
"delete views in the context of MyResource -- leading to a predicate "
"mismatch error when trying to use GET or DELETE methods. Now the views "
"are found and no predicate mismatch is raised. See "
"https://github.com/Pylons/pyramid/pull/786 and "
"https://github.com/Pylons/pyramid/pull/1004 and "
"https://github.com/Pylons/pyramid/pull/1046"
msgstr "以前は、override_postビューの登録によって、MyResourceのコンテキストでgetおよびdeleteビューが非表示になり、GETメソッドまたはDELETEメソッドを使用しようとしたときに述語の不一致エラーが発生しました。今、ビューが見つかり、述語の不一致が発生しません。 https://github.com/Pylons/pyramid/pull/786およびhttps://github.com/Pylons/pyramid/pull/1004およびhttps://github.com/Pylons/pyramid/pull/1046を参照してください。"

#: ../../../HISTORY.txt:1536
msgid ""
"The ``pserve`` command now takes a ``-v`` (or ``--verbose``) flag and a "
"``-q`` (or ``--quiet``) flag.  Output from running ``pserve`` can be "
"controlled using these flags.  ``-v`` can be specified multiple times to "
"increase verbosity.  ``-q`` sets verbosity to ``0`` unconditionally.  The"
" default verbosity level is ``1``."
msgstr "`` pserve``コマンドは、 `` -v``（または ``  -  verbose``）フラグと `` -q``（または `` --quiet``）フラグを取るようになりました。 `` pserve``からの出力は、これらのフラグを使って制御することができます。 `` -v``を複数回指定して冗長性を増やすことができます。 `` -q``は冗長に `` 0``を無条件に設定します。デフォルトの冗長レベルは `` 1``です。"

#: ../../../HISTORY.txt:1542
msgid ""
"The ``alchemy`` scaffold tests now provide better coverage.  See "
"https://github.com/Pylons/pyramid/pull/1029"
msgstr "``錬金術 ``足場テストは、より良いカバレッジを提供するようになりました。 https://github.com/Pylons/pyramid/pull/1029を参照してください。"

#: ../../../HISTORY.txt:1545
msgid ""
"The ``pyramid.config.Configurator.add_route`` method now supports being "
"called with an external URL as pattern. See "
"https://github.com/Pylons/pyramid/issues/611 and the documentation "
"section in the \"URL Dispatch\" chapter entitled \"External Routes\" for "
"more information."
msgstr "`` pyramid.config.Configurator.add_route``メソッドは、外部URLをパターンとして呼び出すことをサポートします。詳細については、https://github.com/Pylons/pyramid/issues/611および\ &quot;URL Route \&quot;という章の &quot;URL Dispatch&quot;章のドキュメントのセクションを参照してください。"

#: ../../../HISTORY.txt:1553
msgid ""
"It was not possible to use ``pyramid.httpexceptions.HTTPException`` as "
"the ``context`` of an exception view as very general catchall for http-"
"related exceptions when you wanted that exception view to override the "
"default exception view.  See https://github.com/Pylons/pyramid/issues/985"
msgstr "`` pyramid.httpexceptions.HTTPException``を例外ビューの ``コンテキスト ``として使用することは、例外ビューがデフォルトの例外ビューをオーバーライドするようにしたいときに、http関連の例外の非常に一般的なキャッチオールとして使用できませんでした。 https://github.com/Pylons/pyramid/issues/985を参照してください。"

#: ../../../HISTORY.txt:1558
msgid ""
"When the ``pyramid.reload_templates`` setting was true, and a Chameleon "
"template was reloaded, and the renderer specification named a macro (e.g."
" ``foo#macroname.pt``), renderings of the template after the template was"
" reloaded due to a file change would produce the entire template body "
"instead of just a rendering of the macro.  See "
"https://github.com/Pylons/pyramid/issues/1013."
msgstr "`` pyramid.reload_templates``の設定が真でカメレオンのテンプレートがリロードされ、マクロ（例えば `` foo＃macroname.pt``）のレンダラーの指定があった場合、テンプレートが再ロードされた後のテンプレートのレンダリングファイルを変更すると、マクロのレンダリングだけでなく、テンプレート本体全体が生成されます。 https://github.com/Pylons/pyramid/issues/1013を参照してください。"

#: ../../../HISTORY.txt:1565
msgid ""
"Fix an obscure problem when combining a virtual root with a route with a "
"``*traverse`` in its pattern.  Now the traversal path generated in such a"
" configuration will be correct, instead of an element missing a leading "
"slash."
msgstr "仮想ルートをそのパターンに `` * traverse``を持つルートと組み合わせるとき、あいまいな問題を修正してください。このような構成で生成されたトラバーサルパスは、先頭のスラッシュがない要素ではなく正しいものになります。"

#: ../../../HISTORY.txt:1570
msgid ""
"Fixed a Mako renderer bug returning a tuple with a previous defname value"
" in some circumstances. See https://github.com/Pylons/pyramid/issues/1037"
" for more information."
msgstr "状況によっては、前のdefname値を持つタプルを返すMakoレンダラーのバグを修正しました。詳細については、https://github.com/Pylons/pyramid/issues/1037を参照してください。"

#: ../../../HISTORY.txt:1574
msgid ""
"Make the ``pyramid.config.assets.PackageOverrides`` object implement the "
"API for ``__loader__`` objects specified in PEP 302.  Proxies to the "
"``__loader__`` set by the importer, if present; otherwise, raises "
"``NotImplementedError``.  This makes Pyramid static view overrides work "
"properly under Python 3.3 (previously they would not).  See "
"https://github.com/Pylons/pyramid/pull/1015 for more information."
msgstr "`` pyramid.config.assets.PackageOverrides``オブジェクトがPEP302で指定された `` __loader__``オブジェクトのAPIを実装するようにします。存在する場合、インポータによって設定される `` __loader__``へのプロキシ。それ以外の場合は、 `` NotImplementedError``を送出します。これにより、Python 3.3では、Pyramidの静的ビューの上書きが適切に機能します（以前はそうではありませんでした）。詳細については、https://github.com/Pylons/pyramid/pull/1015を参照してください。"

#: ../../../HISTORY.txt:1581
msgid ""
"``mako_templating``: added defensive workaround for non-importability of "
"``mako`` due to upstream ``markupsafe`` dropping Python 3.2 support.  "
"Mako templating will no longer work under the combination of MarkupSafe "
"0.17 and Python 3.2 (although the combination of MarkupSafe 0.17 and "
"Python 3.3 or any supported Python 2 version will work OK)."
msgstr "`` mako_templating``：アップストリーム ``マークアップ安全性（markupsafe） &#39;がPython 3.2のサポートを廃止したため、 `` mako``の非インポート可能性に対する防御的な回避策を追加しました。 MarkupSafe 0.17とPython 3.2（MarkupSafe 0.17とPython 3.3の組み合わせ、またはサポートされているPython 2バージョンの組み合わせはOK）でも、MakoテンプレートはMarkupSafe 0.17とPython 3.2の組み合わせでは動作しなくなります。"

#: ../../../HISTORY.txt:1587
msgid ""
"Spaces and dots may now be in mako renderer template paths. This was "
"broken when support for the new makodef syntax was added in 1.4a1. See "
"https://github.com/Pylons/pyramid/issues/950"
msgstr "スペースとドットは、makoレンダラーのテンプレートパスに含まれるようになりました。これは1.4a1で新しいmakodef構文のサポートが追加されたときに壊れていました。 https://github.com/Pylons/pyramid/issues/950を参照してください。"

#: ../../../HISTORY.txt:1591
msgid ""
"``pyramid.debug_authorization=true`` will now correctly print out "
"``Allowed`` for views registered with ``NO_PERMISSION_REQUIRED`` instead "
"of invoking the ``permits`` method of the authorization policy. See "
"https://github.com/Pylons/pyramid/issues/954"
msgstr "`` pyramid.debug_authorization = true``は、認証ポリシーの `` permits``メソッドを呼び出す代わりに、 `` NO_PERMISSION_REQUIRED``で登録されたビューに対して `` Allowed``を正しく表示するようになりました。 https://github.com/Pylons/pyramid/issues/954を参照してください。"

#: ../../../HISTORY.txt:1596
msgid ""
"Pyramid failed to install on some systems due to being packaged with some"
" test files containing higher order characters in their names. These "
"files have now been removed. See "
"https://github.com/Pylons/pyramid/issues/981"
msgstr "名前に高次の文字が含まれているテストファイルがパッケージされているため、Pyramidは一部のシステムにインストールできませんでした。これらのファイルは削除されました。 https://github.com/Pylons/pyramid/issues/981を参照してください。"

#: ../../../HISTORY.txt:1601
msgid ""
"``pyramid.testing.DummyResource`` didn't define ``__bool__``, so code "
"under Python 3 would use ``__len__`` to find truthiness; this usually "
"caused an instance of DummyResource to be \"falsy\" instead of "
"\"truthy\".  See https://github.com/Pylons/pyramid/pull/1032"
msgstr "`` pyramid.testing.DummyResource``は `` __bool__``を定義しなかったので、Python 3のコードは真実性を見つけるのに `` __len__``を使います。これは通常、DummyResourceのインスタンスを\ &quot;truthy \&quot;ではなく &quot;falsy \&quot;にしました。 https://github.com/Pylons/pyramid/pull/1032を参照してください。"

#: ../../../HISTORY.txt:1606
msgid ""
"The ``alchemy`` scaffold would break when the database was MySQL during "
"tables creation.  See https://github.com/Pylons/pyramid/pull/1049"
msgstr "`` alchemy``の足場は、テーブルが作成されているときにデータベースがMySQLだったときに壊れます。 https://github.com/Pylons/pyramid/pull/1049を参照してください。"

#: ../../../HISTORY.txt:1609
msgid ""
"The ``current_route_url`` method now attaches the query string to the URL"
" by default. See https://github.com/Pylons/pyramid/issues/1040"
msgstr "`` current_route_url``メソッドは、デフォルトでURLにクエリ文字列を添付するようになりました。 https://github.com/Pylons/pyramid/issues/1040を参照してください。"

#: ../../../HISTORY.txt:1613
msgid ""
"Make ``pserve.cherrypy_server_runner`` Python 3 compatible. See "
"https://github.com/Pylons/pyramid/issues/718"
msgstr "`` pserve.cherrypy_server_runner``をPython 3と互換性のあるものにしましょう。 https://github.com/Pylons/pyramid/issues/718を参照してください。"

#: ../../../HISTORY.txt:1619
msgid ""
"Modified the ``current_route_url`` method in pyramid.Request. The method "
"previously returned the URL without the query string by default, it now "
"does attach the query string unless it is overriden."
msgstr "pyramid.Requestの `` current_route_url``メソッドを修正しました。このメソッドは、以前はデフォルトでクエリ文字列のないURLを返していましたが、オーバーライドされていない限りクエリ文字列を添付しています。"

#: ../../../HISTORY.txt:1623
#, python-format
msgid ""
"The ``route_url`` and ``route_path`` APIs no longer quote ``/`` to "
"``%2F`` when a replacement value contains a ``/``.  This was pointless, "
"as WSGI servers always unquote the slash anyway, and Pyramid never sees "
"the quoted value."
msgstr "置き換え値に `` / ``が含まれている場合、 `` route_url``と `` route_path`` APIはもはや `` / ``を ``％2F``に引用しません。とにかくWSGIサーバーは常にスラッシュを引用符で囲まず、Pyramidは引用された値を決して見ないため、これは無意味でした。"

#: ../../../HISTORY.txt:1628
msgid ""
"It is no longer possible to set a ``locale_name`` attribute of the "
"request, nor is it possible to set a ``localizer`` attribute of the "
"request.  These are now \"reified\" properties that look up a locale name"
" and localizer respectively using the machinery described in the "
"\"Internationalization\" chapter of the documentation."
msgstr "リクエストの `` locale_name``属性を設定することも、リクエストの `` localizer``属性を設定することもできません。これらは現在、ドキュメントの\ &quot;国際化\&quot;の章で説明されている機械を使用してロケール名とローカライザをそれぞれ検索する\ &quot;reified \&quot;プロパティです。"

#: ../../../HISTORY.txt:1634
msgid ""
"If you send an ``X-Vhm-Root`` header with a value that ends with a slash "
"(or any number of slashes), the trailing slash(es) will be removed before"
" a URL is generated when you use use ``request.resource_url`` or "
"``request.resource_path``.  Previously the virtual root path would not "
"have trailing slashes stripped, which would influence URL generation."
msgstr "スラッシュ（または任意の数のスラッシュ）で終わる値を持つ `` X-Vhm-Root``ヘッダーを送信すると、 ``使用するときにURLが生成される前にスラッシュが削除されます。 request.resource_url``または `` request.resource_path``です。以前は、仮想ルートパスに後続のスラッシュが取り除かれていなかったため、URLの生成に影響します。"

#: ../../../HISTORY.txt:1640
msgid ""
"The ``pyramid.interfaces.IResourceURL`` interface has now grown two new "
"attributes: ``virtual_path_tuple`` and ``physical_path_tuple``.  These "
"should be the tuple form of the resource's path (physical and virtual)."
msgstr "`` pyramid.interfaces.IResourceURL``インターフェースは、 `` virtual_path_tuple``と `` physical_path_tuple``という2つの新しい属性を持ちました。これらは、リソースのパス（物理的および仮想的）のタプル形式でなければなりません。"

#: ../../../HISTORY.txt:1645
msgid "1.4 (2012-12-18)"
msgstr "1.4（2012-12-18）"

#: ../../../HISTORY.txt:1650
msgid "Fix functional tests in the ZODB tutorial"
msgstr "ZODBチュートリアルの機能テストを修正"

#: ../../../HISTORY.txt:1653
msgid "1.4b3 (2012-12-10)"
msgstr "1.4b3（2012-12-10）"

#: ../../../HISTORY.txt:1655
msgid ""
"Packaging release only, no code changes.  1.4b2 was a brownbag release "
"due to missing directories in the tarball."
msgstr "パッケージのリリースのみ、コードの変更はありません。 1.4b2は、tarballのディレクトリがないため、brownbagのリリースとなりました。"

#: ../../../HISTORY.txt:1659
msgid "1.4b2 (2012-12-10)"
msgstr "1.4b2（2012-12-10）"

#: ../../../HISTORY.txt:1664
msgid "Scaffolding is now PEP-8 compliant (at least for a brief shining moment)."
msgstr "足場は現在PEP-8に準拠しています（少なくとも短期間は光る）。"

#: ../../../HISTORY.txt:1666
msgid "Tutorial improvements."
msgstr "チュートリアルの改善。"

#: ../../../HISTORY.txt:1671
msgid ""
"Modified the ``_depth`` argument to ``pyramid.view.view_config`` to "
"accept a value relative to the invocation of ``view_config`` itself. "
"Thus, when it was previously expecting a value of ``1`` or greater, to "
"reflect that the caller of ``view_config`` is 1 stack frame away from "
"``venusian.attach``, this implementation detail is now hidden."
msgstr "`` pyramid.view.view_config``の `` _depth``引数を `` view_config``自身の呼び出しに関連した値を受け入れるように修正しました。したがって、以前に `` 1``またはそれ以上の値を期待していたとき、 `` view_config``の呼び出し元が `` venusian.attach``から1スタックフレーム離れていることを反映するために、この実装の詳細は現在隠されています。"

#: ../../../HISTORY.txt:1677
msgid ""
"Modified the ``_backframes`` argument to ``pyramid.util.action_method`` "
"in a similar way to the changes described to ``_depth`` above.  This "
"argument remains undocumented, but might be used in the wild by some "
"insane person."
msgstr "上の &quot;_depth&quot;に記述されている変更と同様に、 `` _backframes``引数を `` pyramid.util.action_method``に変更しました。この議論は文書化されていませんが、狂人の中には野生でも使われるかもしれません。"

#: ../../../HISTORY.txt:1682
msgid "1.4b1 (2012-11-21)"
msgstr "1.4b1（2012-11-21）"

#: ../../../HISTORY.txt:1687
msgid ""
"Small microspeed enhancement which anticipates that a "
"``pyramid.response.Response`` object is likely to be returned from a "
"view. Some code is shortcut if the class of the object returned by a view"
" is this class.  A similar microoptimization was done to "
"``pyramid.request.Request.is_response``."
msgstr "`` pyramid.response.Response``オブジェクトがビューから返される可能性があることを予期する小さな微小速度の拡張です。ビューによって返されるオブジェクトのクラスがこのクラスである場合、いくつかのコードはショートカットです。同様の微小最適化が `` pyramid.request.Request.is_response``に対して行われました。"

#: ../../../HISTORY.txt:1693
msgid ""
"Make it possible to use variable arguments on ``p*`` commands "
"(``pserve``, ``pshell``, ``pviews``, etc) in the form ``a=1 b=2`` so you "
"can fill in values in parameterized ``.ini`` file, e.g. ``pshell "
"etc/development.ini http_port=8080``.  See "
"https://github.com/Pylons/pyramid/pull/714"
msgstr "`` p * ``コマンド（ `` pserve``、 `` pshell``、 `` pviews``など）で `` a = 1b = 2``のように可変引数を使うことができるようにしました。 `` pshell etc / development.ini http_port = 8080`のように、パラメータ化された `.ini`ファイルで値を入力することができます。 https://github.com/Pylons/pyramid/pull/714を参照してください。"

#: ../../../HISTORY.txt:1698
msgid ""
"A somewhat advanced and obscure feature of Pyramid event handlers is "
"their ability to handle \"multi-interface\" notifications.  These "
"notifications have traditionally presented multiple objects to the "
"subscriber callable.  For instance, if an event was sent by code like "
"this::"
msgstr "Pyramidイベントハンドラのやや高度であいまいな機能は、\ &quot;マルチインターフェース\&quot;通知を処理する能力です。これらの通知は、伝統的に、複数のオブジェクトを加入者呼び出し可能に提示してきた。たとえば、イベントが次のようなコードで送信された場合："

#: ../../../HISTORY.txt:1705
msgid ""
"In the past, in order to catch such an event, you were obligated to write"
" and register an event subscriber that mentioned both the event and the "
"context in its argument list::"
msgstr "過去にこのようなイベントを捕まえるには、イベントとコンテキストの両方を引数リストに記述したイベントサブスクライバを作成して登録する必要がありました::"

#: ../../../HISTORY.txt:1713
msgid ""
"In many subscriber callables registered this way, it was common for the "
"logic in the subscriber callable to completely ignore the second and "
"following arguments (e.g. ``context`` in the above example might be "
"ignored), because they usually existed as attributes of the event anyway."
"  You could usually get the same value by doing ``event.context`` or "
"similar."
msgstr "このように登録された多くのサブスクライブ可能なコールバックでは、サブスクライブ可能なサブスクライバのロジックが、2番目以降の引数を完全に無視するのが一般的でした（上記の例の `context`は無視されるかもしれません）。とにかくイベント。通常、 `` event.context`またはそれに類するものを使って同じ値を得ることができます。"

#: ../../../HISTORY.txt:1719
msgid ""
"The fact that you needed to put an extra argument which you usually "
"ignored in the subscriber callable body was only a minor annoyance until "
"we added \"subscriber predicates\", used to narrow the set of "
"circumstances under which a subscriber will be executed, in a prior 1.4 "
"alpha release.  Once those were added, the annoyance was escalated, "
"because subscriber predicates needed to accept the same argument list and"
" arity as the subscriber callables that they were configured against.  "
"So, for example, if you had these two subscriber registrations in your "
"code::"
msgstr "あなたが通常は加入者の呼び出し可能な本体で無視した余分な引数を入れる必要があったという事実は、サブスクライバが実行される状況のセットを狭めるために使用される\ &quot;サブスクライバ述語\&quot;が追加されるまで、以前の1.4アルファリリース。それらが追加されると、加入者述部は加入者呼び出し可能変数と同じ引数リストと引数を受け入れる必要があったため、煩わしさが増えました。したがって、たとえば、あなたのコードに次の2つの加入者登録があるとします。"

#: ../../../HISTORY.txt:1736
msgid "And you wanted to use a subscriber predicate::"
msgstr "また、サブスクライバ述語::"

#: ../../../HISTORY.txt:1746
msgid ""
"If an existing ``mypredicate`` subscriber predicate had been written in "
"such a way that it accepted only one argument in its ``__call__``, you "
"could not use it against a subscription which named more than one "
"interface in its subscriber interface list.  Similarly, if you had "
"written a subscriber predicate that accepted two arguments, you couldn't "
"use it against a registration that named only a single interface type."
msgstr "既存の `` mypredicate``サブスクライバ述語が、 `` __call__``に1つの引数しか受け付けないように記述されていた場合、そのサブスクライバインタフェースリストに複数のインタフェースを指定したサブスクリプションに対しては使用できません。同様に、2つの引数を受け入れたサブスクライバ述語を記述した場合は、1つのインタフェースタイプのみという名前の登録に対しては使用できません。"

#: ../../../HISTORY.txt:1753
msgid "For example, if you created this predicate::"
msgstr "たとえば、この述部を作成したとします::"

#: ../../../HISTORY.txt:1760
msgid ""
"It would not work against a multi-interface-registered subscription, so "
"in the above example, when you attempted to use it against "
"``asubscriber1``, it would fail at runtime with a TypeError, claiming "
"something was attempting to call it with too many arguments."
msgstr "上記の例では、 `` asubscriber1``に対して実行しようとすると、実行時にTypeErrorで失敗し、何かが呼び出されようとしていると主張しています多くの議論。"

#: ../../../HISTORY.txt:1765
msgid ""
"To hack around this limitation, you were obligated to design the "
"``mypredicate`` predicate to expect to receive in its ``__call__`` either"
" a single ``event`` argument (a SomeOtherEvent object) *or* a pair of "
"arguments (a SomeEvent object and a SomeContextType object), presumably "
"by doing something like this::"
msgstr "この制限を回避するために、あなたは、 `` mypredicate`述語を、 `` __call__``で単一の `` event``引数（SomeOtherEventオブジェクト）*または*の一対の引数のいずれかを受け取るように設計する義務がありました（SomeEventオブジェクトとSomeContextTypeオブジェクト）、おそらくこのような何かをすることによって::"

#: ../../../HISTORY.txt:1776
msgid "This was confusing and bad."
msgstr "これは混乱して悪いものでした。"

#: ../../../HISTORY.txt:1778
msgid ""
"In order to allow people to ignore unused arguments to subscriber "
"callables and to normalize the relationship between event subscribers and"
" subscriber predicates, we now allow both subscribers and subscriber "
"predicates to accept only a single ``event`` argument even if they've "
"been subscribed for notifications that involve multiple interfaces.  "
"Subscribers and subscriber predicates that accept only one argument will "
"receive the first object passed to ``notify``; this is typically (but not"
" always) the event object.  The other objects involved in the "
"subscription lookup will be discarded.  You can now write an event "
"subscriber that accepts only ``event`` even if it subscribes to multiple "
"interfaces::"
msgstr "人々が加入者呼び出し可能変数への未使用引数を無視し、イベント加入者と加入者述語の間の関係を正規化するために、加入者と加入者述語の両方が購読していても単一の `` event``引数だけを受け入れることができるようになりました。複数のインタフェースを含む通知の場合1つの引数のみを受け入れるサブスクライバとサブスクライバ述語は、 `` notify``に渡される最初のオブジェクトを受け取ります。これは一般的に（常にではありませんが）イベントオブジェクトです。サブスクリプション検索に含まれる他のオブジェクトは破棄されます。複数のインタフェースにサブスクライブしていても `` event``だけを受け付けるイベントサブスクライバを書くことができるようになりました::"

#: ../../../HISTORY.txt:1793
msgid ""
"This prevents you from needing to match the subscriber callable "
"parameters to the subscription type unnecessarily, especially when you "
"don't make use of any argument in your subscribers except for the event "
"object itself."
msgstr "これにより、特にイベントオブジェクト自体以外のサブスクライバで引数を使用しない場合、サブスクライバ呼び出し可能パラメータをサブスクリプションタイプに不必要に一致させる必要がなくなります。"

#: ../../../HISTORY.txt:1797
msgid ""
"Note, however, that if the event object is not the first object in the "
"call to ``notify``, you'll run into trouble.  For example, if notify is "
"called with the context argument first::"
msgstr "ただし、イベントオブジェクトが `` notify``の呼び出しの最初のオブジェクトでない場合、問題に遭遇します。たとえば、最初にcontext引数を指定してnotifyを呼び出すと、"

#: ../../../HISTORY.txt:1803
msgid ""
"You won't be able to take advantage of the event-only feature.  It will "
"\"work\", but the object received by your event handler won't be the "
"event object, it will be the context object, which won't be very useful::"
msgstr "イベントのみの機能を利用することはできません。それは\ &quot;仕事\&quot;ですが、あなたのイベントハンドラが受け取ったオブジェクトはイベントオブジェクトではなく、コンテキストオブジェクトになります。これはあまり役に立ちません::"

#: ../../../HISTORY.txt:1812
msgid ""
"Existing multiple-argument subscribers continue to work without issue, so"
" you should continue use those if your system notifies using multiple "
"interfaces and the first interface is not the event interface.  For "
"example::"
msgstr "既存の複数引数のサブスクライバは引き続き問題なく動作します。したがって、システムが複数のインターフェイスを使用して通知し、最初のインターフェイスがイベントインターフェイスでない場合は、引き続き使用する必要があります。例えば：："

#: ../../../HISTORY.txt:1820
msgid ""
"The event-only feature makes it possible to use a subscriber predicate "
"that accepts only a request argument within both multiple-interface "
"subscriber registrations and single-interface subscriber registrations.  "
"You needn't make slightly different variations of predicates depending on"
" the subscription type arguments.  Instead, just write all your "
"subscriber predicates so they only accept ``event`` in their ``__call__``"
" and they'll be useful across all registrations for subscriptions that "
"use an event as their first argument, even ones which accept more than "
"just ``event``."
msgstr "イベントのみの機能により、複数のインタフェースの加入者登録と単一のインタフェースの加入者登録の両方で要求引数のみを受け入れる加入者述部を使用することができます。サブスクリプション・タイプの引数に応じて、少し異なる述語を作成する必要はありません。代わりに、すべてのサブスクライバ述語を書くだけで、彼らは `` __call__``に `` event``を受け取り、イベントを最初の引数として使うサブスクリプションのすべての登録にわたって有用です。ちょうど ``イベント ``。"

#: ../../../HISTORY.txt:1829
msgid ""
"However, the same caveat applies to predicates as to subscriber "
"callables: if you're subscribing to a multi-interface event, and the "
"first interface is not the event interface, the predicate won't work "
"properly.  In such a case, you'll need to match the predicate "
"``__call__`` argument ordering and composition to the ordering of the "
"interfaces.  For example, if the registration for the subscription uses "
"``[SomeContext, SomeEvent]``, you'll need to reflect that in the ordering"
" of the parameters of the predicate's ``__call__`` method::"
msgstr "ただし、加入者呼び出し可能パラメータと同じ述語が適用されます。マルチインタフェース・イベントに加入していて、最初のインタフェースがイベント・インタフェースでない場合、述語は正しく機能しません。そのような場合、述部の `` __call__``引数の順序と構成をインタフェースの順序付けと一致させる必要があります。例えば、サブスクリプションの登録が `` [SomeContext、SomeEvent] ``を使用する場合、述語の `` __call__``メソッドのパラメータの順序でそれを反映させる必要があります::"

#: ../../../HISTORY.txt:1841
msgid ""
"tl;dr: 1) When using multi-interface subscriptions, always use the event "
"type as the first subscription registration argument and 2) When 1 is "
"true, use only ``event`` in your subscriber and subscriber predicate "
"parameter lists, no matter how many interfaces the subscriber is notified"
" with.  This combination will result in the maximum amount of reusability"
" of subscriber predicates and the least amount of thought on your part.  "
"Drink responsibly."
msgstr "tl; dr：1）マルチインタフェースサブスクリプションを使用する場合は、最初のサブスクリプション登録引数として常にイベントタイプを使用し、2）1がtrueの場合は、サブスクライバサブスクライバパラメータリストに &quot;event&quot;加入者に通知されるインターフェイスの数。この組み合わせにより、サブスクライバ述語の再利用性が最大限に向上し、お客様の思考が最小限に抑えられます。責任をもって飲む。"

#: ../../../HISTORY.txt:1851
msgid ""
"A failure when trying to locate the attribute ``__text__`` on route and "
"view predicates existed when the ``debug_routematch`` setting was true or"
" when the ``pviews`` command was used. See "
"https://github.com/Pylons/pyramid/pull/727"
msgstr "`` debug_routematch``設定が真であるか、 `` pviews``コマンドが使用されたときに、ルートとビューの述語に属性 `` __text__``を配置しようとすると失敗しました。 https://github.com/Pylons/pyramid/pull/727を参照してください。"

#: ../../../HISTORY.txt:1858
msgid ""
"Sync up tutorial source files with the files that are rendered by the "
"scaffold that each uses."
msgstr "チュートリアルのソースファイルを、それぞれが使用する足場によってレンダリングされたファイルと同期させます。"

#: ../../../HISTORY.txt:1862
msgid "1.4a4 (2012-11-14)"
msgstr "1.4a4（2012-11-14）"

#: ../../../HISTORY.txt:1867
msgid ""
"``pyramid.authentication.AuthTktAuthenticationPolicy`` has been updated "
"to support newer hashing algorithms such as ``sha512``. Existing "
"applications should consider updating if possible for improved security "
"over the default md5 hashing."
msgstr "`` pyramid.authentication.AuthTktAuthenticationPolicy``は、 `` sha512``のような新しいハッシュアルゴリズムをサポートするように更新されました。既存のアプリケーションでは、可能であれば、デフォルトのmd5ハッシュよりもセキュリティを強化するために、更新を考慮する必要があります。"

#: ../../../HISTORY.txt:1872
msgid "Added an ``effective_principals`` route and view predicate."
msgstr "`` effective_principals``ルートとビュー述語を追加しました。"

#: ../../../HISTORY.txt:1874
msgid ""
"Do not allow the userid returned from the ``authenticated_userid`` or the"
" userid that is one of the list of principals returned by "
"``effective_principals`` to be either of the strings ``system.Everyone`` "
"or ``system.Authenticated`` when any of the built-in authorization "
"policies that live in ``pyramid.authentication`` are in use.  These two "
"strings are reserved for internal usage by Pyramid and they will not be "
"accepted as valid userids."
msgstr "`` authenticated_userid``または `` effective_principals``で返されたプリンシパルのリストの1つであるuseridが `` system.Everyone``または `` system.Authenticated &quot;のいずれかの文字列になることを許可しないでください`` pyramid.authentication``に組み込まれているビルトインの認証ポリシーが使用されているときに使用します。これらの2つの文字列は、Pyramidによる内部使用のために予約されており、有効なユーザーIDとして受け入れられません。"

#: ../../../HISTORY.txt:1882
msgid ""
"Slightly better debug logging from "
"``pyramid.authentication.RepozeWho1AuthenticationPolicy``."
msgstr "`` pyramid.authentication.RepozeWho1AuthenticationPolicy``からのデバッグログを少し改善しました。"

#: ../../../HISTORY.txt:1885
msgid ""
"``pyramid.security.view_execution_permitted`` used to return ``True`` if "
"no view could be found. It now raises a ``TypeError`` exception in that "
"case, as it doesn't make sense to assert that a nonexistent view is "
"execution-permitted. See https://github.com/Pylons/pyramid/issues/299."
msgstr "`` pyramid.security.view_execution_permitted``は、ビューが見つからない場合に `` True``を返すために使用されます。存在しないビューが実行可能であると主張するのは意味をなさないので、この場合は `` TypeError``例外が発生します。 https://github.com/Pylons/pyramid/issues/299を参照してください。"

#: ../../../HISTORY.txt:1890
msgid ""
"Allow a ``_depth`` argument to ``pyramid.view.view_config``, which will "
"permit limited composition reuse of the decorator by other software that "
"wants to provide custom decorators that are much like view_config."
msgstr "`` pyramid.view.view_config``への `` _depth``引数を許可します。これは、view_configによく似たカスタムデコレータを提供したい他のソフトウェアによるデコレータのコンポジションの再利用を制限します。"

#: ../../../HISTORY.txt:1894
msgid ""
"Allow an iterable of decorators to be passed to "
"``pyramid.config.Configurator.add_view``. This allows views to be wrapped"
" by more than one decorator without requiring combining the decorators "
"yourself."
msgstr "iterableのデコレータを `` pyramid.config.Configurator.add_view``に渡せるようにします。これにより、デコレータを自分で組み合わせなくても、ビューを複数のデコレータでラップすることができます。"

#: ../../../HISTORY.txt:1902
msgid ""
"In the past if a renderer returned ``None``, the body of the resulting "
"response would be set explicitly to the empty string.  Instead, now, the "
"body is left unchanged, which allows the renderer to set a body itself by"
" using e.g. ``request.response.body = b'foo'``.  The body set by the "
"renderer will be unmolested on the way out.  See "
"https://github.com/Pylons/pyramid/issues/709"
msgstr "過去にレンダラーが `` None``を返した場合、結果として得られるレスポンスの本文は空の文字列に明示的に設定されます。代わりに、ボディは変更されずにそのまま残されます。レンダラーは、例えば `` request.response.body = b&#39;foo&#39;``を使って本体自体を設定することができます。レンダラーによって設定されたボディは、途中でunmolestされます。 https://github.com/Pylons/pyramid/issues/709を参照してください。"

#: ../../../HISTORY.txt:1909
msgid ""
"In uncommon cases, the ``pyramid_excview_tween_factory`` might have "
"inadvertently raised a ``KeyError`` looking for ``request_iface`` as an "
"attribute of the request.  It no longer fails in this case.  See "
"https://github.com/Pylons/pyramid/issues/700"
msgstr "まれなケースでは、 `` pyramid_excview_tween_factory``が、リクエストの属性として `` request_iface``を探す `` KeyError``を誤って呼び起こした可能性があります。この場合、もはや失敗しません。 https://github.com/Pylons/pyramid/issues/700を参照してください。"

#: ../../../HISTORY.txt:1914
msgid ""
"Be more tolerant of potential error conditions in ``match_param`` and "
"``physical_path`` predicate implementations; instead of raising an "
"exception, return False."
msgstr "`` match_param``と `` physical_path``述語の実装の潜在的なエラー状態をより寛容にしてください。例外を発生させる代わりにFalseを返します。"

#: ../../../HISTORY.txt:1918
msgid ""
"``pyramid.view.render_view`` was not functioning properly under Python "
"3.x due to a byte/unicode discrepancy. See "
"https://github.com/Pylons/pyramid/issues/721"
msgstr "Python 3.xでは、 `` pyramid.view.render_view``はバイト/ユニコードの不一致のため正しく機能しませんでした。 https://github.com/Pylons/pyramid/issues/721を参照してください。"

#: ../../../HISTORY.txt:1925
msgid ""
"``pyramid.authentication.AuthTktAuthenticationPolicy`` will emit a "
"warning if an application is using the policy without explicitly passing "
"a ``hashalg`` argument. This is because the default is \"md5\" which is "
"considered theoretically subject to collision attacks. If you really want"
" \"md5\" then you must specify it explicitly to get rid of the warning."
msgstr "`` pyhalid.authentication.AuthTktAuthenticationPolicy``は、アプリケーションが明示的に `` hashalg``引数を渡さずにポリシーを使用している場合に警告を出します。これは、デフォルトでは理論的には衝突攻撃の対象と見なされる\ &quot;md5 \&quot;であるためです。 \ &quot;md5 \&quot;が本当に必要な場合は、警告を取り除くために明示的に指定する必要があります。"

#: ../../../HISTORY.txt:1934
msgid ""
"All of the tutorials that use "
"``pyramid.authentication.AuthTktAuthenticationPolicy`` now explicitly "
"pass ``sha512`` as a ``hashalg`` argument."
msgstr "`` pyramid.authentication.AuthTktAuthenticationPolicy``を使用するチュートリアルはすべて、 `` hashalg``引数として明示的に `` sha512``を渡します。"

#: ../../../BFG_HISTORY.txt:1774 ../../../BFG_HISTORY.txt:2014
#: ../../../BFG_HISTORY.txt:2276 ../../../HISTORY.txt:1940
#: ../../../HISTORY.txt:3563 ../../../HISTORY.txt:4819
msgid "Internals"
msgstr "内部"

#: ../../../HISTORY.txt:1942
msgid ""
"Move ``TopologicalSorter`` from ``pyramid.config.util`` to "
"``pyramid.util``, move ``CyclicDependencyError`` from "
"``pyramid.config.util`` to ``pyramid.exceptions``, rename ``Singleton`` "
"to ``Sentinel`` and move from ``pyramid.config.util`` to "
"``pyramid.util``; this is in an effort to move that stuff that may be an "
"API one day out of ``pyramid.config.util``, because that package should "
"never be imported from non-Pyramid code. TopologicalSorter is still not "
"an API, but may become one."
msgstr "`` pyramid.config.util``から `` pyramid.util``に `` TopologicalSorter``を移動し、 `` Pyramid.config.util``から `` pyramid.exceptions``に `` CyclicDependencyError``を移動し、 `` Sentinel``に `` Singleton``の名前を変更し、 `` pyramid.config.util``から `` pyramid.util``に移動します。これは、ある日Pyramid.config.utilからAPIのようなものを移動させるためのものです。ピラミッド以外のコードからそのパッケージをインポートしないでください。 TopologicalSorterはまだAPIではありませんが、1つになる可能性があります。"

#: ../../../HISTORY.txt:1950
msgid ""
"Get rid of shady monkeypatching of ``pyramid.request.Request`` and "
"``pyramid.response.Response`` done within the ``__init__.py`` of Pyramid."
" Webob no longer relies on this being done.  Instead, the ResponseClass "
"attribute of the Pyramid Request class is assigned to the Pyramid "
"response class; that's enough to satisfy WebOb and behave as it did "
"before with the monkeypatching."
msgstr "ピラミッドの ​​`` __init __。py``の中で行われる `` pyramid.request.Request``と `` pyramid.response.Response``の陰影のあるmonkeypatchingを取り除きましょう。 Webobはもはやこれが行われていることに依存しません。代わりに、Pyramid RequestクラスのResponseClass属性がPyramid応答クラスに割り当てられます。これでWebObを満たし、以前と同じようにMonkeypatchingで動作します。"

#: ../../../HISTORY.txt:1958
msgid "1.4a3 (2012-10-26)"
msgstr "1.4a3（2012-10-26）"

#: ../../../HISTORY.txt:1963
msgid ""
"The match_param predicate's text method was fixed to sort its values. "
"Part of https://github.com/Pylons/pyramid/pull/705"
msgstr "match_param述部のtextメソッドは、値をソートするために修正されました。 https://github.com/Pylons/pyramid/pull/705の一部"

#: ../../../HISTORY.txt:1966
msgid ""
"1.4a ``pyramid.scripting.prepare`` behaved differently than 1.3 series "
"function of same name.  In particular, if passed a request, it would not "
"set the ``registry`` attribute of the request like 1.3 did.  A symptom "
"would be that passing a request to ``pyramid.paster.bootstrap`` (which "
"uses the function) that did not have a ``registry`` attribute could "
"assume that the registry would be attached to the request by Pyramid.  "
"This assumption could be made in 1.3, but not in 1.4.  The assumption can"
" now be made in 1.4 too (a registry is attached to a request passed to "
"bootstrap or prepare)."
msgstr "1.4a `` pyramid.scripting.prepare``は、同じ名前の1.3系列関数とは異なる動作をします。特に、リクエストを渡すと、1.3のようにリクエストの `` registry``属性を設定しません。症状は、 `` registry``属性を持たない `` pyramid.paster.bootstrap``（関数を使用する）へのリクエストを渡すと、レジストリがPyramidのリクエストに添付されることが想定されます。この仮定は、1.3では可能であるが、1.4では可能ではない。前提は1.4でも可能です（レジストリがブートストラップに渡されたリクエストに添付されているか準備中です）。"

#: ../../../HISTORY.txt:1976
msgid ""
"When registering a view configuration that named a Chameleon ZPT renderer"
" with a macro name in it (e.g. ``renderer='some/template#somemacro.pt``) "
"as well as a view configuration without a macro name in it that pointed "
"to the same template (e.g. ``renderer='some/template.pt'``), internal "
"caching could confuse the two, and your code might have rendered one "
"instead of the other."
msgstr "マクロ名を持つカメレオンZPTレンダラに名前を付けたビュー設定（例えば、 `` renderer = &#39;some / template＃somemacro.pt``など）とそのビュー内のマクロ名のないビュー設定を登録するとき同じテンプレート（例えば、 `` renderer = &#39;some / template.pt&#39;``）を使うと、内部キャッシングは2つを混乱させる可能性があり、あなたのコードはもう一方の代わりにレンダリングされる可能性があります。"

#: ../../../HISTORY.txt:1986
msgid ""
"Allow multiple values to be specified to the ``request_param`` view/route"
" predicate as a sequence.  Previously only a single string value was "
"allowed. See https://github.com/Pylons/pyramid/pull/705"
msgstr "`` request_param``のview / route述部に複数の値をシーケンスとして指定できるようにします。以前は、単一の文字列値のみが許可されていました。 https://github.com/Pylons/pyramid/pull/705を参照してください。"

#: ../../../HISTORY.txt:1990
msgid ""
"Comments with references to documentation sections placed in scaffold "
"``.ini`` files."
msgstr "足場の `` .ini``ファイルに置かれたドキュメンテーションセクションへの参照に関するコメント。"

#: ../../../HISTORY.txt:1993
msgid ""
"Added an HTTP Basic authentication policy at "
"``pyramid.authentication.BasicAuthAuthenticationPolicy``."
msgstr "`` pyramid.authentication.BasicAuthAuthenticationPolicy``にHTTP基本認証ポリシーを追加しました。"

#: ../../../HISTORY.txt:1996
msgid ""
"The Configurator ``testing_securitypolicy`` method now returns the policy"
" object it creates."
msgstr "コンフィギュレータ `` testing_securitypolicy``メソッドは、作成したポリシーオブジェクトを返します。"

#: ../../../HISTORY.txt:1999
msgid ""
"The Configurator ``testing_securitypolicy`` method accepts two new "
"arguments: ``remember_result`` and ``forget_result``.  If supplied, these"
" values influence the result of the policy's ``remember`` and ``forget`` "
"methods, respectively."
msgstr "コンフィギュレータ `` testing_securitypolicy``メソッドは、 `` remember_result``と `` forget_result``という2つの新しい引数を受け取ります。これらの値が指定された場合、ポリシーの `` remember``メソッドと `` forget``メソッドの結果にそれぞれ影響します。"

#: ../../../HISTORY.txt:2004
msgid ""
"The DummySecurityPolicy created by ``testing_securitypolicy`` now sets a "
"``forgotten`` value on the policy (the value ``True``) when its "
"``forget`` method is called."
msgstr "`` testing_securitypolicy``によって作成されたDummySecurityPolicyは、 `` forget``メソッドが呼び出されたときにポリシーに ``忘れられた ``値（ `` True``値）を設定するようになりました。"

#: ../../../HISTORY.txt:2008
msgid ""
"The DummySecurityPolicy created by ``testing_securitypolicy`` now sets a "
"``remembered`` value on the policy, which is the value of the "
"``principal`` argument it's called with when its ``remember`` method is "
"called."
msgstr "`` testing_securitypolicy``で作成されたDummySecurityPolicyは、 `` remember``メソッドが呼び出されたときに呼び出される `` principal``引数の値である `` remembered``値をポリシーに設定するようになりました。"

#: ../../../HISTORY.txt:2012
msgid ""
"New ``physical_path`` view predicate.  If specified, this value should be"
" a string or a tuple representing the physical traversal path of the "
"context found via traversal for this predicate to match as true.  For "
"example: ``physical_path='/'`` or ``physical_path='/a/b/c'`` or "
"``physical_path=('', 'a', 'b', 'c')``.  This is not a path prefix match "
"or a regex, it's a whole-path match.  It's useful when you want to always"
" potentially show a view when some object is traversed to, but you can't "
"be sure about what kind of object it will be, so you can't use the "
"``context`` predicate.  The individual path elements inbetween slash "
"characters or in tuple elements should be the Unicode representation of "
"the name of the resource and should not be encoded in any way."
msgstr "新しい `` physical_path``ビュー述語。指定する場合、この値は、この述部が真と一致するためにトラバーサルによって検出されたコンテキストの物理的なトラバーサルパスを表す文字列またはタプルでなければなりません。例： `` physical_path = &#39;/&#39; ``または `` physical_path = &#39;/ a / b / c``または `` physical_path =（&#39; &#39;、&#39; a &#39;、&#39; b &#39;、&#39; c &#39;） `` 。これはパス接頭辞の一致または正規表現ではなく、パス全体の一致です。これは、あるオブジェクトがトラバースされているときに常にビューを表示したいときに便利ですが、どのようなオブジェクトであるかを確かめることができないので、 `` context``述語を使うことはできません。スラッシュ文字またはタプル要素の間の個々のパス要素は、リソース名のUnicode表現である必要があります。"

#: ../../../HISTORY.txt:2025
msgid "1.4a2 (2012-09-27)"
msgstr "1.4a2（2012-09-27）"

#: ../../../HISTORY.txt:2030
msgid ""
"When trying to determine Mako defnames and Chameleon macro names in asset"
" specifications, take into account that the filename may have a hyphen in"
" it.  See https://github.com/Pylons/pyramid/pull/692"
msgstr "アセット仕様のMako defnamesとChameleonマクロ名を調べようとするとき、ファイル名にハイフンが含まれている可能性があることを考慮してください。 https://github.com/Pylons/pyramid/pull/692を参照してください。"

#: ../../../HISTORY.txt:2037
msgid "A new ``pyramid.session.check_csrf_token`` convenience function was added."
msgstr "新しい `` pyramid.session.check_csrf_token``という便利な関数が追加されました。"

#: ../../../HISTORY.txt:2039
msgid ""
"A ``check_csrf`` view predicate was added.  For example, you can now do "
"``config.add_view(someview, check_csrf=True)``.  When the predicate is "
"checked, if the ``csrf_token`` value in ``request.params`` matches the "
"CSRF token in the request's session, the view will be permitted to "
"execute. Otherwise, it will not be permitted to execute."
msgstr "`` check_csrf``ビュー述語が追加されました。たとえば、 `` config.add_view（someview、check_csrf = True） ``を実行することができます。述語がチェックされると、 `` request.params``の `` csrf_token``の値がリクエストのセッションのCSRFトークンと一致すると、ビューは実行が許可されます。そうしないと、実行が許可されません。"

#: ../../../HISTORY.txt:2045
msgid ""
"Add ``Base.metadata.bind = engine`` to alchemy template, so that tables "
"defined imperatively will work."
msgstr "alchemyテンプレートに `` Base.metadata.bind = engine``を追加して、必要に応じて定義されたテーブルが機能するようにしてください。"

#: ../../../HISTORY.txt:2051
msgid ""
"update wiki2 SQLA tutorial with the changes required after inserting "
"``Base.metadata.bind = engine`` into the alchemy scaffold."
msgstr "`` Base.metadata.bind = engine``を錬金術足場に挿入した後に必要な変更を加えて、wiki2 SQLAチュートリアルを更新してください。"

#: ../../../HISTORY.txt:2055
msgid "1.4a1 (2012-09-16)"
msgstr "1.4a1（2012-09-16）"

#: ../../../HISTORY.txt:2060
msgid ""
"Forward port from 1.3 branch: When no authentication policy was "
"configured, a call to ``pyramid.security.effective_principals`` would "
"unconditionally return the empty list.  This was incorrect, it should "
"have unconditionally returned ``[Everyone]``, and now does."
msgstr "1.3のブランチからのフォワードポート：認証ポリシーが設定されていないとき、 `` pyramid.security.effective_principals``の呼び出しは無条件に空のリストを返します。これは間違っていたので、無条件に `` [Everyone] ``を返さなければなりませんでした。"

#: ../../../HISTORY.txt:2065
msgid ""
"Explicit url dispatch regexes can now contain colons. "
"https://github.com/Pylons/pyramid/issues/629"
msgstr "明示的なurlディスパッチ正規表現にはコロンが含まれるようになりました。 https://github.com/Pylons/pyramid/issues/629"

#: ../../../HISTORY.txt:2068
msgid ""
"On at least one 64-bit Ubuntu system under Python 3.2, using the "
"``view_config`` decorator caused a ``RuntimeError: dictionary changed "
"size during iteration`` exception.  It no longer does.  See "
"https://github.com/Pylons/pyramid/issues/635 for more information."
msgstr "Python 3.2で少なくとも1つの64ビットUbuntuシステムで、 `` view_config``デコレータを使用すると、 `` RuntimeError：辞書はイタレーションの間にサイズが変更されました.``例外が発生しました。それはもはやありません。詳細については、https://github.com/Pylons/pyramid/issues/635を参照してください。"

#: ../../../HISTORY.txt:2073
msgid ""
"In Mako Templates lookup, check if the uri is already adjusted and bring "
"it back to an asset spec. Normally occurs with inherited templates or "
"included components. https://github.com/Pylons/pyramid/issues/606 "
"https://github.com/Pylons/pyramid/issues/607"
msgstr "Mako Templatesルックアップで、URIがすでに調整されているかどうかを確認し、資産仕様に戻します。通常、継承されたテンプレートまたはインクルードされたコンポーネントで発生します。 https://github.com/Pylons/pyramid/issues/606 https://github.com/Pylons/pyramid/issues/607"

#: ../../../HISTORY.txt:2079
msgid ""
"In Mako Templates lookup, check for absolute uri (using mako directories)"
" when mixing up inheritance with asset specs. "
"https://github.com/Pylons/pyramid/issues/662"
msgstr "Mako Templatesルックアップでは、継承をアセット仕様と混合するときに、絶対URI（makoディレクトリを使用）をチェックします。 https://github.com/Pylons/pyramid/issues/662"

#: ../../../HISTORY.txt:2083
msgid ""
"HTTP Accept headers were not being normalized causing potentially "
"conflicting view registrations to go unnoticed. Two views that only "
"differ in the case ('text/html' vs. 'text/HTML') will now raise an error."
" https://github.com/Pylons/pyramid/pull/620"
msgstr "HTTP Acceptヘッダーが正規化されていないため、競合するビューの登録が見逃される可能性があります。大文字と小文字が異なる2つのビュー（ &#39;text / html&#39;対 &#39;text / HTML&#39;）はエラーになります。 https://github.com/Pylons/pyramid/pull/620"

#: ../../../HISTORY.txt:2088
msgid ""
"Forward-port from 1.3 branch: when registering multiple views with an "
"``accept`` predicate in a Pyramid application runing under Python 3, you "
"might have received a ``TypeError: unorderable types: function() < "
"function()`` exception."
msgstr "Python 3で動作するPyramidアプリケーションで複数のビューを `` accept``述語で登録すると、 `` TypeError：unorderable types：function（）&lt;function（） ``例外を受け取った可能性があります。"

#: ../../../HISTORY.txt:2096
msgid "Python 3.3 compatibility."
msgstr "Python 3.3との互換性。"

#: ../../../HISTORY.txt:2098
msgid ""
"Configurator.add_directive now accepts arbitrary callables like partials "
"or objects implementing ``__call__`` which dont have ``__name__`` and "
"``__doc__`` attributes.  See https://github.com/Pylons/pyramid/issues/621"
" and https://github.com/Pylons/pyramid/pull/647."
msgstr "Configurator.add_directiveは、部分名や `` __call__``を実装しているオブジェクトのような任意の呼び出し可能ファイルを受け付け、 `` __name__``や `` __doc__``属性を持たないようになりました。 https://github.com/Pylons/pyramid/issues/621およびhttps://github.com/Pylons/pyramid/pull/647を参照してください。"

#: ../../../HISTORY.txt:2103
msgid ""
"Third-party custom view, route, and subscriber predicates can now be "
"added for use by view authors via "
"``pyramid.config.Configurator.add_view_predicate``, "
"``pyramid.config.Configurator.add_route_predicate`` and "
"``pyramid.config.Configurator.add_subscriber_predicate``.  So, for "
"example, doing this::"
msgstr "`` pyramid.config.Configurator.add_view_predicate``、 `` pyramid.config.Configurator.add_route_predicate``、および `` pyramid.config &#39;&#39;を介して、ビュー作成者が使用するサードパーティのカスタムビュー、ルート、サブスクライバ述語を追加できるようになりました。 .Configurator.add_subscriber_predicate``。たとえば、これを行う::"

#: ../../../HISTORY.txt:2112
msgid ""
"Might allow a view author to do this in an application that configured "
"that predicate::"
msgstr "ビュー作成者は、その述部を構成したアプリケーションでこれを行うことができます。"

#: ../../../HISTORY.txt:2117
msgid ""
"Similar features exist for ``add_route``, and ``add_subscriber``.  See "
"\"Adding A Third Party View, Route, or Subscriber Predicate\" in the "
"Hooks chapter for more information."
msgstr "`` add_route``と `` add_subscriber``にも同様の機能があります。詳細については、「フック」の章の「サードパーティのビュー、ルート、またはサブスクライバ述語の追加」を参照してください。"

#: ../../../HISTORY.txt:2121
msgid ""
"Note that changes made to support the above feature now means that only "
"actions registered using the same \"order\" can conflict with one "
"another. It used to be the case that actions registered at different "
"orders could potentially conflict, but to my knowledge nothing ever "
"depended on this behavior (it was a bit silly)."
msgstr "上記の機能をサポートするために加えられた変更は、同じ\ &quot;注文\&quot;を使用して登録されたアクションだけが互いに競合する可能性があることに注意してください。以前は、異なる注文で登録された行動が衝突する可能性がありましたが、私の知る限り、この行動には何も依存していませんでした（それはちょっとばかげていました）。"

#: ../../../HISTORY.txt:2127
msgid ""
"Custom objects can be made easily JSON-serializable in Pyramid by "
"defining a ``__json__`` method on the object's class. This method should "
"return values natively serializable by ``json.dumps`` (such as ints, "
"lists, dictionaries, strings, and so forth)."
msgstr "オブジェクトのクラスに対して `` __json__``メソッドを定義することで、カスタムオブジェクトをPyramidで簡単にJSON直列化可能にすることができます。このメソッドは、 `` json.dumps``（int、リスト、辞書、文字列など）によってネイティブにシリアライズ可能な値を返さなければなりません。"

#: ../../../HISTORY.txt:2132
msgid ""
"The JSON renderer now allows for the definition of custom type adapters "
"to convert unknown objects to JSON serializations."
msgstr "JSONレンダラーでは、未知のオブジェクトをJSONシリアライズに変換するカスタムタイプアダプタの定義が可能になりました。"

#: ../../../HISTORY.txt:2135
msgid ""
"As of this release, the ``request_method`` predicate, when used, will "
"also imply that ``HEAD`` is implied when you use ``GET``.  For example, "
"using ``@view_config(request_method='GET')`` is equivalent to using "
"``@view_config(request_method=('GET', 'HEAD'))``.  Using "
"``@view_config(request_method=('GET', 'POST')`` is equivalent to using "
"``@view_config(request_method=('GET', 'HEAD', 'POST')``.  This is because"
" HEAD is a variant of GET that omits the body, and WebOb has special "
"support to return an empty body when a HEAD is used."
msgstr "今回のリリースでは、 `` request_method``述部は、 `` GET``を使用するときに `` HEAD``が暗示されていることを意味します。例えば、 `` @view_config（request_method = &#39;GET&#39;） ``を使うことは `` @view_config（request_method =（ &#39;GET&#39;、 &#39;HEAD&#39;）） ``を使うのと同じです。 @view_config（request_method =（ &#39;GET&#39;、 &#39;POST&#39;） ``は、 `` @view_config（request_method =（ &#39;GET&#39;、 &#39;HEAD&#39;、 &#39;POST&#39;） ``を使うのと同じです。はボディを省略したGETの変種で、WebObはHEADが使用されたときに空のボディを返す特別なサポートを持っています。"

#: ../../../HISTORY.txt:2144
msgid ""
"``config.add_request_method`` has been introduced to support extending "
"request objects with arbitrary callables. This method expands on the "
"previous ``config.set_request_property`` by supporting methods as well as"
" properties. This method now causes less code to be executed at request "
"construction time than ``config.set_request_property`` in version 1.3."
msgstr "`` config.add_request_method``は任意の呼び出し可能な要求オブジェクトの拡張をサポートするために導入されました。このメソッドは、以前の `` config.set_request_property``を拡張し、メソッドとプロパティをサポートします。この方法では、バージョン1.3での `` config.set_request_property``よりも要求生成時に実行されるコードが少なくなりました。"

#: ../../../HISTORY.txt:2151
msgid ""
"Don't add a ``?`` to URLs generated by ``request.resource_url`` if the "
"``query`` argument is provided but empty."
msgstr "`` query``引数が指定されていても空であれば `` request.resource_url``で生成されたURLに ``？ ``を加えないでください。"

#: ../../../HISTORY.txt:2154
msgid ""
"Don't add a ``?`` to URLs generated by ``request.route_url`` if the "
"``_query`` argument is provided but empty."
msgstr "`` _query``引数が指定されていても空であれば `` request.route_url``で生成されたURLに ``？ ``を加えないでください。"

#: ../../../HISTORY.txt:2157
msgid ""
"The static view machinery now raises (rather than returns) "
"``HTTPNotFound`` and ``HTTPMovedPermanently`` exceptions, so these can be"
" caught by the Not Found View (and other exception views)."
msgstr "静的ビューマシンは、 `` HTTPNotFound``と `` HTTPMovedPermanently``の例外を発生させます（戻り値ではなく）。これはNot Found View（および他の例外ビュー）によって捕捉される可能性があります。"

#: ../../../HISTORY.txt:2161
msgid ""
"The Mako renderer now supports a def name in an asset spec.  When the def"
" name is present in the asset spec, the system will render the template "
"def within the template and will return the result. An example asset spec"
" is ``package:path/to/template#defname.mako``. This will render the def "
"named ``defname`` inside the ``template.mako`` template instead of "
"rendering the entire template.  The old way of returning a tuple in the "
"form ``('defname', {})`` from the view is supported for backward "
"compatibility,"
msgstr "Makoレンダラは現在、資産仕様のdef名をサポートしています。 def名がアセット仕様にある場合、システムはテンプレート内でテンプレートdefをレンダリングし、結果を返します。資産仕様の例は `` package：path / to / template＃defname.mako``です。これはテンプレート全体をレンダリングするのではなく、 `` template.mako``テンプレートの中で `` defname``という名前のdefをレンダリングします。ビューから ``（ &#39;defname&#39;、{}） ``の形でタプルを返す古い方法は、下位互換性のためにサポートされています。"

#: ../../../HISTORY.txt:2169
msgid ""
"The Chameleon ZPT renderer now accepts a macro name in an asset spec.  "
"When the macro name is present in the asset spec, the system will render "
"the macro listed as a ``define-macro`` and return the result instead of "
"rendering the entire template.  An example asset spec: "
"``package:path/to/template#macroname.pt``.  This will render the macro "
"defined as ``macroname`` within the ``template.pt`` template instead of "
"the entire templae."
msgstr "Chameleon ZPTレンダラはアセット仕様でマクロ名を受け入れるようになりました。アセット仕様にマクロ名がある場合、システムは `` define-macro``としてリストされたマクロをレンダリングし、テンプレート全体をレンダリングする代わりに結果を返します。資産仕様の例： `` package：path / to / template＃macroname.pt``。これは、templae全体ではなく、 `` template.pt``テンプレート内で `` macroname``として定義されたマクロをレンダリングします。"

#: ../../../HISTORY.txt:2177
msgid ""
"When there is a predicate mismatch exception (seen when no view matches "
"for a given request due to predicates not working), the exception now "
"contains a textual description of the predicate which didn't match."
msgstr "述部の不一致例外がある場合（述部が機能しないためにビューが特定の要求に一致しない場合に表示されます）、例外には一致しなかった述部のテキスト記述が含まれるようになりました。"

#: ../../../HISTORY.txt:2181
msgid ""
"An ``add_permission`` directive method was added to the Configurator.  "
"This directive registers a free-standing permission introspectable into "
"the Pyramid introspection system.  Frameworks built atop Pyramid can thus"
" use the ``permissions`` introspectable category data to build a "
"comprehensive list of permissions supported by a running system.  Before "
"this method was added, permissions were already registered in this "
"introspectable category as a side effect of naming them in an "
"``add_view`` call, this method just makes it possible to arrange for a "
"permission to be put into the ``permissions`` introspectable category "
"without naming it along with an associated view.  Here's an example of "
"usage of ``add_permission``::"
msgstr "Configuratorに `` add_permission``指示メソッドが追加されました。この指令は、ピラミッドのイントロスペクションシステムにイントロスペクト可能な自立型パーミッションを登録します。 Pyramidの上に構築されたフレームワークは、 `` permissions``のイントロスペクション可能なカテゴリデータを使用して、実行中のシステムでサポートされているパーミッションの包括的なリストを構築することができます。このメソッドが追加される前に、権限は `` add_view``呼び出しで名前を付ける副作用としてこのイントロスペクティブカテゴリに既に登録されていました。このメソッドは、アクセス権を `` permissions``に入れることを可能にします。関連するビューと共に名前を付けることなく、「イントロスペクティブなカテゴリ」を作成します。 `` add_permission``の使用例を次に示します::"

#: ../../../HISTORY.txt:2196
msgid ""
"The ``UnencryptedCookieSessionFactoryConfig`` now accepts "
"``signed_serialize`` and ``signed_deserialize`` hooks which may be used "
"to influence how the sessions are marshalled (by default this is done "
"with HMAC+pickle)."
msgstr "`` UnencryptedCookieSessionFactoryConfig``は、セッションがマーシャリングされる方法に影響を与えるために使われる `` signed_serialize``と `` signed_deserialize``フックを受け付けるようになりました（デフォルトでHMAC + pickleで行われます）。"

#: ../../../HISTORY.txt:2201
msgid ""
"``pyramid.testing.DummyRequest`` now supports methods supplied by the "
"``pyramid.util.InstancePropertyMixin`` class such as ``set_property``."
msgstr "`` pyramid.testing.DummyRequest``は、 `` set_property``のような `` pyramid.util.InstancePropertyMixin``クラスによって提供されるメソッドをサポートするようになりました。"

#: ../../../HISTORY.txt:2204
msgid ""
"Request properties and methods added via ``config.set_request_property`` "
"or ``config.add_request_method`` are now available to tweens."
msgstr "`` config.set_request_property``または `` config.add_request_method``を介して追加されたリクエストプロパティとメソッドはtweensで利用できるようになりました。"

#: ../../../HISTORY.txt:2207
msgid ""
"Request properties and methods added via ``config.set_request_property`` "
"or ``config.add_request_method`` are now available in the request object "
"returned from ``pyramid.paster.bootstrap``."
msgstr "`` config.set_request_property``または `` config.add_request_method``で追加されたリクエストプロパティとメソッドは、 `` pyramid.paster.bootstrap``から返されたリクエストオブジェクトで利用可能になりました。"

#: ../../../HISTORY.txt:2211
msgid ""
"``request.context`` of environment request during ``bootstrap`` is now "
"the root object if a context isn't already set on a provided request."
msgstr "`` bootstrap``中の環境要求の `` request.context``は、提供された要求にコンテキストがまだ設定されていない場合、ルートオブジェクトになりました。"

#: ../../../HISTORY.txt:2214
msgid ""
"The ``pyramid.decorator.reify`` function is now an API, and was added to "
"the API documentation."
msgstr "`` pyramid.decorator.reify``関数はAPIになり、APIドキュメントに追加されました。"

#: ../../../HISTORY.txt:2217
msgid ""
"Added the ``pyramid.testing.testConfig`` context manager, which can be "
"used to generate a configurator in a test, e.g. ``with "
"testing.testConfig(...):``."
msgstr "`` testing.testConfig（...）： ``などのテストでコンフィギュレータを生成するために使用できる `` pyramid.testing.testConfig``コンテキストマネージャを追加しました。"

#: ../../../HISTORY.txt:2220
msgid ""
"Users can now invoke a subrequest from within view code using a new "
"``request.invoke_subrequest`` API."
msgstr "ユーザーは、新しい `` request.invoke_subrequest`` APIを使用して、ビューコード内からサブリクエストを呼び出すことができます。"

#: ../../../HISTORY.txt:2226
msgid ""
"The ``pyramid.config.Configurator.set_request_property`` has been "
"documentation-deprecated.  The method remains usable but the more "
"featureful ``pyramid.config.Configurator.add_request_method`` should be "
"used in its place (it has all of the same capabilities but can also "
"extend the request object with methods)."
msgstr "`` pyramid.config.Configurator.set_request_property``はドキュメント化されていません。このメソッドは使用可能ですが、より機能的な `` pyramid.config.Configurator.add_request_method``を代わりに使用する必要があります（すべて同じ機能を持ちますが、メソッドでリクエストオブジェクトを拡張することもできます）。"

#: ../../../HISTORY.txt:2235
msgid ""
"The Pyramid router no longer adds the values ``bfg.routes.route`` or "
"``bfg.routes.matchdict`` to the request's WSGI environment dictionary. "
"These values were docs-deprecated in ``repoze.bfg`` 1.0 (effectively "
"seven minor releases ago).  If your code depended on these values, use "
"request.matched_route and request.matchdict instead."
msgstr "ピラミッドルータは、 `` bfg.routes.route``または `` bfg.routes.matchdict``の値をリクエストのWSGI環境辞書に追加しなくなりました。これらの値は `` repoze.bfg`` 1.0で文書廃止されました（事実上7つのマイナーリリース前）。コードがこれらの値に依存している場合は、代わりにrequest.matched_routeとrequest.matchdictを使用してください。"

#: ../../../HISTORY.txt:2241
msgid ""
"It is no longer possible to pass an environ dictionary directly to "
"``pyramid.traversal.ResourceTreeTraverser.__call__`` (aka "
"``ModelGraphTraverser.__call__``).  Instead, you must pass a request "
"object.  Passing an environment instead of a request has generated a "
"deprecation warning since Pyramid 1.1."
msgstr "environ辞書を `` pyramid.traversal.ResourceTreeTraverser .__ call__``（別名 `` ModelGraphTraverser .__ call__``）に直接渡すことはもはや不可能です。代わりに、要求オブジェクトを渡す必要があります。リクエストの代わりに環境を渡すと、Pyramid 1.1以降の廃止予定の警告が生成されました。"

#: ../../../HISTORY.txt:2247
msgid ""
"Pyramid will no longer work properly if you use the "
"``webob.request.LegacyRequest`` as a request factory.  Instances of the "
"LegacyRequest class have a ``request.path_info`` which return a string. "
"This Pyramid release assumes that ``request.path_info`` will "
"unconditionally be Unicode."
msgstr "`` webob.request.LegacyRequest``を要求ファクトリとして使用すると、Pyramidは正しく動作しなくなります。 LegacyRequestクラスのインスタンスには、文字列を返す `` request.path_info``があります。このPyramidのリリースでは、 `` request.path_info``が無条件にUnicodeになると仮定しています。"

#: ../../../HISTORY.txt:2253
msgid ""
"The functions from ``pyramid.chameleon_zpt`` and "
"``pyramid.chameleon_text`` named ``get_renderer``, ``get_template``, "
"``render_template``, and ``render_template_to_response`` have been "
"removed.  These have issued a deprecation warning upon import since "
"Pyramid 1.0.  Use ``pyramid.renderers.get_renderer()``, "
"``pyramid.renderers.get_renderer().implementation()``, "
"``pyramid.renderers.render()`` or "
"``pyramid.renderers.render_to_response`` respectively instead of these "
"functions."
msgstr "`` get_renderer``、 `` get_template``、 `` render_template``、および `` render_template_to_response``という名前の `` pyramid.chameleon_zpt``と `` pyramid.chameleon_text``の関数は削除されました。これらはPyramid 1.0以降のインポート時に廃止予定の警告を出しました。 pyramid.renderers.get_renderer（）。implementation（） ``、 `` pyramid.renderers.render（） ``または `` pyramid.renderers.render_to_response``を使用してください。これらの機能の代わりにそれぞれ機能します。"

#: ../../../HISTORY.txt:2262
msgid ""
"The ``pyramid.configuration`` module was removed.  It had been deprecated"
" since Pyramid 1.0 and printed a deprecation warning upon its use.  Use "
"``pyramid.config`` instead."
msgstr "`` pyramid.configuration``モジュールが削除されました。 Pyramid 1.0以降、非推奨となっていたため、使用時に非推奨警告が表示されました。代わりに `` pyramid.config``を使用してください。"

#: ../../../HISTORY.txt:2266
msgid ""
"The ``pyramid.paster.PyramidTemplate`` API was removed.  It had been "
"deprecated since Pyramid 1.1 and issued a warning on import.  If your "
"code depended on this, adjust your code to import "
"``pyramid.scaffolds.PyramidTemplate`` instead."
msgstr "`` pyramid.paster.PyramidTemplate`` APIが削除されました。ピラミッド1.1以来廃止され、輸入に関する警告が出されました。あなたのコードがこれに依存している場合は、代わりに `` pyramid.scaffolds.PyramidTemplate``をインポートするようにコードを調整してください。"

#: ../../../HISTORY.txt:2271
msgid ""
"The ``pyramid.settings.get_settings()`` API was removed.  It had been "
"printing a deprecation warning since Pyramid 1.0.  If your code depended "
"on this API, use ``pyramid.threadlocal.get_current_registry().settings`` "
"instead or use the ``settings`` attribute of the registry available from "
"the request (``request.registry.settings``)."
msgstr "`` pyramid.settings.get_settings（） `` APIが削除されました。 Pyramid 1.0以降、廃止予定の警告が表示されていました。あなたのコードがこのAPIに依存している場合、代わりに `` pyramid.threadlocal.get_current_registry（）。settings``を使うか、リクエストから利用可能なレジストリの `` settings``属性を使います（ `` request.registry.settings``） 。"

#: ../../../HISTORY.txt:2277
msgid ""
"These APIs from the ``pyramid.testing`` module were removed.  They have "
"been printing deprecation warnings since Pyramid 1.0:"
msgstr "`` pyramid.testing``モジュールのこれらのAPIは削除されました。彼らはPyramid 1.0以降、廃止予定の警告を印刷しています："

#: ../../../HISTORY.txt:2280
msgid ""
"``registerDummySecurityPolicy``, use "
"``pyramid.config.Configurator.testing_securitypolicy`` instead."
msgstr "`` registerDummySecurityPolicy``は、代わりに `` pyramid.config.Configurator.testing_securitypolicy``を使います。"

#: ../../../HISTORY.txt:2283
msgid ""
"``registerResources`` (aka ``registerModels``, use "
"``pyramid.config.Configurator.testing_resources`` instead."
msgstr "`` registerResources``（別名 `` registerModels``、代わりに `` pyramid.config.Configurator.testing_resources``）を使います。"

#: ../../../HISTORY.txt:2286
msgid ""
"``registerEventListener``, use "
"``pyramid.config.Configurator.testing_add_subscriber`` instead."
msgstr "`` registerEventListener``では、代わりに `` pyramid.config.Configurator.testing_add_subscriber``を使います。"

#: ../../../HISTORY.txt:2289
msgid ""
"``registerTemplateRenderer`` (aka `registerDummyRenderer``), use "
"``pyramid.config.Configurator.testing_add_template`` instead."
msgstr "`` registerTemplateRenderer``（別名 `registerDummyRenderer``）では、代わりに` `pyramid.config.Configurator.testing_add_template``を使います。"

#: ../../../HISTORY.txt:2292
msgid "``registerView``, use ``pyramid.config.Configurator.add_view`` instead."
msgstr "`` registerView``では、代わりに `` pyramid.config.Configurator.add_view``を使います。"

#: ../../../HISTORY.txt:2294
msgid ""
"``registerUtility``, use "
"``pyramid.config.Configurator.registry.registerUtility`` instead."
msgstr "`` registerUtility``では、代わりに `` pyramid.config.Configurator.registry.registerUtility``を使います。"

#: ../../../HISTORY.txt:2297
msgid ""
"``registerAdapter``, use "
"``pyramid.config.Configurator.registry.registerAdapter`` instead."
msgstr "`` registerAdapter``では、代わりに `` pyramid.config.Configurator.registry.registerAdapter``を使います。"

#: ../../../HISTORY.txt:2300
msgid ""
"``registerSubscriber``, use "
"``pyramid.config.Configurator.add_subscriber`` instead."
msgstr "`` registerSubscriber``では、代わりに `` pyramid.config.Configurator.add_subscriber``を使います。"

#: ../../../HISTORY.txt:2303
msgid "``registerRoute``, use ``pyramid.config.Configurator.add_route`` instead."
msgstr "`` registerRoute``では、代わりに `` pyramid.config.Configurator.add_route``を使います。"

#: ../../../HISTORY.txt:2306
msgid ""
"``registerSettings``, use ``pyramid.config.Configurator.add_settings`` "
"instead."
msgstr "`` registerSettings``は代わりに `` pyramid.config.Configurator.add_settings``を使います。"

#: ../../../HISTORY.txt:2309
msgid ""
"In Pyramid 1.3 and previous, the ``__call__`` method of a Response object"
" was invoked before any finished callbacks were executed.  As of this "
"release, the ``__call__`` method of a Response object is invoked *after* "
"finished callbacks are executed.  This is in support of the "
"``request.invoke_subrequest`` feature."
msgstr "Pyramid 1.3以前では、終了したコールバックが実行される前に、Responseオブジェクトの `` __call__``メソッドが呼び出されました。このリリースから、Responseオブジェクトの `` __call__``メソッドは、終了したコールバックが実行された後に呼び出されます。これは `` request.invoke_subrequest``機能をサポートしています。"

#: ../../../HISTORY.txt:2315
msgid ""
"The 200-series exception responses named ``HTTPCreated``, "
"``HTTPAccepted``, ``HTTPNonAuthoritativeInformation``, ``HTTPNoContent``,"
" ``HTTPResetContent``, and ``HTTPPartialContent`` in "
"``pyramid.httpexceptions`` no longer inherit from ``HTTPOk``.  Instead "
"they inherit from a new base class named ``HTTPSuccessful``.  This will "
"have no effect on you unless you've registered an exception view for "
"``HTTPOk`` and expect that exception view to catch all the aforementioned"
" exceptions."
msgstr "`` pyramid.httpexceptions`の `` HTTPCreated```、 `` HTTPAccepted``、 `` HTTPNonAuthoritativeInformation``、 `` HTTPNoContent``、 `` HTTPResetContent``、 `` HTTPPartialContent``の200シリーズ例外レスポンスは、 `` HTTPOk``から継承しなくなりました。代わりに、 `` HTTPSuccessful``という名前の新しい基本クラスを継承します。これは、 `` HTTPOk``の例外ビューを登録して、例外ビューが上記のすべての例外をキャッチすることを期待しない限り、あなたには何の影響も与えません。"

#: ../../../HISTORY.txt:2326
msgid ""
"Added an \"Upgrading Pyramid\" chapter to the narrative documentation.  "
"It describes how to cope with deprecations and removals of Pyramid APIs "
"and how to show Pyramid-generated deprecation warnings while running "
"tests and while running a server."
msgstr "物語のドキュメンテーションに「ピラミッドのアップグレード」の章を追加しました。 Pyramid APIの廃止と削除に対処する方法と、テストの実行中およびサーバーの実行中にPyramidで生成された廃止予定の警告を表示する方法について説明します。"

#: ../../../HISTORY.txt:2331
msgid ""
"Added a \"Invoking a Subrequest\" chapter to the documentation.  It "
"describes how to use the new ``request.invoke_subrequest`` API."
msgstr "ドキュメントに「サブリクエストを呼び出す」という章が追加されました。新しい `` request.invoke_subrequest`` APIの使い方について説明しています。"

#: ../../../HISTORY.txt:2337
msgid ""
"Pyramid now requires WebOb 1.2b3+ (the prior Pyramid release only relied "
"on 1.2dev+).  This is to ensure that we obtain a version of WebOb that "
"returns ``request.path_info`` as text."
msgstr "PyramidにはWebOb 1.2b3 +が必要です（以前のPyramidリリースは1.2dev +のみに依存していました）。これは、 `` request.path_info``をテキストとして返すWebObのバージョンを確実に取得するためです。"

#: ../../../HISTORY.txt:2342
msgid "1.3 (2012-03-21)"
msgstr "1.3（2012-03-21）"

#: ../../../HISTORY.txt:2347
msgid ""
"When ``pyramid.wsgi.wsgiapp2`` calls the downstream WSGI app, the app's "
"environ will no longer have (deprecated and potentially misleading) "
"``bfg.routes.matchdict`` or ``bfg.routes.route`` keys in it.  A symptom "
"of this bug would be a ``wsgiapp2``-wrapped Pyramid app finding the wrong"
" view because it mistakenly detects that a route was matched when, in "
"fact, it was not."
msgstr "`` pyramid.wsgi.wsgiapp2``がダウンストリームのWSGIアプリケーションを呼び出すと、アプリケーションのenvironは `` bfg.routes.matchdict``や `` bfg.routes.route``のキーをもはや持っていません。それ。このバグの症状は、 `` wsgiapp2``でラップされたピラミッドアプリで、間違った視点を見つけることになります。"

#: ../../../HISTORY.txt:2354
msgid ""
"The fix for issue https://github.com/Pylons/pyramid/issues/461 (which "
"made it possible for instance methods to be used as view callables) "
"introduced a backwards incompatibility when methods that declared only a "
"request argument were used.  See "
"https://github.com/Pylons/pyramid/issues/503"
msgstr "https://github.com/Pylons/pyramid/issues/461という問題（インスタンスメソッドをビュー呼び出し可能オブジェクトとして使用できるようにした）の修正により、リクエスト引数のみを宣言したメソッドが使用された場合、後方互換性が導入されました。 https://github.com/Pylons/pyramid/issues/503を参照してください。"

#: ../../../HISTORY.txt:2360
msgid "1.3b3 (2012-03-17)"
msgstr "1.3b3（2012-03-17）"

#: ../../../HISTORY.txt:2365
msgid ""
"``config.add_view(<aninstancemethod>)`` raised AttributeError involving "
"``__text__``.  See https://github.com/Pylons/pyramid/issues/461"
msgstr "`` config.add_view（ <aninstancemethod> ） ``は、 `` __text__``を含むAttributeErrorを発生させました。 https://github.com/Pylons/pyramid/issues/461を参照してください。"

#: ../../../HISTORY.txt:2368
msgid ""
"Remove references to do-nothing ``pyramid.debug_templates`` setting in "
"all Pyramid-provided ``.ini`` files.  This setting previously told "
"Chameleon to render better exceptions; now Chameleon always renders nice "
"exceptions regardless of the value of this setting."
msgstr "すべてのPyramid提供の `` .ini``ファイルで、何もしない `` pyramid.debug_templates``設定への参照を削除してください。この設定は、以前より優れた例外を表示するようにChameleonに伝えました。現在、Chameleonはこの設定の値に関係なく常に素晴らしい例外をレンダリングします。"

#: ../../../HISTORY.txt:2376
msgid ""
"The ``alchemy`` scaffold now shows an informative error message in the "
"browser if the person creating the project forgets to run the "
"initialization script."
msgstr "`` alchemy``スキャフォールドは、プロジェクトを作成している人が初期化スクリプトを実行することを忘れた場合、ブラウザに有益なエラーメッセージを表示するようになりました。"

#: ../../../HISTORY.txt:2380
msgid ""
"The ``alchemy`` scaffold initialization script is now called "
"``initialize_<projectname>_db`` instead of ``populate_<projectname>``."
msgstr "`` alchemy`` scaffold初期化スクリプトは `` initialize_ <projectname> `` populate_の代わりに_db``を使用します<projectname> ``。"

#: ../../../HISTORY.txt:2386
msgid "Wiki tutorials improved due to collaboration at PyCon US 2012 sprints."
msgstr "Wikiチュートリアルは、PyCon US 2012スプリントでのコラボレーションにより改善されました。"

#: ../../../HISTORY.txt:2389
msgid "1.3b2 (2012-03-02)"
msgstr "1.3b2（2012-03-02）"

#: ../../../HISTORY.txt:2394
msgid ""
"The method ``pyramid.request.Request.partial_application_url`` is no "
"longer in the API docs.  It was meant to be a private method; its "
"publication in the documentation as an API method was a mistake, and it "
"has been renamed to something private."
msgstr "メソッド `` pyramid.request.Request.partial_application_url``はAPIドキュメントにはもうありません。それは私的な方法であることを意図していた。 APIメソッドとしてのドキュメンテーションへの公開は間違いであり、プライベートなものに変更されました。"

#: ../../../HISTORY.txt:2399
msgid ""
"When a static view was registered using an absolute filesystem path on "
"Windows, the ``request.static_url`` function did not work to generate "
"URLs to its resources.  Symptom: \"No static URL definition matching "
"c:\\\\foo\\\\bar\\\\baz\"."
msgstr "静的ビューがWindows上の絶対ファイルシステムパスを使用して登録されたとき、 `` request.static_url``関数はそのリソースへのURLを生成するようには機能しませんでした。症状：\ &quot;スタティックなURL定義がありませんc：\\\\ foo \\\ bar \\\\ baz \&quot;"

#: ../../../HISTORY.txt:2404
msgid "Make all tests pass on Windows XP."
msgstr "すべてのテストをWindows XPに合格させる。"

#: ../../../HISTORY.txt:2406
msgid ""
"Bug in ACL authentication checking on Python 3: the ``permits`` and "
"``principals_allowed_by_permission`` method of "
"``pyramid.authorization.ACLAuthenticationPolicy`` could return an "
"inappropriate ``True`` value when a permission on an ACL was a string "
"rather than a sequence, and then only if the ACL permission string was a "
"substring of the ``permission`` value passed to the function."
msgstr "Python 3でのACL認証チェックのバグ： `` pyramid.authorization.ACLAuthenticationPolicy``の `` permits``と `` principals_allowed_by_permission``メソッドは、ACLに対するパーミッションがそして、ACL許可文字列が関数に渡された `` permission``値の部分文字列だった場合のみです。"

#: ../../../HISTORY.txt:2413
msgid ""
"This bug effects no Pyramid deployment under Python 2; it is a bug that "
"exists only in deployments running on Python 3.  It has existed since "
"Pyramid 1.3a1."
msgstr "このバグはPython 2ではPyramidの展開に影響しません。 Python 3で動作するデプロイメントにのみ存在するバグです。これはPyramid 1.3a1以来存在していました。"

#: ../../../HISTORY.txt:2417
msgid ""
"This bug was due to the presence of an ``__iter__`` attribute on strings "
"under Python 3 which is not present under strings in Python 2."
msgstr "このバグは、Python 3の下の文字列に `` __iter__``属性が存在し、Python 2の文字列の下に存在しないためです。"

#: ../../../HISTORY.txt:2421
msgid "1.3b1 (2012-02-26)"
msgstr "1.3b1（2012-02-26）"

#: ../../../HISTORY.txt:2426
msgid ""
"``pyramid.config.Configurator.with_package`` didn't work if the "
"Configurator was an old-style ``pyramid.configuration.Configurator`` "
"instance."
msgstr "Configuratorが古いスタイルの `` pyramid.configuration.Configurator``インスタンスだった場合、 `` pyramid.config.Configurator.with_package``は機能しませんでした。"

#: ../../../HISTORY.txt:2430
msgid "Pyramid authorization policies did not show up in the introspector."
msgstr "ピラミッド認可ポリシーはイントロスペクサーに表示されませんでした。"

#: ../../../HISTORY.txt:2435
msgid ""
"All references to the ``tmpl_context`` request variable were removed from"
" the docs.  Its existence in Pyramid is confusing for people who were "
"never Pylons users.  It was added as a porting convenience for Pylons "
"users in Pyramid 1.0, but it never caught on because the Pyramid "
"rendering system is a lot different than Pylons' was, and alternate ways "
"exist to do what it was designed to offer in Pylons.  It will continue to"
" exist \"forever\" but it will not be recommended or mentioned in the "
"docs."
msgstr "`` tmpl_context``要求変数へのすべての参照は、ドキュメントから削除されました。ピラミッドに存在することは、決してPylonsユーザーではない人々にとって混乱を招いています。それはPyramid 1.0のPylonsユーザーのための移植の便宜のために追加されましたが、PyramidレンダリングシステムがPylonsのものとは大きく異なり、Pylonsで提供するように設計された方法を実行するための方法があります。それは\ &quot;永遠に\&quot;存在し続けるでしょうが、それはドキュメントで推奨されたり言及されません。"

#: ../../../HISTORY.txt:2444
msgid "1.3a9 (2012-02-22)"
msgstr "1.3a9（2012-02-22）"

#: ../../../HISTORY.txt:2449
msgid ""
"Add an ``introspection`` boolean to the Configurator constructor.  If "
"this is ``True``, actions registered using the Configurator will be "
"registered with the introspector.  If it is ``False``, they won't.  The "
"default is ``True``.  Setting it to ``False`` during action processing "
"will prevent introspection for any following registration statements, and"
" setting it to ``True`` will start them up again.  This addition is to "
"service a requirement that the debug toolbar's own views and methods not "
"show up in the introspector."
msgstr "Configuratorコンストラクタに `` introspection``ブール値を追加してください。これが `` True``の場合、コンフィギュレータで登録されたアクションはイントロスペクサーに登録されます。それが「偽」であれば、そうではないでしょう。デフォルトは `` True``です。アクションの処理中に `` False``に設定すると、後続の登録文に対するイントロスペクションが防止され、 `` True``に設定することでそれらを再び起動します。この追加は、デバッグツールバーのビューとメソッドがイントロスペクサーに表示されないという要件に対応するためのものです。"

#: ../../../HISTORY.txt:2458
msgid ""
"New API: ``pyramid.config.Configurator.add_notfound_view``.  This is a "
"wrapper for ``pyramid.Config.configurator.add_view`` which provides easy "
"append_slash support and does the right thing about permissions.  It "
"should be preferred over calling ``add_view`` directly with "
"``context=HTTPNotFound`` as was previously recommended."
msgstr "新しいAPI： `` pyramid.config.Configurator.add_notfound_view``。これは `` pyramid.Config.configurator.add_view``のラッパーで、簡単なappend_slashサポートを提供し、権限について正しいことを行います。これまで推奨されていた `` context = HTTPNotFound``で直接 `` add_view``を呼び出すのが好ましいでしょう。"

#: ../../../HISTORY.txt:2464
msgid ""
"New API: ``pyramid.view.notfound_view_config``.  This is a decorator "
"constructor like ``pyramid.view.view_config`` that calls "
"``pyramid.config.Configurator.add_notfound_view`` when scanned.  It "
"should be preferred over using ``pyramid.view.view_config`` with "
"``context=HTTPNotFound`` as was previously recommended."
msgstr "新しいAPI： `` pyramid.view.notfound_view_config``。これは、スキャン時に `` pyramid.config.Configurator.add_notfound_view``を呼び出す `` pyramid.view.view_config``のようなデコレータコンストラクタです。前に推奨したように、 `` pyramid.view.view_config``を `` context = HTTPNotFound``で使うのが好ましいでしょう。"

#: ../../../HISTORY.txt:2470
msgid ""
"New API: ``pyramid.config.Configurator.add_forbidden_view``.  This is a "
"wrapper for ``pyramid.Config.configurator.add_view`` which does the right"
" thing about permissions.  It should be preferred over calling "
"``add_view`` directly with ``context=HTTPForbidden`` as was previously "
"recommended."
msgstr "新しいAPI： `` pyramid.config.Configurator.add_forbidden_​​view``これは、アクセス許可について正しいことをする `` pyramid.Config.configurator.add_view``のラッパーです。これまで推奨されていた `` context = HTTPForbidden``で直接 `` add_view``を呼び出すのが望ましいでしょう。"

#: ../../../HISTORY.txt:2475
msgid ""
"New API: ``pyramid.view.forbidden_view_config``.  This is a decorator "
"constructor like ``pyramid.view.view_config`` that calls "
"``pyramid.config.Configurator.add_forbidden_view`` when scanned.  It "
"should be preferred over using ``pyramid.view.view_config`` with "
"``context=HTTPForbidden`` as was previously recommended."
msgstr "新しいAPI： `` pyramid.view.forbidden_​​view_config``。これは、スキャン時に `` pyramid.config.Configurator.add_forbidden_​​view``を呼び出す `` pyramid.view.view_config``のようなデコレータコンストラクタです。これまで推奨されていたように `` pyramid.view.view_config``を `` context = HTTPForbidden``で使うのが好ましいでしょう。"

#: ../../../HISTORY.txt:2481
msgid ""
"New APIs: ``pyramid.response.FileResponse`` and "
"``pyramid.response.FileIter``, for usage in views that must serve files "
"\"manually\"."
msgstr "新しいAPI： `` pyramid.response.FileResponse``と `` pyramid.response.FileIter``は、手動でファイルを提供しなければならないビューで使用するためのものです。"

#: ../../../HISTORY.txt:2488
msgid ""
"Remove ``pyramid.config.Configurator.with_context`` class method.  It was"
" never an API, it is only used by ``pyramid_zcml`` and its functionality "
"has been moved to that package's latest release.  This means that you'll "
"need to use the 0.9.2 or later release of ``pyramid_zcml`` with this "
"release of Pyramid."
msgstr "`` pyramid.config.Configurator.with_context``クラスメソッドを削除してください。これは決してAPIではなく、 `` pyramid_zcml``だけで使用され、その機能はそのパッケージの最新リリースに移されました。つまり、Pyramidのこのリリースでは0.9.2以降のリリースの `` pyramid_zcml``を使う必要があります。"

#: ../../../HISTORY.txt:2494
msgid ""
"The ``introspector`` argument to the ``pyramid.config.Configurator`` "
"constructor API has been removed.  It has been replaced by the boolean "
"``introspection`` flag."
msgstr "`` pyramid.config.Configurator``コンストラクタAPIの `` introspector``引数は削除されました。ブール型の &quot;イントロスペクション&quot;フラグで置き換えられました。"

#: ../../../HISTORY.txt:2498
msgid "The ``pyramid.registry.noop_introspector`` API object has been removed."
msgstr "`` pyramid.registry.noop_introspector`` APIオブジェクトは削除されました。"

#: ../../../HISTORY.txt:2500
msgid ""
"The older deprecated ``set_notfound_view`` Configurator method is now an "
"alias for the new ``add_notfound_view`` Configurator method.  Likewise, "
"the older deprecated ``set_forbidden_view`` is now an alias for the new "
"``add_forbidden_view``. This has the following impact: the ``context`` "
"sent to views with a ``(context, request)`` call signature registered via"
" the ``set_notfound_view`` or ``set_forbidden_view`` will now be an "
"exception object instead of the actual resource context found.  Use "
"``request.context`` to get the actual resource context.  It's also "
"recommended to disuse ``set_notfound_view`` in favor of "
"``add_notfound_view``, and disuse ``set_forbidden_view`` in favor of "
"``add_forbidden_view`` despite the aliasing."
msgstr "廃止予定の `` set_notfound_view``コンフィグレータメソッドは、新しい `` add_notfound_view``コンフィグレータメソッドのエイリアスになりました。同様に、廃止予定の `` set_forbidden_​​view``は新しい `` add_forbidden_​​view``のエイリアスになりました。 `` set_notfound_view``または `` set_forbidden_​​view``を介して登録された ``（コンテキスト、リクエスト） ``コールシグネチャでビューに送られた `` context``は次のような例外オブジェクトになりました。実際のリソースコンテキストが見つかりました。実際のリソースコンテキストを取得するには `` request.context``を使います。また、 `` set_notfound_view``を `` add_notfound_view``に向けて廃止し、エイリアシングにもかかわらず `` add_forbidden_​​view``を優先して `` set_forbidden_​​view``を廃止することもお勧めします。"

#: ../../../HISTORY.txt:2515
msgid ""
"The API documentation for ``pyramid.view.append_slash_notfound_view`` and"
" ``pyramid.view.AppendSlashNotFoundViewFactory`` was removed.  These "
"names still exist and are still importable, but they are no longer APIs."
"  Use "
"``pyramid.config.Configurator.add_notfound_view(append_slash=True)`` or "
"``pyramid.view.notfound_view_config(append_slash=True)`` to get the same "
"behavior."
msgstr "`` pyramid.view.append_slash_notfound_view``と `` pyramid.view.AppendSlashNotFoundViewFactory``のAPIドキュメントが削除されました。これらの名前はまだ存在し、インポート可能ですが、もはやAPIではありません。同じ動作をするには、 `` pyramid.config.Configurator.add_notfound_view（append_slash = True） ``または `` pyramid.view.notfound_view_config（append_slash = True） ``を使用します。"

#: ../../../HISTORY.txt:2522
msgid ""
"The ``set_forbidden_view`` and ``set_notfound_view`` methods of the "
"Configurator were removed from the documentation.  They have been "
"deprecated since Pyramid 1.1."
msgstr "コンフィギュレータの `` set_forbidden_​​view``メソッドと `` set_notfound_view``メソッドはドキュメントから削除されました。彼らはPyramid 1.1以来非難されています。"

#: ../../../HISTORY.txt:2529
msgid ""
"The static file response object used by ``config.add_static_view`` opened"
" the static file twice, when it only needed to open it once."
msgstr "`` config.add_static_view``で使用される静的ファイルレスポンスオブジェクトは静的ファイルを2回開きました。"

#: ../../../HISTORY.txt:2532
msgid ""
"The AppendSlashNotFoundViewFactory used request.path to match routes.  "
"This was wrong because request.path contains the script name, and this "
"would cause it to fail in circumstances where the script name was not "
"empty.  It should have used request.path_info, and now does."
msgstr "AppendSlashNotFoundViewFactoryはrouteを一致させるためにrequest.pathを使用しました。これは間違っていました。なぜなら、request.pathにはスクリプト名が含まれているため、スクリプト名が空でない状況では失敗することになります。それはrequest.path_infoを使用しているはずです。"

#: ../../../HISTORY.txt:2540
msgid ""
"Updated the \"Creating a Not Found View\" section of the \"Hooks\" "
"chapter, replacing explanations of registering a view using ``add_view`` "
"or ``view_config`` with ones using ``add_notfound_view`` or "
"``notfound_view_config``."
msgstr "`` add_view``や `` view_config``を使ってビューを登録する際の説明を、 `` add_notfound_view``や `` add_notfound_view``を使って説明したものに置き換えて、\ &quot;フック\ notfound_view_config``を実行します。"

#: ../../../HISTORY.txt:2545
msgid ""
"Updated the \"Creating a Not Forbidden View\" section of the \"Hooks\" "
"chapter, replacing explanations of registering a view using ``add_view`` "
"or ``view_config`` with ones using ``add_forbidden_view`` or "
"``forbidden_view_config``."
msgstr "`` add_forbidden_​​view``や `` add_forbidden_​​view``を使ってビューを登録する際の説明を、 `` add_view``や `` view_config``を使って登録する説明を置き換えることで、\ &quot;Hooks \&quot;章の\ &quot;禁止されていないビューを作成する\ forbidden_​​view_config``です。"

#: ../../../HISTORY.txt:2550
msgid ""
"Updated the \"Redirecting to Slash-Appended Routes\" section of the \"URL"
" Dispatch\" chapter, replacing explanations of registering a view using "
"``add_view`` or ``view_config`` with ones using ``add_notfound_view`` or "
"``notfound_view_config``"
msgstr "`` add_view``や `` view_config``を使ったビューの登録の説明を `` add_notfound_view``や `` add_notfound_view``を使ったものに置き換えて、\ &quot;URL Dispatch \&quot;章の\ &quot;Slash-Appended Routesへのリダイレクト&quot; `` notfound_view_config``"

#: ../../../HISTORY.txt:2555
msgid ""
"Updated all tutorials to use ``pyramid.view.forbidden_view_config`` "
"rather than ``pyramid.view.view_config`` with an HTTPForbidden context."
msgstr "すべてのチュートリアルで、 `` pyramid.view.view_config``ではなく、 `` pyramid.view.forbidden_​​view_config``をHTTPForbiddenコンテキストで使用するように更新しました。"

#: ../../../HISTORY.txt:2559
msgid "1.3a8 (2012-02-19)"
msgstr "1.3a8（2012-02-19）"

#: ../../../HISTORY.txt:2564
msgid ""
"The ``scan`` method of a ``Configurator`` can be passed an ``ignore`` "
"argument, which can be a string, a callable, or a list consisting of "
"strings and/or callables.  This feature allows submodules, subpackages, "
"and global objects from being scanned.  See "
"http://readthedocs.org/docs/venusian/en/latest/#ignore-scan-argument for "
"more information about how to use the ``ignore`` argument to ``scan``."
msgstr "`` Configurator``の `` scan``メソッドは、 `` ignore``引数を渡すことができます。これは、文字列、呼び出し可能な文字列、文字列や呼び出し可能なものからなるリストです。この機能を使用すると、サブモジュール、サブパッケージ、およびグローバルオブジェクトのスキャンが許可されます。 `` scan``に `` ignore``引数を使う方法の詳細については、http://readthedocs.org/docs/venusian/en/latest/#ignore-scan-argumentを参照してください。"

#: ../../../HISTORY.txt:2571
msgid ""
"Better error messages when a view callable returns a value that cannot be"
" converted to a response (for example, when a view callable returns a "
"dictionary without a renderer defined, or doesn't return any value at "
"all). The error message now contains information about the view callable "
"itself as well as the result of calling it."
msgstr "ビュー呼び出し可能関数が応答に変換できない値を返すとき（たとえば、ビュー呼び出し可能関数がレンダラーが定義されていないディクショナリを返すか、まったく値を返さないなど）、エラーメッセージが改善されます。エラーメッセージには、ビュー呼び出し可能なものに関する情報と呼び出し結果が含まれるようになりました。"

#: ../../../HISTORY.txt:2577
msgid ""
"Better error message when a .pyc-only module is ``config.include`` -ed. "
"This is not permitted due to error reporting requirements, and a better "
"error message is shown when it is attempted.  Previously it would fail "
"with something like \"AttributeError: 'NoneType' object has no attribute "
"'rfind'\"."
msgstr ".pycのみのモジュールが `` config.include``されたときのエラーメッセージが改善されました。これは、エラー報告要件のために許可されていません。試行されると、より良いエラーメッセージが表示されます。以前は、\ &quot;AttributeError： &#39;NoneType&#39;オブジェクトに属性 &#39;rfind&#39; \&quot;がありません。"

#: ../../../HISTORY.txt:2583
msgid ""
"Add ``pyramid.config.Configurator.add_traverser`` API method.  See the "
"Hooks narrative documentation section entitled \"Changing the Traverser\""
" for more information.  This is not a new feature, it just provides an "
"API for adding a traverser without needing to use the ZCA API."
msgstr "`` pyramid.config.Configurator.add_traverser`` APIメソッドを追加してください。詳細については、 &quot;Traverserの変更&quot;というタイトルのHooks Narrativeドキュメンテーションセクションを参照してください。これは新機能ではなく、ZCA APIを使用することなくトラバーサを追加するためのAPIを提供するだけです。"

#: ../../../HISTORY.txt:2588
msgid ""
"Add ``pyramid.config.Configurator.add_resource_url_adapter`` API method. "
"See the Hooks narrative documentation section entitled \"Changing How "
"pyramid.request.Request.resource_url Generates a URL\" for more "
"information. This is not a new feature, it just provides an API for "
"adding a resource url adapter without needing to use the ZCA API."
msgstr "`` pyramid.config.Configurator.add_resource_url_adapter`` APIメソッドを追加してください。詳細については、\ &quot;pyramid.request.Request.resource_urlのURLの生成方法の変更\&quot;というフックの説明文章のセクションを参照してください。これは新しい機能ではなく、ZCA APIを使用せずにリソースURLアダプタを追加するためのAPIを提供するだけです。"

#: ../../../HISTORY.txt:2594
msgid ""
"The system value ``req`` is now supplied to renderers as an alias for "
"``request``.  This means that you can now, for example, in a template, do"
" ``req.route_url(...)`` instead of ``request.route_url(...)``.  This is "
"purely a change to reduce the amount of typing required to use request "
"methods and attributes from within templates.  The value ``request`` is "
"still available too, this is just an alternative."
msgstr "システム値 `` req``が `` request``のエイリアスとしてレンダラーに供給されるようになりました。これは、例えば、テンプレート内で、 `` request.route_url（...） ``の代わりに `` req.route_url（...） `を実行できることを意味します。これは、テンプレート内から要求メソッドと属性を使用するのに必要な型付け量を減らすための変更です。値 `` request``も引き続き利用できますが、これは単なる選択肢です。"

#: ../../../HISTORY.txt:2601
msgid ""
"A new interface was added: ``pyramid.interfaces.IResourceURL``.  An "
"adapter implementing its interface can be used to override resource URL "
"generation when ``request.resource_url`` is called.  This interface "
"replaces the now-deprecated ``pyramid.interfaces.IContextURL`` interface."
msgstr "新しいインターフェースが追加されました： `` pyramid.interfaces.IResourceURL``。 `` request.resource_url``が呼び出されると、そのインタフェースを実装するアダプタを使ってリソースURLの生成を無効にすることができます。このインタフェースは、現在廃止されている `` pyramid.interfaces.IContextURL``インタフェースを置き換えます。"

#: ../../../HISTORY.txt:2606
msgid ""
"The dictionary passed to a resource's ``__resource_url__`` method (see "
"\"Overriding Resource URL Generation\" in the \"Resources\" chapter) now "
"contains an ``app_url`` key, representing the application URL generated "
"during ``request.resource_url``.  It represents a potentially customized "
"URL prefix, containing potentially custom scheme, host and port "
"information passed by the user to ``request.resource_url``.  It should be"
" used instead of ``request.application_url`` where necessary."
msgstr "リソースの `` __resource_url__``メソッド（リソース\ &quot;章の&quot;リソースURL生成のオーバーライド &quot;を参照）に渡された辞書は、` `要求中に生成されたアプリケーションURLを表す` `app_url``キーを含んでいます.resource_url``です。これは潜在的にカスタマイズされたURLプレフィックスを表し、ユーザーが `` request.resource_url``に渡す可能性のあるカスタムスキーム、ホスト、ポート情報を含みます。必要に応じて `` request.application_url``の代わりに使用してください。"

#: ../../../HISTORY.txt:2614
msgid ""
"The ``request.resource_url`` API now accepts these arguments: "
"``app_url``, ``scheme``, ``host``, and ``port``.  The app_url argument "
"can be used to replace the URL prefix wholesale during url generation.  "
"The ``scheme``, ``host``, and ``port`` arguments can be used to replace "
"the respective default values of ``request.application_url`` partially."
msgstr "`` request.resource_url`` APIは `` app_url``、 `` scheme``、 `` host``、 `` port``の引数を受け付けます。 app_url引数を使用して、URLの生成時にURL接頭辞を置き換えることができます。 `` scheme``、 `` host``、 `` port``の引数は、 `` request.application_url``のデフォルト値を部分的に置き換えるために使うことができます。"

#: ../../../HISTORY.txt:2620
msgid ""
"A new API named ``request.resource_path`` now exists.  It works like "
"``request.resource_url`` but produces a relative URL rather than an "
"absolute one."
msgstr "`` request.resource_path``という名前の新しいAPIが存在します。 `` request.resource_url``のように動作しますが、絶対URLではなく相対URLを生成します。"

#: ../../../HISTORY.txt:2624
msgid ""
"The ``request.route_url`` API now accepts these arguments: ``_app_url``, "
"``_scheme``, ``_host``, and ``_port``.  The ``_app_url`` argument can be "
"used to replace the URL prefix wholesale during url generation.  The "
"``_scheme``, ``_host``, and ``_port`` arguments can be used to replace "
"the respective default values of ``request.application_url`` partially."
msgstr "`` request.route_url`` APIは、 `` _app_url``、 `` _scheme``、 `` _host``、 `` _port``の引数を受け付けるようになりました。 `` _app_url``引数は、URLの生成時にURL接頭辞を置換するために使用できます。 `` _scheme``、 `` _host``、 `` _port``の引数を使って、 `` request.application_url``のデフォルト値を部分的に置き換えることができます。"

#: ../../../HISTORY.txt:2633
msgid ""
"The ``pyramid.interfaces.IContextURL`` interface has been deprecated. "
"People have been instructed to use this to register a resource url "
"adapter in the \"Hooks\" chapter to use to influence "
"``request.resource_url`` URL generation for resources found via custom "
"traversers since Pyramid 1.0."
msgstr "`` pyramid.interfaces.IContextURL``インタフェースは非推奨です。人々はこれを使用して、\ &quot;Hooks \&quot;章にリソースURLアダプタを登録して、Pyramid 1.0以来カスタムトラバーサを介して見つかったリソースの `` request.resource_url`` URL生成に影響を与えるように指示しました。"

#: ../../../HISTORY.txt:2638
msgid ""
"The interface still exists and registering such an adapter still works, "
"but this interface will be removed from the software after a few major "
"Pyramid releases.  You should replace it with an equivalent "
"``pyramid.interfaces.IResourceURL`` adapter, registered using the new "
"``pyramid.config.Configurator.add_resource_url_adapter`` API.  A "
"deprecation warning is now emitted when a "
"``pyramid.interfaces.IContextURL`` adapter is found when "
"``request.resource_url`` is called."
msgstr "インターフェイスはまだ存在していますが、そのようなアダプタを登録しても機能しますが、Pyramidの主要なリリースの後にこのインターフェイスはソフトウェアから削除されます。新しい `` pyramid.config.Configurator.add_resource_url_adapter`` APIを使用して登録した同等の `` pyramid.interfaces.IResourceURL``アダプタに置き換える必要があります。 `` request.resource_url``が呼び出されたときに `` pyramid.interfaces.IContextURL``アダプタが見つかると、廃止予定の警告が出されるようになりました。"

#: ../../../HISTORY.txt:2650
msgid ""
"Don't create a ``session`` instance in SQLA Wiki tutorial, use raw "
"``DBSession`` instead (this is more common in real SQLA apps)."
msgstr "SQLA Wikiチュートリアルで `` session``インスタンスを作成せず、代わりに未加工の `` DBSession``を使用してください（これは実際のSQLAアプリケーションでより一般的です）。"

#: ../../../HISTORY.txt:2654
msgid "Scaffolding"
msgstr "足場"

#: ../../../HISTORY.txt:2656
msgid ""
"Put ``pyramid.includes`` targets within ini files in scaffolds on "
"separate lines in order to be able to tell people to comment out only the"
" ``pyramid_debugtoolbar`` line when they want to disable the toolbar."
msgstr "`` pyramid.includes``ターゲットを足場のiniファイルに別々の行に入れて、ツールバーを無効にしたいときに `` pyramid_debugtoolbar``行だけをコメントアウトするように伝えることができます。"

#: ../../../HISTORY.txt:2663
msgid "Depend on ``venusian`` >= 1.0a3 to provide scan ``ignore`` support."
msgstr "`` venusian`` = 1.0a3に依存して、スキャンの ``無視 &#39;`のサポートを提供してください。"

#: ../../../BFG_HISTORY.txt:281 ../../../BFG_HISTORY.txt:421
#: ../../../BFG_HISTORY.txt:496 ../../../BFG_HISTORY.txt:586
#: ../../../BFG_HISTORY.txt:1017 ../../../BFG_HISTORY.txt:1207
#: ../../../BFG_HISTORY.txt:1376 ../../../BFG_HISTORY.txt:1668
#: ../../../BFG_HISTORY.txt:2466 ../../../BFG_HISTORY.txt:2522
#: ../../../BFG_HISTORY.txt:2640 ../../../BFG_HISTORY.txt:2719
#: ../../../BFG_HISTORY.txt:2816 ../../../BFG_HISTORY.txt:2908
#: ../../../BFG_HISTORY.txt:3016 ../../../BFG_HISTORY.txt:3261
#: ../../../BFG_HISTORY.txt:3571 ../../../HISTORY.txt:2666
#: ../../../HISTORY.txt:3150 ../../../HISTORY.txt:3244
#: ../../../HISTORY.txt:3377 ../../../HISTORY.txt:5302
msgid "Internal"
msgstr "内部"

#: ../../../HISTORY.txt:2668
msgid ""
"Create a \"MakoRendererFactoryHelper\" that provides customizable "
"settings key prefixes.  Allows settings prefixes other than \"mako.\" to "
"be used to create different factories that don't use the global mako "
"settings.  This will be useful for the debug toolbar, which can currently"
" be sabotaged by someone using custom mako configuration settings."
msgstr "カスタマイズ可能な設定のキープレフィックスを提供する\ &quot;MakoRendererFactoryHelper \&quot;を作成します。 \ &quot;mako。\&quot;以外の設定プレフィックスを使用して、グローバルmako設定を使用しない異なる工場を作成できるようにします。これはデバッグツールバーに便利です。デバッグツールバーは、カスタムmako設定を使用している人が現在妨害している可能性があります。"

#: ../../../HISTORY.txt:2675
msgid "1.3a7 (2012-02-07)"
msgstr "1.3a7（2012-02-07）"

#: ../../../HISTORY.txt:2680
msgid ""
"More informative error message when a ``config.include`` cannot find an "
"``includeme``.  See https://github.com/Pylons/pyramid/pull/392."
msgstr "`` config.include``が `` includeme``を見つけることができないとき、より有益なエラーメッセージです。 https://github.com/Pylons/pyramid/pull/392を参照してください。"

#: ../../../HISTORY.txt:2683
msgid ""
"Internal: catch unhashable discriminators early (raise an error instead "
"of allowing them to find their way into resolveConflicts)."
msgstr "内部：解読不能なdiscriminatorsを早期に捕捉する（resolveConflictsへの道を見つけるのではなく、エラーを起こす）。"

#: ../../../HISTORY.txt:2686
msgid ""
"The `match_param` view predicate now accepts a string or a tuple. This "
"replaces the broken behavior of accepting a dict. See "
"https://github.com/Pylons/pyramid/issues/425 for more information."
msgstr "`match_param`ビュー述語は、文字列またはタプルを受け入れるようになりました。これは、dictを受け入れるという壊れた振る舞いを置き換えます。詳細については、https://github.com/Pylons/pyramid/issues/425を参照してください。"

#: ../../../HISTORY.txt:2693
msgid ""
"The process will now restart when ``pserve`` is used with the "
"``--reload`` flag when the ``development.ini`` file (or any other .ini "
"file in use) is changed.  See "
"https://github.com/Pylons/pyramid/issues/377 and "
"https://github.com/Pylons/pyramid/pull/411"
msgstr "`` development.ini``ファイル（または使用中の他の.iniファイル）が変更されたときに、 `` --reload``フラグとともに `` pserve``が使用されると、プロセスが再開します。 https://github.com/Pylons/pyramid/issues/377およびhttps://github.com/Pylons/pyramid/pull/411を参照してください。"

#: ../../../HISTORY.txt:2698
msgid ""
"The ``prequest`` script would fail when used against URLs which did not "
"return HTML or text.  See https://github.com/Pylons/pyramid/issues/381"
msgstr "`` prequest``スクリプトは、HTMLやテキストを返さなかったURLに対して使用すると失敗します。 https://github.com/Pylons/pyramid/issues/381を参照してください。"

#: ../../../HISTORY.txt:2704
msgid ""
"The `match_param` view predicate no longer accepts a dict. This will have"
" no negative affect because the implementation was broken for dict-based "
"arguments."
msgstr "`match_param`ビュー述語は、もはやdictを受け付けません。これは、dictベースの引数の実装が壊れているため、悪影響はありません。"

#: ../../../HISTORY.txt:2711
msgid "Add a traversal hello world example to the narrative docs."
msgstr "物語のドキュメントにトラバーサルな世界の例を追加してください。"

#: ../../../HISTORY.txt:2714
msgid "1.3a6 (2012-01-20)"
msgstr "1.3a6（2012-01-20）"

#: ../../../HISTORY.txt:2719
msgid ""
"New API: ``pyramid.config.Configurator.set_request_property``. Add lazy "
"property descriptors to a request without changing the request factory. "
"This method provides conflict detection and is the suggested way to add "
"properties to a request."
msgstr "新しいAPI： `` pyramid.config.Configurator.set_request_property``。リクエストファクトリを変更せずに、リクエストに遅延プロパティー記述子を追加します。このメソッドは競合検出を提供し、要求にプロパティを追加するための推奨される方法です。"

#: ../../../HISTORY.txt:2724
msgid ""
"Responses generated by Pyramid's ``static_view`` now use a "
"``wsgi.file_wrapper`` (see http://www.python.org/dev/peps/pep-0333"
"/#optional-platform-specific-file-handling) when one is provided by the "
"web server."
msgstr "Pyramidの `` static_view``によって生成された応答は、 `` wsgi.file_wrapper``を使用します（http://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handlingを参照） Webサーバーから提供されたものです。"

#: ../../../HISTORY.txt:2732
msgid ""
"Views registered with an ``accept`` could not be overridden correctly "
"with a different view that had the same predicate arguments.  See "
"https://github.com/Pylons/pyramid/pull/404 for more information."
msgstr "`` accept``で登録されたビューは、同じ述語引数を持つ別のビューでは、正しく上書きすることができませんでした。詳細については、https://github.com/Pylons/pyramid/pull/404を参照してください。"

#: ../../../HISTORY.txt:2736
msgid ""
"When using a dotted name for a ``view`` argument to "
"``Configurator.add_view`` that pointed to a class with a "
"``view_defaults`` decorator, the view defaults would not be applied.  See"
" https://github.com/Pylons/pyramid/issues/396 ."
msgstr "`` view_defaults``デコレータを持つクラスを指している `` Configurator.add_view``への `` view``引数に点線の名前を使用すると、ビューのデフォルトは適用されません。 https://github.com/Pylons/pyramid/issues/396を参照してください。"

#: ../../../HISTORY.txt:2741
msgid ""
"Static URL paths were URL-quoted twice.  See "
"https://github.com/Pylons/pyramid/issues/407 ."
msgstr "静的なURLパスは2回URL引用されました。 https://github.com/Pylons/pyramid/issues/407を参照してください。"

#: ../../../HISTORY.txt:2745
msgid "1.3a5 (2012-01-09)"
msgstr "1.3a5（2012-01-09）"

#: ../../../HISTORY.txt:2750
msgid ""
"The ``pyramid.view.view_defaults`` decorator did not work properly when "
"more than one view relied on the defaults being different for "
"configuration conflict resolution.  See "
"https://github.com/Pylons/pyramid/issues/394."
msgstr "`` pyramid.view.view_defaults``デコレータは、複数のビューがコンフィグレーションの競合解決のために異なるデフォルトに依存している場合、正しく動作しませんでした。 https://github.com/Pylons/pyramid/issues/394を参照してください。"

#: ../../../HISTORY.txt:2757
msgid ""
"The ``path_info`` route and view predicates now match against "
"``request.upath_info`` (Unicode) rather than ``request.path_info`` "
"(indeterminate value based on Python 3 vs. Python 2).  This has to be "
"done to normalize matching on Python 2 and Python 3."
msgstr "`` path_info``ルートとビューの述語は、 `` request.path_info``（Python 3とPython 2に基づく不定値）ではなく、 `` request.upath_info``（Unicode）と一致するようになりました。これは、Python 2とPython 3のマッチングを正規化するために行う必要があります。"

#: ../../../HISTORY.txt:2763
msgid "1.3a4 (2012-01-05)"
msgstr "1.3a4（2012-01-05）"

#: ../../../HISTORY.txt:2768
msgid ""
"New API: ``pyramid.request.Request.set_property``. Add lazy property "
"descriptors to a request without changing the request factory. New "
"properties may be reified, effectively caching the value for the lifetime"
" of the instance. Common use-cases for this would be to get a database "
"connection for the request or identify the current user."
msgstr "新しいAPI： `` pyramid.request.Request.set_property``。リクエストファクトリを変更せずに、リクエストに遅延プロパティー記述子を追加します。新しいプロパティが再定義され、インスタンスの存続期間中の値を効果的にキャッシュすることができます。このための一般的な使用例は、要求に対するデータベース接続を取得するか、または現在のユーザーを識別することです。"

#: ../../../HISTORY.txt:2774
msgid "Use the ``waitress`` WSGI server instead of ``wsgiref`` in scaffolding."
msgstr "スカイフォールディングで `` wsgiref``の代わりに `` waitress`` WSGIサーバを使用してください。"

#: ../../../HISTORY.txt:2779
msgid ""
"The documentation of ``pyramid.events.subscriber`` indicated that using "
"it as a decorator with no arguments like this::"
msgstr "`` pyramid.events.subscriber``のドキュメントは、このような引数を持たないデコレータとして使うことを示しています::"

#: ../../../HISTORY.txt:2786
msgid ""
"Would register ``somefunc`` to receive all events sent via the registry, "
"but this was untrue.  Instead, it would receive no events at all.  This "
"has now been fixed and the code matches the documentation.  See also "
"https://github.com/Pylons/pyramid/issues/386"
msgstr "レジストリを介して送信されたすべてのイベントを受け取るために `` somefunc``を登録しますが、これは間違いです。代わりに、イベントをまったく受け取りません。これは修正され、コードはドキュメントと一致します。 https://github.com/Pylons/pyramid/issues/386も参照してください。"

#: ../../../HISTORY.txt:2791
msgid ""
"Literal portions of route patterns were not URL-quoted when ``route_url``"
" or ``route_path`` was used to generate a URL or path."
msgstr "`` route_url``や `` route_path``がURLやパスを生成するために使われたとき、ルートパターンの文字部分はURL引用符で囲まれませんでした。"

#: ../../../HISTORY.txt:2794
msgid ""
"The result of ``route_path`` or ``route_url`` might have been ``unicode``"
" or ``str`` depending on the input.  It is now guaranteed to always be "
"``str``."
msgstr "`` route_path``または `` route_url``の結果は、入力に応じて `` unicode``または `` str``でした。これは常に `` str``であることが保証されています。"

#: ../../../HISTORY.txt:2798
msgid ""
"URL matching when the pattern contained non-ASCII characters in literal "
"parts was indeterminate.  Now the pattern supplied to ``add_route`` is "
"assumed to be either: a ``unicode`` value, or a ``str`` value that "
"contains only ASCII characters.  If you now want to match the path info "
"from a URL that contains high order characters, you can pass the Unicode "
"representation of the decoded path portion in the pattern."
msgstr "リテラル部分にASCII以外の文字が含まれているパターンが不確定であった場合のURLマッチング。 `` add_route``に与えられるパターンは、 `` unicode``値、またはASCII文字のみを含む `` str``値のいずれかとみなされます。高次の文字が含まれているURLからパス情報を照合する場合は、パターン内のデコードされたパス部分のUnicode表現を渡すことができます。"

#: ../../../HISTORY.txt:2805
msgid ""
"When using a ``traverse=`` route predicate, traversal would fail with a "
"URLDecodeError if there were any high-order characters in the traversal "
"pattern or in the matched dynamic segments."
msgstr "`` traverse = ``ルート述語を使うとき、トラバーサルパターンや一致するダイナミックセグメントに高次の文字があれば、トラバーサルはURLDecodeErrorで失敗します。"

#: ../../../HISTORY.txt:2809
msgid "Using a dynamic segment named ``traverse`` in a route pattern like this::"
msgstr "::のようなルートパターンで `` traverse``という名前の動的セグメントを使用しています："

#: ../../../HISTORY.txt:2813
msgid ""
"Would cause a ``UnicodeDecodeError`` when the route was matched and the "
"matched portion of the URL contained any high-order characters.  See "
"https://github.com/Pylons/pyramid/issues/385 ."
msgstr "ルートが一致し、URLの一致部分に高次の文字が含まれていた場合に `` UnicodeDecodeError``が発生します。 https://github.com/Pylons/pyramid/issues/385を参照してください。"

#: ../../../HISTORY.txt:2817
msgid ""
"When using a ``*traverse`` stararg in a route pattern, a URL that matched"
" that possessed a ``@@`` in its name (signifying a view name) would be "
"inappropriately quoted by the traversal machinery during traversal, "
"resulting in the view not being found properly. See "
"https://github.com/Pylons/pyramid/issues/382 and "
"https://github.com/Pylons/pyramid/issues/375 ."
msgstr "ルートパターンで `` * traverse`` starargを使うと、名前に `` @@ ``を持つURL（ビュー名を表す）がトラバース中にトラバーサル機構によって不適切に引用され、ビューが正しく見つかりません。 https://github.com/Pylons/pyramid/issues/382およびhttps://github.com/Pylons/pyramid/issues/375を参照してください。"

#: ../../../HISTORY.txt:2827
msgid ""
"String values passed to ``route_url`` or ``route_path`` that are meant to"
" replace \"remainder\" matches will now be URL-quoted except for embedded"
" slashes. For example::"
msgstr "`` route_url``または `` route_path``に渡された文字列値は\ &quot;remainder \&quot;に置き換えられ、埋め込まれたスラッシュを除いてURLクォートされます。例えば：："

#: ../../../HISTORY.txt:2835
msgid ""
"Previously string values passed as remainder replacements were tacked on "
"untouched, without any URL-quoting.  But this doesn't really work "
"logically if the value passed is Unicode (raw unicode cannot be placed in"
" a URL or in a path) and it is inconsistent with the rest of the URL "
"generation machinery if the value is a string (it won't be quoted unless "
"by the caller)."
msgstr "以前は、残りの置換文字として渡された文字列の値は、URLクォートを付けずに変更されませんでした。しかし、渡される値がUnicode（生のUnicodeはURLまたはパスに配置することはできません）であり、値が文字列であれば残りのURL生成機構と矛盾します（これは &#39;呼び出し側が指定しない限り引用符で囲まないでください）。"

#: ../../../HISTORY.txt:2842
msgid ""
"Some folks will have been relying on the older behavior to tack on query "
"string elements and anchor portions of the URL; sorry, you'll need to "
"change your code to use the ``_query`` and/or ``_anchor`` arguments to "
"``route_path`` or ``route_url`` to do this now."
msgstr "いくつかの人々は、クエリ文字列要素とURLの部分を固定するために古い動作に頼っているでしょう。申し訳ありませんが、これを行うには、 `` _query``や `` _anchor``引数を `` route_path``または `` route_url``に使用するようにコードを変更する必要があります。"

#: ../../../HISTORY.txt:2847
msgid ""
"If you pass a bytestring that contains non-ASCII characters to "
"``add_route`` as a pattern, it will now fail at startup time.  Use "
"Unicode instead."
msgstr "非ASCII文字を含むバイト文字列をパターンとして `` add_route``に渡すと、起動時に失敗します。代わりにUnicodeを使用してください。"

#: ../../../HISTORY.txt:2852
msgid "1.3a3 (2011-12-21)"
msgstr "1.3a3（2011-12-21）"

#: ../../../HISTORY.txt:2857
msgid ""
"Added a ``prequest`` script (along the lines of ``paster request``).  It "
"is documented in the \"Command-Line Pyramid\" chapter in the section "
"entitled \"Invoking a Request\"."
msgstr "`` prequest``スクリプトを追加しました（ `` paster request``の行に沿って）。これは\ &quot;コマンド行ピラミッド\&quot;の章の &quot;要求の呼び出し&quot;の章に記載されています。"

#: ../../../HISTORY.txt:2861
msgid ""
"Add undocumented ``__discriminator__`` API to derived view callables. "
"e.g. ``adapters.lookup(...).__discriminator__(context, request)``.  It "
"will be used by superdynamic systems that require the discriminator to be"
" used for introspection after manual view lookup."
msgstr "__discriminator__`` APIを派生したビュー呼び出し可能関数に追加しました。例えば、 `` adapters.lookup（...）.__ discriminator __（文脈、要求） ``です。スーパーダイナミックシステムで使用されます。このシステムでは、手動ビュールックアップの後に識別器をイントロスペクションに使用する必要があります。"

#: ../../../HISTORY.txt:2869
msgid ""
"Normalized exit values and ``-h`` output for all ``p*`` scripts "
"(``pviews``, ``proutes``, etc)."
msgstr "すべての `` p * ``スクリプト（ `` pviews``、 `` proutes``など）に対して正規化された終了値と `` -h``が出力されます。"

#: ../../../HISTORY.txt:2875
msgid ""
"Added a section named \"Making Your Script into a Console Script\" in the"
" \"Command-Line Pyramid\" chapter."
msgstr "\ &quot;コマンドラインピラミッド\&quot;の章の\ &quot;コンソールスクリプトにスクリプトを作成する\&quot;というセクションを追加しました。"

#: ../../../HISTORY.txt:2878
msgid ""
"Removed the \"Running Pyramid on Google App Engine\" tutorial from the "
"main docs.  It survives on in the Cookbook "
"(http://docs.pylonsproject.org/projects/pyramid_cookbook/en/latest/deployment/gae.html)."
" Rationale: it provides the correct info for the Python 2.5 version of "
"GAE only, and this version of Pyramid does not support Python 2.5."
msgstr "メインのドキュメントから\ &quot;Google App EngineでPyramidを実行する\&quot;チュートリアルを削除しました。それはCookbook（http://docs.pylonsproject.org/projects/pyramid_cookbook/en/latest/deployment/gae.html）に掲載されています。理論的根拠：GAEのみのPython 2.5バージョンの正しい情報を提供します。このバージョンのPyramidはPython 2.5をサポートしていません。"

#: ../../../HISTORY.txt:2885
msgid "1.3a2 (2011-12-14)"
msgstr "1.3a2（2011-12-14）"

#: ../../../HISTORY.txt:2890
msgid ""
"New API: ``pyramid.view.view_defaults``. If you use a class as a view, "
"you can use the new ``view_defaults`` class decorator on the class to "
"provide defaults to the view configuration information used by every "
"``@view_config`` decorator that decorates a method of that class.  It "
"also works against view configurations involving a class made "
"imperatively."
msgstr "新しいAPI： `` pyramid.view.view_defaults``。クラスをビューとして使用する場合は、クラスの新しい `` view_defaults``クラスデコレータを使用して、そのクラスのメソッドを装飾するすべての `` @ view_config``デコレータによって使用されるビュー設定情報にデフォルトを提供できます。また、クラスを必須とするビュー構成に対しても機能します。"

#: ../../../HISTORY.txt:2896
msgid ""
"Added a backwards compatibility knob to ``pcreate`` to emulate ``paster "
"create`` handling for the ``--list-templates`` option."
msgstr "`` --list-templates``オプションの `` paster create``の処理をエミュレートするために、 `` pcreate``に後方互換性ノブを追加しました。"

#: ../../../HISTORY.txt:2899
msgid ""
"Changed scaffolding machinery around a bit to make it easier for people "
"who want to have extension scaffolds that can work across Pyramid 1.0.X, "
"1.1.X, 1.2.X and 1.3.X.  See the new \"Creating Pyramid Scaffolds\" "
"chapter in the narrative documentation for more info."
msgstr "Pyramid 1.0.X、1.1.X、1.2.X、1.3.Xで機能する拡張スカフォールドを使いたい方に、足場の機械を少し変更しました。詳細については、物語ドキュメンテーションの新しい\ &quot;Creating Pyramid Scaffolds \&quot;の章を参照してください。"

#: ../../../HISTORY.txt:2907
msgid ""
"Added documentation to \"View Configuration\" narrative documentation "
"chapter about ``view_defaults`` class decorator."
msgstr "`` view_defaults``クラスデコレータについては、「構成の表示」のドキュメンテーションの章にドキュメンテーションを追加しました。"

#: ../../../HISTORY.txt:2910
msgid "Added API docs for ``view_defaults`` class decorator."
msgstr "`` view_defaults``クラスデコレータ用のAPIドキュメントを追加しました。"

#: ../../../HISTORY.txt:2912
msgid "Added an API docs chapter for ``pyramid.scaffolds``."
msgstr "`` pyramid.scaffolds``にAPIドキュメントの章を追加しました。"

#: ../../../HISTORY.txt:2914
msgid "Added a narrative docs chapter named \"Creating Pyramid Scaffolds\"."
msgstr "\ &quot;Creating Pyramid Scaffolds \&quot;というナレーション文書の章を追加しました。"

#: ../../../HISTORY.txt:2919
msgid ""
"The ``template_renderer`` method of ``pyramid.scaffolds.PyramidScaffold``"
" was renamed to ``render_template``.  If you were overriding it, you're a"
" bad person, because it wasn't an API before now.  But we're nice so "
"we're letting you know."
msgstr "`` pyramid.scaffolds.PyramidScaffold``の `` template_renderer``メソッドは `` render_template``に名前が変更されました。あなたがそれを上書きしていたなら、あなたは悪い人です。なぜならこれまではAPIではなかったからです。しかし、私たちはあなたが知っていることをうれしく思います。"

#: ../../../HISTORY.txt:2925
msgid "1.3a1 (2011-12-09)"
msgstr "1.3a1（2011-12-09）"

#: ../../../HISTORY.txt:2930
msgid "Python 3.2 compatibility."
msgstr "Python 3.2との互換性。"

#: ../../../HISTORY.txt:2932
msgid ""
"New ``pyramid.compat`` module and API documentation which provides Python"
" 2/3 straddling support for Pyramid add-ons and development environments."
msgstr "新しい `` pyramid.compat``モジュールと、Pyramidアドオンと開発環境をPython 2/3に跨って提供するAPIドキュメント。"

#: ../../../HISTORY.txt:2935
msgid ""
"A ``mako.directories`` setting is no longer required to use Mako "
"templates Rationale: Mako template renderers can be specified using an "
"absolute asset spec.  An entire application can be written with such "
"asset specs, requiring no ordered lookup path."
msgstr "Makoテンプレートを使用するための `` mako.directories``設定はもはや必要ありません。理由：Makoテンプレートレンダラーは絶対アセット仕様を使用して指定することができます。そのようなアセット仕様でアプリケーション全体を記述することができ、順序付けられた参照パスを必要としません。"

#: ../../../HISTORY.txt:2940
msgid ""
"``bpython`` interpreter compatibility in ``pshell``.  See the \"Command-"
"Line Pyramid\" narrative docs chapter for more information."
msgstr "`` pshell``での `` bpython``インタプリタの互換性。詳細については、「コマンドラインPyramid」ドキュメンテーションの章を参照してください。"

#: ../../../HISTORY.txt:2943
msgid ""
"Added ``get_appsettings`` API function to the ``pyramid.paster`` module. "
"This function returns the settings defined within an ``[app:...]`` "
"section in a PasteDeploy ini file."
msgstr "`` get_appsettings`` API関数を `` pyramid.paster``モジュールに追加しました。この関数は、PasteDeployのiniファイルの `` [app：...] ``セクションで定義された設定を返します。"

#: ../../../HISTORY.txt:2947
msgid ""
"Added ``setup_logging`` API function to the ``pyramid.paster`` module. "
"This function sets up Python logging according to the logging "
"configuration in a PasteDeploy ini file."
msgstr "`` setup_logging`` API関数を `` pyramid.paster``モジュールに追加しました。この関数は、PasteDeployのiniファイルのロギング設定に従ってPythonロギングを設定します。"

#: ../../../HISTORY.txt:2951
msgid ""
"Configuration conflict reporting is reported in a more understandable way"
" (\"Line 11 in file...\" vs. a repr of a tuple of similar info)."
msgstr "設定の競合の報告は、より分かりやすい方法で報告されます（\ &quot;行11のファイル... \&quot;対類似の情報の組です）。"

#: ../../../HISTORY.txt:2954
msgid ""
"A configuration introspection system was added; see the narrative "
"documentation chapter entitled \"Pyramid Configuration Introspection\" "
"for more information.  New APIs: ``pyramid.registry.Introspectable``, "
"``pyramid.config.Configurator.introspector``, "
"``pyramid.config.Configurator.introspectable``, "
"``pyramid.registry.Registry.introspector``."
msgstr "構成イントロスペクションシステムが追加されました。詳細については、「ピラミッド構成のイントロスペクション」というナレーションのドキュメントの章を参照してください。新しいAPI： `` pyramid.registry.Introspectable``、 `` pyramid.config.Configurator.introspector``、 `` pyramid.config.Configurator.introspectable``、 `` pyramid.registry.Registry.introspector``です。"

#: ../../../HISTORY.txt:2961
msgid ""
"Allow extra keyword arguments to be passed to the "
"``pyramid.config.Configurator.action`` method."
msgstr "`` pyramid.config.Configurator.action``メソッドに渡される余分なキーワード引数を許可します。"

#: ../../../HISTORY.txt:2964
msgid ""
"New APIs: ``pyramid.path.AssetResolver`` and "
"``pyramid.path.DottedNameResolver``.  The former can be used to resolve "
"asset specifications, the latter can be used to resolve dotted names to "
"modules or packages."
msgstr "新しいAPI： `` pyramid.path.AssetResolver``と `` pyramid.path.DottedNameResolver``です。前者は資産の仕様を解決するために使用され、後者はモジュールまたはパッケージに点滅した名前を解決するために使用されます。"

#: ../../../HISTORY.txt:2972
msgid ""
"Make test suite pass on 32-bit systems; closes #286.  closes #306. See "
"also https://github.com/Pylons/pyramid/issues/286"
msgstr "テストスイートを32ビットシステムに渡す。 ＃286を終了する。 ＃306を終了する。 https://github.com/Pylons/pyramid/issues/286も参照してください。"

#: ../../../HISTORY.txt:2975
msgid ""
"The ``pyramid.view.view_config`` decorator did not accept a "
"``match_params`` predicate argument.  See "
"https://github.com/Pylons/pyramid/pull/308"
msgstr "`` pyramid.view.view_config``デコレータは `` match_params``述語引数を受け付けませんでした。 https://github.com/Pylons/pyramid/pull/308を参照してください。"

#: ../../../HISTORY.txt:2978
msgid ""
"The AuthTktCookieHelper could potentially generate Unicode headers "
"inappropriately when the ``tokens`` argument to remember was used.  See "
"https://github.com/Pylons/pyramid/pull/314."
msgstr "AuthTktCookieHelperは、覚えておくべき `` tokens``引数が使われたときに、Unicodeヘッダを不適切に生成する可能性があります。 https://github.com/Pylons/pyramid/pull/314を参照してください。"

#: ../../../HISTORY.txt:2982
msgid ""
"The AuthTktAuthenticationPolicy did not use a timing-attack-aware string "
"comparator.  See https://github.com/Pylons/pyramid/pull/320 for more "
"info."
msgstr "AuthTktAuthenticationPolicyは、タイミング攻撃を認識する文字列比較器を使用しませんでした。詳細については、https://github.com/Pylons/pyramid/pull/320を参照してください。"

#: ../../../HISTORY.txt:2985
msgid ""
"The DummySession in ``pyramid.testing`` now generates a new CSRF token if"
" one doesn't yet exist."
msgstr "`` pyramid.testing``のDummySessionは、新しいCSRFトークンがまだ存在しない場合、それを生成します。"

#: ../../../HISTORY.txt:2988
msgid ""
"``request.static_url`` now generates URL-quoted URLs when fed a ``path`` "
"argument which contains characters that are unsuitable for URLs.  See "
"https://github.com/Pylons/pyramid/issues/349 for more info."
msgstr "`` request.static_url``はURLには適さない文字を含む `` path``引数を与えられたときにURL引用されたURLを生成するようになりました。詳細については、https://github.com/Pylons/pyramid/issues/349をご覧ください。"

#: ../../../HISTORY.txt:2992
msgid ""
"Prevent a scaffold rendering from being named ``site`` (conflicts with "
"Python internal site.py)."
msgstr "足場のレンダリングが `` site``という名前にならないようにします（Python内部のsite.pyと競合します）。"

#: ../../../HISTORY.txt:2995
msgid ""
"Support for using instances as targets of the ``pyramid.wsgi.wsgiapp`` "
"and ``pryramid.wsgi.wsgiapp2`` functions. See "
"https://github.com/Pylons/pyramid/pull/370 for more info."
msgstr "`` pyramid.wsgi.wsgiapp``と `` pryramid.wsgi.wsgiapp2``関数のターゲットとしてインスタンスを使用するためのサポート。詳細については、https://github.com/Pylons/pyramid/pull/370を参照してください。"

#: ../../../HISTORY.txt:3002
msgid ""
"Pyramid no longer runs on Python 2.5 (which includes the most recent "
"release of Jython and the Python 2.5 version of GAE as of this writing)."
msgstr "PyramidはPython 2.5（これは最近のJythonのリリースとこの記事の執筆時点でのPython 2.5バージョンのGAEを含む）では動作しません。"

#: ../../../HISTORY.txt:3005
msgid ""
"The ``paster`` command is no longer the documented way to create "
"projects, start the server, or run debugging commands.  To create "
"projects from scaffolds, ``paster create`` is replaced by the ``pcreate``"
" console script. To serve up a project, ``paster serve`` is replaced by "
"the ``pserve`` console script.  New console scripts named ``pshell``, "
"``pviews``, ``proutes``, and ``ptweens`` do what their ``paster "
"<commandname>`` equivalents used to do.  Rationale: the Paste and "
"PasteScript packages do not run under Python 3."
msgstr "`` paster``コマンドは、もはやプロジェクトを作成したり、サーバを起動したり、デバッグコマンドを実行するための文書化された方法ではなくなりました。 scaffoldsからプロジェクトを作成するために、 `` paster create``は `` pcreate``コンソールスクリプトに置き換えられます。プロジェクトを提供するために、 `` paster serve``は `` pserve``コンソールスクリプトに置き換えられます。 `` pshell``、 `` pviews``、 `` proutes``、 `` ptweens``という新しいコンソールスクリプトは、 `` paster <commandname> ``相当することがあった。根拠：PasteとPasteScriptパッケージはPython 3では動作しません。"

#: ../../../HISTORY.txt:3014
msgid ""
"The default WSGI server run as the result of ``pserve`` from newly "
"rendered scaffolding is now the ``wsgiref`` WSGI server instead of the "
"``paste.httpserver`` server.  Rationale: Rationale: the Paste and "
"PasteScript packages do not run under Python 3."
msgstr "新たにレンダリングされたスキャフォールディングからの `` pserve``の結果として実行されるデフォルトのWSGIサーバは、 `` paste.httpserver``サーバの代わりに `` wsgiref`` WSGIサーバになりました。根拠：根拠：PasteとPasteScriptパッケージはPython 3では動作しません。"

#: ../../../HISTORY.txt:3019
msgid ""
"The ``pshell`` command (see \"paster pshell\") no longer accepts a "
"``--disable-ipython`` command-line argument.  Instead, it accepts a "
"``-p`` or ``--python-shell`` argument, which can be any of the values "
"``python``, ``ipython`` or ``bpython``."
msgstr "`` pshell``コマンド（\ &quot;paster pshell \&quot;を参照）は、 `` --disable-ipython``コマンドライン引数を受け付けません。代わりに、 `` -p``または `` --python-shell``引数を受け取ります。引数には、 `` python``、 `` ipython``、 `` bpython``のいずれかの値を指定できます。"

#: ../../../HISTORY.txt:3024
msgid ""
"Removed the ``pyramid.renderers.renderer_from_name`` function.  It has "
"been deprecated since Pyramid 1.0, and was never an API."
msgstr "`` pyramid.renderers.renderer_from_name``関数を削除しました。これはPyramid 1.0以来廃止され、決してAPIではありませんでした。"

#: ../../../HISTORY.txt:3027
msgid ""
"To use ZCML with versions of Pyramid >= 1.3, you will need "
"``pyramid_zcml`` version >= 0.8 and ``zope.configuration`` version >= "
"3.8.0.  The ``pyramid_zcml`` package version 0.8 is backwards compatible "
"all the way to Pyramid 1.0, so you won't be warned if you have older "
"versions installed and upgrade Pyramid \"in-place\"; it may simply break "
"instead."
msgstr "Pyramid&gt; = 1.3のバージョンでZCMLを使うには、 `` pyramid_zcml``のバージョン&gt; = 0.8と `` zope.configuration``のバージョン&gt; = 3.8.0が必要です。 `` pyramid_zcml``パッケージのバージョン0.8はPyramid 1.0まで下位互換性がありますので、古いバージョンがインストールされていて、Pyramid \ &quot;in-place \&quot;をアップグレードしても警告は表示されません。単に代わりに壊れるかもしれません。"

#: ../../../HISTORY.txt:3036
msgid ""
"Pyramid no longer depends on the ``zope.component`` package, except as a "
"testing dependency."
msgstr "ピラミッドは、テスト依存関係を除いて、 `` zope.component``パッケージに依存しなくなりました。"

#: ../../../HISTORY.txt:3039
msgid ""
"Pyramid now depends on a zope.interface>=3.8.0, WebOb>=1.2dev, "
"repoze.lru>=0.4, zope.deprecation>=3.5.0, translationstring>=0.4 (for "
"Python 3 compatibility purposes).  It also, as a testing dependency, "
"depends on WebTest>=1.3.1 for the same reason."
msgstr "Pyramidは、zope.interface&gt; = 3.8.0、WebOb&gt; = 1.2dev、repoze.lru&gt; = 0.4、zope.deprecation&gt; = 3.5.0、translationstring&gt; = 0.4（Python 3との互換性のため）に依存しています。また、テストの依存関係として、同じ理由でWebTest&gt; = 1.3.1に依存します。"

#: ../../../HISTORY.txt:3044
msgid "Pyramid no longer depends on the Paste or PasteScript packages."
msgstr "PyramidはPasteまたはPasteScriptパッケージに依存しなくなりました。"

#: ../../../HISTORY.txt:3049
msgid ""
"The SQLAlchemy Wiki tutorial has been updated.  It now uses "
"``@view_config`` decorators and an explicit database population script."
msgstr "SQLAlchemy Wikiチュートリアルが更新されました。これは、 `` @ view_config``デコレータと明示的なデータベース投入スクリプトを使用します。"

#: ../../../HISTORY.txt:3052
msgid "Minor updates to the ZODB Wiki tutorial."
msgstr "ZODB Wikiチュートリアルのマイナーアップデート。"

#: ../../../HISTORY.txt:3054
msgid ""
"A narrative documentation chapter named \"Extending Pyramid "
"Configuration\" was added; it describes how to add a new directive, and "
"how use the ``pyramid.config.Configurator.action`` method within custom "
"directives.  It also describes how to add introspectable objects."
msgstr "\ &quot;拡張ピラミッド構成\&quot;というナレーションのドキュメントの章が追加されました。新しいディレクティブを追加する方法と、カスタムディレクティブ内で `` pyramid.config.Configurator.action``メソッドを使用する方法について説明しています。また、イントロスペクトなオブジェクトを追加する方法についても説明します。"

#: ../../../HISTORY.txt:3059
msgid ""
"A narrative documentation chapter named \"Pyramid Configuration "
"Introspection\" was added.  It describes how to query the introspection "
"system."
msgstr "\ &quot;Pyramid Configuration Introspection \&quot;というナレーション記述の章が追加されました。イントロスペクションシステムを照会する方法について説明します。"

#: ../../../HISTORY.txt:3066
msgid ""
"Rendered scaffolds have now been changed to be more relocatable (fewer "
"mentions of the package name within files in the package)."
msgstr "レンダリングされた足場は、よりリロケータブルに変更されました（パッケージ内のファイル内でのパッケージ名の記述が少なくなりました）。"

#: ../../../HISTORY.txt:3069
msgid ""
"The ``routesalchemy`` scaffold has been renamed ``alchemy``, replacing "
"the older (traversal-based) ``alchemy`` scaffold (which has been "
"retired)."
msgstr "`` routesalchemy``足場は、古い（トラバーサルベースの） ``錬金術 ``足場（引退したもの）に取って代わり、 ``錬金術 ``に改名されました。"

#: ../../../HISTORY.txt:3072
msgid "The ``starter`` scaffold now uses URL dispatch by default."
msgstr "`` starter``スキャフォールドはデフォルトでURLディスパッチを使用するようになりました。"

#: ../../../HISTORY.txt:3075
msgid "1.2 (2011-09-12)"
msgstr "1.2（2011-09-12）"

#: ../../../HISTORY.txt:3080
msgid ""
"Route pattern replacement marker names can now begin with an underscore. "
"See https://github.com/Pylons/pyramid/issues/276."
msgstr "ルートパターンの置換マーカー名はアンダースコアで始めることができます。 https://github.com/Pylons/pyramid/issues/276を参照してください。"

#: ../../../HISTORY.txt:3084
msgid "1.2b3 (2011-09-11)"
msgstr "1.2b3（2011-09-11）"

#: ../../../HISTORY.txt:3089
msgid ""
"The route prefix was not taken into account when a static view was added "
"in an \"include\".  See https://github.com/Pylons/pyramid/issues/266 ."
msgstr "静的ビューが\ &quot;include \&quot;に追加された場合、ルートプレフィックスは考慮されませんでした。 https://github.com/Pylons/pyramid/issues/266を参照してください。"

#: ../../../HISTORY.txt:3093
msgid "1.2b2 (2011-09-08)"
msgstr "1.2b2（2011-09-08）"

#: ../../../HISTORY.txt:3098
msgid ""
"The 1.2b1 tarball was a brownbag (particularly for Windows users) because"
" it contained filenames with stray quotation marks in inappropriate "
"places. We depend on ``setuptools-git`` to produce release tarballs, and "
"when it was run to produce the 1.2b1 tarball, it didn't yet cope well "
"with files present in git repositories with high-order characters in "
"their filenames."
msgstr "1.2b1のtarballは、不適切な場所に迷いのある引用符が付いたファイル名が含まれていたため、特にWindowsユーザーにとってはブラウンバックでした。我々は `` setuptools-git``を使ってリリースタールボールを作ることに依存しています。1.2b1のtarballを生成するために実行されたとき、ファイル名に高位の文字を含むgitリポジトリに存在するファイルにはまだ対応しませんでした。"

#: ../../../HISTORY.txt:3107
msgid ""
"Minor tweaks to the \"Introduction\" narrative chapter example app and "
"wording."
msgstr "\ &quot;紹介\&quot;物語の章のサンプルのアプリケーションと言葉に少し微調整。"

#: ../../../HISTORY.txt:3111
msgid "1.2b1 (2011-09-08)"
msgstr "1.2b1（2011-09-08）"

#: ../../../HISTORY.txt:3116
msgid ""
"Sometimes falling back from territory translations (``de_DE``) to "
"language translations (``de``) would not work properly when using a "
"localizer.  See https://github.com/Pylons/pyramid/issues/263"
msgstr "地域翻訳（de_DE``）から言語翻訳（ `` de``）に時折戻ってしまうと、ローカライザを使用すると正しく動作しないことがあります。 https://github.com/Pylons/pyramid/issues/263を参照してください。"

#: ../../../HISTORY.txt:3120
msgid ""
"The static file serving machinery could not serve files that started with"
" a ``.`` (dot) character."
msgstr "静的ファイル提供機構は、 ``。 &#39;&#39;（ドット）文字で始まったファイルを扱うことができませんでした。"

#: ../../../HISTORY.txt:3123
msgid ""
"Static files with high-order (super-ASCII) characters in their names "
"could not be served by a static view.  The static file serving machinery "
"inappropriately URL-quoted path segments in filenames when asking for "
"files from the filesystem."
msgstr "名前に上位の（超ASCII）文字を含む静的ファイルは、静的ビューでは処理できませんでした。ファイルシステムからファイルを要求する際に、静的ファイル提供機構が不適切にURLを引用したファイルセグメントをファイル名で引用します。"

#: ../../../HISTORY.txt:3128
msgid ""
"Within ``pyramid.traversal.traversal_path`` , canonicalize URL segments "
"from UTF-8 to Unicode before checking whether a segment matches literally"
" one of ``.``, the empty string, or ``..`` in case there's some sneaky "
"way someone might tunnel those strings via UTF-8 that don't match the "
"literals before decoded."
msgstr "`` pyramid.traversal.traversal_path``の中で、URLセグメントをUTF-8からUnicodeに正規化してから、セグメントが `` .``、空文字列、または `..`のいずれかに文字通り一致するかどうかを確認します誰かがUTF-8でこれらの文字列をトンネルして、デコードされる前にリテラルと一致しないようなやりかたの方法です。"

#: ../../../HISTORY.txt:3137
msgid ""
"Added a \"What Makes Pyramid Unique\" section to the Introduction "
"narrative chapter."
msgstr "はじめにの説明の章に\ &quot;ユニークなものは何になるのか&quot;のセクションを追加しました。"

#: ../../../HISTORY.txt:3141
msgid "1.2a6 (2011-09-06)"
msgstr "1.2a6（2011-09-06）"

#: ../../../HISTORY.txt:3146
msgid ""
"AuthTktAuthenticationPolicy with a ``reissue_time`` interfered with "
"logout. See https://github.com/Pylons/pyramid/issues/262."
msgstr "AuthTktAuthenticationPolicyは `` reissue_time``をログアウトに干渉させました。 https://github.com/Pylons/pyramid/issues/262を参照してください。"

#: ../../../HISTORY.txt:3152
msgid ""
"Internalize code previously depended upon as imports from the "
"``paste.auth`` module (futureproof)."
msgstr "以前は `` paste.auth``モジュールからのインポートとして依存していたコードを内部化しました（将来的には防御的です）。"

#: ../../../HISTORY.txt:3155
msgid ""
"Replaced use of ``paste.urlparser.StaticURLParser`` with a derivative of "
"Chris Rossi's \"happy\" static file serving code (futureproof)."
msgstr "`` paste.urlparser.StaticURLParser``の使用を、Chris Rossiの\ &quot;ハッピー\&quot;静的ファイル提供コード（futureproof）の派生物に置き換えました。"

#: ../../../HISTORY.txt:3158
msgid ""
"Fixed test suite; on some systems tests would fail due to indeterminate "
"test run ordering and a double-push-single-pop of a shared test variable."
msgstr "固定テストスイート。一部のシステムでは、不確定テスト実行順序と共有テスト変数のダブルプッシュ - シングルポップのためにテストが失敗することがあります。"

#: ../../../HISTORY.txt:3162 ../../../HISTORY.txt:5374
msgid "Behavior Differences"
msgstr "行動の違い"

#: ../../../HISTORY.txt:3164
msgid ""
"An ETag header is no longer set when serving a static file.  A Last-"
"Modified header is set instead."
msgstr "静的ファイルを提供するときにETagヘッダーが設定されなくなりました。代わりにLast-Modifiedヘッダーが設定されます。"

#: ../../../HISTORY.txt:3167
msgid ""
"Static file serving no longer supports the ``wsgi.file_wrapper`` "
"extension."
msgstr "静的ファイルの提供は `` wsgi.file_wrapper``拡張子をサポートしなくなりました。"

#: ../../../HISTORY.txt:3169
msgid ""
"Instead of returning a ``403 Forbidden`` error when a static file is "
"served that cannot be accessed by the Pyramid process' user due to file "
"permissions, an IOError (or similar) will be raised."
msgstr "ファイルアクセス権のためにPyramidプロセスのユーザがアクセスできない静的ファイルが提供されたときに `` 403 Forbidden``エラーを返す代わりに、IOError（または類似のもの）が発生します。"

#: ../../../HISTORY.txt:3176
msgid ""
"All scaffolds now send the ``cache_max_age`` parameter to the "
"``add_static_view`` method."
msgstr "すべてのスカフォールドは `` cache_max_age``パラメータを `` add_static_view``メソッドに送ります。"

#: ../../../HISTORY.txt:3180
msgid "1.2a5 (2011-09-04)"
msgstr "1.2a5（2011-09-04）"

#: ../../../HISTORY.txt:3185
msgid ""
"The ``route_prefix`` of a configurator was not properly taken into "
"account when registering routes in certain circumstances.  See "
"https://github.com/Pylons/pyramid/issues/260"
msgstr "特定の状況でルートを登録するとき、コンフィギュレータの `` route_prefix``が適切に考慮されていませんでした。 https://github.com/Pylons/pyramid/issues/260を参照してください。"

#: ../../../HISTORY.txt:3192
msgid "The ``zope.configuration`` package is no longer a dependency."
msgstr "`` zope.configuration``パッケージはもはや依存関係ではありません。"

#: ../../../HISTORY.txt:3195
msgid "1.2a4 (2011-09-02)"
msgstr "1.2a4（2011-09-02）"

#: ../../../HISTORY.txt:3200
msgid ""
"Support an ``onerror`` keyword argument to "
"``pyramid.config.Configurator.scan()``.  This onerror keyword argument is"
" passed to ``venusian.Scanner.scan()`` to influence error behavior when "
"an exception is raised during scanning."
msgstr "`` pyramid.config.Configurator.scan（） ``に対する `` onerror``キーワード引数をサポートします。このonerrorキーワード引数は `` venusian.Scanner.scan（） ``に渡され、スキャン中に例外が発生した場合のエラー動作に影響を与えます。"

#: ../../../HISTORY.txt:3205
msgid ""
"The ``request_method`` predicate argument to "
"``pyramid.config.Configurator.add_view`` and "
"``pyramid.config.Configurator.add_route`` is now permitted to be a tuple "
"of HTTP method names.  Previously it was restricted to being a string "
"representing a single HTTP method name."
msgstr "`` pyramid.config.Configurator.add_view``と `` pyramid.config.Configurator.add_route``への `` request_method``述語引数は、HTTPメソッド名のタプルであることが許可されています。以前は、単一のHTTPメソッド名を表す文字列に限定されていました。"

#: ../../../HISTORY.txt:3211
msgid ""
"Undeprecated ``pyramid.traversal.find_model``, "
"``pyramid.traversal.model_path``, ``pyramid.traversal.model_path_tuple``,"
" and ``pyramid.url.model_url``, which were all deprecated in Pyramid 1.0."
" There's just not much cost to keeping them around forever as aliases to "
"their renamed ``resource_*`` prefixed functions."
msgstr "未使用の `` pyramid.traversal.find_model``、 `` pyramid.traversal.model_path``、 `` pyramid.traversal.model_path_tuple``、および `` pyramid.url.model_url``はPyramid 1.0で廃止されました。名前が変更された `` resource_ * ``接頭辞付き関数のエイリアスとして永遠に残すことは、それほどコストがかかりません。"

#: ../../../HISTORY.txt:3217
msgid ""
"Undeprecated ``pyramid.view.bfg_view``, which was deprecated in Pyramid "
"1.0.  This is a low-cost alias to ``pyramid.view.view_config`` which "
"we'll just keep around forever."
msgstr "未使用の `` pyramid.view.bfg_view``は、Pyramid 1.0で廃止されました。これは `` pyramid.view.view_config``への低コストのエイリアスです。これは永遠に残しておきます。"

#: ../../../HISTORY.txt:3224
msgid ""
"Pyramid now requires Venusian 1.0a1 or better to support the ``onerror`` "
"keyword argument to ``pyramid.config.Configurator.scan``."
msgstr "Pyramidは、 `` pyramid.config.Configurator.scan``の `` onerror``キーワード引数をサポートするために、Venusian 1.0a1以上を必要としています。"

#: ../../../HISTORY.txt:3228
msgid "1.2a3 (2011-08-29)"
msgstr "1.2a3（2011-08-29）"

#: ../../../HISTORY.txt:3233
msgid ""
"Pyramid did not properly generate static URLs using "
"``pyramid.url.static_url`` when passed a caller-package relative path due"
" to a refactoring done in 1.2a1."
msgstr "Pyramidは、1.2a1で行われたリファクタリングのために、呼び出し元パッケージの相対パスが渡されたときに、 `` pyramid.url.static_url``を使って静的URLを適切に生成しませんでした。"

#: ../../../HISTORY.txt:3237
msgid ""
"The ``settings`` object emitted a deprecation warning any time "
"``__getattr__`` was called upon it.  However, there are legitimate "
"situations in which ``__getattr__`` is called on arbitrary objects (e.g. "
"``hasattr``).  Now, the ``settings`` object only emits the warning upon "
"successful lookup."
msgstr "`` settings``オブジェクトは、 `` __getattr__``が呼び出されたときに非推奨警告を出しました。しかし、 `` __getattr__``が任意のオブジェクトに対して呼び出される正当な状況があります（例えば `` hasattr``など）。現在、 `` settings``オブジェクトは、検索が成功すると警告を出すだけです。"

#: ../../../HISTORY.txt:3246
msgid ""
"Use ``config.with_package`` in view_config decorator rather than "
"manufacturing a new renderer helper (cleanup)."
msgstr "新しいレンダラーヘルパー（クリーンアップ）を作成するのではなく、view_configデコレータで `` config.with_package``を使用してください。"

#: ../../../HISTORY.txt:3250
msgid "1.2a2 (2011-08-27)"
msgstr "1.2a2（2011-08-27）"

#: ../../../HISTORY.txt:3255
msgid ""
"When a ``renderers=`` argument is not specified to the Configurator "
"constructor, eagerly register and commit the default renderer set.  This "
"permits the overriding of the default renderers, which was broken in "
"1.2a1 without a commit directly after Configurator construction."
msgstr "Configuratorコンストラクタに `` renderers = ``引数が指定されていない場合、デフォルトのレンダラーセットを熱心に登録してコミットします。これにより、Configuratorの構築直後にコミットせずに1.2a1で壊れていたデフォルトのレンダラのオーバーライドが可能になります。"

#: ../../../HISTORY.txt:3260
msgid "Mako rendering exceptions had the wrong value for an error message."
msgstr "Makoのレンダリング例外では、エラーメッセージの値が間違っていました。"

#: ../../../HISTORY.txt:3262
msgid ""
"An include could not set a root factory successfully because the "
"Configurator constructor unconditionally registered one that would be "
"treated as if it were \"the word of the user\"."
msgstr "Configuratorのコンストラクタは無条件で &quot;ユーザーの言葉&quot;のように扱われるため、インクルードはルートファクトリを正常に設定できませんでした。"

#: ../../../HISTORY.txt:3269
msgid "A session factory can now be passed in using the dotted name syntax."
msgstr "セッションファクトリは、点線の名前構文を使用して渡すことができるようになりました。"

#: ../../../HISTORY.txt:3272
msgid "1.2a1 (2011-08-24)"
msgstr "1.2a1（2011-08-24）"

#: ../../../HISTORY.txt:3277
msgid ""
"The ``[pshell]`` section in an ini configuration file now treats a "
"``setup`` key as a dotted name that points to a callable that is passed "
"the bootstrap environment.  It can mutate the environment as necessary "
"for great justice."
msgstr "ini設定ファイルの `` [pshell] ``セクションは `` setup``キーを、ブートストラップ環境に渡される呼び出し可能ファイルを指す点線の名​​前として扱うようになりました。それは、大正義のために必要に応じて環境を変えることができます。"

#: ../../../HISTORY.txt:3282
msgid ""
"A new configuration setting named ``pyramid.includes`` is now available. "
"It is described in the \"Environment Variables and ``.ini`` Files "
"Settings\" narrative documentation chapter."
msgstr "`` pyramid.includes``という名前の新しい設定が利用可能になりました。これは\ &quot;環境変数と` `.ini``ファイル設定\&quot;ナレーション文書の章に記述されています。"

#: ../../../HISTORY.txt:3286
msgid ""
"Added a ``route_prefix`` argument to the "
"``pyramid.config.Configurator.include`` method.  This argument allows you"
" to compose URL dispatch applications together.  See the section entitled"
" \"Using a Route Prefix to Compose Applications\" in the \"URL Dispatch\""
" narrative documentation chapter."
msgstr "`` pyramid.config.Configurator.include``メソッドに `` route_prefix``引数を追加しました。この引数を使用すると、URLディスパッチアプリケーションを一緒に作成できます。 \ &quot;URL Dispatch \ narrative documentation&quot;の章の &quot;アプリケーションを作成するためのルートプレフィックスの使用&quot;を参照してください。"

#: ../../../HISTORY.txt:3292
msgid ""
"Added a ``pyramid.security.NO_PERMISSION_REQUIRED`` constant for use in "
"``permission=`` statements to view configuration.  This constant has a "
"value of the string ``__no_permission_required__``.  This string value "
"was previously referred to in documentation; now the documentation uses "
"the constant."
msgstr "`` pyramid.security.NO_PERMISSION_REQUIRED``定数を、 `` permission = ``文で使用して設定を表示するようにしました。この定数は文字列 `` __no_permission_required__``の値を持ちます。この文字列値は、以前はドキュメントで参照されていました。ドキュメントは定数を使用するようになりました。"

#: ../../../HISTORY.txt:3298
msgid ""
"Added a decorator-based way to configure a response adapter: "
"``pyramid.response.response_adapter``.  This decorator has the same use "
"as ``pyramid.config.Configurator.add_response_adapter`` but it's "
"declarative."
msgstr "レスポンスアダプタを設定するデコレータベースの方法を追加しました： `` pyramid.response.response_adapter``。このデコレータは `` pyramid.config.Configurator.add_response_adapter``と同じ用途を持ちますが、宣言的です。"

#: ../../../HISTORY.txt:3302
msgid ""
"The ``pyramid.events.BeforeRender`` event now has an attribute named "
"``rendering_val``.  This can be used to introspect the value returned by "
"a view in a BeforeRender subscriber."
msgstr "`` pyramid.events.BeforeRender``イベントには `` rendering_val``という名前の属性が追加されました。これは、BeforeRenderサブスクライバのビューによって返された値をイントロスペクションするために使用できます。"

#: ../../../HISTORY.txt:3306
msgid ""
"New configurator directive: ``pyramid.config.Configurator.add_tween``. "
"This directive adds a \"tween\".  A \"tween\" is used to wrap the Pyramid"
" router's primary request handling function.  This is a feature may be "
"used by Pyramid framework extensions, to provide, for example, view "
"timing support and as a convenient place to hang bookkeeping code."
msgstr "新しい設定ディレクティブ： `` pyramid.config.Configurator.add_tween``。このディレクティブは\ &quot;tween \&quot;を追加します。 \ &quot;tween \&quot;は、ピラミッドルータのプライマリリクエスト処理関数をラップするために使用されます。これはPyramidフレームワーク拡張で、タイミングのサポートを表示したり、簿記コードを置くのに便利な場所を提供するために使用できる機能です。"

#: ../../../HISTORY.txt:3312
msgid ""
"Tweens are further described in the narrative docs section in the Hooks "
"chapter, named \"Registering Tweens\"."
msgstr "Tweensについては、\ &quot;Registering Tweens \&quot;というHooksの章のナレーション文書セクションで詳しく説明しています。"

#: ../../../HISTORY.txt:3315
msgid ""
"New paster command ``paster ptweens``, which prints the current \"tween\""
" configuration for an application.  See the section entitled \"Displaying"
" Tweens\" in the Command-Line Pyramid chapter of the narrative "
"documentation for more info."
msgstr "詳細については、解説書のCommand-Line Pyramidの章にある &quot;Tweensの表示&quot;という節を参照してください。"

#: ../../../HISTORY.txt:3320
msgid ""
"The Pyramid debug logger now uses the standard logging configuration "
"(usually set up by Paste as part of startup).  This means that output "
"from e.g. ``debug_notfound``, ``debug_authorization``, etc. will go to "
"the normal logging channels.  The logger name of the debug logger will be"
" the package name of the *caller* of the Configurator's constructor."
msgstr "Pyramidデバッグロガーは、標準のロギング設定を使用するようになりました（通常は、スタートアップの一部としてPasteで設定されます）。これは、例えば `` debug_notfound``、 `` debug_authorization``などからの出力が通常のロギングチャネルに行くことを意味します。デバッグロガーのロガー名は、コンフィグレータのコンストラクタの* caller *のパッケージ名になります。"

#: ../../../HISTORY.txt:3326
msgid ""
"A new attribute is available on request objects: ``exc_info``.  Its value"
" will be ``None`` until an exception is caught by the Pyramid router, "
"after which it will be the result of ``sys.exc_info()``."
msgstr "新しい属性はリクエストオブジェクトで利用できます： `` exc_info``。 Pyramidルータが例外をキャッチするまで、その値は `` None``になります。その後、 `` sys.exc_info（） ``の結果になります。"

#: ../../../HISTORY.txt:3330
msgid ""
"``pyramid.testing.DummyRequest`` now implements the "
"``add_finished_callback`` and ``add_response_callback`` methods."
msgstr "`` pyramid.testing.DummyRequest``は `` add_finished_callback``メソッドと `` add_response_callback``メソッドを実装しました。"

#: ../../../HISTORY.txt:3333
msgid ""
"New methods of the ``pyramid.config.Configurator`` class: "
"``set_authentication_policy`` and ``set_authorization_policy``.  These "
"are meant to be consumed mostly by add-on authors."
msgstr "`` pyramid.config.Configurator``クラスの新しいメソッド： `` set_authentication_policy``と `` set_authorization_policy``。これらは主にアドオンの作者によって消費されることを意図しています。"

#: ../../../HISTORY.txt:3337
msgid "New Configurator method: ``set_root_factory``."
msgstr "新しいコンフィグレータメソッド： `` set_root_factory``。"

#: ../../../HISTORY.txt:3339
msgid ""
"Pyramid no longer eagerly commits some default configuration statements "
"at Configurator construction time, which permits values passed in as "
"constructor arguments (e.g. ``authentication_policy`` and "
"``authorization_policy``) to override the same settings obtained via an "
"\"include\"."
msgstr "Pyramidは、コンストラクタの構築時にいくつかのデフォルトのコンフィグレーション文をコミットせず、コンストラクタ引数（例： `` authentication_policy``と `` authorization_policy``）として渡された値が\ &quot;include \&quot;で取得された同じ設定をオーバーライドします。"

#: ../../../HISTORY.txt:3345
msgid ""
"Better Mako rendering exceptions via "
"``pyramid.mako_templating.MakoRenderingException``"
msgstr "`` pyramid.mako_templating.MakoRenderingException``を使って例外をレンダリングしたほうがよかったです"

#: ../../../HISTORY.txt:3348
msgid ""
"New request methods: ``current_route_url``, ``current_route_path``, and "
"``static_path``."
msgstr "新しいリクエストメソッド： `` current_route_url``、 `` current_route_path``、および `` static_path``。"

#: ../../../HISTORY.txt:3351
msgid ""
"New functions in ``pyramid.url``: ``current_route_path`` and "
"``static_path``."
msgstr "`` pyramid.url``： `` current_route_path``と `` static_path``の新機能です。"

#: ../../../HISTORY.txt:3354
msgid ""
"The ``pyramid.request.Request.static_url`` API (and its brethren "
"``pyramid.request.Request.static_path``, ``pyramid.url.static_url``, and "
"``pyramid.url.static_path``) now accept an asbolute filename as a "
"\"path\" argument.  This will generate a URL to an asset as long as the "
"filename is in a directory which was previously registered as a static "
"view. Previously, trying to generate a URL to an asset using an absolute "
"file path would raise a ValueError."
msgstr "`` pyramid.request.Request.static_url`` API（およびその兄弟の `` pyramid.request.Request.static_path``、 `` pyramid.url.static_url``、 `` pyramid.url.static_path``）は、 asboluteファイル名を\ &quot;path \&quot;引数として受け入れるようになりました。これにより、ファイル名が以前に静的ビューとして登録されていたディレクトリにある限り、アセットへのURLが生成されます。以前は、絶対ファイルパスを使用してアセットへのURLを生成しようとすると、ValueErrorが発生しました。"

#: ../../../HISTORY.txt:3362
msgid ""
"The ``RemoteUserAuthenticationPolicy ``, ``AuthTktAuthenticationPolicy``,"
" and ``SessionAuthenticationPolicy`` constructors now accept an "
"additional keyword argument named ``debug``.  By default, this keyword "
"argument is ``False``.  When it is ``True``, debug information will be "
"sent to the Pyramid debug logger (usually on stderr) when the "
"``authenticated_userid`` or ``effective_principals`` method is called on "
"any of these policies.  The output produced can be useful when trying to "
"diagnose authentication-related problems."
msgstr "`` RemoteUserAuthenticationPolicy ``、 `` AuthTktAuthenticationPolicy``、および `` SessionAuthenticationPolicy``のコンストラクタは、 `` debug``というキーワード引数を追加できるようになりました。デフォルトでは、このキーワード引数は `` False``です。 `` True``の場合、これらのポリシーのいずれかで `` authenticated_userid``または `` effective_principals``メソッドが呼び出されると、デバッグ情報がPyramidデバッグロガー（通常はstderr）に送られます。生成された出力は、認証関連の問題を診断するときに役立ちます。"

#: ../../../HISTORY.txt:3371
msgid ""
"New view predicate: ``match_param``.  Example: a view added via "
"``config.add_view(aview, match_param='action=edit')`` will be called only"
" when the ``request.matchdict`` has a value inside it named ``action`` "
"with a value of ``edit``."
msgstr "新しいビュー述語： `` match_param``。例： `` config.add_view（aview、match_param = &#39;action = edit&#39;） ``で追加されたビューは `` request.matchdict``の中に `` action``という名前の値がある場合にのみ呼び出されます。 `` edit``の値です。"

#: ../../../HISTORY.txt:3379
msgid ""
"The Pyramid \"exception view\" machinery is now implemented as a "
"\"tween\" (``pyramid.tweens.excview_tween_factory``)."
msgstr "Pyramid \ &quot;exception view \&quot;機構は今や\ &quot;tween \&quot;（ &quot;pyramid.tweens.excview_tween_factory``）として実装されています。"

#: ../../../HISTORY.txt:3382
msgid ""
"WSGIHTTPException (HTTPFound, HTTPNotFound, etc) now has a new API named "
"\"prepare\" which renders the body and content type when it is provided "
"with a WSGI environ.  Required for debug toolbar."
msgstr "WSGIHTTPException（HTTPFound、HTTPNotFoundなど）にWSGI環境が提供されているときに本文とコンテンツタイプをレンダリングする\ &quot;prepare \&quot;という名前の新しいAPIが追加されました。デバッグツールバーに必要です。"

#: ../../../HISTORY.txt:3386
msgid ""
"Once ``__call__`` or ``prepare`` is called on a WSGIHTTPException, the "
"body will be set, and subsequent calls to ``__call__`` will always return"
" the same body.  Delete the body attribute to rerender the exception "
"body."
msgstr "WSGIHTTPExceptionで `` __call__``や `` prepare``が呼び出されると、本体が設定され、その後の `` __call__``への呼び出しは常に同じ本体を返します。例外の本文を再レンダリングするには、body属性を削除します。"

#: ../../../HISTORY.txt:3390
msgid ""
"Previously the ``pyramid.events.BeforeRender`` event *wrapped* a "
"dictionary (it addressed it as its ``_system`` attribute).  Now it *is* a"
" dictionary (it inherits from ``dict``), and it's the value that is "
"passed to templates as a top-level dictionary."
msgstr "以前は `` pyramid.events.BeforeRender``イベントは辞書をラップしました（それは `` _system``属性として扱いました）。今は*辞書です（ `` dict``から継承しています）。これはテンプレートに渡される値で、トップレベルの辞書になります。"

#: ../../../HISTORY.txt:3395
msgid ""
"The ``route_url``, ``route_path``, ``resource_url``, ``static_url``, and "
"``current_route_url`` functions in the ``pyramid.url`` package now "
"delegate to a method on the request they've been passed, instead of the "
"other way around.  The pyramid.request.Request object now inherits from a"
" mixin named pyramid.url.URLMethodsMixin to make this possible, and all "
"url/path generation logic is embedded in this mixin."
msgstr "`` pyramid.url``パッケージの `` route_url``、 `` route_path``、 `` resource_url``、 `` static_url``、 `` current_route_url``関数は、リクエストのメソッドに委譲します彼らは他の方法の代わりに、渡されてきました。 pyramid.request.Requestオブジェクトはpyramid.url.URLMethodsMixinというミックスインを継承し、これを可能にし、すべてのURL /パス生成ロジックがこのミックスインに組み込まれています。"

#: ../../../HISTORY.txt:3402
msgid "Refactor ``pyramid.config`` into a package."
msgstr "`` pyramid.config``をパッケージにリファクタリングします。"

#: ../../../HISTORY.txt:3404
msgid "Removed the ``_set_security_policies`` method of the Configurator."
msgstr "コンフィギュレータの `` _set_security_policies``メソッドを削除しました。"

#: ../../../HISTORY.txt:3406
msgid ""
"Moved the ``StaticURLInfo`` class from ``pyramid.static`` to "
"``pyramid.config.views``."
msgstr "`` StaticURLInfo``クラスを `` pyramid.static``から `` pyramid.config.views``に移動しました。"

#: ../../../HISTORY.txt:3409
msgid ""
"Move the ``Settings`` class from ``pyramid.settings`` to "
"``pyramid.config.settings``."
msgstr "`` Settings``クラスを `` pyramid.settings``から `` pyramid.config.settings``に移動してください。"

#: ../../../HISTORY.txt:3412
msgid ""
"Move the ``OverrideProvider``, ``PackageOverrides``, "
"``DirectoryOverride``, and ``FileOverride`` classes from "
"``pyramid.asset`` to ``pyramid.config.assets``."
msgstr "`` OverrideProvider``、 `` PackageOverride``、 `` DirectoryOverride``、および `` FileOverride``クラスを `` pyramid.asset``から `` pyramid.config.assets``に移動します。"

#: ../../../HISTORY.txt:3419
msgid ""
"All Pyramid-related deployment settings (e.g. ``debug_all``, "
"``debug_notfound``) are now meant to be prefixed with the prefix "
"``pyramid.``.  For example: ``debug_all`` -> ``pyramid.debug_all``.  The "
"old non-prefixed settings will continue to work indefinitely but "
"supplying them may eventually print a deprecation warning.  All scaffolds"
" and tutorials have been changed to use prefixed settings."
msgstr "すべてのPyramid関連のデプロイメント設定（ `` debug_all``、 `` debug_notfound``など）に接頭辞 `` pyramid``を付けることになっています。例： `` debug_all``  - &gt; `` pyramid.debug_all``です。古いプレフィックスが設定されていない設定は引き続き無期限に機能しますが、それらを指定すると、最終的に廃止予定の警告が表示されることがあります。すべての足場とチュートリアルは、プレフィックス設定を使用するように変更されました。"

#: ../../../HISTORY.txt:3426
msgid ""
"The ``settings`` dictionary now raises a deprecation warning when you "
"attempt to access its values via ``__getattr__`` instead of via "
"``__getitem__``."
msgstr "`` settings``ディクショナリは `` __getitem__``の代わりに `` __getattr__``経由で値にアクセスしようとすると非推奨の警告を出します。"

#: ../../../HISTORY.txt:3433
msgid ""
"If a string is passed as the ``debug_logger`` parameter to a "
"Configurator, that string is considered to be the name of a global Python"
" logger rather than a dotted name to an instance of a logger."
msgstr "文字列がコンフィグレータに `` debug_logger``パラメータとして渡された場合、その文字列はロガーのインスタンスへのドット付きの名前ではなく、グローバルなPythonのロガーの名前と見なされます。"

#: ../../../HISTORY.txt:3437
msgid ""
"The ``pyramid.config.Configurator.include`` method now accepts only a "
"single ``callable`` argument (a sequence of callables used to be "
"permitted).  If you are passing more than one ``callable`` to "
"``pyramid.config.Configurator.include``, it will break.  You now must now"
" instead make a separate call to the method for each callable.  This "
"change was introduced to support the ``route_prefix`` feature of include."
msgstr "`` pyramid.config.Configurator.include``メソッドは、単一の `` callable``引数（許可された呼び出し元のシーケンス）のみを受け入れるようになりました。複数の `` callable``を `` pyramid.config.Configurator.include``に渡すと、それは中断されます。代わりに、各呼び出し可能メソッドのメソッドを別々に呼び出す必要があります。この変更は、includeの `` route_prefix``機能をサポートするために導入されました。"

#: ../../../HISTORY.txt:3444
msgid ""
"It may be necessary to more strictly order configuration route and view "
"statements when using an \"autocommitting\" Configurator.  In the past, "
"it was possible to add a view which named a route name before adding a "
"route with that name when you used an autocommitting configurator.  For "
"example::"
msgstr "\ &quot;自動コミット\&quot;コンフィグレータを使用する場合は、設定ルートとビューステートメントをより厳密に順序付ける必要があります。以前は、自動コミット・コンフィグレータを使用したときに、その名前のルートを追加する前にルート名を指定したビューを追加することができました。例えば：："

#: ../../../HISTORY.txt:3453
msgid ""
"The above will raise an exception when the view attempts to add itself. "
"Now you must add the route before adding the view::"
msgstr "ビューがそれ自身を追加しようとすると、上記の例外が発生します。ビューを追加する前にルートを追加する必要があります::"

#: ../../../HISTORY.txt:3460
msgid ""
"This won't effect \"normal\" users, only people who have legacy BFG "
"codebases that used an autommitting configurator and possibly tests that "
"use the configurator API (the configurator returned by "
"``pyramid.testing.setUp`` is an autocommitting configurator).  The right "
"way to get around this is to use a non-autocommitting configurator (the "
"default), which does not have these directive ordering requirements."
msgstr "これは普通のユーザには影響せず、自動コミットのコンフィグレータを使ったレガシーBFGコードベースを持っていて、おそらくコンフィグレータAPIを使うテスト（ `` pyramid.testing.setUp``で返されたコンフィグレータはオートコミッティングコンフィギュレータ）。これを回避する適切な方法は、これらのディレクティブの順序付け要件を持たない非自動コミット・コンフィグレータ（デフォルト）を使用することです。"

#: ../../../HISTORY.txt:3467
msgid ""
"The ``pyramid.config.Configurator.add_route`` directive no longer returns"
" a route object.  This change was required to make route vs. view "
"configuration processing work properly."
msgstr "`` pyramid.config.Configurator.add_route``ディレクティブはルートオブジェクトを返さなくなりました。この変更は、ルートとビューの構成処理を適切に動作させるために必要でした。"

#: ../../../HISTORY.txt:3474
msgid ""
"Narrative and API documentation which used the ``route_url``, "
"``route_path``, ``resource_url``, ``static_url``, and "
"``current_route_url`` functions in the ``pyramid.url`` package have now "
"been changed to use eponymous methods of the request instead."
msgstr "`` pyramid.url``パッケージの `` route_url``、 `` route_path``、 `` resource_url``、 `` static_url``、および `` current_route_url``関数を使った説明とAPIのドキュメントは、今や代わりにリクエストの名義的なメソッドを使用するように変更されました。"

#: ../../../HISTORY.txt:3479
msgid ""
"Added a section entitled \"Using a Route Prefix to Compose Applications\""
" to the \"URL Dispatch\" narrative documentation chapter."
msgstr "「アプリケーションを作成するためのルートプレフィックスの使用」というタイトルのセクションを\ &quot;URLディスパッチ\&quot;ナレーションドキュメントの章に追加しました。"

#: ../../../HISTORY.txt:3482
msgid "Added a new module to the API docs: ``pyramid.tweens``."
msgstr "API docs： `` pyramid.tweens``に新しいモジュールを追加しました。"

#: ../../../HISTORY.txt:3484
msgid "Added a \"Registering Tweens\" section to the \"Hooks\" narrative chapter."
msgstr "\ &quot;フック\ n&quot;の説明の章に\ &quot;Registering Tweens \&quot;セクションを追加しました。"

#: ../../../HISTORY.txt:3486
msgid ""
"Added a \"Displaying Tweens\" section to the \"Command-Line Pyramid\" "
"narrative chapter."
msgstr "\ &quot;コマンドラインピラミッド\&quot;の説明の章に\ &quot;Tweens \&quot;セクションを追加しました。"

#: ../../../HISTORY.txt:3489
msgid ""
"Added documentation for the ``pyramid.tweens`` and ``pyramid.includes`` "
"configuration settings to the \"Environment Variables and ``.ini`` Files "
"Settings\" chapter."
msgstr "`` pyramid.tweens``と `` pyramid.includes``の環境設定を環境変数と `` .ini``ファイル設定の章に追加しました。"

#: ../../../HISTORY.txt:3493
msgid ""
"Added a Logging chapter to the narrative docs (based on the Pylons "
"logging docs, thanks Phil)."
msgstr "物語のドキュメンテーションにロギングの章を追加しました（Pylonsのロギングドキュメントに基づいて、Philに感謝します）。"

#: ../../../HISTORY.txt:3496
msgid ""
"Added a Paste chapter to the narrative docs (moved content from the "
"Project chapter)."
msgstr "物語のドキュメントにペーストの章を追加しました（プロジェクトの章から移動した内容）。"

#: ../../../HISTORY.txt:3499
msgid ""
"Added the ``pyramid.interfaces.IDict`` interface representing the methods"
" of a dictionary, for documentation purposes only (IMultiDict and "
"IBeforeRender inherit from it)."
msgstr "辞書のメソッドを表す `` pyramid.interfaces.IDict``インターフェースをドキュメント化のためだけに追加しました（IMultiDictとIBeforeRenderはそれを継承しています）。"

#: ../../../HISTORY.txt:3503
msgid ""
"All tutorials now use - The ``route_url``, ``route_path``, "
"``resource_url``, ``static_url``, and ``current_route_url`` methods of "
"the request rather than the function variants imported from "
"``pyramid.url``."
msgstr "すべてのチュートリアルでは、ピラミッドからインポートされた関数バリエーションではなく、リクエストの `` route_url``、 `` route_path``、 `` resource_url``、 `` static_url``、 `` current_route_url``メソッドを使用しています.url``。"

#: ../../../HISTORY.txt:3507
msgid ""
"The ZODB wiki tutorial now uses the ``pyramid_zodbconn`` package rather "
"than the ``repoze.zodbconn`` package to provide ZODB integration."
msgstr "ZODB wikiチュートリアルでは、 `` repoze.zodbconn``パッケージではなく `` pyramid_zodbconn``パッケージを使用して、ZODB統合を提供しています。"

#: ../../../HISTORY.txt:3511
msgid "Dependency Changes"
msgstr "依存関係の変更"

#: ../../../HISTORY.txt:3513
msgid ""
"Pyramid now relies on PasteScript >= 1.7.4.  This version contains a "
"feature important for allowing flexible logging configuration."
msgstr "PyramidはPasteScript&gt; = 1.7.4に依存しています。このバージョンには、柔軟なログ設定を可能にするために重要な機能が含まれています。"

#: ../../../HISTORY.txt:3519
msgid ""
"All scaffolds now use the ``pyramid_tm`` package rather than the "
"``repoze.tm2`` middleware to manage transaction management."
msgstr "すべてのスカフォールドは、トランザクション管理を管理するために `` repoze.tm2``ミドルウェアではなく、 `` pyramid_tm``パッケージを使用します。"

#: ../../../HISTORY.txt:3522
msgid ""
"The ZODB scaffold now uses the ``pyramid_zodbconn`` package rather than "
"the ``repoze.zodbconn`` package to provide ZODB integration."
msgstr "ZODBスキャフォールドはZODB統合を提供するために `` repoze.zodbconn``パッケージではなく `` pyramid_zodbconn``パッケージを使用するようになりました。"

#: ../../../HISTORY.txt:3525
msgid ""
"All scaffolds now use the ``pyramid_debugtoolbar`` package rather than "
"the ``WebError`` package to provide interactive debugging features."
msgstr "すべての足場は対話的なデバッグ機能を提供するために `` WebError``パッケージではなく `` pyramid_debugtoolbar``パッケージを使用します。"

#: ../../../HISTORY.txt:3528
msgid ""
"Projects created via a scaffold no longer depend on the ``WebError`` "
"package at all; configuration in the ``production.ini`` file which used "
"to require its ``error_catcher`` middleware has been removed.  "
"Configuring error catching / email sending is now the domain of the "
"``pyramid_exclog`` package (see "
"http://docs.pylonsproject.org/projects/pyramid_exclog/en/latest/)."
msgstr "足場で作成されたプロジェクトは、 `` WebError``パッケージに全く依存しなくなりました。 `` error_catcher``ミドルウェアを必要としていた `` production.ini``ファイルの設定が削除されました。エラー捕捉/電子メールの送信を設定することは、 `` pyramid_exclog``パッケージのドメインになりました（http://docs.pylonsproject.org/projects/pyramid_exclog/en/latest/を参照）。"

#: ../../../HISTORY.txt:3537
msgid ""
"Fixed an issue with the default renderer not working at certain times.  "
"See https://github.com/Pylons/pyramid/issues/249"
msgstr "特定の時間に動作しないデフォルトのレンダラーに関する問題を修正しました。 https://github.com/Pylons/pyramid/issues/249を参照してください。"

#: ../../../HISTORY.txt:3542
msgid "1.1 (2011-07-22)"
msgstr "1.1（2011-07-22）"

#: ../../../HISTORY.txt:3547
msgid ""
"Added the ``pyramid.renderers.null_renderer`` object as an API.  The null"
" renderer is an object that can be used in advanced integration cases as "
"input to the view configuration ``renderer=`` argument.  When the null "
"renderer is used as a view renderer argument, Pyramid avoids converting "
"the view callable result into a Response object.  This is useful if you "
"want to reuse the view configuration and lookup machinery outside the "
"context of its use by the Pyramid router.  This feature was added for "
"consumption by the ``pyramid_rpc`` package, which uses view configuration"
" and lookup outside the context of a router in exactly this way.  "
"``pyramid_rpc`` has been broken under 1.1 since 1.1b1; adding it allows "
"us to make it work again."
msgstr "`` pyramid.renderers.null_renderer``オブジェクトをAPIとして追加しました。 nullレンダラーは、ビュー構成のレンダラー= ``引き数への入力として高度な統合のケースで使用できるオブジェクトです。 nullレンダラーをビューレンダラー引数として使用すると、Pyramidはビューの呼び出し可能な結果を​​Responseオブジェクトに変換することを回避します。これは、Pyramidルーターが使用しているコンテキスト外で、ビュー構成とルックアップマシンを再利用する場合に便利です。この機能は `` pyramid_rpc``パッケージが消費するために追加されました。このパッケージは、まさにこのようにルータのコンテキスト外でビューの設定とルックアップを使用します。 `` pyramid_rpc``は1.1b1以降1.1で壊れました。それを追加することで、私たちはそれを再び働かせることができます。"

#: ../../../HISTORY.txt:3559
msgid ""
"Change all scaffolding templates that point to docs.pylonsproject.org to "
"use ``/projects/pyramid/current`` rather than ``/projects/pyramid/dev``."
msgstr "docs.pylonsproject.orgを指すすべての足場テンプレートを、 `` / projects / pyramid / dev``ではなく `` / projects / pyramid / current``を使うように変更してください。"

#: ../../../HISTORY.txt:3565
msgid ""
"Remove ``compat`` code that served only the purpose of providing "
"backwards compatibility with Python 2.4."
msgstr "Python 2.4との下位互換性を提供する目的のみに役立つ `` compat``コードを削除します。"

#: ../../../HISTORY.txt:3568
msgid ""
"Add a deprecation warning for non-API function "
"``pyramid.renderers.renderer_from_name`` which has seen use in the wild."
msgstr "野生で使用されている非API関数 `` pyramid.renderers.renderer_from_name``の非推奨警告を追加しました。"

#: ../../../HISTORY.txt:3571
msgid ""
"Add a ``clone`` method to ``pyramid.renderers.RendererHelper`` for use by"
" the ``pyramid.view.view_config`` decorator."
msgstr "`` pyramid.view.view_config``デコレータで使用する `` pyramid.renderers.RendererHelper``に `` clone``メソッドを追加してください。"

#: ../../../HISTORY.txt:3577
msgid "Fixed two typos in wiki2 (SQLA + URL Dispatch) tutorial."
msgstr "wiki2（SQLA + URL Dispatch）チュートリアルの2つのタイプミスを修正しました。"

#: ../../../HISTORY.txt:3579
msgid "Reordered chapters in narrative section for better new user friendliness."
msgstr "新しいユーザーの使いやすさのために、物語セクションの章を並べ替えました。"

#: ../../../HISTORY.txt:3581
msgid "Added more indexing markers to sections in documentation."
msgstr "ドキュメントのセクションにインデックスマーカーを追加しました。"

#: ../../../HISTORY.txt:3584
msgid "1.1b4 (2011-07-18)"
msgstr "1.1b4（2011-07-18）"

#: ../../../HISTORY.txt:3589
msgid ""
"Added a section entitled \"Writing a Script\" to the \"Command-Line "
"Pyramid\" chapter."
msgstr "\ &quot;コマンドラインピラミッド\&quot;の章に &quot;スクリプトを書く&quot;というセクションを追加しました。"

#: ../../../HISTORY.txt:3595
msgid ""
"We added the ``pyramid.scripting.make_request`` API too hastily in 1.1b3."
" It has been removed.  Sorry for any inconvenience.  Use the "
"``pyramid.request.Request.blank`` API instead."
msgstr "`` pyramid.scripting.make_request`` APIを1.1b3にあまりにも急激に追加しました。削除されました。ご不便をかけて申し訳ありません。代わりに `` pyramid.request.Request.blank`` APIを使用してください。"

#: ../../../HISTORY.txt:3602
msgid ""
"The ``paster pshell``, ``paster pviews``, and ``paster proutes`` commands"
" each now under the hood uses ``pyramid.paster.bootstrap``, which makes "
"it possible to supply an ``.ini`` file without naming the \"right\" "
"section in the file that points at the actual Pyramid application.  "
"Instead, you can generally just run ``paster {pshell|proutes|pviews} "
"development.ini`` and it will do mostly the right thing."
msgstr "後述する `` paster pshell``、 `` paster pviews``、 `` paster proutes``コマンドは `` pyramid.paster.bootstrap``を使用して `` .ini ``ファイル名を指定せずに、実際のピラミッドアプリケーションを指し示すファイルを探します。代わりに、一般的には `` paster {pshell | proutes | pviews} development.ini``を実行することができ、それはほとんど正しいことをします。"

#: ../../../HISTORY.txt:3612
msgid ""
"Omit custom environ variables when rendering a custom exception template "
"in ``pyramid.httpexceptions.WSGIHTTPException._set_default_attrs``; "
"stringifying thse may trigger code that should not be executed; see "
"https://github.com/Pylons/pyramid/issues/239"
msgstr "`` pyramid.httpexceptions.WSGIHTTPException._set_default_attrs``でカスタム例外テンプレートをレンダリングするときにカスタム環境変数を省略します。文字列化すると、実行すべきではないコードがトリガされます。 https://github.com/Pylons/pyramid/issues/239を参照してください。"

#: ../../../HISTORY.txt:3618
msgid "1.1b3 (2011-07-15)"
msgstr "1.1b3（2011-07-15）"

#: ../../../HISTORY.txt:3623
msgid ""
"Fix corner case to ease semifunctional testing of views: create a new "
"rendererinfo to clear out old registry on a rescan.  See "
"https://github.com/Pylons/pyramid/pull/234."
msgstr "ビューの半機能テストを容易にするためにコーナーケースを修正する：再レンダリング時に古いレジストリをクリアするために新しいレンダリングリンゴを作成する。 https://github.com/Pylons/pyramid/pull/234を参照してください。"

#: ../../../HISTORY.txt:3627
msgid ""
"New API class: ``pyramid.static.static_view``.  This supersedes the "
"deprecated ``pyramid.view.static`` class.  ``pyramid.static.static_view``"
" by default serves up documents as the result of the request's "
"``path_info``, attribute rather than it's ``subpath`` attribute (the "
"inverse was true of ``pyramid.view.static``, and still is). "
"``pyramid.static.static_view`` exposes a ``use_subpath`` flag for use "
"when you want the static view to behave like the older deprecated "
"version."
msgstr "新しいAPIクラス： `` pyramid.static.static_view``。これは廃止された `` pyramid.view.static``クラスに取って代わるものです。 `` pyramid.static.static_view``は、デフォルトでは、リクエストの `` path_info``属性の結果として文書を提供します。属性は `` subpath``属性ではありません（逆は `` pyramid.view.static`` `、まだあります）。 `` pyramid.static.static_view``は `` use_subpath``フラグを公開します。これは、静的ビューを古い非推奨バージョンと同じように動作させたい場合に使用します。"

#: ../../../HISTORY.txt:3635
msgid ""
"A new API function ``pyramid.paster.bootstrap`` has been added to make "
"writing scripts that bootstrap a Pyramid environment easier, e.g.::"
msgstr "新しいAPI関数 `` pyramid.paster.bootstrap``が追加され、Pyramid環境を簡単にブートストラップするスクリプトを作成しました。例えば::"

#: ../../../HISTORY.txt:3643
msgid ""
"A new API function ``pyramid.scripting.prepare`` has been added.  It is a"
" lower-level analogue of ``pyramid.paster.boostrap`` that accepts a "
"request and a registry instead of a config file argument, and is used for"
" the same purpose::"
msgstr "新しいAPI関数 `` pyramid.scripting.prepare`が追加されました。これは、 `` pyramid.paster.boostrap``の下位レベルのアナログであり、設定ファイル引数の代わりに要求とレジストリを受け入れ、同じ目的で使用されます。"

#: ../../../HISTORY.txt:3653
msgid ""
"A new API function ``pyramid.scripting.make_request`` has been added.  "
"The resulting request will have a ``registry`` attribute.  It is meant to"
" be used in conjunction with ``pyramid.scripting.prepare`` and/or "
"``pyramid.paster.bootstrap`` (both of which accept a request as an "
"argument)::"
msgstr "新しいAPI関数 `` pyramid.scripting.make_request`が追加されました。結果として得られるリクエストは `` registry``属性を持ちます。 `` pyramid.scripting.prepare``や `` pyramid.paster.bootstrap``（どちらも引数としてリクエストを受け付けます）と一緒に使用することを意図しています::"

#: ../../../HISTORY.txt:3662
msgid ""
"New API attribute ``pyramid.config.global_registries`` is an iterable "
"object that contains references to every Pyramid registry loaded into the"
" current process via ``pyramid.config.Configurator.make_app``.  It also "
"has a ``last`` attribute containing the last registry loaded.  This is "
"used by the scripting machinery, and is available for introspection."
msgstr "新しいAPI属性 `` pyramid.config.global_registries``は、 `` pyramid.config.Configurator.make_app``を介して現在のプロセスに読み込まれたすべてのPyramidレジストリへの参照を含む反復可能なオブジェクトです。最後にロードされたレジストリを含む `` last``属性もあります。これはスクリプティング機器で使用され、イントロスペクションに使用できます。"

#: ../../../HISTORY.txt:3671
msgid ""
"The ``pyramid.view.static`` class has been deprecated in favor of the "
"newer ``pyramid.static.static_view`` class.  A deprecation warning is "
"raised when it is used.  You should replace it with a reference to "
"``pyramid.static.static_view`` with the ``use_subpath=True`` argument."
msgstr "`` pyramid.view.static``クラスは、より新しい `` pyramid.static.static_view``クラスのために推奨されなくなりました。非推奨警告は使用時に発生します。 `` use_subpath = True``引数で `` pyramid.static.static_view``への参照で置き換えるべきです。"

#: ../../../HISTORY.txt:3679
msgid ""
"Without a mo-file loaded for the combination of domain/locale, "
"``pyramid.i18n.Localizer.pluralize`` run using that domain/locale "
"combination raised an inscrutable \"translations object has no attr "
"'plural'\" error.  Now, instead it \"works\" (it uses a germanic "
"pluralization by default).  It's nonsensical to try to pluralize "
"something without translations for that locale/domain available, but this"
" behavior matches the behavior of ``pyramid.i18n.Localizer.translate`` so"
" it's at least consistent; see "
"https://github.com/Pylons/pyramid/issues/235."
msgstr "domain / localeの組み合わせに対してmoファイルがロードされていなければ、そのドメイン/ロケールの組み合わせを使用して実行される `` pyramid.i18n.Localizer.pluralize``は、変換不可能な\ &quot;変換オブジェクトにはattr &#39;複数の&#39; \&quot;エラーがありません。さて、代わりに\ &quot;works \&quot;（デフォルトではドイツ語の複数形を使用しています）。利用可能なロケール/ドメインの翻訳なしで何かを複数形にしようとするのは無意味ですが、この動作は `` pyramid.i18n.Localizer.translate``の動作と一致します。 https://github.com/Pylons/pyramid/issues/235を参照してください。"

#: ../../../HISTORY.txt:3689
msgid "1.1b2 (2011-07-13)"
msgstr "1.1b2（2011-07-13）"

#: ../../../HISTORY.txt:3694
msgid ""
"New environment setting ``PYRAMID_PREVENT_HTTP_CACHE`` and new "
"configuration file value ``prevent_http_cache``.  These are synomymous "
"and allow you to prevent HTTP cache headers from being set by Pyramid's "
"``http_cache`` machinery globally in a process.  see the \"Influencing "
"HTTP Caching\" section of the \"View Configuration\" narrative chapter "
"and the detailed documentation for this setting in the \"Environment "
"Variables and Configuration Settings\" narrative chapter."
msgstr "新しい環境設定 `` PYRAMID_PREVENT_HTTP_CACHE``と新しい設定ファイルの値 `` prevent_http_cache``です。これらは同義語であり、プロセス内でグローバルにPyramidの `` http_cache``機構によってHTTPキャッシュヘッダーが設定されないようにします。 \ &quot;構成の表示\&quot;の章の\ &quot;Influencing HTTP Caching \&quot;セクションと\ &quot;環境変数と構成設定\&quot;の説明の章のこの設定の詳細ドキュメントを参照してください。"

#: ../../../BFG_HISTORY.txt:1075 ../../../BFG_HISTORY.txt:5217
#: ../../../BFG_HISTORY.txt:5543 ../../../HISTORY.txt:3703
#: ../../../HISTORY.txt:3849 ../../../HISTORY.txt:4277
msgid "Behavior Changes"
msgstr "行動の変化"

#: ../../../HISTORY.txt:3705
msgid ""
"Previously, If a ``BeforeRender`` event subscriber added a value via the "
"``__setitem__`` or ``update`` methods of the event object with a key that"
" already existed in the renderer globals dictionary, a ``KeyError`` was "
"raised.  With the deprecation of the \"add_renderer_globals\" feature of "
"the configurator, there was no way to override an existing value in the "
"renderer globals dictionary that already existed.  Now, the event object "
"will overwrite an older value that is already in the globals dictionary "
"when its ``__setitem__`` or ``update`` is called (as well as the new "
"``setdefault`` method), just like a plain old dictionary.  As a result, "
"for maximum interoperability with other third-party subscribers, if you "
"write an event subscriber meant to be used as a BeforeRender subscriber, "
"your subscriber code will now need to (using ``.get`` or ``__contains__``"
" of the event object) ensure no value already exists in the renderer "
"globals dictionary before setting an overriding value."
msgstr "以前は、 `` BeforeRender``イベントサブスクライバが、イベントオブジェクトの `` __setitem__``または `` update``メソッドを介してレンダラーグローバルディクショナリにすでに存在するキーで値を追加した場合、 `` KeyError``提起されました。コンフィギュレータの\ &quot;add_renderer_globals \&quot;機能の廃止により、既に存在していたレンダラグローバルディクショナリの既存の値を上書きする方法はありませんでした。さて、イベントオブジェクトは、 `` __setitem__``または `` update``が呼び出されたとき（新しい `` setdefault``メソッドと同様に）、グローバルディクショナリにすでにある古い値を上書きします古い辞書。その結果、他のサードパーティの加入者との最大限の相互運用性を実現するために、BeforeRenderサブスクライバとして使用する予定のイベントサブスクライバを書くと、サブスクライバコードが必要になります（ `` .get``または ``____ __contains__``オーバーライド値を設定する前に、レンダラーグローバルディクショナリに値が存在しないことを確認します。"

#: ../../../HISTORY.txt:3723
msgid ""
"The ``Configurator.add_route`` method allowed two routes with the same "
"route to be added without an intermediate ``config.commit()``.  If you "
"now receive a ``ConfigurationError`` at startup time that appears to be "
"``add_route`` related, you'll need to either a) ensure that all of your "
"route names are unique or b) call ``config.commit()`` before adding a "
"second route with the name of a previously added name or c) use a "
"Configurator that works in ``autocommit`` mode."
msgstr "`` Configurator.add_route``メソッドは、中間の `` config.commit（） ``なしで同じルートを持つ2つのルートを追加することを許可しました。起動時に `` ConfigurationError``が `` add_route``に関連しているように見える場合は、a）すべてのルート名が一意であることを確認するか、またはb） `` config.commit以前に追加された名前の名前を持つ第2のルートを追加する前に、または `` autocommit``モードで動作するConfiguratorを使用してください。"

#: ../../../HISTORY.txt:3731
msgid ""
"The ``pyramid_routesalchemy`` and ``pyramid_alchemy`` scaffolds "
"inappropriately used ``DBSession.rollback()`` instead of "
"``transaction.abort()`` in one place."
msgstr "`` pyramid_routesalchemy``と `` pyramid_alchemy``足場は、 `` transaction.abort（） ``の代わりに `` DBSession.rollback（） ``を不適切に使用していました。"

#: ../../../HISTORY.txt:3735
msgid ""
"We now clear ``request.response`` before we invoke an exception view; an "
"exception view will be working with a request.response that has not been "
"touched by any code prior to the exception."
msgstr "私たちは例外ビューを呼び出す前に `` request.response``をクリアします。例外ビューは、例外の前にどのコードでも触れられていないrequest.responseで動作します。"

#: ../../../HISTORY.txt:3739
msgid ""
"Views associated with routes with spaces in the route name may not have "
"been looked up correctly when using Pyramid with ``zope.interface`` 3.6.4"
" and better.  See https://github.com/Pylons/pyramid/issues/232."
msgstr "`` zope.interface`` 3.6.4以上でPyramidを使用すると、ルート名にスペースが含まれているルートに関連するビューが正しくルックアップされていない可能性があります。 https://github.com/Pylons/pyramid/issues/232を参照してください。"

#: ../../../HISTORY.txt:3746
msgid ""
"Wiki2 (SQLAlchemy + URL Dispatch) tutorial ``models.initialize_sql`` "
"didn't match the ``pyramid_routesalchemy`` scaffold function of the same "
"name; it didn't get synchronized when it was changed in the scaffold."
msgstr "Wiki2（SQLAlchemy + URL Dispatch）チュートリアル `` models.initialize_sql``は、同じ名前の `` pyramid_routesalchemy``スカフォールド関数と一致しませんでした。それは足場で変更された時には同期しなかった。"

#: ../../../HISTORY.txt:3750
msgid ""
"New documentation section in View Configuration narrative chapter: "
"\"Influencing HTTP Caching\"."
msgstr "「構成の設定」の説明の章の新しい文書のセクション：\ &quot;HTTPキャッシュの影響\&quot;"

#: ../../../HISTORY.txt:3754
msgid "1.1b1 (2011-07-10)"
msgstr "1.1b1（2011-07-10）"

#: ../../../HISTORY.txt:3759
msgid ""
"It is now possible to invoke ``paster pshell`` even if the paste ini file"
" section name pointed to in its argument is not actually a Pyramid WSGI "
"application.  The shell will work in a degraded mode, and will warn the "
"user.  See \"The Interactive Shell\" in the \"Creating a Pyramid "
"Project\" narrative documentation section."
msgstr "引数に指定されているpaste iniファイルセクション名がPyramid WSGIアプリケーションではない場合でも、 `` paster pshell``を呼び出すことが可能になりました。シェルは劣化モードで動作し、ユーザーに警告します。 \ &quot;Pyramid Projectの作成\&quot;ドキュメンテーションセクションの\ &quot;The Interactive Shell \&quot;を参照してください。"

#: ../../../HISTORY.txt:3765
msgid ""
"``paster pshell`` now offers more built-in global variables by default "
"(including ``app`` and ``settings``).  See \"The Interactive Shell\" in "
"the \"Creating a Pyramid Project\" narrative documentation section."
msgstr "`` paster pshell``は、デフォルトで（ `` app``と `` settings``を含む）より多くの組み込みのグローバル変数を提供します。 \ &quot;Pyramid Projectの作成\&quot;ドキュメンテーションセクションの\ &quot;The Interactive Shell \&quot;を参照してください。"

#: ../../../HISTORY.txt:3769
msgid ""
"It is now possible to add a ``[pshell]`` section to your application's "
".ini configuration file, which influences the global names available to a"
" pshell session.  See \"Extending the Shell\" in the \"Creating a Pyramid"
" Project\" narrative documentation chapter."
msgstr "現在、アプリケーションの.ini設定ファイルに `` [pshell] `セクションを追加することができます。これは、pshellセッションで使用できるグローバル名に影響します。 \ &quot;ピラミッドプロジェクトの作成\&quot;ドキュメンテーションの章の\ &quot;シェルを拡張する\&quot;を参照してください。"

#: ../../../HISTORY.txt:3774
msgid ""
"The ``config.scan`` method has grown a ``**kw`` argument.  ``kw`` "
"argument represents a set of keyword arguments to pass to the Venusian "
"``Scanner`` object created by Pyramid.  (See the Venusian documentation "
"for more information about ``Scanner``)."
msgstr "`` config.scan``メソッドは `` ** kw``引数を増やしました。 `` kw``引数は、ピラミッドが作成したVenusianの `` Scanner``オブジェクトに渡すキーワード引数の集合を表します。 （ `` Scanner``の詳細については、Venusianのドキュメントを参照してください）。"

#: ../../../HISTORY.txt:3779
msgid ""
"New request property: ``json_body``. This property will return the JSON-"
"decoded variant of the request body.  If the request body is not well-"
"formed JSON, this property will raise an exception."
msgstr "新しいリクエストプロパティ： `` json_body``。このプロパティは、リクエスト本体のJSONでデコードされた変形を返します。要求の本文が整形式JSONでない場合、このプロパティは例外を発生させます。"

#: ../../../HISTORY.txt:3783
msgid "A new value ``http_cache`` can be used as a view configuration parameter."
msgstr "新しい値 `` http_cache``をビュー設定パラメータとして使うことができます。"

#: ../../../HISTORY.txt:3786
msgid ""
"When you supply an ``http_cache`` value to a view configuration, the "
"``Expires`` and ``Cache-Control`` headers of a response generated by the "
"associated view callable are modified.  The value for ``http_cache`` may "
"be one of the following:"
msgstr "ビュー設定に `` http_cache``値を指定すると、関連するview呼び出し可能で生成されたレスポンスの `` Expires``と `` Cache-Control``ヘッダーが変更されます。 `` http_cache``の値は次のいずれかです："

#: ../../../HISTORY.txt:3791
msgid ""
"A nonzero integer.  If it's a nonzero integer, it's treated as a number "
"of seconds.  This number of seconds will be used to compute the "
"``Expires`` header and the ``Cache-Control: max-age`` parameter of "
"responses to requests which call this view.  For example: "
"``http_cache=3600`` instructs the requesting browser to 'cache this "
"response for an hour, please'."
msgstr "非ゼロの整数。ゼロ以外の整数の場合、秒数として扱われます。この秒数は、このビューを呼び出すリクエストに対するレスポンスの `` Expires``ヘッダと `` Cache-Control：max-age``パラメータを計算するために使用されます。たとえば、 `` http_cache = 3600``は、リクエストしているブラウザに「この応答を1時間キャッシュしてください」と指示します。"

#: ../../../HISTORY.txt:3798
msgid ""
"A ``datetime.timedelta`` instance.  If it's a ``datetime.timedelta`` "
"instance, it will be converted into a number of seconds, and that number "
"of seconds will be used to compute the ``Expires`` header and the "
"``Cache-Control: max-age`` parameter of responses to requests which call "
"this view.  For example: ``http_cache=datetime.timedelta(days=1)`` "
"instructs the requesting browser to 'cache this response for a day, "
"please'."
msgstr "`` datetime.timedelta``インスタンスです。 `` datetime.timedelta``インスタンスの場合、秒数に変換され、その秒数が `` Expires``ヘッダーと `` Cache-Control：max-age &#39;&#39;を計算するために使われますこのビューを呼び出す要求への応答のパラメータ。例： `` http_cache = datetime.timedelta（days = 1） ``は、リクエストしているブラウザに「この応答を1日キャッシュしてください」と指示します。"

#: ../../../HISTORY.txt:3806
msgid ""
"Zero (``0``).  If the value is zero, the ``Cache-Control`` and "
"``Expires`` headers present in all responses from this view will be "
"composed such that client browser cache (and any intermediate caches) are"
" instructed to never cache the response."
msgstr "0（ `` 0``）。値がゼロの場合、このビューからのすべての応答に存在する `` Cache-Control``と `` Expires``ヘッダーは、クライアントブラウザのキャッシュ（および任意の中間キャッシュ）にレスポンスをキャッシュしないように構成されます。"

#: ../../../HISTORY.txt:3811
msgid ""
"A two-tuple.  If it's a two tuple (e.g. ``http_cache=(1, "
"{'public':True})``), the first value in the tuple may be a nonzero "
"integer or a ``datetime.timedelta`` instance; in either case this value "
"will be used as the number of seconds to cache the response.  The second "
"value in the tuple must be a dictionary.  The values present in the "
"dictionary will be used as input to the ``Cache-Control`` response "
"header.  For example: ``http_cache=(3600, {'public':True})`` means 'cache"
" for an hour, and add ``public`` to the Cache-Control header of the "
"response'.  All keys and values supported by the "
"``webob.cachecontrol.CacheControl`` interface may be added to the "
"dictionary.  Supplying ``{'public':True}`` is equivalent to calling "
"``response.cache_control.public = True``."
msgstr "2タプル。それが2つのタプル（例えば `` http_cache =（1、{&#39;public&#39;：True）） ``）の場合、タプルの最初の値は非ゼロの整数か `` datetime.timedelta``インスタンスです。どちらの場合も、この値はレスポンスをキャッシュする秒数として使用されます。タプルの2番目の値は辞書でなければなりません。辞書にある値は `` Cache-Control``レスポンスヘッダへの入力として使われます。例えば、 `` http_cache =（3600、{&#39;public&#39;：True}）は ``キャッシュを1時間意味し、 `` public``をレスポンスのCache-Controlヘッダに追加します。 `` webob.cachecontrol.CacheControl``インターフェースでサポートされているすべてのキーと値を辞書に追加することができます。 `` {&#39;public&#39;：True} ``を提供することは、 `` response.cache_control.public = True``を呼び出すことと等価です。"

#: ../../../HISTORY.txt:3824
msgid ""
"Providing a non-tuple value as ``http_cache`` is equivalent to calling "
"``response.cache_expires(value)`` within your view's body."
msgstr "`` http_cache``として非タプルの値を与えることは、あなたのビューのボディ内で `` response.cache_expires（value） ``を呼び出すことと同じです。"

#: ../../../HISTORY.txt:3827
msgid ""
"Providing a two-tuple value as ``http_cache`` is equivalent to calling "
"``response.cache_expires(value[0], **value[1])`` within your view's body."
msgstr "`` http_cache``として2タプルの値を与えることは、あなたのビューのボディ内で `` response.cache_expires（value [0]、** value [1]） ``を呼び出すのと同じです。"

#: ../../../HISTORY.txt:3830
msgid ""
"If you wish to avoid influencing, the ``Expires`` header, and instead "
"wish to only influence ``Cache-Control`` headers, pass a tuple as "
"``http_cache`` with the first element of ``None``, e.g.: ``(None, "
"{'public':True})``."
msgstr "`` Expires``ヘッダーに影響を与えず、 `` Cache-Control``ヘッダにのみ影響を与えたい場合は、 `` None``の最初の要素を持つ `` http_cache``としてタプルを渡し、例： ``（None、{&#39;public&#39;：True}） ``。"

#: ../../../HISTORY.txt:3837
msgid ""
"Framework wrappers of the original view (such as http_cached and so on) "
"relied on being able to trust that the response they were receiving was "
"an IResponse.  It wasn't always, because the response was resolved by the"
" router instead of early in the view wrapping process.  This has been "
"fixed."
msgstr "元のビューのフレームワークラッパー（http_cachedなど）は、受信した応答がIResponseであることを信頼できることに依存していました。これは、必ずしもそうではありませんでした。なぜなら、応答は、ラップの初期段階ではなくルータによって解決されたからです。これは修正されました。"

#: ../../../HISTORY.txt:3845
msgid ""
"Added a section in the \"Webob\" chapter named \"Dealing With A JSON-"
"Encoded Request Body\" (usage of ``request.json_body``)."
msgstr "\ &quot;Webob \&quot;章に\ &quot;JSONエンコードされたリクエスト本体を扱う\&quot;というセクションを追加しました（ `` request.json_body``の使用法）。"

#: ../../../HISTORY.txt:3851
msgid ""
"The ``paster pshell``, ``paster proutes``, and ``paster pviews`` commands"
" now take a single argument in the form "
"``/path/to/config.ini#sectionname`` rather than the previous 2-argument "
"spelling ``/path/to/config.ini sectionname``.  ``#sectionname`` may be "
"omitted, in which case ``#main`` is assumed."
msgstr "`` paster pshell``、 `` paster proutes``、 `` paster pviews``コマンドは、前の2つではなく `` / path / to / config.ini＃sectionname``の形式で引数を取るようになりました - 引数の `` /path/to/config.ini sectionname``のスペルです。 ``＃sectionname``は省略できます。この場合、 ``＃main``が仮定されます。"

#: ../../../HISTORY.txt:3858
msgid "1.1a4 (2011-07-01)"
msgstr "1.1a4（2011-07-01）"

#: ../../../HISTORY.txt:3863
msgid ""
"``pyramid.testing.DummyRequest`` now raises deprecation warnings when "
"attributes deprecated for ``pyramid.request.Request`` are accessed (like "
"``response_content_type``).  This is for the benefit of folks running "
"unit tests which use DummyRequest instead of a \"real\" request, so they "
"know things are deprecated without necessarily needing a functional test "
"suite."
msgstr "`` pyramid.testing.DummyRequest``は `` pyramid.request.Request``で廃止された属性にアクセスするとき（ `` response_content_type``のように）、廃止予定の警告を出します。これは、\ &quot;実際の\&quot;要求の代わりにDummyRequestを使用するユニットテストを実行している人々の利益のためです。機能テストスイートを必要とせずに廃止されたことを知っています。"

#: ../../../HISTORY.txt:3869
msgid ""
"The ``pyramid.events.subscriber`` directive behaved contrary to the "
"documentation when passed more than one interface object to its "
"constructor.  For example, when the following listener was registered::"
msgstr "`` pyramid.events.subscriber``ディレクティブは、複数のインタフェースオブジェクトをコンストラクタに渡すと、ドキュメンテーションとは逆の動作をします。たとえば、次のリスナーが登録されているとします。"

#: ../../../HISTORY.txt:3877
msgid ""
"The Events chapter docs claimed that the listener would be registered and"
" listening for both ``IFoo`` and ``IBar`` events.  Instead, it registered"
" an \"object event\" subscriber which would only be called if an "
"IObjectEvent was emitted where the object interface was ``IFoo`` and the "
"event interface was ``IBar``."
msgstr "イベントの章docsは、リスナーが登録され、 `` IFoo``と `` IBar``イベントの両方を聞くと主張しました。代わりに、IObjectEventが発行され、オブジェクトインタフェースが &quot;IFoo&quot;で、イベントインタフェースが &quot;IBar&quot;であった場合にのみ呼び出される\ &quot;オブジェクトイベント\&quot;サブスクライバを登録しました。"

#: ../../../HISTORY.txt:3883
msgid ""
"The behavior now matches the documentation. If you were relying on the "
"buggy behavior of the 1.0 ``subscriber`` directive in order to register "
"an object event subscriber, you must now pass a sequence to indicate "
"you'd like to register a subscriber for an object event. e.g.::"
msgstr "この動作はドキュメントと一致するようになりました。オブジェクトイベントサブスクライバを登録するために1.0の `` subscriber``ディレクティブのバグの振る舞いに頼っていた場合、オブジェクトイベントのサブスクライバを登録することを示すシーケンスを渡す必要があります。例えば：："

#: ../../../HISTORY.txt:3895
msgid ""
"Add JSONP renderer (see \"JSONP renderer\" in the Renderers chapter of "
"the documentation)."
msgstr "JSONPレンダラーを追加します（ドキュメントのレンダラーの章にある\ &quot;JSONPレンダラー\&quot;を参照）。"

#: ../../../HISTORY.txt:3901
msgid ""
"Deprecated the ``set_renderer_globals_factory`` method of the "
"Configurator and the ``renderer_globals`` Configurator constructor "
"parameter."
msgstr "コンフィグレータの `` set_renderer_globals_factory``メソッドと `` renderer_globals``コンフィグレータコンストラクタパラメータを廃止しました。"

#: ../../../HISTORY.txt:3907
msgid ""
"The Wiki and Wiki2 tutorial \"Tests\" chapters each had two bugs: neither"
" did told the user to depend on WebTest, and 2 tests failed in each as "
"the result of changes to Pyramid itself.  These issues have been fixed."
msgstr "WikiとWiki2チュートリアルの &quot;Tests&quot;章にはそれぞれ2つのバグがありました.WebTestに依存するようにユーザーに指示しておらず、Pyramid自体の変更の結果として2つのテストが失敗しました。これらの問題は修正されました。"

#: ../../../HISTORY.txt:3911
msgid "Move 1.0.X CHANGES.txt entries to HISTORY.txt."
msgstr "1.0.X CHANGES.txtエントリをHISTORY.txtに移動します。"

#: ../../../HISTORY.txt:3914
msgid "1.1a3 (2011-06-26)"
msgstr "1.1a3（2011-06-26）"

#: ../../../HISTORY.txt:3919
msgid ""
"Added ``mako.preprocessor`` config file parameter; allows for a Mako "
"preprocessor to be specified as a Python callable or Python dotted name. "
"See https://github.com/Pylons/pyramid/pull/183 for rationale."
msgstr "`` mako.preprocessor``設定ファイルのパラメータを追加しました。 MakoプリプロセッサをPythonの呼び出し可能な名前またはPythonの点名として指定することができます。根拠については、https://github.com/Pylons/pyramid/pull/183を参照してください。"

#: ../../../HISTORY.txt:3926
msgid ""
"Pyramid would raise an AttributeError in the Configurator when attempting"
" to set a ``__text__`` attribute on a custom predicate that was actually "
"a classmethod.  See https://github.com/Pylons/pyramid/pull/217 ."
msgstr "実際にクラスメソッドであったカスタム述語に `` __text__``属性を設定しようとすると、PyramidはConfiguratorでAttributeErrorを発生させます。 https://github.com/Pylons/pyramid/pull/217を参照してください。"

#: ../../../HISTORY.txt:3930
msgid ""
"Accessing or setting deprecated response_* attrs on request (e.g. "
"``response_content_type``) now issues a deprecation warning at access "
"time rather than at rendering time."
msgstr "要求時に廃止されたresponse_ * attrsにアクセスしたり設定したりすると（ `` response_content_type``など）、レンダリング時ではなくアクセス時に非推奨警告が発行されるようになりました。"

#: ../../../HISTORY.txt:3935
msgid "1.1a2 (2011-06-22)"
msgstr "1.1a2（2011-06-22）"

#: ../../../HISTORY.txt:3940
msgid ""
"1.1a1 broke Akhet by not providing a backwards compatibility import shim "
"for ``pyramid.paster.PyramidTemplate``.  Now one has been added, although"
" a deprecation warning is emitted when Akhet imports it."
msgstr "1.1a1は、 `` pyramid.paster.PyramidTemplate``に下位互換性のあるimport shimを提供しないことによってAkhetを壊しました。 Akhetがそれをインポートすると非推奨の警告が出されますが、今では1つが追加されました。"

#: ../../../HISTORY.txt:3944
msgid ""
"If multiple specs were provided in a single call to "
"``config.add_translation_dirs``, the directories were inserted into the "
"beginning of the directory list in the wrong order: they were inserted in"
" the reverse of the order they were provided in the ``*specs`` list "
"(items later in the list were added before ones earlier in the list).  "
"This is now fixed."
msgstr "`` config.add_translation_dirs``への一回の呼び出しで複数の仕様が提供された場合、ディレクトリはディレクトリリストの先頭に間違った順序で挿入されました。 `` * specs`` list（リストの後ろにある項目はリストの前に追加されています）。これは修正されました。"

#: ../../../HISTORY.txt:3954
msgid ""
"The pyramid Router attempted to set a value into the key "
"``environ['repoze.bfg.message']`` when it caught a view-related exception"
" for backwards compatibility with applications written for ``repoze.bfg``"
" during error handling.  It did this by using code that looked like so::"
msgstr "ピラミッドルータは、エラー処理中に `` repoze.bfg``のために書かれたアプリケーションとの下位互換性のためにビュー関連の例外を検出したときに、キー `` environ [&#39;repoze.bfg.message&#39;] ``に値を設定しようとしました。これは、次のようなコードを使用してこれを行いました::"

#: ../../../HISTORY.txt:3967
msgid ""
"Use of the value ``environ['repoze.bfg.message']`` was docs-deprecated in"
" Pyramid 1.0.  Our standing policy is to not remove features after a "
"deprecation for two full major releases, so this code was originally "
"slated to be removed in Pyramid 1.2.  However, computing the "
"``repoze.bfg.message`` value was the source of at least one bug found in "
"the wild (https://github.com/Pylons/pyramid/issues/199), and there isn't "
"a foolproof way to both preserve backwards compatibility and to fix the "
"bug. Therefore, the code which sets the value has been removed in this "
"release. Code in exception views which relies on this value's presence in"
" the environment should now use the ``exception`` attribute of the "
"request (e.g. ``request.exception[0]``) to retrieve the message instead "
"of relying on ``request.environ['repoze.bfg.message']``."
msgstr "値 `` environ [&#39;repoze.bfg.message&#39;] ``の使用は、Pyramid 1.0で廃止されました。私たちの定める方針は、完全な2つのメジャーリリースに対する非推奨の機能を削除しないことです。このコードはもともとPyramid 1.2で削除される予定でした。しかし、 `` repoze.bfg.message``値を計算することは、野生で見つかった少なくとも1つのバグ（https://github.com/Pylons/pyramid/issues/199）のソースであり、下位互換性を維持し、バグを修正するための完全な方法です。したがって、このリリースでは値を設定するコードは削除されています。環境におけるこの値の存在に依存する例外ビューのコードは、要求の `` exception``属性（例えば、 `` request.exception [0] ``）を使用して、 `` request .environ [&#39;repoze.bfg.message&#39;] ``。"

#: ../../../HISTORY.txt:3981
msgid "1.1a1 (2011-06-20)"
msgstr "1.1a1（2011-06-20）"

#: ../../../HISTORY.txt:3986
msgid ""
"The term \"template\" used to refer to both \"paster templates\" and "
"\"rendered templates\" (templates created by a rendering engine.  i.e. "
"Mako, Chameleon, Jinja, etc.).  \"Paster templates\" will now be refered "
"to as \"scaffolds\", whereas the name for \"rendered templates\" will "
"remain as \"templates.\""
msgstr "「テンプレート」とは、「ペーストテンプレート」と「レンダリングテンプレート」（レンダリングエンジンで作成されたテンプレート、つまりMako、Chameleon、Jinjaなど）の両方を指します。 \ &quot;Paster templates \&quot;は\ &quot;scaffolds \&quot;と呼ばれますが、\ &quot;rendered templates \&quot;の名前は\ &quot;templates \"

#: ../../../HISTORY.txt:3991
msgid "The ``wiki`` (ZODB+Traversal) tutorial was updated slightly."
msgstr "`` wiki``（ZODB + Traversal）チュートリアルは少し更新されました。"

#: ../../../HISTORY.txt:3993
msgid "The ``wiki2`` (SQLA+URL Dispatch) tutorial was updated slightly."
msgstr "`` wiki2``（SQLA + URL Dispatch）チュートリアルは若干更新されました。"

#: ../../../HISTORY.txt:3995
msgid ""
"Make ``pyramid.interfaces.IAuthenticationPolicy`` and "
"``pyramid.interfaces.IAuthorizationPolicy`` public interfaces, and refer "
"to them within the ``pyramid.authentication`` and "
"``pyramid.authorization`` API docs."
msgstr "`` pyramid.interfaces.IAuthenticationPolicy``と `` pyramid.interfaces.IAuthorizationPolicy``の公開インタフェースを作って、 `` pyramid.authentication``と `` pyramid.authorization`` APIドキュメントで参照してください。"

#: ../../../HISTORY.txt:4000
msgid ""
"Render the function definitions for each exposed interface in "
"``pyramid.interfaces``."
msgstr "公開された各インタフェースの関数定義を `` pyramid.interfaces``でレンダリングします。"

#: ../../../HISTORY.txt:4003
msgid ""
"Add missing docs reference to "
"``pyramid.config.Configurator.set_view_mapper`` and refer to it within "
"Hooks chapter section named \"Using a View Mapper\"."
msgstr "見つからないドキュメントの参照を `` pyramid.config.Configurator.set_view_mapper``に追加し、\ &quot;ビューマッパーの使用\&quot;というHooksの章のセクションを参照してください。"

#: ../../../HISTORY.txt:4007
msgid ""
"Added section to the \"Environment Variables and ``.ini`` File Settings\""
" chapter in the narrative documentation section entitled \"Adding a "
"Custom Setting\"."
msgstr "\ &quot;環境変数と` `.ini``ファイル設定\章にセクションを追加しました。\&quot;カスタム設定の追加\ &quot;と書かれています。"

#: ../../../HISTORY.txt:4011
msgid ""
"Added documentation for a \"multidict\" (e.g. the API of "
"``request.POST``) as interface API documentation."
msgstr "\ &quot;multidict \&quot;（例えば、 `` request.POST``のAPI）をインタフェースAPIのドキュメントとして追加しました。"

#: ../../../HISTORY.txt:4014
msgid ""
"Added a section to the \"URL Dispatch\" narrative chapter regarding the "
"new \"static\" route feature."
msgstr "\ &quot;静的\&quot;ルート機能に関する\ &quot;URL Dispatch \&quot;の説明の章にセクションを追加しました。"

#: ../../../HISTORY.txt:4017
msgid "Added \"What's New in Pyramid 1.1\" to HTML rendering of documentation."
msgstr "ドキュメントのHTMLレンダリングに\ &quot;ピラミッドの新機能1.1 \&quot;を追加しました。"

#: ../../../HISTORY.txt:4019
msgid "Added API docs for ``pyramid.authentication.SessionAuthenticationPolicy``."
msgstr "`` pyramid.authentication.SessionAuthenticationPolicy``にAPIドキュメントを追加しました。"

#: ../../../HISTORY.txt:4021
msgid "Added API docs for ``pyramid.httpexceptions.exception_response``."
msgstr "`` pyramid.httpexceptions.exception_response``にAPIドキュメントを追加しました。"

#: ../../../HISTORY.txt:4023
msgid ""
"Added \"HTTP Exceptions\" section to Views narrative chapter including a "
"description of ``pyramid.httpexceptions.exception_response``."
msgstr "`` pyramid.httpexceptions.exception_response``の説明を含むViewsナレーションの章に\ &quot;HTTP Exceptions \&quot;セクションを追加しました。"

#: ../../../HISTORY.txt:4029
msgid ""
"Add support for language fallbacks: when trying to translate for a "
"specific territory (such as ``en_GB``) fall back to translations for the "
"language (ie ``en``). This brings the translation behaviour in line with "
"GNU gettext and fixes partially translated texts when using C extensions."
msgstr "言語のフォールバックのサポートを追加する：特定の領域（ `` en_GB``など）を翻訳しようとすると、言語の翻訳に落ちます（つまり `` en``）。これにより、GNU gettextに沿った翻訳動作が行われ、Cの拡張機能を使用すると部分的に翻訳されたテキストが修正されます。"

#: ../../../HISTORY.txt:4035
msgid ""
"New authentication policy: "
"``pyramid.authentication.SessionAuthenticationPolicy``, which uses a "
"session to store credentials."
msgstr "新しい認証ポリシー： `` pyramid.authentication.SessionAuthenticationPolicy``。セッションを使用してクレデンシャルを保存します。"

#: ../../../HISTORY.txt:4039
msgid ""
"Accessing the ``response`` attribute of a ``pyramid.request.Request`` "
"object (e.g. ``request.response`` within a view) now produces a new "
"``pyramid.response.Response`` object.  This feature is meant to be used "
"mainly when a view configured with a renderer needs to set response "
"attributes: all renderers will use the Response object implied by "
"``request.response`` as the response object returned to the router."
msgstr "`` pyramid.request.Request``オブジェクト（ `` request.response``など）の `` response``属性にアクセスすると、新しい `` pyramid.response.Response``オブジェクトが生成されるようになりました。この機能は、主にレンダラで設定されたビューが応答属性を設定する必要がある場合に使用されます。すべてのレンダラは、ルータに返されるレスポンスオブジェクトとして `` request.response``が意味するResponseオブジェクトを使用します。"

#: ../../../HISTORY.txt:4046
msgid ""
"``request.response`` can also be used by code in a view that does not use"
" a renderer, however the response object that is produced by "
"``request.response`` must be returned when a renderer is not in play (it "
"is not a \"global\" response)."
msgstr "`` request.response``は、レンダラーを使用しないビューのコードでも使用できますが、レンダラーが再生されていないときには `` request.response``で生成されるレスポンスオブジェクトを返す必要があります\ &quot;グローバル\&quot;応答ではありません）。"

#: ../../../HISTORY.txt:4051
msgid ""
"Integers and longs passed as ``elements`` to ``pyramid.url.resource_url``"
" or ``pyramid.request.Request.resource_url`` e.g. ``resource_url(context,"
" request, 1, 2)`` (``1`` and ``2`` are the ``elements``) will now be "
"converted implicitly to strings in the result.  Previously passing "
"integers or longs as elements would cause a TypeError."
msgstr "整数やロングは `` pyramid.url.resource_url``や `` pyramid.request.Request.resource_url``に ``要素 ``として渡されます。 `` resource_url（context、request、1,2） ``（ ` 1 &quot;と&quot; 2 &quot;が&quot;要素 &quot;である）は、暗黙的に結果の文字列に変換されます。以前は整数またはlongを要素として渡すと、TypeErrorが発生します。"

#: ../../../HISTORY.txt:4057
msgid ""
"``pyramid_alchemy`` paster template now uses ``query.get`` rather than "
"``query.filter_by`` to take better advantage of identity map caching."
msgstr "`` pyramid_alchemy``ペーストテンプレートは、 `` query.filter_by``ではなく `` query.get``を使用してアイデンティティマップキャッシングをより有効に活用します。"

#: ../../../HISTORY.txt:4060
msgid "``pyramid_alchemy`` paster template now has unit tests."
msgstr "`` pyramid_alchemy``ペーストテンプレートにユニットテストが追加されました。"

#: ../../../HISTORY.txt:4062
msgid ""
"Added ``pyramid.i18n.make_localizer`` API (broken out from "
"``get_localizer`` guts)."
msgstr "`` pyramid.i18n.make_localizer`` APIを追加しました（ `` get_localizer`` gutsから抜粋）。"

#: ../../../HISTORY.txt:4065
msgid ""
"An exception raised by a NewRequest event subscriber can now be caught by"
" an exception view."
msgstr "NewRequestイベントサブスクライバによって生成された例外は、例外ビューで捕捉できるようになりました。"

#: ../../../HISTORY.txt:4068
msgid ""
"It is now possible to get information about why Pyramid raised a "
"Forbidden exception from within an exception view.  The ``ACLDenied`` "
"object returned by the ``permits`` method of each stock authorization "
"policy (``pyramid.interfaces.IAuthorizationPolicy.permits``) is now "
"attached to the Forbidden exception as its ``result`` attribute.  "
"Therefore, if you've created a Forbidden exception view, you can see the "
"ACE, ACL, permission, and principals involved in the request as eg. "
"``context.result.permission``, ``context.result.acl``, etc within the "
"logic of the Forbidden exception view."
msgstr "Pyramidが例外ビューからForbidden例外を発生させた理由についての情報を得ることができるようになりました。各在庫承認ポリシー（ `` pyramid.interfaces.IAuthorizationPolicy.permits``）の `` permits``メソッドによって返された `` ACLDenied``オブジェクトは、 `` result``属性としてForbidden例外に付加されました。したがって、[禁止された例外]ビューを作成した場合、ACE、ACL、アクセス許可、および要求に含まれるプリンシパルが、たとえば次のように表示されます。 `` context.result.permission``、 `` context.result.acl``などの禁止された例外ビューのロジック内にあります。"

#: ../../../HISTORY.txt:4078
msgid ""
"Don't explicitly prevent the ``timeout`` from being lower than the "
"``reissue_time`` when setting up an ``AuthTktAuthenticationPolicy`` "
"(previously such a configuration would raise a ``ValueError``, now it's "
"allowed, although typically nonsensical).  Allowing the nonsensical "
"configuration made the code more understandable and required fewer tests."
msgstr "`` AuthTktAuthenticationPolicy``を設定する際に、 `` timeout``が `` reissue_time``よりも低くならないように明示的にはしないでください（以前の設定では `` ValueError``が発生します。無意味な）。無意味な設定を許可することで、コードを理解しやすくなり、必要なテストが少なくなりました。"

#: ../../../HISTORY.txt:4084
msgid ""
"A new paster command named ``paster pviews`` was added.  This command "
"prints a summary of potentially matching views for a given path.  See the"
" section entitled \"Displaying Matching Views for a Given URL\" in the "
"\"View Configuration\" chapter of the narrative documentation for more "
"information."
msgstr "`` paster pviews``という新しいパスタコマンドが追加されました。このコマンドは、指定されたパスについて一致する可能性のあるビューの概要を出力します。詳細については、説明文の\ &quot;構成の表示\&quot;の章の\ &quot;特定のURLの一致するビューの表示\&quot;を参照してください。"

#: ../../../HISTORY.txt:4089
msgid ""
"The ``add_route`` method of the Configurator now accepts a ``static`` "
"argument.  If this argument is ``True``, the added route will never be "
"considered for matching when a request is handled.  Instead, it will only"
" be useful for URL generation via ``route_url`` and ``route_path``.  See "
"the section entitled \"Static Routes\" in the URL Dispatch narrative "
"chapter for more information."
msgstr "Configuratorの `` add_route``メソッドは、 `` static``引数を受け付けるようになりました。この引数が `` True``の場合、要求が処理されたときに追加されたルートは照合のために決して考慮されません。代わりに、 `` route_url``と `` route_path``を使ってURLを生成するだけに便利です。詳細については、URL Dispatchの章の\ &quot;Static Routes \&quot;セクションを参照してください。"

#: ../../../HISTORY.txt:4096
msgid ""
"A default exception view for the context "
"``pyramid.interfaces.IExceptionResponse`` is now registered by default. "
"This means that an instance of any exception response class imported from"
" ``pyramid.httpexceptions`` (such as ``HTTPFound``) can now be raised "
"from within view code; when raised, this exception view will render the "
"exception to a response."
msgstr "コンテキスト `` pyramid.interfaces.IExceptionResponse``のデフォルトの例外ビューがデフォルトで登録されるようになりました。これは、 `` pyramid.httpexceptions``（ `` HTTPFound``など）からインポートされた例外応答クラスのインスタンスをビューコード内から呼び出すことができることを意味します。呼び出されると、この例外ビューは応答に例外をレンダリングします。"

#: ../../../HISTORY.txt:4103
msgid ""
"A function named ``pyramid.httpexceptions.exception_response`` is a "
"shortcut that can be used to create HTTP exception response objects using"
" an HTTP integer status code."
msgstr "`` pyramid.httpexceptions.exception_response``という名前の関数は、HTTP整数ステータスコードを使用してHTTP例外応答オブジェクトを作成するために使用できるショートカットです。"

#: ../../../HISTORY.txt:4107
msgid ""
"The Configurator now accepts an additional keyword argument named "
"``exceptionresponse_view``.  By default, this argument is populated with "
"a default exception view function that will be used when a response is "
"raised as an exception. When ``None`` is passed for this value, an "
"exception view for responses will not be registered.  Passing ``None`` "
"returns the behavior of raising an HTTP exception to that of Pyramid 1.0 "
"(the exception will propagate to middleware and to the WSGI server)."
msgstr "Configuratorは、 `` exceptionresponse_view``という名前のキーワード引数を追加できるようになりました。デフォルトでは、この引数には、応答が例外として発生したときに使用されるデフォルトの例外ビュー機能が設定されています。この値に `` None``が渡されると、応答の例外ビューは登録されません。 &quot;None&quot;を渡すと、HTTP例外をPyramid 1.0の例外に戻す動作が返されます（例外はミドルウェアとWSGIサーバに伝播します）。"

#: ../../../HISTORY.txt:4115
msgid ""
"The ``pyramid.request.Request`` class now has a ``ResponseClass`` "
"interface which points at ``pyramid.response.Response``."
msgstr "`` pyramid.request.Request``クラスは、 `` pyramid.response.Response``を指す `` ResponseClass``インターフェースを持つようになりました。"

#: ../../../HISTORY.txt:4118
msgid ""
"The ``pyramid.response.Response`` class now has a ``RequestClass`` "
"interface which points at ``pyramid.request.Request``."
msgstr "`` pyramid.response.Response``クラスは `` pyramid.request.Request``を指す `` RequestClass``インターフェースを持っています。"

#: ../../../HISTORY.txt:4121
msgid ""
"It is now possible to return an arbitrary object from a Pyramid view "
"callable even if a renderer is not used, as long as a suitable adapter to"
" ``pyramid.interfaces.IResponse`` is registered for the type of the "
"returned object by using the new "
"``pyramid.config.Configurator.add_response_adapter`` API.  See the "
"section in the Hooks chapter of the documentation entitled \"Changing How"
" Pyramid Treats View Responses\"."
msgstr "レンダラーが使用されていなくても呼び出し可能なPyramidビューから任意のオブジェクトを返すことが可能になりました。返されたオブジェクトの型に適切なアダプタが `` pyramid.interfaces.IResponse``に登録されていれば新しい `` pyramid.config.Configurator.add_response_adapter`` API。 \ &quot;ピラミッドが応答を見る方法を変更する\&quot;というドキュメントのフックの章のセクションを参照してください。"

#: ../../../HISTORY.txt:4129
msgid ""
"The Pyramid router will now, by default, call the ``__call__`` method of "
"WebOb response objects when returning a WSGI response.  This means that, "
"among other things, the ``conditional_response`` feature of WebOb "
"response objects will now behave properly."
msgstr "Pyramidルータは、WSGIレスポンスを返す際にデフォルトでWebObレスポンスオブジェクトの `` __call__``メソッドを呼び出すようになりました。つまり、WebOb応答オブジェクトの `` conditional_response``機能が適切に動作するようになりました。"

#: ../../../HISTORY.txt:4134
msgid ""
"New method named ``pyramid.request.Request.is_response``.  This method "
"should be used instead of the ``pyramid.view.is_response`` function, "
"which has been deprecated."
msgstr "`` pyramid.request.Request.is_response``という名前の新しいメソッドです。このメソッドは、 `` pyramid.view.is_response``関数の代わりに使用する必要があります。これは廃止予定です。"

#: ../../../HISTORY.txt:4141
msgid ""
"URL pattern markers used in URL dispatch are permitted to specify a "
"custom regex. For example, the pattern ``/{foo:\\d+}`` means to match "
"``/12345`` (foo==12345 in the match dictionary) but not ``/abc``. "
"However, custom regexes in a pattern marker which used squiggly brackets "
"did not work. For example, ``/{foo:\\d{4}}`` would fail to match "
"``/1234`` and ``/{foo:\\d{1,2}}`` would fail to match ``/1`` or ``/11``. "
"One level of inner squiggly brackets is now recognized so that the prior "
"two patterns given as examples now work. See also "
"https://github.com/Pylons/pyramid/issues/#issue/123."
msgstr "URLディスパッチで使用されるURLパターンマーカーは、カスタム正規表現を指定することができます。例えば、 `` / {foo：\\ d +} ``というパターンは `/ 12345`（foo == 12345）を` `/ abc``にマッチさせることを意味します。しかし、かっこを使用したパターンマーカのカスタム正規表現は機能しませんでした。たとえば、 `` / {foo：\\ d {4}} ``は `` / 1234``と `` / {foo：\\ d {1,2}} ``が一致しない`` / 1``または `` / 11``を使用します。例として与えられた以前の2つのパターンが現在機能するように、内側の括れブラケットの1つのレベルが認識されるようになりました。 https://github.com/Pylons/pyramid/issues/#issue/123も参照してください。"

#: ../../../HISTORY.txt:4151
msgid ""
"Don't send port numbers along with domain information in cookies set by "
"AuthTktCookieHelper (see https://github.com/Pylons/pyramid/issues/131)."
msgstr "AuthTktCookieHelper（https://github.com/Pylons/pyramid/issues/131を参照）によって設定されたCookieのドメイン情報とともにポート番号を送信しないでください。"

#: ../../../HISTORY.txt:4154
msgid ""
"``pyramid.url.route_path`` (and the shortcut "
"``pyramid.request.Request.route_url`` method) now include the WSGI "
"SCRIPT_NAME at the front of the path if it is not empty (see "
"https://github.com/Pylons/pyramid/issues/135)."
msgstr "`` pyramid.url.route_path``（ショートカット `` pyramid.request.Request.route_url``メソッド）は、空でない場合はパスの先頭にWSGI SCRIPT_NAMEを追加します（https：// githubを参照）。 com / pylons / pyramid / issues / 135）を参照してください。"

#: ../../../HISTORY.txt:4159
msgid ""
"``pyramid.testing.DummyRequest`` now has a ``script_name`` attribute (the"
" empty string)."
msgstr "`` pyramid.testing.DummyRequest``は `` script_name``属性（空の文字列）を持ちます。"

#: ../../../HISTORY.txt:4162
msgid ""
"Don't quote ``:@&+$,`` symbols in ``*elements`` passed to "
"``pyramid.url.route_url`` or ``pyramid.url.resource_url`` (see "
"https://github.com/Pylons/pyramid/issues#issue/141)."
msgstr "`` pyramid.url.route_url``または `` pyramid.url.resource_url``（https：// githubを参照）に渡される `` * elements``の ``：@＆+ $、 ``を引用符で囲まないでください.com / Pylons / pyramid / issues＃issue / 141）。"

#: ../../../HISTORY.txt:4166
msgid ""
"Include SCRIPT_NAME in redirects issued by "
"``pyramid.view.append_slash_notfound_view`` (see "
"https://github.com/Pylons/pyramid/issues#issue/149)."
msgstr "`` pyramid.view.append_slash_notfound_view``（https://github.com/Pylons/pyramid/issues#issue/149を参照）によって発行されたリダイレクトにSCRIPT_NAMEを含めます。"

#: ../../../HISTORY.txt:4170
msgid ""
"Static views registered with ``config.add_static_view`` which also "
"included a ``permission`` keyword argument would not work as expected, "
"because ``add_static_view`` also registered a route factory internally.  "
"Because a route factory was registered internally, the context checked by"
" the Pyramid permission machinery never had an ACL.  ``add_static_view`` "
"no longer registers a route with a factory, so the default root factory "
"will be used."
msgstr "`` add_static_view``も内部的にルートファクトリを登録していたので、 `` permission``キーワード引数を含む `` config.add_static_view``で登録された静的ビューは期待どおりに動作しませんでした。ルートファクトリが内部的に登録されているため、ピラミッドパーミッションマシンによってチェックされたコンテキストにはACLが一度もありませんでした。 `` add_static_view``はもはやルートをファクトリに登録しないので、デフォルトルートファクトリが使用されます。"

#: ../../../HISTORY.txt:4177
msgid ""
"``config.add_static_view`` now passes extra keyword arguments it receives"
" to ``config.add_route`` (calling add_static_view is mostly logically "
"equivalent to adding a view of the type ``pyramid.static.static_view`` "
"hooked up to a route with a subpath).  This makes it possible to pass "
"e.g., ``factory=`` to ``add_static_view`` to protect a particular static "
"view with a custom ACL."
msgstr "`` config.add_static_view``は、 `` config.add_route``に受け取った余分なキーワード引数を渡します（add_static_viewの呼び出しは、 `` pyramid.static.static_view``のルートをフックに追加することとほとんど論理的に同じです）サブパスを持つ）。これにより、カスタムACLで特定の静的ビューを保護するために `` factory = ``を `` add_static_view``に渡すことが可能になります。"

#: ../../../HISTORY.txt:4184
msgid ""
"``testing.DummyRequest`` used the wrong registry (the global registry) as"
" ``self.registry`` if a dummy request was created *before* "
"``testing.setUp`` was executed (``testing.setUp`` pushes a local registry"
" onto the threadlocal stack). Fixed by implementing ``registry`` as a "
"property for DummyRequest instead of eagerly assigning an attribute. See "
"also https://github.com/Pylons/pyramid/issues/165"
msgstr "`` testing.setUp``が実行される前に（* `testing.setUp``）ダミーリクエストが作成された場合、` `testing.DummyRequest``は間違ったレジストリ（グローバルレジストリ）を` `self.registry``として使用しました。ローカルレジストリをスレッドローカルスタックにプッシュします）。熱心に属性を割り当てるのではなく、DummyRequestのプロパティとして `` registry``を実装することで修正されました。 https://github.com/Pylons/pyramid/issues/165も参照してください。"

#: ../../../HISTORY.txt:4191
msgid ""
"When visiting a URL that represented a static view which resolved to a "
"subdirectory, the ``index.html`` of that subdirectory would not be served"
" properly.  Instead, a redirect to ``/subdir`` would be issued.  This has"
" been fixed, and now visiting a subdirectory that contains an "
"``index.html`` within a static view returns the index.html properly.  See"
" also https://github.com/Pylons/pyramid/issues/67."
msgstr "サブディレクトリに解決された静的ビューを表すURLにアクセスすると、そのサブディレクトリの `` index.html``は適切に処理されません。代わりに、 `` / subdir``へのリダイレクトが発行されます。これは修正され、静的ビュー内の `` index.html``を含むサブディレクトリにアクセスすると、index.htmlが正しく返されます。 https://github.com/Pylons/pyramid/issues/67も参照してください。"

#: ../../../HISTORY.txt:4198
msgid ""
"Redirects issued by a static view did not take into account any existing "
"``SCRIPT_NAME`` (such as one set by a url mapping composite).  Now they "
"do."
msgstr "静的ビューで発行されたリダイレクトでは、既存の「SCRIPT_NAME」（URLマッピングコンポジットで設定されたものなど）は考慮されませんでした。今彼らはそうする。"

#: ../../../HISTORY.txt:4201
msgid ""
"The ``pyramid.wsgi.wsgiapp2`` decorator did not take into account the "
"``SCRIPT_NAME`` in the origin request."
msgstr "`` pyramid.wsgi.wsgiapp2``デコレータは、起点リクエストの `` SCRIPT_NAME``を考慮しませんでした。"

#: ../../../HISTORY.txt:4204
msgid ""
"The ``pyramid.wsgi.wsgiapp2`` decorator effectively only worked when it "
"decorated a view found via traversal; it ignored the ``PATH_INFO`` that "
"was part of a url-dispatch-matched view."
msgstr "`` pyramid.wsgi.wsgiapp2``デコレータは、トラバーサルを介して見つかったビューを装飾するときにのみ効果的でした。 url-dispatch-matchedビューの一部であった `` PATH_INFO``を無視しました。"

#: ../../../HISTORY.txt:4211
msgid ""
"Deprecated all assignments to ``request.response_*`` attributes (for "
"example ``request.response_content_type = 'foo'`` is now deprecated). "
"Assignments and mutations of assignable request attributes that were "
"considered by the framework for response influence are now deprecated: "
"``response_content_type``, ``response_headerlist``, ``response_status``, "
"``response_charset``, and ``response_cache_for``.  Instead of assigning "
"these to the request object for later detection by the rendering "
"machinery, users should use the appropriate API of the Response object "
"created by accessing ``request.response`` (e.g. code which does "
"``request.response_content_type = 'abc'`` should be changed to "
"``request.response.content_type = 'abc'``)."
msgstr "`` request.response_ * ``属性へのすべての代入を非推奨にしました（例えば `` request.response_content_type = &#39;foo&#39;``は廃止予定です）。レスポンスへの影響をフレームワークで考慮した、割り当て可能なリクエスト属性の代入と突然変異は非難されました： `` response_content_type``、 `` response_headerlist``、 `` response_status``、 `` response_charset``、 `` response_cache_for`` 。後でレンダリング機構が検出するためにこれらをリクエストオブジェクトに割り当てるのではなく、 `` request.response``にアクセスして作成したResponseオブジェクトの適切なAPIを使用する必要があります（例えば `` request.response_content_type = &#39;abc&#39; ``は `` request.response.content_type = &#39;abc&#39;``に変更する必要があります）。"

#: ../../../HISTORY.txt:4223
msgid ""
"Passing view-related parameters to "
"``pyramid.config.Configurator.add_route`` is now deprecated.  Previously,"
" a view was permitted to be connected to a route using a set of ``view*``"
" parameters passed to the ``add_route`` method of the Configurator.  This"
" was a shorthand which replaced the need to perform a subsequent call to "
"``add_view``. For example, it was valid (and often recommended) to do::"
msgstr "ビュー関連のパラメータを `` pyramid.config.Configurator.add_route``に渡すことは廃止されました。以前は、コンフィグレータの `` add_route``メソッドに渡された `` view * ``パラメータのセットを使って、ビューをルートに接続することが許可されていました。これは、後で `` add_view``を呼び出す必要性に代わる短縮形でした。たとえば、以下のことを行うには有効でした（しばしば推奨されます）："

#: ../../../HISTORY.txt:4233
msgid ""
"Passing ``view*`` arguments to ``add_route`` is now deprecated in favor "
"of connecting a view to a predefined route via ``Configurator.add_view`` "
"using the route's ``route_name`` parameter.  As a result, the above "
"example should now be spelled::"
msgstr "`` view * ``引数を `` add_route``に渡すことは、ルートの `` route_name``パラメータを使って `` Configurator.add_view``を介してビューを定義済みのルートに接続することを推奨します。その結果、上記の例は今すぐ綴られるべきです::"

#: ../../../HISTORY.txt:4242
msgid ""
"This deprecation was done to reduce confusion observed in IRC, as well as"
" to (eventually) reduce documentation burden (see also "
"https://github.com/Pylons/pyramid/issues/164).  A deprecation warning is "
"now issued when any view-related parameter is passed to "
"``Configurator.add_route``."
msgstr "この廃止は、IRCで見られる混乱を減らし、（最終的に）文書化の負担を軽減するために行われました（https://github.com/Pylons/pyramid/issues/164も参照）。ビュー関連のパラメータが `` Configurator.add_route``に渡されると非推奨警告が発行されるようになりました。"

#: ../../../HISTORY.txt:4248
msgid ""
"Passing an ``environ`` dictionary to the ``__call__`` method of a "
"\"traverser\" (e.g. an object that implements "
"``pyramid.interfaces.ITraverser`` such as an instance of "
"``pyramid.traversal.ResourceTreeTraverser``) as its ``request`` argument "
"now causes a deprecation warning to be emitted.  Consumer code should "
"pass a ``request`` object instead.  The fact that passing an environ dict"
" is permitted has been documentation-deprecated since ``repoze.bfg`` 1.1,"
" and this capability will be removed entirely in a future version."
msgstr "\ &quot;traverser \&quot;の `` __call__``メソッド（例えば `` pyramid.traversal.ResourceTreeTraverserのインスタンスのような `` pyramid.interfaces.ITraverser``を実装するオブジェクト）に `` environ``辞書を渡します``） `` request``引数が非推奨警告を出すようになりました。コンシューマーコードは `` request``オブジェクトを渡すべきです。環境を渡すことが許可されているという事実は、 `` repoze.bfg`` 1.1以降、ドキュメンテーション非難されており、この機能は将来のバージョンでは完全に削除されるでしょう。"

#: ../../../HISTORY.txt:4257
msgid ""
"The following (undocumented, dictionary-like) methods of the "
"``pyramid.request.Request`` object have been deprecated: "
"``__contains__``, ``__delitem__``, ``__getitem__``, ``__iter__``, "
"``__setitem__``, ``get``, ``has_key``, ``items``, ``iteritems``, "
"``itervalues``, ``keys``, ``pop``, ``popitem``, ``setdefault``, "
"``update``, and ``values``.  Usage of any of these methods will cause a "
"deprecation warning to be emitted.  These methods were added for internal"
" compatibility in ``repoze.bfg`` 1.1 (code that currently expects a "
"request object expected an environ object in BFG 1.0 and before).  In a "
"future version, these methods will be removed entirely."
msgstr "`` __contains__``、 `` __delitem__``、 `` __getitem__``、 `` __iter__``オブジェクトの `` pyramid.request.Request``オブジェクトの以下の（文書化されていない、辞書のような）メソッドは廃止されました。 `` iteritems``、 `` itervalues``、 `` keys``、 `` pop``、 `` __setitem__``、 `` __setitem__``、 `` get_key``、 `` items``、 popitem``、 `` setdefault``、 `` update``、および `` values``のようなものです。これらのメソッドを使用すると、非推奨警告が発行されます。これらのメソッドは、 `` repoze.bfg`` 1.1（BFG 1.0以前ではenvironオブジェクトが期待される要求オブジェクトを現在期待しているコード）の内部互換性のために追加されました。将来のバージョンでは、これらのメソッドは完全に削除されます。"

#: ../../../HISTORY.txt:4268
msgid ""
"Deprecated ``pyramid.view.is_response`` function in favor of (newly-"
"added) ``pyramid.request.Request.is_response`` method.  Determining if an"
" object is truly a valid response object now requires access to the "
"registry, which is only easily available as a request attribute.  The "
"``pyramid.view.is_response`` function will still work until it is "
"removed, but now may return an incorrect answer under some (very "
"uncommon) circumstances."
msgstr "pyramid.request.Request.is_response``メソッドを優先して `` pyramid.view.is_response``関数を非推奨にしました。オブジェクトが本当に有効な応答オブジェクトであるかどうかを判断するには、レジストリにアクセスする必要があります。これは、要求属性としてのみ簡単に利用できます。 `` pyramid.view.is_response``関数は、それが削除されるまでは動作しますが、（非常に珍しい）状況下で誤った答えを返すことがあります。"

#: ../../../HISTORY.txt:4279
msgid ""
"The default Mako renderer is now configured to escape all HTML in "
"expression tags. This is intended to help prevent XSS attacks caused by "
"rendering unsanitized input from users. To revert this behavior in user's"
" templates, they need to filter the expression through the 'n' filter. "
"For example, ${ myhtml | n }. See "
"https://github.com/Pylons/pyramid/issues/193."
msgstr "デフォルトのMakoレンダラは、式タグ内のすべてのHTMLをエスケープするように設定されました。これは、非正規化された入力をユーザーから表示することによるXSS攻撃を防ぐのに役立ちます。ユーザーのテンプレートでこの動作を元に戻すには、 &#39;n&#39;フィルタを使用して式をフィルタリングする必要があります。たとえば、$ {myhtml | n}。 https://github.com/Pylons/pyramid/issues/193を参照してください。"

#: ../../../HISTORY.txt:4286
msgid ""
"A custom request factory is now required to return a request object that "
"has a ``response`` attribute (or \"reified\"/lazy property) if they the "
"request is meant to be used in a view that uses a renderer.  This "
"``response`` attribute should be an instance of the class "
"``pyramid.response.Response``."
msgstr "リクエストがレンダラーを使用するビューで使用される場合、 `` response``属性（または\ &quot;reified \&quot; / lazyプロパティ）を持つリクエストオブジェクトを返すカスタムリクエストファクトリが必要になりました。この `` response``属性は `` pyramid.response.Response``クラスのインスタンスでなければなりません。"

#: ../../../HISTORY.txt:4292
msgid ""
"The JSON and string renderer factories now assign to "
"``request.response.content_type`` rather than "
"``request.response_content_type``."
msgstr "JSONおよび文字列レンダラーファクトリは、 `` request.response_content_type``ではなく `` request.response.content_type``に割り当てられます。"

#: ../../../HISTORY.txt:4296
msgid ""
"Each built-in renderer factory now determines whether it should change "
"the content type of the response by comparing the response's content type"
" against the response's default content type; if the content type is the "
"default content type (usually ``text/html``), the renderer changes the "
"content type (to ``application/json`` or ``text/plain`` for JSON and "
"string renderers respectively)."
msgstr "各ビルトインレンダラーファクトリは、レスポンスのコンテンツタイプをレスポンスのデフォルトのコンテンツタイプと比較することによってレスポンスのコンテンツタイプを変更する必要があるかどうかを判断します。コンテンツタイプがデフォルトのコンテンツタイプ（通常 `` text / html``）である場合、レンダラーはコンテンツタイプをJSONおよび文字列レンダラーのそれぞれに対して `` application / json``または `` text / plain``に​​変更します。 。"

#: ../../../HISTORY.txt:4303
msgid ""
"The ``pyramid.wsgi.wsgiapp2`` now uses a slightly different method of "
"figuring out how to \"fix\" ``SCRIPT_NAME`` and ``PATH_INFO`` for the "
"downstream application.  As a result, those values may differ slightly "
"from the perspective of the downstream application (for example, "
"``SCRIPT_NAME`` will now never possess a trailing slash)."
msgstr "`` pyramid.wsgi.wsgiapp2``は、下流のアプリケーションの `` SCRIPT_NAME``と `` PATH_INFO``を修正する方法を見いだす方法が少しずつ異なります。結果として、それらの値は、下流のアプリケーションの観点から若干異なるかもしれません（例えば、 `` SCRIPT_NAME``は後にスラッシュを持たないでしょう）。"

#: ../../../HISTORY.txt:4309
msgid ""
"Previously, ``pyramid.request.Request`` inherited from "
"``webob.request.Request`` and implemented ``__getattr__``, "
"``__setattr__`` and ``__delattr__`` itself in order to overidde \"adhoc "
"attr\" WebOb behavior where attributes of the request are stored in the "
"environ.  Now, ``pyramid.request.Request`` object inherits from (the more"
" recent) ``webob.request.BaseRequest`` instead of "
"``webob.request.Request``, which provides the same behavior.  "
"``pyramid.request.Request`` no longer implements its own ``__getattr__``,"
" ``__setattr__`` or ``__delattr__`` as a result."
msgstr "以前は `` pyramid.request.Request``を `` webob.request.Request``から継承し、 `` __getattr__``、 `` __setattr__``、 `` __delattr__``自体を実装してアドホックattrをオーバーライドしましたリクエストの属性が環境内に格納されているWebObの動作。今度は、 `` pyramid.request.Request``オブジェクトは、同じ動作を提供する `` webob.request.Request``の代わりに（より最近の） `` webob.request.BaseRequest``を継承しています。 `` pyramid.request.Request``はもはや独自の `` __getattr__``、 `` __setattr__``、 `` __delattr__``を実装しません。"

#: ../../../HISTORY.txt:4319
msgid ""
"``pyramid.response.Response`` is now a *subclass* of "
"``webob.response.Response`` (in order to directly implement the "
"``pyramid.interfaces.IResponse`` interface)."
msgstr "`` pyramid.response.Response``は（ `` pyramid.interfaces.IResponse``インターフェースを直接実装するために） `` webob.response.Response``の*サブクラス*になりました。"

#: ../../../HISTORY.txt:4323
msgid ""
"The \"exception response\" objects importable from "
"``pyramid.httpexceptions`` (e.g. ``HTTPNotFound``) are no longer just "
"import aliases for classes that actually live in ``webob.exc``.  Instead,"
" we've defined our own exception classes within the module that mirror "
"and emulate the ``webob.exc`` exception response objects almost entirely."
"  See the \"Design Defense\" doc section named \"Pyramid Uses its Own "
"HTTP Exception Classes\" for more information."
msgstr "`` pyramid.httpexceptions``（例えば `` HTTPNotFound``）からインポート可能な\ &quot;例外応答\&quot;オブジェクトは、 `` webob.exc``に実際に存在するクラスのインポートエイリアスではなくなりました。代わりに、 `` webob.exc``例外応答オブジェクトをほぼ完全にミラーリングしてエミュレートする独自の例外クラスをモジュール内に定義しました。詳細については、\ &quot;Design Defense \&quot; docセクションの &quot;Pyramidが独自のHTTP例外クラスを使用する&quot;を参照してください。"

#: ../../../HISTORY.txt:4334
msgid ""
"Pyramid no longer supports Python 2.4.  Python 2.5 or better is required "
"to run Pyramid 1.1+."
msgstr "PyramidはPython 2.4をサポートしなくなりました。 Pyramid 1.1+を実行するには、Python 2.5以上が必要です。"

#: ../../../HISTORY.txt:4337
msgid ""
"The Pyramid router now, by default, expects response objects returned "
"from view callables to implement the ``pyramid.interfaces.IResponse`` "
"interface. Unlike the Pyramid 1.0 version of this interface, objects "
"which implement IResponse now must define a ``__call__`` method that "
"accepts ``environ`` and ``start_response``, and which returns an "
"``app_iter`` iterable, among other things.  Previously, it was possible "
"to return any object which had the three WebOb ``app_iter``, "
"``headerlist``, and ``status`` attributes as a response, so this is a "
"backwards incompatibility.  It is possible to get backwards compatibility"
" back by registering an adapter to IResponse from the type of object "
"you're now returning from view callables.  See the section in the Hooks "
"chapter of the documentation entitled \"Changing How Pyramid Treats View "
"Responses\"."
msgstr "デフォルトでは、Pyramidルータは、 `` pyramid.interfaces.IResponse``インタフェースを実装するために、ビュー呼び出し可能オブジェクトから返された応答オブジェクトを期待しています。このインタフェースのPyramid 1.0バージョンとは異なり、IResponseを実装するオブジェクトは、現在、 `` environ``と `` start_response``を受け入れ、 `` app_iter`` iterableを返す `` __call__``メソッドを定義しなければなりませんもの。以前は、3つのWebOb `` app_iter``、 `` headerlist``、および `` status``属性をレスポンスとして持つオブジェクトを返すことができました。これは後方互換性がありません。 IRISponseにアダプターを登録することで、ビュー呼び出し可能オブジェクトから戻ってきたオブジェクトの型から下位互換性を取り戻すことができます。 \ &quot;ピラミッドが応答を見る方法を変更する\&quot;というドキュメントのフックの章のセクションを参照してください。"

#: ../../../HISTORY.txt:4350
msgid ""
"The ``pyramid.interfaces.IResponse`` interface is now much more "
"extensive. Previously it defined only ``app_iter``, ``status`` and "
"``headerlist``; now it is basically intended to directly mirror the "
"``webob.Response`` API, which has many methods and attributes."
msgstr "`` pyramid.interfaces.IResponse``インターフェースは、より広範囲になりました。これまでは `` app_iter``、 `` status``、 `` headerlist``だけを定義していました。これは基本的に `` webob.Response`` APIを直接ミラーリングすることを意図しています。これは多くのメソッドと属性を持っています。"

#: ../../../HISTORY.txt:4355
msgid ""
"The ``pyramid.httpexceptions`` classes named ``HTTPFound``, "
"``HTTPMultipleChoices``, ``HTTPMovedPermanently``, ``HTTPSeeOther``, "
"``HTTPUseProxy``, and ``HTTPTemporaryRedirect`` now accept ``location`` "
"as their first positional argument rather than ``detail``.  This means "
"that you can do, e.g. ``return "
"pyramid.httpexceptions.HTTPFound('http://foo')`` rather than ``return "
"pyramid.httpexceptions.HTTPFound(location='http//foo')`` (the latter will"
" of course continue to work)."
msgstr "`` HTTPFound``、 `` HTTPMultipleChoices``、 `` HTTPMovedPermanently``、 `` HTTPSeeOther``、 `` HTTPUseProxy``、および `` HTTPTemporaryRedirect``という名前の `` pyramid.httpexceptions``クラスは、 `` detail``ではなく `` location``を最初の位置引数として使用します。これは、pyramid.httpexceptions.HTTPFound（location = &#39;http // foo&#39;） ``を返すのではなく、 `` pyramid.httpexceptions.HTTPFound（ &#39;http：// foo&#39;） ``を返すなど、後者はもちろん作業を続けるでしょう）。"

#: ../../../HISTORY.txt:4367
msgid ""
"Pyramid now depends on WebOb >= 1.0.2 as tests depend on the bugfix in "
"that release: \"Fix handling of WSGI environs with missing "
"``SCRIPT_NAME``\". (Note that in reality, everyone should probably be "
"using 1.0.4 or better though, as WebOb 1.0.2 and 1.0.3 were effectively "
"brownbag releases.)"
msgstr "Pyramidは、テストがそのリリースのバグ修正に依存するため、WebOb&gt; = 1.0.2に依存します：\ &quot;SCRIPT_NAME`` \&quot;がない状態でのWSGI環境の処理を修正しました。 （WebOb 1.0.2と1.0.3は実質的にブラウンバックのリリースであったため、実際には1.0.4以上のバージョンを使用しているはずです）。"

#: ../../../HISTORY.txt:4373
msgid "1.0 (2011-01-30)"
msgstr "1.0（2011-01-30）"

#: ../../../HISTORY.txt:4378
msgid ""
"Fixed bug in ZODB Wiki tutorial (missing dependency on ``docutils`` in "
"\"models\" step within ``setup.py``)."
msgstr "ZODB Wikiチュートリアルのバグを修正しました（ `` setup.py``内の\ &quot;models \&quot;のステップで `` docutils``に依存しません）。"

#: ../../../HISTORY.txt:4381
msgid ""
"Removed API documentation for ``pyramid.testing`` APIs named "
"``registerDummySecurityPolicy``, ``registerResources``, "
"``registerModels``, ``registerEventListener``, "
"``registerTemplateRenderer``, ``registerDummyRenderer``, "
"``registerView``, ``registerUtility``, ``registerAdapter``, "
"``registerSubscriber``, ``registerRoute``, and ``registerSettings``."
msgstr "`` registerDummySecurityPolicy``、 `` registerResources``、 `` registerModels``、 `` registerEventListener``、 `` registerTemplateRenderer``、 `` registerDummyRenderer``、 `` API`` APIの `` pyramid.testing`` APIに関するAPIドキュメントを削除しました。 registerAttility`、 `` registerAdapter``、 `` registerSubscriber``、 `` registerRoute``、 `` registerSettings``のように、"

#: ../../../HISTORY.txt:4388
msgid ""
"Moved \"Using ZODB With ZEO\" and \"Using repoze.catalog Within Pyramid\""
" tutorials out of core documentation and into the Pyramid Tutorials site "
"(http://docs.pylonsproject.org/projects/pyramid_tutorials/en/latest/)."
msgstr "\ &quot;ZODOでZODBを使用する\&quot;と\ &quot;repoze.catalogをピラミッド内で\ tutorialsの中からコアドキュメントとPyramidチュートリアルサイト（http://docs.pylonsproject.org/projects/pyramid_tutorials/en/latest/）に移動しました。 。"

#: ../../../HISTORY.txt:4392
msgid ""
"Changed \"Cleaning up After a Request\" section in the URL Dispatch "
"chapter to use ``request.add_finished_callback`` instead of jamming an "
"object with a ``__del__`` into the WSGI environment."
msgstr "WSGI環境に `` __del__``でオブジェクトをジャムするのではなく、 `` request.add_finished_callback``を使うようにURL Dispatch章の &quot;Request After After a Request&quot;セクションを変更しました。"

#: ../../../HISTORY.txt:4396
msgid ""
"Remove duplication of ``add_route`` API documentation from URL Dispatch "
"narrative chapter."
msgstr "`` add_route`` APIドキュメントの重複をURL Dispatchの説明の章から削除します。"

#: ../../../HISTORY.txt:4399
msgid ""
"Remove duplication of API and narrative documentation in "
"``pyramid.view.view_config`` API docs by pointing to "
"``pyramid.config.add_view`` documentation and narrative chapter "
"documentation."
msgstr "`` pyramid.view.view_config`` APIドキュメントのAPIとNarrativeドキュメンテーションの重複を削除するには、 `` pyramid.config.add_view``ドキュメンテーションとナレーションの章のドキュメントを参照してください。"

#: ../../../HISTORY.txt:4404
msgid ""
"Removed some API documentation duplicated in narrative portions of "
"documentation"
msgstr "ドキュメンテーションのナレーション部分に複製されたいくつかのAPIドキュメントを削除"

#: ../../../HISTORY.txt:4407
msgid ""
"Removed \"Overall Flow of Authentication\" from SQLAlchemy + URL Dispatch"
" wiki tutorial due to print space concerns (moved to Pyramid Tutorials "
"site)."
msgstr "SQLAlchemy + URLディスパッチwikiチュートリアルの\ &quot;全般的な認証の流れ\&quot;を削除しました（印刷物の問題が原因です）（Pyramidチュートリアルのサイトに移動）。"

#: ../../../HISTORY.txt:4414
msgid ""
"Deprecated-since-BFG-1.2 APIs from ``pyramid.testing`` now properly emit "
"deprecation warnings."
msgstr "`` pyramid.testing``のBFG-1.2 APIは廃止予定の警告を適切に出力するようになりました。"

#: ../../../HISTORY.txt:4417
msgid ""
"Added ``egg:repoze.retry#retry`` middleware to the WSGI pipeline in ZODB "
"templates (retry ZODB conflict errors which occur in normal operations)."
msgstr "ZODBテンプレートのWSGIパイプラインに `` egg：repoze.retry＃retry``ミドルウェアを追加しました（通常の操作で発生するZODB競合エラーの再試行）。"

#: ../../../HISTORY.txt:4420
msgid ""
"Removed duplicate implementations of ``is_response``.  Two competing "
"implementations existed: one in ``pyramid.config`` and one in "
"``pyramid.view``.  Now the one defined in ``pyramid.view`` is used "
"internally by ``pyramid.config`` and continues to be advertised as an "
"API."
msgstr "`` is_response``の重複した実装を削除しました。競合する2つの実装が存在しました。一つは `` pyramid.config``に、もう一つは `` pyramid.view``です。 `` pyramid.view``で定義されたものは、 `` pyramid.config``で内部的に使われ、引き続きAPIとして宣伝されています。"

#: ../../../HISTORY.txt:4426
msgid "1.0b3 (2011-01-28)"
msgstr "1.0b3（2011-01-28）"

#: ../../../HISTORY.txt:4431
msgid ""
"Use &copy; instead of copyright symbol in paster templates / tutorial "
"templates for the benefit of folks who cutnpaste and save to a non-UTF8 "
"format."
msgstr "パーステンプレート/チュートリアルテンプレートの著作権記号の代わりに©を使用すると、カットアンドペーストして非UTF8形式に保存する人々の利益が得られます。"

#: ../../../HISTORY.txt:4435
msgid ""
"``pyramid.view.append_slash_notfound_view`` now preserves GET query "
"parameters across redirects."
msgstr "`` pyramid.view.append_slash_notfound_view``は、リダイレクト間でGETクエリパラメータを保存するようになりました。"

#: ../../../HISTORY.txt:4441
msgid ""
"Beef up documentation related to ``set_default_permission``: explicitly "
"mention that default permissions also protect exception views."
msgstr "`` set_default_permission``に関連する文書を作成してください：デフォルトの権限が例外ビューも保護することを明示してください。"

#: ../../../HISTORY.txt:4444
msgid ""
"Paster templates and tutorials now use spaces instead of tabs in their "
"HTML templates."
msgstr "パスタテンプレートとチュートリアルでは、HTMLテンプレートのタブの代わりにスペースを使用するようになりました。"

#: ../../../HISTORY.txt:4448
msgid "1.0b2 (2011-01-24)"
msgstr "1.0b2（2011-01-24）"

#: ../../../HISTORY.txt:4453
msgid ""
"The ``production.ini`` generated by all paster templates now have an "
"effective logging level of WARN, which prevents e.g. SQLAlchemy statement"
" logging and other inappropriate output."
msgstr "すべてのペースターテンプレートによって生成された `` production.ini``は、SQLAlchemy文のロギングやその他の不適切な出力を防ぐ有効なロギングレベルWARNを持つようになりました。"

#: ../../../HISTORY.txt:4457
msgid ""
"The ``production.ini`` of the ``pyramid_routesalchemy`` and "
"``pyramid_alchemy`` paster templates did not have a ``sqlalchemy`` logger"
" section, preventing ``paster serve production.ini`` from working."
msgstr "`` pyramid_routesalchemy``と `` pyramid_alchemy``のペーストテンプレートの `` production.ini``には `` sqlalchemy``ロガーセクションがなく、 `` paster serve production.ini``が動作しません。"

#: ../../../HISTORY.txt:4461
msgid ""
"The ``pyramid_routesalchemy`` and ``pyramid_alchemy`` paster templates "
"used the ``{{package}}`` variable in a place where it should have used "
"the ``{{project}}`` variable, causing applications created with uppercase"
" letters e.g. ``paster create -t pyramid_routesalchemy Dibbus`` to fail "
"to start when ``paster serve development.ini`` was used against the "
"result. See https://github.com/Pylons/pyramid/issues/#issue/107"
msgstr "`` pyramid_routesalchemy``と `` pyramid_alchemy``のペーストテンプレートは、 `` {{project}} ``変数を使用すべき場所で `` {{package}} ``変数を使っていました。例えば ​​`` paster create -t​​. pyramid_routesalchemy Dibbus``は、 `` paster serve development.ini``がその結果に対して使われたときに開始できません。 https://github.com/Pylons/pyramid/issues/#issue/107を参照してください。"

#: ../../../HISTORY.txt:4468
msgid ""
"The ``render_view`` method of ``pyramid.renderers.RendererHelper`` passed"
" an incorrect value into the renderer for ``renderer_info``.  It now "
"passes an instance of ``RendererHelper`` instead of a dictionary, which "
"is consistent with other usages.  See "
"https://github.com/Pylons/pyramid/issues#issue/106"
msgstr "`` pyramid.renderers.RendererHelper``の `` render_view``メソッドはレンダラーに `` renderer_info``の値を渡しました。これは辞書の代わりに `` RendererHelper``のインスタンスを渡します。これは他の用法と一貫しています。 https://github.com/Pylons/pyramid/issues#issue/106を参照してください。"

#: ../../../HISTORY.txt:4474
#, python-format
msgid ""
"A bug existed in the ``pyramid.authentication.AuthTktCookieHelper`` which"
" would break any usage of an AuthTktAuthenticationPolicy when one was "
"configured to reissue its tokens (``reissue_time`` < ``timeout`` / "
"``max_age``). Symptom: ``ValueError: ('Invalid token %r', '')``.  See "
"https://github.com/Pylons/pyramid/issues#issue/108."
msgstr "AuthTktAuthenticationPolicyのトークン（ `` reissue_time`` &lt;`` timeout`` / `` max_age``）を再発行するように設定されているときに、それを破るバグが `` pyramid.authentication.AuthTktCookieHelper``に存在しました。症状： `` ValueError：（ &#39;無効なトークン％r&#39;、 &#39;&#39;） ``。 https://github.com/Pylons/pyramid/issues#issue/108を参照してください。"

#: ../../../HISTORY.txt:4481
msgid "1.0b1 (2011-01-21)"
msgstr "1.0b1（2011-01-21）"

#: ../../../HISTORY.txt:4486
msgid ""
"The AuthTktAuthenticationPolicy now accepts a ``tokens`` parameter via "
"``pyramid.security.remember``.  The value must be a sequence of strings. "
"Tokens are placed into the auth_tkt \"tokens\" field and returned in the "
"auth_tkt cookie."
msgstr "AuthTktAuthenticationPolicyは、 `` pyramid.security.remember``を介して `` tokens``パラメータを受け付けるようになりました。値は一連の文字列でなければなりません。トークンはauth_tkt \ &quot;tokens \&quot;フィールドに置かれ、auth_tktクッキーに返されます。"

#: ../../../HISTORY.txt:4491
msgid ""
"Add ``wild_domain`` argument to AuthTktAuthenticationPolicy, which "
"defaults to ``True``.  If it is set to ``False``, the feature of the "
"policy which sets a cookie with a wildcard domain will be turned off."
msgstr "AuthTktAuthenticationPolicyに `` wild_domain``引数を追加します。デフォルトは `` True``です。 `` False``に設定されている場合、ワイルドカードドメインを持つクッキーを設定するポリシーの機能は無効になります。"

#: ../../../HISTORY.txt:4495
msgid ""
"Add a ``MANIFEST.in`` file to each paster template. See "
"https://github.com/Pylons/pyramid/issues#issue/95"
msgstr "各パスタテンプレートに `` MANIFEST.in``ファイルを追加してください。 https://github.com/Pylons/pyramid/issues#issue/95を参照してください。"

#: ../../../HISTORY.txt:4501
msgid ""
"``testing.setUp`` now adds a ``settings`` attribute to the registry (both"
" when it's passed a registry without any settings and when it creates "
"one)."
msgstr "`` testing.setUp``はレジストリに `` settings``属性を追加するようになりました（設定なしでレジストリが渡されたときと作成されたときの両方）。"

#: ../../../HISTORY.txt:4504
msgid ""
"The ``testing.setUp`` function now takes a ``settings`` argument, which "
"should be a dictionary.  Its values will subsequently be available on the"
" returned ``config`` object as ``config.registry.settings``."
msgstr "`` testing.setUp``関数は、 `` settings``引数をとります。これは辞書でなければなりません。その値は、返された `` config``オブジェクトで `` config.registry.settings``として利用可能になります。"

#: ../../../HISTORY.txt:4511
msgid ""
"Added \"What's New in Pyramid 1.0\" chapter to HTML rendering of "
"documentation."
msgstr "ドキュメントのHTMLレンダリングに\ &quot;What&#39;s New in Pyramid 1.0 \&quot;の章を追加しました。"

#: ../../../HISTORY.txt:4514
msgid ""
"Merged caseman-master narrative editing branch, many wording fixes and "
"extensions."
msgstr "合併したcaseman-master Narrative編集枝、多くの文言の修正と拡張。"

#: ../../../HISTORY.txt:4517
msgid ""
"Fix deprecated example showing ``chameleon_zpt`` API call in testing "
"narrative chapter."
msgstr "チャプターのテストの章で `` chameleon_zpt`` API呼び出しを表示する非推奨の例を修正しました。"

#: ../../../HISTORY.txt:4520
msgid ""
"Added \"Adding Methods to the Configurator via ``add_directive``\" "
"section to Advanced Configuration narrative chapter."
msgstr "`` add_directive`` \ &quot;セクションを介してアドバンストコンフィグレーションの説明の章に\&quot;コンフィグレータへのメソッドの追加 &quot;を追加しました。"

#: ../../../HISTORY.txt:4523
msgid ""
"Add docs for ``add_finished_callback``, ``add_response_callback``, "
"``route_path``, ``route_url``, and ``static_url`` methods to "
"``pyramid.request.Request`` API docs."
msgstr "`` add_finished_callback``、 `` add_response_callback``、 `` route_path``、 `` route_url``、 `` static_url``メソッドを `` pyramid.request.Request`` APIドキュメントに追加してください。"

#: ../../../HISTORY.txt:4527
msgid ""
"Add (minimal) documentation about using I18N within Mako templates to "
"\"Internationalization and Localization\" narrative chapter."
msgstr "Makoテンプレート内のI18Nを「国際化とローカリゼーション」の章で使用する方法についてのドキュメントを（最小限）追加してください。"

#: ../../../HISTORY.txt:4530
msgid ""
"Move content of \"Forms\" chapter back to \"Views\" chapter; I can't "
"think of a better place to put it."
msgstr "\ &quot;フォーム\&quot;章の内容を\ &quot;Views \&quot;の章に戻します。私はそれを置くより良い場所を考えることができません。"

#: ../../../HISTORY.txt:4533
msgid "Slightly improved interface docs for ``IAuthorizationPolicy``."
msgstr "`` IAuthorizationPolicy``のインターフェイス文書が少し改良されました。"

#: ../../../HISTORY.txt:4535
msgid ""
"Minimally explain usage of custom regular expressions in URL dispatch "
"replacement markers within URL Dispatch chapter."
msgstr "「URLディスパッチ」の章内のURLディスパッチ置換マーカーでカスタム正規表現の使用法を最小限に説明します。"

#: ../../../HISTORY.txt:4541
msgid ""
"Using the ``pyramid.view.bfg_view`` alias for "
"``pyramid.view.view_config`` (a backwards compatibility shim) now issues "
"a deprecation warning."
msgstr "`` pyramid.view.view_config``（下位互換性shim）に `` pyramid.view.bfg_view``エイリアスを使うと、非推奨警告が発行されるようになりました。"

#: ../../../HISTORY.txt:4547
msgid ""
"Using ``testing.setUp`` now registers an ISettings utility as a side "
"effect.  Some test code which queries for this utility after "
"``testing.setUp`` via queryAdapter will expect a return value of "
"``None``. This code will need to be changed."
msgstr "`` testing.setUp``を使うと、ISettingsユーティリティが副作用として登録されるようになりました。 queryAdapterを介して `` testing.setUp``の後にこのユーティリティを問い合わせるテストコードは `` None``の戻り値を期待します。このコードを変更する必要があります。"

#: ../../../HISTORY.txt:4552
msgid ""
"When a ``pyramid.exceptions.Forbidden`` error is raised, its status code "
"now ``403 Forbidden``.  It was previously ``401 Unauthorized``, for "
"backwards compatibility purposes with ``repoze.bfg``.  This change will "
"cause problems for users of Pyramid with ``repoze.who``, which intercepts"
" ``401 Unauthorized`` by default, but allows ``403 Forbidden`` to pass "
"through.  Those deployments will need to configure ``repoze.who`` to also"
" react to ``403 Forbidden``."
msgstr "`` pyramid.exceptions.Forbidden``エラーが発生すると、そのステータスコードは `` 403 Forbidden``になります。 `` repoze.bfg``との下位互換性のために以前は `` 401 Unauthorized``でした。この変更により、デフォルトで `` 401 Unauthorized``を傍受し、 `` 403 Forbidden``を通過させる `` repoze.who``でPyramidのユーザに問題が発生します。これらのデプロイメントでは、 `` 403 Forbidden`にも対応するために `` repoze.who``を設定する必要があります。"

#: ../../../HISTORY.txt:4560
msgid ""
"The default value for the ``cookie_on_exception`` parameter to "
"``pyramid.session.UnencyrptedCookieSessionFactory`` is now ``True``.  "
"This means that when view code causes an exception to be raised, and the "
"session has been mutated, a cookie will be sent back in the response.  "
"Previously its default value was ``False``."
msgstr "`` pyramid.session.UnencyrptedCookieSessionFactory``に対する `` cookie_on_exception``パラメータのデフォルト値は、 `` True``になりました。つまり、ビューコードによって例外が発生し、セッションが変更された場合、クッキーが返されます。以前のデフォルト値は `` False``でした。"

#: ../../../BFG_HISTORY.txt:269 ../../../BFG_HISTORY.txt:1027
#: ../../../BFG_HISTORY.txt:1246 ../../../HISTORY.txt:4567
#: ../../../HISTORY.txt:4661 ../../../HISTORY.txt:4879
#: ../../../HISTORY.txt:5064
msgid "Paster Templates"
msgstr "ペースターテンプレート"

#: ../../../HISTORY.txt:4569
msgid ""
"The ``pyramid_zodb``, ``pyramid_routesalchemy`` and ``pyramid_alchemy`` "
"paster templates now use a default \"commit veto\" hook when configuring "
"the ``repoze.tm2`` transaction manager in ``development.ini``.  This "
"prevents a transaction from being committed when the response status code"
" is within the 400 or 500 ranges.  See also "
"http://docs.repoze.org/tm2/#using-a-commit-veto."
msgstr "`` pyramid_zodb``、 `` pyramid_routesalchemy``、 `` pyramid_alchemy``のペーストテンプレートは `` development.ini``で `` repoze.tm2``トランザクションマネージャを設定するときにデフォルトの &quot;コミット拒否&quot;フックを使用するようになりました。 `。これにより、応答ステータスコードが400または500の範囲内にあるときにトランザクションがコミットされるのを防止します。 http://docs.repoze.org/tm2/#using-a-commit-vetoも参照してください。"

#: ../../../HISTORY.txt:4577
msgid "1.0a10 (2011-01-18)"
msgstr "1.0a10（2011-01-18）"

#: ../../../HISTORY.txt:4582
msgid ""
"URL dispatch now properly handles a ``.*`` or ``*`` appearing in a regex "
"match when used inside brackets.  Resolves issue #90."
msgstr "URLディスパッチは大括弧の中で使われるときに正規表現マッチで現れる `` * * ``や `` * ``を適切に処理するようになりました。問題＃90を解決します。"

#: ../../../HISTORY.txt:4588
msgid ""
"The ``add_handler`` method of a Configurator has been removed from the "
"Pyramid core.  Handlers are now a feature of the ``pyramid_handlers`` "
"package, which can be downloaded from PyPI.  Documentation for the "
"package should be available via "
"http://docs.pylonsproject.org/projects/pyramid_handlers/en/latest/, which"
" describes how to add a configuration statement to your ``main`` block to"
" reobtain this method.  You will also need to add an ``install_requires``"
" dependency upon ``pyramid_handlers`` to your ``setup.py`` file."
msgstr "Configuratorの `` add_handler``メソッドがPyramidコアから削除されました。ハンドラは、PyPIからダウンロードできる `` pyramid_handlers``パッケージの機能になりました。パッケージのドキュメントはhttp://docs.pylonsproject.org/projects/pyramid_handlers/en/latest/から入手できます。これは、このメソッドを再利用するために `` main``ブロックに構成文を追加する方法を説明しています。また、 `` pyramid_handlers``に `` install_requires``の依存関係を `` setup.py``ファイルに追加する必要があります。"

#: ../../../HISTORY.txt:4598
msgid ""
"The ``load_zcml`` method of a Configurator has been removed from the "
"Pyramid core.  Loading ZCML is now a feature of the ``pyramid_zcml`` "
"package, which can be downloaded from PyPI.  Documentation for the "
"package should be available via "
"http://docs.pylonsproject.org/projects/pyramid_zcml/en/latest/, which "
"describes how to add a configuration statement to your ``main`` block to "
"reobtain this method.  You will also need to add an ``install_requires`` "
"dependency upon ``pyramid_zcml`` to your ``setup.py`` file."
msgstr "Configuratorの `` load_zcml``メソッドがPyramidコアから削除されました。 ZCMLの読み込みは、PyPIからダウンロードできる `` pyramid_zcml``パッケージの機能となりました。パッケージのドキュメントは、http：//docs.pylonsproject.org/projects/pyramid_zcml/en/latest/から入手できます。これは、このメソッドを再利用するために `` main``ブロックに構成文を追加する方法を説明しています。また、 `` pyramid_zcml``に `` install_requires``の依存関係を `` setup.py``ファイルに追加する必要があります。"

#: ../../../HISTORY.txt:4608
msgid ""
"The ``pyramid.includes`` subpackage has been removed.  ZCML files which "
"use include the package ``pyramid.includes`` (e.g. ``<include "
"package=\"pyramid.includes\"/>``) now must include the ``pyramid_zcml`` "
"package instead (e.g. ``<include package=\"pyramid_zcml\"/>``)."
msgstr "`` pyramid.includes``サブパッケージは削除されました。使用するZCMLファイルにはパッケージ `` ​​pyramid.includes``（例えば `` ` <include package=\"pyramid.includes\"/> `` pyramid_zcml``パッケージをインクルードする必要があります（例えば `` ` <include package=\"pyramid_zcml\"/> ``）。"

#: ../../../HISTORY.txt:4613
msgid ""
"The ``pyramid.view.action`` decorator has been removed from the Pyramid "
"core.  Handlers are now a feature of the ``pyramid_handlers`` package.  "
"It should now be imported from ``pyramid_handlers`` e.g. ``from "
"pyramid_handlers import action``."
msgstr "`` pyramid.view.action``デコレータはPyramidコアから削除されました。ハンドラは、現在、 `` pyramid_handlers``パッケージの機能です。 `` pyramid_handlers import action``のように、 `` pyramid_handlers``からインポートする必要があります。"

#: ../../../HISTORY.txt:4618
msgid ""
"The ``handler`` ZCML directive has been removed.  It is now a feature of "
"the ``pyramid_handlers`` package."
msgstr "``ハンドラ `` ZCMLディレクティブは削除されました。これは `` pyramid_handlers``パッケージの機能です。"

#: ../../../HISTORY.txt:4621
msgid ""
"The ``pylons_minimal``, ``pylons_basic`` and ``pylons_sqla`` paster "
"templates were removed.  Use ``pyramid_sqla`` (available from PyPI) as a "
"generic replacement for Pylons-esque development."
msgstr "`` pylons_minimal``、 `` pylons_basic``、 `` pylons_sqla``のペーストテンプレートは削除されました。 Pylons-esque開発の一般的な置き換えとして、 `` pyramid_sqla``（PyPIから入手可能）を使用してください。"

#: ../../../HISTORY.txt:4625
msgid ""
"The ``make_app`` function has been removed from the ``pyramid.router`` "
"module.  It continues life within the ``pyramid_zcml`` package.  This "
"leaves the ``pyramid.router`` module without any API functions."
msgstr "`` make_app``関数は `` pyramid.router``モジュールから削除されました。これは `` pyramid_zcml``パッケージ内での生活を続けています。これにより、 `` pyramid.router``モジュールにはAPI関数がなくなります。"

#: ../../../HISTORY.txt:4629
msgid ""
"The ``configure_zcml`` setting within the deployment settings (within "
"``**settings`` passed to a Pyramid ``main`` function) has ceased to have "
"any meaning."
msgstr "デプロイメント設定（Pyramidの `` main``関数に渡される `` ** settings``内の）内の `` configure_zcml``の設定は意味を持ちません。"

#: ../../../HISTORY.txt:4636
msgid ""
"``pyramid.testing.setUp`` and ``pyramid.testing.tearDown`` have been "
"undeprecated.  They are now the canonical setup and teardown APIs for "
"test configuration, replacing \"direct\" creation of a Configurator.  "
"This is a change designed to provide a facade that will protect against "
"any future Configurator deprecations."
msgstr "`` pyramid.testing.setUp``と `` pyramid.testing.tearDown``は廃止されました。これで、コンフィグレータの直接作成に代わって、テストコンフィグレーションのための標準的なセットアップとティアダウンAPIになりました。これは、今後のConfiguratorの廃止を防ぐファサードを提供するように設計された変更です。"

#: ../../../HISTORY.txt:4642
msgid ""
"Add ``charset`` attribute to ``pyramid.testing.DummyRequest`` "
"(unconditionally ``UTF-8``)."
msgstr "`` pyramid.testing.DummyRequest``に `` charset``属性を追加します（無条件に `` UTF-8``）。"

#: ../../../HISTORY.txt:4645
msgid ""
"Add ``add_directive`` method to configurator, which allows framework "
"extenders to add methods to the configurator (ala ZCML directives)."
msgstr "configuratorに `` add_directive``メソッドを追加すると、フレームワークエクステンダがコンフィグレータにメソッドを追加できます（ala ZCMLディレクティブ）。"

#: ../../../HISTORY.txt:4648
msgid ""
"When ``Configurator.include`` is passed a *module* as an argument, it "
"defaults to attempting to find and use a callable named ``includeme`` "
"within that module.  This makes it possible to use "
"``config.include('some.module')`` rather than "
"``config.include('some.module.somefunc')`` as long as the include "
"function within ``some.module`` is named ``includeme``."
msgstr "`` Configurator.include``が引数として* module *を渡されたとき、デフォルトではそのモジュール内で `` includeme``という名前の呼び出し可能ファイルを見つけようとします。これにより、 `` some.module &#39;&#39;の中のインクルード関数が有効である限り、 `` config.include（ &#39;some.module.somefunc&#39;） ``ではなく `` config.include（ &#39;some.module&#39;） ``を使用することができます``は `` includeme``という名前です。"

#: ../../../HISTORY.txt:4655
msgid ""
"The ``bfg2pyramid`` script now converts ZCML include tags that have "
"``repoze.bfg.includes`` as a package attribute to the value "
"``pyramid_zcml``.  For example, ``<include "
"package=\"repoze.bfg.includes\">`` will be converted to ``<include "
"package=\"pyramid_zcml\">``."
msgstr "`` bfg2pyramid``スクリプトは、 `` repoze.bfg.includes``をパッケージ属性として持つZCMLインクルードタグを `` pyramid_zcml``に変換します。例えば、 `` <include package=\"repoze.bfg.includes\"> ``は `` ` <include package=\"pyramid_zcml\"> ``。"

#: ../../../HISTORY.txt:4663
msgid ""
"All paster templates now use ``pyramid.testing.setUp`` and "
"``pyramid.testing.tearDown`` rather than creating a Configurator \"by "
"hand\" within their ``tests.py`` module, as per decision in features "
"above."
msgstr "すべてのペーストテンプレートは、 `` tests.py``モジュール内にConfiguratorを手動で作成するのではなく、 `` pyramid.testing.setUp``と `` pyramid.testing.tearDown``を使用します。上記の機能。"

#: ../../../HISTORY.txt:4667
msgid ""
"The ``starter_zcml`` paster template has been moved to the "
"``pyramid_zcml`` package."
msgstr "`` starter_zcml``のペーストテンプレートは `` pyramid_zcml``パッケージに移動されました。"

#: ../../../HISTORY.txt:4673
msgid ""
"The wiki and wiki2 tutorials now use ``pyramid.testing.setUp`` and "
"``pyramid.testing.tearDown`` rather than creating a Configurator \"by "
"hand\", as per decision in features above."
msgstr "ウィキとwiki2のチュートリアルでは、上記の機能の決定に従って、「手作業で」コンフィグレータを作成するのではなく、 `` pyramid.testing.setUp``と `` pyramid.testing.tearDown``を使用するようになりました。"

#: ../../../HISTORY.txt:4677
msgid ""
"The \"Testing\" narrative chapter now explains ``pyramid.testing.setUp`` "
"and ``pyramid.testing.tearDown`` instead of Configurator creation and "
"``Configurator.begin()`` and ``Configurator.end()``."
msgstr "\ &quot;Testing \&quot;の説明の章では、Configuratorの作成の代わりに `` pyramid.testing.setUp``と `` pyramid.testing.tearDown``と `` Configurator.begin（） ``と `` Configurator.end（） ） ``。"

#: ../../../HISTORY.txt:4681
msgid ""
"Document the ``request.override_renderer`` attribute within the narrative"
" \"Renderers\" chapter in a section named \"Overriding A Renderer at "
"Runtime\"."
msgstr "\ &quot;Renderers \&quot;章内の `` request.override_renderer``属性を\ &quot;実行時にレンダリングを上書きする\&quot;という節で文書化してください。"

#: ../../../HISTORY.txt:4684
msgid ""
"The \"Declarative Configuration\" narrative chapter has been removed (it "
"was moved to the ``pyramid_zcml`` package)."
msgstr "\ &quot;Declarative Configuration \&quot;の説明の章は削除されました（ `` pyramid_zcml``パッケージに移動されました）。"

#: ../../../HISTORY.txt:4687
msgid ""
"Most references to ZCML in narrative chapters have been removed or "
"redirected to ``pyramid_zcml`` locations."
msgstr "物語の章の中のZCMLへの参照は、削除されたり、 &quot;pyramid_zcml&quot;の場所にリダイレクトされました。"

#: ../../../HISTORY.txt:4693
msgid ""
"Deprecation warnings related to import of the following API functions "
"were added: ``pyramid.traversal.find_model``, "
"``pyramid.traversal.model_path``, ``pyramid.traversal.model_path_tuple``,"
" ``pyramid.url.model_url``.  The instructions emitted by the deprecation "
"warnings instruct the developer to change these method spellings to their"
" ``resource`` equivalents.  This is a consequence of the mass concept "
"rename of \"model\" to \"resource\" performed in 1.0a7."
msgstr "次のAPI関数のインポートに関連する非推奨警告が追加されました： `` pyramid.traversal.find_model``、 `` pyramid.traversal.model_path``、 `` pyramid.traversal.model_path_tuple``、 `` pyramid.url.model_url ``。 deprecation警告によって出された命令は、開発者にこれらのメソッドのスペルを `` resource``に相当するものに変更するよう指示します。これは、1.0a7で実行された\ &quot;モデル\&quot;から &quot;&quot; \ &quot;リソース\&quot;への質量コンセプトの変更の結果です。"

#: ../../../HISTORY.txt:4702
msgid "1.0a9 (2011-01-08)"
msgstr "1.0a9（2011-01-08）"

#: ../../../HISTORY.txt:4707
msgid ""
"The ``proutes`` command tried too hard to resolve the view for printing, "
"resulting in exceptions when an exceptional root factory was encountered."
" Instead of trying to resolve the view, if it cannot, it will now just "
"print ``<unknown>``."
msgstr "`` proutes``コマンドは、印刷のためにビューを解決するのが難しかったので、例外的なルートファクトリに遭遇したときに例外が発生しました。ビューを解決しようとするのではなく、表示できない場合は、 `` <unknown> ``。"

#: ../../../HISTORY.txt:4712
msgid ""
"The `self` argument was included in new methods of the ``ISession`` "
"interface signature, causing ``pyramid_beaker`` tests to fail."
msgstr "`` self`引数は、 `` Session``インターフェースシグネチャの新しいメソッドに含まれていました。これにより `` pyramid_beaker``テストが失敗しました。"

#: ../../../HISTORY.txt:4715
msgid ""
"Readd ``pyramid.traversal.model_path_tuple`` as an alias for "
"``pyramid.traversal.resource_path_tuple`` for backwards compatibility."
msgstr "下位互換性のために `` pyramid.traversal.resource_path_tuple``の別名として `` pyramid.traversal.model_path_tuple``を読んでください。"

#: ../../../HISTORY.txt:4721
msgid ""
"Add a new API ``pyramid.url.current_route_url``, which computes a URL "
"based on the \"current\" route (if any) and its matchdict values."
msgstr "新しいAPI「pyramid.url.current_route_url``を追加します。このAPIは、\ &quot;現在の\&quot;ルート（もしあれば）とそのmatchdict値に基づいてURLを計算します。"

#: ../../../HISTORY.txt:4724
msgid ""
"``config.add_view`` now accepts a ``decorator`` keyword argument, a "
"callable which will decorate the view callable before it is added to the "
"registry."
msgstr "`` config.add_view``は、 `` decorator``キーワード引数を受け付けます。これは、レジストリに追加される前に呼び出し可能なビューをデコレートする呼び出し可能です。"

#: ../../../HISTORY.txt:4727
msgid ""
"If a handler class provides an ``__action_decorator__`` attribute "
"(usually a classmethod or staticmethod), use that as the decorator for "
"each view registration for that handler."
msgstr "ハンドラクラスが `` __action_decorator__``属性（通常はclassmethodまたはstaticmethod）を提供する場合、それをそのハンドラの各ビュー登録のデコレータとして使用します。"

#: ../../../HISTORY.txt:4731
msgid ""
"The ``pyramid.interfaces.IAuthenticationPolicy`` interface now specifies "
"an ``unauthenticated_userid`` method.  This method supports an important "
"optimization required by people who are using persistent storages which "
"do not support object caching and whom want to create a \"user object\" "
"as a request attribute."
msgstr "`` pyramid.interfaces.IAuthenticationPolicy``インターフェースは `` unauthenticated_userid``メソッドを指定するようになりました。このメソッドは、オブジェクトキャッシングをサポートしない永続ストレージを使用しているユーザーと、要求属性として\ &quot;ユーザーオブジェクト\&quot;を作成するユーザーが必要とする重要な最適化をサポートします。"

#: ../../../HISTORY.txt:4737
msgid ""
"A new API has been added to the ``pyramid.security`` module named "
"``unauthenticated_userid``.  This API function calls the "
"``unauthenticated_userid`` method of the effective security policy."
msgstr "新しいAPIが `` unauthenticated_userid``という名前の `` pyramid.security``モジュールに追加されました。このAPI関数は、有効なセキュリティポリシーの `` unauthenticated_userid``メソッドを呼び出します。"

#: ../../../HISTORY.txt:4741
msgid ""
"An ``unauthenticated_userid`` method has been added to the dummy "
"authentication policy returned by "
"``pyramid.config.Configurator.testing_securitypolicy``.  It returns the "
"same thing as that the dummy authentication policy's "
"``authenticated_userid`` method."
msgstr "`` unauthenticated_userid``メソッドが `` pyramid.config.Configurator.testing_securitypolicy``で返されたダミー認証ポリシーに追加されました。これは、ダミー認証ポリシーの `` authenticated_userid``メソッドと同じものを返します。"

#: ../../../HISTORY.txt:4747
msgid ""
"The class ``pyramid.authentication.AuthTktCookieHelper`` is now an API. "
"This class can be used by third-party authentication policy developers to"
" help in the mechanics of authentication cookie-setting."
msgstr "`` pyramid.authentication.AuthTktCookieHelper``はAPIになりました。このクラスは、認証Cookie設定の仕組みを助けるために、サードパーティの認証ポリシー開発者が使用できます。"

#: ../../../HISTORY.txt:4751
msgid ""
"New constructor argument to Configurator: ``default_view_mapper``.  "
"Useful to create systems that have alternate view calling conventions.  A"
" view mapper allows objects that are meant to be used as view callables "
"to have an arbitrary argument list and an arbitrary result.  The object "
"passed as ``default_view_mapper`` should implement the "
"``pyramid.interfaces.IViewMapperFactory`` interface."
msgstr "Configuratorの新しいコンストラクタ引数： `` default_view_mapper``。代わりのビュー呼び出し規則を持つシステムを作成すると便利です。ビュー・マッパーは、ビュー・コール可能オブジェクトとして使用されるオブジェクトに、任意の引数リストと任意の結果を持たせることができます。 `` default_view_mapper``として渡されたオブジェクトは、 `` pyramid.interfaces.IViewMapperFactory``インタフェースを実装する必要があります。"

#: ../../../HISTORY.txt:4758
msgid ""
"add a ``set_view_mapper`` API to Configurator.  Has the same result as "
"passing ``default_view_mapper`` to the Configurator constructor."
msgstr "Configuratorに `` set_view_mapper`` APIを追加してください。 Configuratorコンストラクタに `` default_view_mapper``を渡すのと同じ結果を返します。"

#: ../../../HISTORY.txt:4762
msgid ""
"``config.add_view`` now accepts a ``mapper`` keyword argument, which "
"should either be ``None``, a string representing a Python dotted name, or"
" an object which is an ``IViewMapperFactory``.  This feature is not "
"useful for \"civilians\", only for extension writers."
msgstr "`` config.add_view``は、 `` mapper``キーワード引数を受け取ります。これは、 `` None``、Pythonの点線の名前を表す文字列、 `` IViewMapperFactory``のオブジェクトのいずれかでなければなりません。この機能は\ &quot;民間人\&quot;には役に立ちませんが、拡張機能の作者にのみ有効です。"

#: ../../../HISTORY.txt:4767
msgid ""
"Allow static renderer provided during view registration to be overridden "
"at request time via a request attribute named ``override_renderer``, "
"which should be the name of a previously registered renderer.  Useful to "
"provide \"omnipresent\" RPC using existing rendered views."
msgstr "ビューの登録中に提供された静的レンダラが、以前に登録されたレンダラの名前でなければならない `` override_renderer``という名前のリクエスト属性を介してリクエスト時にオーバーライドされるようにします。既存のレンダリングビューを使って\ &quot;遍在する\&quot; RPCを提供するのに便利です。"

#: ../../../HISTORY.txt:4772
msgid ""
"Instances of ``pyramid.testing.DummyRequest`` now have a ``session`` "
"object, which is mostly a dictionary, but also implements the other "
"session API methods for flash and CSRF."
msgstr "`` pyramid.testing.DummyRequest``のインスタンスは、ほとんどが辞書である `` session``オブジェクトを持っていますが、flashとCSRFのための他のセッションAPIメソッドも実装しています。"

#: ../../../HISTORY.txt:4779
msgid ""
"Since the ``pyramid.interfaces.IAuthenticationPolicy`` interface now "
"specifies that a policy implementation must implement an "
"``unauthenticated_userid`` method, all third-party custom authentication "
"policies now must implement this method.  It, however, will only be "
"called when the global function named "
"``pyramid.security.unauthenticated_userid`` is invoked, so if you're not "
"invoking that, you will not notice any issues."
msgstr "`` pyramid.interfaces.IAuthenticationPolicy``インターフェースは、ポリシー実装が `` unauthenticated_userid``メソッドを実装しなければならないように指定しているので、サードパーティのカスタム認証ポリシーはすべてこのメソッドを実装する必要があります。ただし、 `` pyramid.security.unauthenticated_userid``という名前のグローバル関数が呼び出されたときにのみ呼び出されるので、呼び出していなければ何の問題も気づかないでしょう。"

#: ../../../HISTORY.txt:4786
msgid ""
"``pyramid.interfaces.ISession.get_csrf_token`` now mandates that an "
"implementation should return a *new* token if one doesn't already exist "
"in the session (previously it would return None).  The internal "
"sessioning implementation has been changed."
msgstr "`` pyramid.interfaces.ISession.get_csrf_token``は、セッションにすでに存在していない場合（以前はNoneを返す）、実装が* new *トークンを返さなければならないようにしました。内部セッションの実装が変更されました。"

#: ../../../HISTORY.txt:4794
msgid ""
"The (weak) \"Converting a CMF Application to Pyramid\" tutorial has been "
"removed from the tutorials section.  It was moved to the "
"``pyramid_tutorials`` Github repository."
msgstr "\（弱い）\ &quot;CMFアプリケーションをPyramidに変換する\&quot;チュートリアルは、チュートリアルのセクションから削除されました。それは `` pyramid_tutorials`` Githubリポジトリに移されました。"

#: ../../../HISTORY.txt:4798
msgid ""
"The \"Resource Location and View Lookup\" chapter has been replaced with "
"a variant of Rob Miller's \"Much Ado About Traversal\" (originally "
"published at http://blog.nonsequitarian.org/2010/much-ado-about-"
"traversal/)."
msgstr "\ &quot;リソースの場所とビューの参照\&quot;の章は、Rob Millerの\ &quot;Much Ado About Traversal \&quot;（元々http://blog.nonsequitarian.org/2010/much-ado-about-htmlで公開されています）トラバーサル/）。"

#: ../../../HISTORY.txt:4802
msgid ""
"Many minor wording tweaks and refactorings (merged Casey Duncan's docs "
"fork, in which he is working on general editing)."
msgstr "多くのマイナーな言い回しとリファクタリング（Casey Duncanのドキュメントフォークを統合し、一般的な編集に取り組んでいます）。"

#: ../../../HISTORY.txt:4805
msgid ""
"Added (weak) description of new view mapper feature to Hooks narrative "
"chapter."
msgstr "フックの説明の章に新しいビューマッパー機能の（弱い）記述を追加しました。"

#: ../../../HISTORY.txt:4808
msgid "Split views chapter into 2: View Callables and View Configuration."
msgstr "ビューを2：ビュー呼び出しとビュー構成に分割する。"

#: ../../../HISTORY.txt:4810
msgid ""
"Reorder Renderers and Templates chapters after View Callables but before "
"View Configuration."
msgstr "View Callablesの後、View Configurationの前に、レンダラーとテンプレートの章を並べ替えます。"

#: ../../../HISTORY.txt:4813
msgid ""
"Merge Session Objects, Cross-Site Request Forgery, and Flash Messaging "
"chapter into a single Sessions chapter."
msgstr "セッションオブジェクトのマージ、クロスサイトリクエスト偽造、およびFlash Messagingの章を1つのセッションの章にまとめます。"

#: ../../../HISTORY.txt:4816
msgid "The Wiki and Wiki2 tutorials now have much nicer CSS and graphics."
msgstr "WikiとWiki2のチュートリアルには、より良いCSSとグラフィックがあります。"

#: ../../../HISTORY.txt:4821
msgid ""
"The \"view derivation\" code is now factored into a set of classes rather"
" than a large number of standalone functions (a side effect of the view "
"mapper refactoring)."
msgstr "\ &quot;ビュー派生\&quot;コードは、多数のスタンドアロン関数（ビューマッパーリファクタリングの副作用）ではなく、一連のクラスに分解されるようになりました。"

#: ../../../HISTORY.txt:4825
msgid ""
"The ``pyramid.renderer.RendererHelper`` class has grown a ``render_view``"
" method, which is used by the default view mapper (a side effect of the "
"view mapper refactoring)."
msgstr "`` pyramid.renderer.RendererHelper``クラスは、デフォルトのビューマッパー（ビューマッパーリファクタリングの副作用）によって使用される `` render_view``メソッドを増やしました。"

#: ../../../HISTORY.txt:4829
msgid ""
"The object passed as ``renderer`` to the \"view deriver\" is now an "
"instance of ``pyramid.renderers.RendererHelper`` rather than a dictionary"
" (a side effect of view mapper refactoring)."
msgstr "\ &quot;view deriver \&quot;に `` renderer``として渡されたオブジェクトは、辞書（ビューマッパーリファクタリングの副作用）ではなく `` pyramid.renderers.RendererHelper``のインスタンスになりました。"

#: ../../../HISTORY.txt:4833
msgid ""
"The class used as the \"page template\" in ``pyramid.chameleon_text`` was"
" removed, in preference to using a Chameleon-inbuilt version."
msgstr "`` pyramid.chameleon_text``の\ &quot;page template \&quot;として使われたクラスは、カメレオンの組み込みバージョンを使うのが優先して削除されました。"

#: ../../../HISTORY.txt:4836
msgid ""
"A view callable wrapper registered in the registry now contains an "
"``__original_view__`` attribute which references the original view "
"callable (or class)."
msgstr "レジストリに登録されたビュー呼び出し可能ラッパーには、元のビュー呼び出し可能な（またはクラス）を参照する `` __original_view__``属性が含まれています。"

#: ../../../HISTORY.txt:4840
msgid ""
"The (non-API) method of all internal authentication policy "
"implementations previously named ``_get_userid`` is now named "
"``unauthenticated_userid``, promoted to an API method.  If you were "
"overriding this method, you'll now need to override it as "
"``unauthenticated_userid`` instead."
msgstr "以前に `` _get_userid``と命名されたすべての内部認証ポリシー実装の（非API）メソッドは、現在は `` unauthenticated_userid``という名前になり、APIメソッドに昇格しました。このメソッドをオーバーライドした場合は、代わりに `` unauthenticated_userid``としてオーバーライドする必要があります。"

#: ../../../HISTORY.txt:4845
msgid "Remove (non-API) function of config.py named _map_view."
msgstr "_map_viewというconfig.pyの（非API）機能を削除します。"

#: ../../../HISTORY.txt:4848
msgid "1.0a8 (2010-12-27)"
msgstr "1.0a8（2010-12-27）"

#: ../../../HISTORY.txt:4853
msgid ""
"The name ``registry`` was not available in the ``paster pshell`` "
"environment under IPython."
msgstr "`` registry``という名前は、IPythonの `` paster pshell``環境では利用できませんでした。"

#: ../../../HISTORY.txt:4859
msgid ""
"If a resource implements a ``__resource_url__`` method, it will be called"
" as the result of invoking the ``pyramid.url.resource_url`` function to "
"generate a URL, overriding the default logic.  See the new \"Generating "
"The URL Of A Resource\" section within the Resources narrative chapter."
msgstr "リソースが `` __resource_url__``メソッドを実装している場合、 `` pyramid.url.resource_url``関数を呼び出してURLを生成し、デフォルトロジックをオーバーライドした結果として呼び出されます。 「リソースの説明」の章の新しい「リソースのURLの生成」セクションを参照してください。"

#: ../../../HISTORY.txt:4864
msgid ""
"Added flash messaging, as described in the \"Flash Messaging\" narrative "
"documentation chapter."
msgstr "\ &quot;Flash Messaging \&quot; Narrativeドキュメンテーションの章で説明されているように、フラッシュメッセージを追加しました。"

#: ../../../HISTORY.txt:4867
msgid ""
"Added CSRF token generation, as described in the narrative chapter "
"entitled \"Preventing Cross-Site Request Forgery Attacks\"."
msgstr "\ &quot;クロスサイトリクエスト偽造攻撃の防止\&quot;という説明の章で説明されているように、CSRFトークンの生成が追加されました。"

#: ../../../HISTORY.txt:4870
msgid ""
"Prevent misunderstanding of how the ``view`` and ``view_permission`` "
"arguments to add_route work by raising an exception during configuration "
"if view-related arguments exist but no ``view`` argument is passed."
msgstr "ビュー関連の引数が存在し、 `` view``引数が渡されなければ、設定中に例外を発生させてadd_routeへの `` view``と `` view_permission``引数がどのように働くのか誤解を避けてください。"

#: ../../../HISTORY.txt:4874
msgid ""
"Add ``paster proute`` command which displays a summary of the routing "
"table.  See the narrative documentation section within the \"URL "
"Dispatch\" chapter entitled \"Displaying All Application Routes\"."
msgstr "ルーティングテーブルの要約を表示する `` paster proute``コマンドを追加してください。 \ &quot;URL Dispatch \&quot;の章 &quot;\&quot;すべてのアプリケーションルートの表示\ &quot;の説明文のセクションを参照してください。"

#: ../../../HISTORY.txt:4881
msgid ""
"The ``pyramid_zodb`` Paster template no longer employs ZCML.  Instead, it"
" is based on scanning."
msgstr "`` pyramid_zodb`` PasterテンプレートはもはやZCMLを使用しません。代わりに、それはスキャンに基づいています。"

#: ../../../HISTORY.txt:4887
msgid ""
"Added \"Generating The URL Of A Resource\" section to the Resources "
"narrative chapter (includes information about overriding URL generation "
"using ``__resource_url__``)."
msgstr "リソースの説明の章（\ &quot;__resource_url__&quot;を使ったURL生成のオーバーライドに関する情報を含む）に\ &quot;リソースのURLを生成する\&quot;セクションを追加しました。"

#: ../../../HISTORY.txt:4891
msgid ""
"Added \"Generating the Path To a Resource\" section to the Resources "
"narrative chapter."
msgstr "「リソースへのパスの生成」セクションを「リソースの説明」の章に追加しました。"

#: ../../../HISTORY.txt:4894
msgid ""
"Added \"Finding a Resource by Path\" section to the Resources narrative "
"chapter."
msgstr "リソースの説明の章に\ &quot;パス別リソースの検索&quot;セクションを追加しました。"

#: ../../../HISTORY.txt:4897
msgid ""
"Added \"Obtaining the Lineage of a Resource\" to the Resources narrative "
"chapter."
msgstr "リソースナレーションの章に\ &quot;リソースの系統を取得する\&quot;を追加しました。"

#: ../../../HISTORY.txt:4900
msgid ""
"Added \"Determining if a Resource is In The Lineage of Another Resource\""
" to Resources narrative chapter."
msgstr "\ &quot;リソースが別のリソースのリネージにあるかどうかを\リソースの説明の章に追加する&quot;を追加しました。"

#: ../../../HISTORY.txt:4903
msgid "Added \"Finding the Root Resource\" to Resources narrative chapter."
msgstr "リソースの説明の章に\ &quot;ルートリソースを見つける\&quot;を追加しました。"

#: ../../../HISTORY.txt:4905
msgid ""
"Added \"Finding a Resource With a Class or Interface in Lineage\" to "
"Resources narrative chapter."
msgstr "リソースの説明の章に\ &quot;リネージュのクラスまたはインターフェイスを持つリソースを見つける\&quot;を追加しました。"

#: ../../../HISTORY.txt:4908
msgid "Added a \"Flash Messaging\" narrative documentation chapter."
msgstr "\ &quot;Flash Messaging \&quot;ナレーションドキュメントの章を追加しました。"

#: ../../../HISTORY.txt:4910
msgid ""
"Added a narrative chapter entitled \"Preventing Cross-Site Request "
"Forgery Attacks\"."
msgstr "\ &quot;Cross-Site Request Forgery Attacksの防止\&quot;と題された説明の章が追加されました。"

#: ../../../HISTORY.txt:4913
msgid ""
"Changed the \"ZODB + Traversal Wiki Tutorial\" based on changes to "
"``pyramid_zodb`` Paster template."
msgstr "`` pyramid_zodb`` Pasterテンプレートの変更に基づいて\ &quot;ZODB + Traversal Wiki Tutorial \&quot;を変更しました。"

#: ../../../HISTORY.txt:4916
msgid ""
"Added \"Advanced Configuration\" narrative chapter which documents how to"
" deal with configuration conflicts, two-phase configuration, ``include`` "
"and ``commit``."
msgstr "設定の競合、2段階設定、 `` include``と `` commit``をどう扱うかを文書化した\ &quot;Advanced Configuration \&quot;ナレーションの章を追加しました。"

#: ../../../HISTORY.txt:4920
msgid "Fix API documentation rendering for ``pyramid.view.static``"
msgstr "`` pyramid.view.static``のAPIドキュメントのレンダリングを修正しました。"

#: ../../../HISTORY.txt:4922
msgid ""
"Add \"Pyramid Provides More Than One Way to Do It\" to Design Defense "
"documentation."
msgstr "ディフェンスのドキュメントを作成するには、\ &quot;ピラミッドはそれを行う方法の1つ以上を提供する\&quot;を追加します。"

#: ../../../HISTORY.txt:4925
msgid ""
"Changed \"Static Assets\" narrative chapter: clarify that ``name`` "
"represents a prefix unless it's a URL, added an example of a root-"
"relative static view fallback for URL dispatch, added an example of "
"creating a simple view that returns the body of a file."
msgstr "変更された静的アセット\ &quot;ナレーションの章：&quot; name &quot;はURLでない限りプレフィックスを表し、URLディスパッチのルート相対スタティックビューフォールバックの例を追加し、単純なビューを作成する例を追加しましたファイルの本体。"

#: ../../../HISTORY.txt:4930
msgid "Move ZCML usage in Hooks chapter to Declarative Configuration chapter."
msgstr "「Hooks」の章の「Declarative Configuration」の章にZCMLの使用法を移してください。"

#: ../../../HISTORY.txt:4932
msgid "Merge \"Static Assets\" chapter into the \"Assets\" chapter."
msgstr "\ &quot;静的資産\&quot;の章を\ &quot;資産\&quot;の章にマージします。"

#: ../../../HISTORY.txt:4934
msgid ""
"Added narrative documentation section within the \"URL Dispatch\" chapter"
" entitled \"Displaying All Application Routes\" (for ``paster proutes`` "
"command)."
msgstr "\ &quot;URL Dispatch \&quot;章の\ &quot;すべてのアプリケーションルートの表示\&quot;（ &quot;paster proutes&quot;コマンドの場合）にナレーション文書セクションを追加しました。"

#: ../../../HISTORY.txt:4939
msgid "1.0a7 (2010-12-20)"
msgstr "1.0a7（2010-12-20）"

#: ../../../HISTORY.txt:4942
msgid "Terminology Changes"
msgstr "用語の変更"

#: ../../../HISTORY.txt:4944
msgid ""
"The Pyramid concept previously known as \"model\" is now known as "
"\"resource\". As a result:"
msgstr "以前は\ &quot;モデル\&quot;として知られていたピラミッドの概念は、現在 &quot;リソース&quot;として知られています。結果として："

#: ../../../HISTORY.txt:4947
msgid "The following API changes have been made::"
msgstr "次のAPI変更が行われました::"

#: ../../../HISTORY.txt:4973
msgid ""
"All documentation which previously referred to \"model\" now refers to "
"\"resource\"."
msgstr "以前は\ &quot;モデル\&quot;を参照していたすべてのドキュメントは、\ &quot;リソース\&quot;を参照しています。"

#: ../../../HISTORY.txt:4976
msgid ""
"The ``starter`` and ``starter_zcml`` paster templates now have a "
"``resources.py`` module instead of a ``models.py`` module."
msgstr "`` starter``と `` starter_zcml``のペーストテンプレートに `` models.py``モジュールの代わりに `` resources.py``モジュールが追加されました。"

#: ../../../HISTORY.txt:4979
msgid ""
"Positional argument names of various APIs have been changed from "
"``model`` to ``resource``."
msgstr "さまざまなAPIの位置引数名が `` model``から `` resource``に変更されました。"

#: ../../../HISTORY.txt:4982 ../../../HISTORY.txt:5009
msgid ""
"Backwards compatibility shims have been left in place in all cases.  They"
" will continue to work \"forever\"."
msgstr "下位互換性のシムは、すべての場合に適所に残っています。彼らは\ &quot;永遠に\&quot;働き続けるでしょう。"

#: ../../../HISTORY.txt:4985
msgid ""
"The Pyramid concept previously known as \"resource\" is now known as "
"\"asset\". As a result:"
msgstr "以前は\ &quot;リソース\&quot;として知られていたピラミッドの概念は、現在 &quot;資産&quot;として知られています。結果として："

#: ../../../HISTORY.txt:4988
msgid ""
"The (non-API) module previously known as ``pyramid.resource`` is now "
"known as ``pyramid.asset``."
msgstr "以前は `` pyramid.resource``として知られていた（非API）モジュールは `` pyramid.asset``と呼ばれています。"

#: ../../../HISTORY.txt:4991
msgid ""
"All docs that previously referred to \"resource specification\" now refer"
" to \"asset specification\"."
msgstr "以前は\ &quot;リソース指定\&quot;を参照していたすべてのドキュメントが\ &quot;資産指定\&quot;を参照しています。"

#: ../../../HISTORY.txt:4994
msgid "The following API changes were made::"
msgstr "次のAPI変更が行われました::"

#: ../../../HISTORY.txt:5002
msgid ""
"The ZCML directive previously known as ``resource`` is now known as "
"``asset``."
msgstr "以前は `` resource``として知られていたZCMLディレクティブは `` asset``と呼ばれています。"

#: ../../../HISTORY.txt:5005
msgid ""
"The setting previously known as ``BFG_RELOAD_RESOURCES`` (envvar) or "
"``reload_resources`` (config file) is now known, respectively, as "
"``PYRAMID_RELOAD_ASSETS`` and ``reload_assets``."
msgstr "以前は `` BFG_RELOAD_RESOURCES``（envvar）または `` reload_resources``（configファイル）として知られていた設定は、それぞれ `` PYRAMID_RELOAD_ASSETS``と `` reload_assets``として知られています。"

#: ../../../HISTORY.txt:5015
msgid ""
"Make it possible to succesfully run all tests via ``nosetests`` command "
"directly (rather than indirectly via ``python setup.py nosetests``)."
msgstr "すべてのテストを（ `` python setup.py nosetests``を介して間接的にではなく）直接 `` nosetests``コマンドで直接実行することができます。"

#: ../../../HISTORY.txt:5018
msgid ""
"When a configuration conflict is encountered during scanning, the "
"conflict exception now shows the decorator information that caused the "
"conflict."
msgstr "スキャン中に構成の競合が発生すると、競合の例外は、競合の原因となったデコレータ情報を表示するようになりました。"

#: ../../../HISTORY.txt:5024
msgid ""
"Added ``debug_routematch`` configuration setting that logs matched routes"
" (including the matchdict and predicates)."
msgstr "マッチしたルート（matchdictと述語を含む）を記録する `` debug_routematch``設定を追加しました。"

#: ../../../HISTORY.txt:5027
msgid ""
"The name ``registry`` is now available in a ``pshell`` environment by "
"default.  It is the application registry object."
msgstr "`` registry``という名前はデフォルトで `` pshell``環境で利用できるようになりました。これはアプリケーションレジストリオブジェクトです。"

#: ../../../HISTORY.txt:5031
msgid "Environment"
msgstr "環境"

#: ../../../HISTORY.txt:5033
msgid ""
"All environment variables which used to be prefixed with ``BFG_`` are now"
" prefixed with ``PYRAMID_`` (e.g. ``BFG_DEBUG_NOTFOUND`` is now "
"``PYRAMID_DEBUG_NOTFOUND``)"
msgstr "接頭辞 `` BFG_``を使用していたすべての環境変数は、 `` PYRAMID_``の接頭辞になりました（例えば `` BFG_DEBUG_NOTFOUND``は `` PYRAMID_DEBUG_NOTFOUND``です）"

#: ../../../HISTORY.txt:5040
msgid ""
"Added \"Debugging Route Matching\" section to the urldispatch narrative "
"documentation chapter."
msgstr "urldispatchナレーション文書の章に\ &quot;Debugging Route Matching \&quot;セクションを追加しました。"

#: ../../../HISTORY.txt:5043
msgid ""
"Added reference to ``PYRAMID_DEBUG_ROUTEMATCH`` envvar and "
"``debug_routematch`` config file setting to the Environment narrative "
"docs chapter."
msgstr "`` PYRAMID_DEBUG_ROUTEMATCH`` envvarと `` debug_routematch``設定ファイルの設定をEnvironment Narrative Docs章に追加しました。"

#: ../../../HISTORY.txt:5046
msgid ""
"Changed \"Project\" chapter slightly to expand on use of ``paster "
"pshell``."
msgstr "\ &quot;Project \&quot;の章を `` paster pshell``の使用を拡張するために少し変更しました。"

#: ../../../HISTORY.txt:5048
msgid ""
"Direct Jython users to Mako rather than Jinja2 in \"Install\" narrative "
"chapter."
msgstr "Jythonのユーザーは、「インストール」の説明の章でJinja2ではなくMakoに指示してください。"

#: ../../../HISTORY.txt:5051
msgid ""
"Many changes to support terminological renaming of \"model\" to "
"\"resource\" and \"resource\" to \"asset\"."
msgstr "\ &quot;モデル\&quot;から\ &quot;リソース\&quot;、\ &quot;リソース\&quot;から\ &quot;資産\&quot;への用語の名前変更をサポートする多くの変更。"

#: ../../../HISTORY.txt:5054
msgid ""
"Added an example of ``WebTest`` functional testing to the testing "
"narrative chapter."
msgstr "テストの説明の章に `` WebTest``機能テストの例を追加しました。"

#: ../../../HISTORY.txt:5057
msgid ""
"Rearranged chapter ordering by popular demand (URL dispatch first, then "
"traversal).  Put hybrid chapter after views chapter."
msgstr "一般的な要求（URLディスパッチ、トラバース）によるチャプター順の並べ替え。ビューの章の後にハイブリッドの章を置く。"

#: ../../../HISTORY.txt:5060
msgid ""
"Split off \"Renderers\" as its own chapter from \"Views\" chapter in "
"narrative documentation."
msgstr "物語のドキュメンテーションの\ &quot;Views \&quot;章から\ &quot;Renderers \&quot;を独自の章として分割します。"

#: ../../../HISTORY.txt:5066
msgid "Added ``debug_routematch = false`` to all paster templates."
msgstr "すべてのペーストテンプレートに `` debug_routematch = false``を追加しました。"

#: ../../../HISTORY.txt:5071
msgid "Depend on Venusian >= 0.5 (for scanning conflict exception decoration)."
msgstr "Venusian&gt; = 0.5（スキャン競合例外装飾用）に依存します。"

#: ../../../HISTORY.txt:5074
msgid "1.0a6 (2010-12-15)"
msgstr "1.0a6（2010-12-15）"

#: ../../../HISTORY.txt:5079
msgid ""
"1.0a5 introduced a bug when ``pyramid.config.Configurator.scan`` was used"
" without a ``package`` argument (e.g. ``config.scan()`` as opposed to "
"``config.scan('packagename')``.  The symptoms were: lots of deprecation "
"warnings printed to the console about imports of deprecated Pyramid "
"functions and classes and non-detection of view callables decorated with "
"``view_config`` decorators.  This has been fixed."
msgstr "1.0a5は `` pyramid.config.Configurator.scan``が `` config.scan（ &#39;packagename&#39;）とは対照的に、 `` package``引数（ `` config.scan（） `` ） ``。症状は次のとおりです：廃止予定のピラミッド関数とクラスのインポートについてのコンソールへの非推奨警告の多く、 `` view_config``デコレータで装飾されたビュー呼び出し可能項目の非検出。"

#: ../../../HISTORY.txt:5086
msgid ""
"Tests now pass on Windows (no bugs found, but a few tests in the test "
"suite assumed UNIX path segments in filenames)."
msgstr "テストは現在Windows上で行われます（バグは見つかりませんが、テストスイート内のいくつかのテストではファイル名にUNIXパスセグメントが仮定されています）。"

#: ../../../HISTORY.txt:5092
msgid ""
"If you followed it to-the-letter, the ZODB+Traversal Wiki tutorial would "
"instruct you to run a test which would fail because the view callable "
"generated by the ``pyramid_zodb`` tutorial used a one-arg view callable, "
"but the test in the sample code used a two-arg call."
msgstr "ZODB + Traversal Wikiチュートリアルでは、「pyramid_zodb」チュートリアルで生成されたビュー呼び出し可能関数が呼び出し可能な1つのビューを使用していたため、失敗するテストを実行するように指示しましたが、サンプルコードでは、2引数呼び出しを使用していました。"

#: ../../../HISTORY.txt:5097
msgid ""
"Updated ZODB+Traversal tutorial setup.py of all steps to match what's "
"generated by ``pyramid_zodb``."
msgstr "`` pyramid_zodb``で生成されたものと一致するように、すべてのステップのZODB + Traversalチュートリアルsetup.pyを更新しました。"

#: ../../../HISTORY.txt:5100
msgid ""
"Fix reference to ``repoze.bfg.traversalwrapper`` in \"Models\" chapter "
"(point at ``pyramid_traversalwrapper`` instead)."
msgstr "\ &quot;Models \&quot;章の `` repoze.bfg.traversalwrapper``への参照を修正してください（代わりに `` pyramid_traversalwrapper``を参照）。"

#: ../../../HISTORY.txt:5104
msgid "1.0a5 (2010-12-14)"
msgstr "1.0a5（2010-12-14）"

#: ../../../HISTORY.txt:5109
msgid ""
"Add a ``handler`` ZCML directive.  This directive does the same thing as "
"``pyramid.configuration.add_handler``."
msgstr "``ハンドラ `` ZCMLディレクティブを追加してください。このディレクティブは `` pyramid.configuration.add_handler``と同じことをします。"

#: ../../../HISTORY.txt:5112
msgid ""
"A new module named ``pyramid.config`` was added.  It subsumes the duties "
"of the older ``pyramid.configuration`` module."
msgstr "`` pyramid.config``という名前の新しいモジュールが追加されました。それは古い `` pyramid.configuration``モジュールの任務を包含しています。"

#: ../../../HISTORY.txt:5115
msgid ""
"The new ``pyramid.config.Configurator` class has API methods that the "
"older ``pyramid.configuration.Configurator`` class did not: "
"``with_context`` (a classmethod), ``include``, ``action``, and "
"``commit``.  These methods exist for imperative application extensibility"
" purposes."
msgstr "新しい `` pyramid.config.Configurator`クラスには、以前の `` pyramid.configuration.Configurator``クラスがしなかったAPIメソッドがあります： `` with_context``（クラスメソッド）、 `` include``、 ``アクション`、` `commit``のようなものです。これらの方法は、必須のアプリケーション拡張性のために存在します。"

#: ../../../HISTORY.txt:5120
msgid ""
"The ``pyramid.testing.setUp`` function now accepts an ``autocommit`` "
"keyword argument, which defaults to ``True``.  If it is passed ``False``,"
" the Config object returned by ``setUp`` will be a non-autocommiting "
"Config object."
msgstr "`` pyramid.testing.setUp``関数は、 `` autocommit``キーワード引数を受け付けます。デフォルトは `` True``です。 `` False``が渡された場合、 `` setUp``によって返されるConfigオブジェクトは、自動コミットされないConfigオブジェクトになります。"

#: ../../../HISTORY.txt:5125
msgid "Add logging configuration to all paster templates."
msgstr "すべてのペースターテンプレートにロギング設定を追加します。"

#: ../../../HISTORY.txt:5127
msgid ""
"``pyramid_alchemy``, ``pyramid_routesalchemy``, and ``pylons_sqla`` "
"paster templates now use idiomatic SQLAlchemy configuration in their "
"respective ``.ini`` files and Python code."
msgstr "`` pyramid_alchemy``、 `` pyramid_routesalchemy``、 `` pylons_sqla``のペーストテンプレートはそれぞれ、 `` .ini``ファイルとPythonコードで慣用的なSQLAlchemy設定を使用します。"

#: ../../../HISTORY.txt:5131
msgid ""
"``pyramid.testing.DummyRequest`` now has a class variable, "
"``query_string``, which defaults to the empty string."
msgstr "`` pyramid.testing.DummyRequest``にはクラス変数 `` query_string``があります。デフォルトは空文字列です。"

#: ../../../HISTORY.txt:5134
msgid ""
"Add support for json on GAE by catching NotImplementedError and importing"
" simplejson from django.utils."
msgstr "NotImplementedErrorをキャッチし、django.utilsからsimplejsonをインポートすることにより、GAE上のjsonのサポートを追加します。"

#: ../../../HISTORY.txt:5137
msgid ""
"The Mako renderer now accepts a resource specification for "
"``mako.module_directory``."
msgstr "Makoレンダラは、 `` mako.module_directory``のリソース指定を受け付けるようになりました。"

#: ../../../HISTORY.txt:5140
msgid ""
"New boolean Mako settings variable ``mako.strict_undefined``.  See `Mako "
"Context Variables <http://www.makotemplates.org/docs/runtime.html"
"#context-variables>`_ for its meaning."
msgstr "新しいブール値のMako設定変数 `` mako.strict_undefined``。 `Makoのコンテキスト変数<http://www.makotemplates.org/docs/runtime.html#context-variables>その意味のために `_。"

#: ../../../HISTORY.txt:5148
msgid "Depend on Mako 0.3.6+ (we now require the ``strict_undefined`` feature)."
msgstr "Mako 0.3.6+に依存しています（これには `` strict_undefined``機能が必要です）。"

#: ../../../HISTORY.txt:5153
msgid ""
"When creating a Configurator from within a ``paster pshell`` session, you"
" were required to pass a ``package`` argument although ``package`` is not"
" actually required.  If you didn't pass ``package``, you would receive an"
" error something like ``KeyError: '__name__'`` emanating from the "
"``pyramid.path.caller_module`` function.  This has now been fixed."
msgstr "`` paster pshell``セッションの中からConfiguratorを作成するときには、 `` package``は実際には必要ないものの、 `` package``引数を渡さなければなりませんでした。 `` package``を渡さなかった場合、 `` Pyramid.path.caller_module``関数から出てくる `` KeyError： &#39;__name __&#39; ``のようなエラーを受け取ります。これは修正されました。"

#: ../../../HISTORY.txt:5159
msgid ""
"The ``pyramid_routesalchemy`` paster template's unit tests failed "
"(``AssertionError: 'SomeProject' != 'someproject'``).  This is fixed."
msgstr "`` pyramid_routesalchemy``ペーストテンプレートのユニットテストは失敗しました（ `` AssertionError： &#39;SomeProject&#39;！= &#39;someproject&#39;``）。これは修正されました。"

#: ../../../HISTORY.txt:5162
msgid ""
"Make default renderer work (renderer factory registered with no name, "
"which is active for every view unless the view names a specific "
"renderer)."
msgstr "既定のレンダラーが機能するようにします（レンダラーファクトリは名前なしで登録されます。ビューは特定のレンダラーに名前を付けない限りすべてのビューでアクティブです）。"

#: ../../../HISTORY.txt:5165
msgid ""
"The Mako renderer did not properly turn the ``mako.imports``, "
"``mako.default_filters``, and ``mako.imports`` settings into lists."
msgstr "Makoレンダラは `` mako.imports``、 `` mako.default_filters``、 `` mako.imports``の設定をリストに正しく戻さなかった。"

#: ../../../HISTORY.txt:5168
msgid ""
"The Mako renderer did not properly convert the ``mako.error_handler`` "
"setting from a dotted name to a callable."
msgstr "Makoレンダラーは、 `` mako.error_handler``の設定をドット付きの名前から呼び出し可能なものに正しく変換しませんでした。"

#: ../../../HISTORY.txt:5174
msgid ""
"Merged many wording, readability, and correctness changes to narrative "
"documentation chapters from https://github.com/caseman/pyramid (up to and"
" including \"Models\" narrative chapter)."
msgstr "https://github.com/caseman/pyramid（「モデル」の説明の章まで）のナレーション文書の章に、多くの言葉遣い、読みやすさ、正確さの変更を加えました。"

#: ../../../HISTORY.txt:5178
msgid ""
"\"Sample Applications\" section of docs changed to note existence of "
"Cluegun, Shootout and Virginia sample applications, ported from their "
"repoze.bfg origin packages."
msgstr "\ &quot;サンプルアプリケーション\&quot;セクションは、repoze.bfgの起源パッケージから移植されたCluegun、Shootout、およびVirginiaサンプルアプリケーションの存在を記録するように変更されました。"

#: ../../../HISTORY.txt:5182
msgid ""
"SQLAlchemy+URLDispatch tutorial updated to integrate changes to "
"``pyramid_routesalchemy`` template."
msgstr "SQLAlchemy + URLDispatchチュートリアルを更新し、 &quot;pyramid_routesalchemy``テンプレートへの変更を統合しました。"

#: ../../../HISTORY.txt:5185
msgid ""
"Add ``pyramid.interfaces.ITemplateRenderer`` interface to Interfaces API "
"chapter (has ``implementation()`` method, required to be used when "
"getting at Chameleon macros)."
msgstr "Interfaces APIの章に `` pyramid.interfaces.ITemplateRenderer``インターフェースを追加してください（ `` implementation（） ``メソッドを持っています、カメレオンのマクロを使うときに使う必要があります）。"

#: ../../../HISTORY.txt:5189
msgid ""
"Add a \"Modifying Package Structure\" section to the project narrative "
"documentation chapter (explain turning a module into a package)."
msgstr "プロジェクト物語のドキュメンテーションの章（モジュールをパッケージに変換することについて説明する）に\ &quot;パッケージ構造の変更&quot;セクションを追加してください。"

#: ../../../HISTORY.txt:5192
msgid ""
"Documentation was added for the new ``handler`` ZCML directive in the "
"ZCML section."
msgstr "ZCMLセクションの新しい `` handler`` ZCMLディレクティブのためのドキュメントが追加されました。"

#: ../../../HISTORY.txt:5198
msgid ""
"``pyramid.configuration.Configurator`` is now deprecated.  Use "
"``pyramid.config.Configurator``, passing its constructor "
"``autocommit=True`` instead.  The ``pyramid.configuration.Configurator`` "
"alias will live for a long time, as every application uses it, but its "
"import now issues a deprecation warning.  The "
"``pyramid.config.Configurator`` class has the same API as "
"``pyramid.configuration.Configurator`` class, which it means to replace, "
"except by default it is a *non-autocommitting* configurator. The now-"
"deprecated ``pyramid.configuration.Configurator`` will autocommit every "
"time a configuration method is called."
msgstr "`` pyramid.configuration.Configurator``は廃止予定です。 `` pyramid.config.Configurator``を使い、コンストラクタ `` autocommit = True``を渡してください。 `` pyramid.configuration.Configurator``エイリアスは、すべてのアプリケーションが使用しているので、長い間存続しますが、インポートによって非推奨警告が発行されるようになりました。 `` pyramid.config.Configurator``クラスは `` pyramid.configuration.Configurator``クラスと同じAPIを持っています。デフォルトでは非自動コミット*コンフィグレータですが、置き換えられることを意味します。現在廃止された `` pyramid.configuration.Configurator``は、設定メソッドが呼び出されるたびに自動的にコミットします。"

#: ../../../HISTORY.txt:5209
msgid ""
"The ``pyramid.configuration`` module remains, but it is deprecated.  Use "
"``pyramid.config`` instead."
msgstr "`` pyramid.configuration``モジュールは残っていますが、非推奨です。代わりに `` pyramid.config``を使用してください。"

#: ../../../HISTORY.txt:5213
msgid "1.0a4 (2010-11-21)"
msgstr "1.0a4（2010-11-21）"

#: ../../../HISTORY.txt:5218
msgid ""
"URL Dispatch now allows for replacement markers to be located anywhere in"
" the pattern, instead of immediately following a ``/``."
msgstr "URL Dispatchでは、置き換えマーカーを `` / ``の直後ではなく、パターン内のどこにでも配置できるようになりました。"

#: ../../../HISTORY.txt:5221
msgid ""
"URL Dispatch now uses the form ``{marker}`` to denote a replace marker in"
" the route pattern instead of ``:marker``. The old colon-style marker "
"syntax is still accepted for backwards compatibility. The new format "
"allows a regular expression for that marker location to be used instead "
"of the default ``[^/]+``, for example ``{marker:\\d+}`` is now valid to "
"require the marker to be digits."
msgstr "URL Dispatchは `` {marker} ``の代わりにルートパターンの置換マーカーを示すために `` {marker} ``という形式を使用するようになりました。古いコロンスタイルのマーカー構文は、下位互換性のために受け入れられます。新しいフォーマットでは、デフォルトの `` [^ /] + ``の代わりにそのマーカ位置の正規表現を使うことができます。例えば、 `` {marker：\\ d +} ``はマーカを数字。"

#: ../../../HISTORY.txt:5228
msgid ""
"Add a ``pyramid.url.route_path`` API, allowing folks to generate relative"
" URLs.  Calling ``route_path`` is the same as calling "
"``pyramid.url.route_url`` with the argument ``_app_url`` equal to the "
"empty string."
msgstr "人々に相対URLを生成させる `` pyramid.url.route_path`` APIを追加してください。 `` route_path``を呼び出すことは、 `` pyramid.url.route_url``を引数 `` _app_url``を空文字列と同じように呼ぶことと同じです。"

#: ../../../HISTORY.txt:5233
msgid ""
"Add a ``pyramid.request.Request.route_path`` API.  This is a convenience "
"method of the request which calls ``pyramid.url.route_url``."
msgstr "`` pyramid.request.Request.route_path`` APIを追加してください。これは `` pyramid.url.route_url``を呼び出す要求の便利なメソッドです。"

#: ../../../HISTORY.txt:5236
msgid ""
"Make test suite pass on Jython (requires PasteScript trunk, presumably to"
" be 1.7.4)."
msgstr "テストスイートをJythonに渡すようにします（PasteScriptトランクが必要です（おそらく1.7.4）。"

#: ../../../HISTORY.txt:5239
msgid "Make test suite pass on PyPy (Chameleon doesn't work)."
msgstr "テストスイートをPyPyに渡します（カメレオンは動作しません）。"

#: ../../../HISTORY.txt:5241
msgid ""
"Surrounding application configuration with ``config.begin()`` and "
"``config.end()`` is no longer necessary.  All paster templates have been "
"changed to no longer call these functions."
msgstr "`` config.begin（） ``と `` config.end（） ``を使って周囲のアプリケーション構成を行う必要はなくなりました。すべてのペーステンプレートが変更され、これらの機能は呼び出されなくなりました。"

#: ../../../HISTORY.txt:5245
msgid ""
"Fix configurator to not convert ``ImportError`` to ``ConfigurationError``"
" if the import that failed was unrelated to the import requested via a "
"dotted name when resolving dotted names (such as view dotted names)."
msgstr "もし失敗したインポートが、ドット付きの名前を解決するときにドット付きの名前を使って要求されたインポートとは無関係ならば（例えば、ドット付きの名前を表示する）、Configuratorが `` ImportError``を `` ConfigurationError``に変換しないように修正しました。"

#: ../../../HISTORY.txt:5252
msgid ""
"SQLAlchemy+URLDispatch and ZODB+Traversal tutorials have been updated to "
"not call ``config.begin()`` or ``config.end()``."
msgstr "SQLAlchemy + URLDispatchとZODB + Traversalチュートリアルは、 `` config.begin（） ``や `` config.end（） ``を呼び出さないように更新されました。"

#: ../../../HISTORY.txt:5258
msgid ""
"Add deprecation warnings to import of ``pyramid.chameleon_text`` and "
"``pyramid.chameleon_zpt`` of ``get_renderer``, ``get_template``, "
"``render_template``, and ``render_template_to_response``."
msgstr "`` get_renderer``、 `` get_template``、 `` render_template``、 `` render_template_to_response``の `` pyramid.chameleon_text``と `` pyramid.chameleon_zpt``をインポートするには廃止予定警告を追加してください。"

#: ../../../HISTORY.txt:5262
msgid ""
"Add deprecation warning for import of ``pyramid.zcml.zcml_configure`` and"
" ``pyramid.zcml.file_configure``."
msgstr "`` pyramid.zcml.zcml_configure``と `` pyramid.zcml.file_configure``のインポートのための廃止予定警告を追加してください。"

#: ../../../HISTORY.txt:5265
msgid ""
"The ``pyramid_alchemy`` paster template had a typo, preventing an import "
"from working."
msgstr ""

#: ../../../HISTORY.txt:5268
msgid ""
"Fix apparent failures when calling ``pyramid.traversal.find_model(root, "
"path)`` or ``pyramid.traversal.traverse(path)`` when ``path`` is "
"(erroneously) a Unicode object. The user is meant to pass these APIs a "
"string object, never a Unicode object.  In practice, however, users "
"indeed pass Unicode.  Because the string that is passed must be ASCII "
"encodeable, now, if they pass a Unicode object, its data is eagerly "
"converted to an ASCII string rather than being passed along to downstream"
" code as a convenience to the user and to prevent puzzling second-order "
"failures from cropping up (all failures will occur within "
"``pyramid.traversal.traverse`` rather than later down the line as the "
"result of calling e.g. ``traversal_path``)."
msgstr ""

#: ../../../HISTORY.txt:5283
msgid ""
"The ``pyramid.testing.zcml_configure`` API has been removed.  It had been"
" advertised as removed since repoze.bfg 1.2a1, but hadn't actually been."
msgstr ""

#: ../../../HISTORY.txt:5289
msgid ""
"The ``pyramid.settings.get_settings`` API is now deprecated.  Use "
"``pyramid.threadlocals.get_current_registry().settings`` instead or use "
"the ``settings`` attribute of the registry available from the request "
"(``request.registry.settings``)."
msgstr ""

#: ../../../HISTORY.txt:5297
msgid ""
"Removed ``zodbsessions`` tutorial chapter.  It's still useful, but we now"
" have a SessionFactory abstraction which competes with it, and "
"maintaining documentation on both ways to do it is a distraction."
msgstr ""

#: ../../../HISTORY.txt:5304
msgid ""
"Replace Twill with WebTest in internal integration tests (avoid "
"deprecation warnings generated by Twill)."
msgstr ""

#: ../../../HISTORY.txt:5308
msgid "1.0a3 (2010-11-16)"
msgstr ""

#: ../../../HISTORY.txt:5313
msgid ""
"Added Mako TemplateLookup settings for ``mako.error_handler``, "
"``mako.default_filters``, and ``mako.imports``."
msgstr ""

#: ../../../HISTORY.txt:5316
msgid ""
"Normalized all paster templates: each now uses the name ``main`` to "
"represent the function that returns a WSGI application, each now uses "
"WebError, each now has roughly the same shape of development.ini style."
msgstr ""

#: ../../../HISTORY.txt:5320
msgid ""
"Added class vars ``matchdict`` and ``matched_route`` to "
"``pyramid.request.Request``.  Each is set to ``None``."
msgstr ""

#: ../../../HISTORY.txt:5323
msgid "New API method: ``pyramid.settings.asbool``."
msgstr ""

#: ../../../HISTORY.txt:5325
msgid ""
"New API methods for ``pyramid.request.Request``: ``model_url``, "
"``route_url``, and ``static_url``.  These are simple passthroughs for "
"their respective functions in ``pyramid.url``."
msgstr ""

#: ../../../HISTORY.txt:5329
msgid ""
"The ``settings`` object which used to be available only when "
"``request.settings.get_settings`` was called is now available as "
"``registry.settings`` (e.g. ``request.registry.settings`` in view code)."
msgstr ""

#: ../../../HISTORY.txt:5336
msgid ""
"The pylons_* paster templates erroneously used the ``{squiggly}`` routing"
" syntax as the pattern supplied to ``add_route``.  This style of routing "
"is not supported.  They were replaced with ``:colon`` style route "
"patterns."
msgstr ""

#: ../../../HISTORY.txt:5340
msgid ""
"The pylons_* paster template used the same string "
"(``your_app_secret_string``) for the ``session.secret`` setting in the "
"generated ``development.ini``.  This was a security risk if left "
"unchanged in a project that used one of the templates to produce "
"production applications.  It now uses a randomly generated string."
msgstr ""

#: ../../../HISTORY.txt:5349
msgid ""
"ZODB+traversal wiki (``wiki``) tutorial updated due to changes to "
"``pyramid_zodb`` paster template."
msgstr ""

#: ../../../HISTORY.txt:5352
msgid ""
"SQLAlchemy+urldispach wiki (``wiki2``) tutorial updated due to changes to"
" ``pyramid_routesalchemy`` paster template."
msgstr ""

#: ../../../HISTORY.txt:5355
msgid ""
"Documented the ``matchdict`` and ``matched_route`` attributes of the "
"request object in the Request API documentation."
msgstr ""

#: ../../../HISTORY.txt:5361
msgid ""
"Obtaining the ``settings`` object via "
"``registry.{get|query}Utility(ISettings)`` is now deprecated.  Instead, "
"obtain the ``settings`` object via the ``registry.settings`` attribute.  "
"A backwards compatibility shim was added to the registry object to "
"register the settings object as an ISettings utility when "
"``setattr(registry, 'settings', foo)`` is called, but it will be removed "
"in a later release."
msgstr ""

#: ../../../HISTORY.txt:5368
msgid ""
"Obtaining the ``settings`` object via ``pyramid.settings.get_settings`` "
"is now deprecated.  Obtain it as the ``settings`` attribute of the "
"registry now (obtain the registry via "
"``pyramid.threadlocal.get_registry`` or as ``request.registry``)."
msgstr ""

#: ../../../HISTORY.txt:5376
msgid ""
"Internal: ZCML directives no longer call get_current_registry() if "
"there's a ``registry`` attribute on the ZCML context (kill off use of "
"threadlocals)."
msgstr ""

#: ../../../HISTORY.txt:5380
msgid ""
"Internal: Chameleon template renderers now accept two arguments: ``path``"
" and ``lookup``.  ``Lookup`` will be an instance of a lookup class which "
"supplies (late-bound) arguments for debug, reload, and translate.  Any "
"third-party renderers which use (the non-API) function "
"``pyramid.renderers.template_renderer_factory`` will need to adjust their"
" implementations to obey the new callback argument list.  This change was"
" to kill off inappropriate use of threadlocals."
msgstr ""

#: ../../../HISTORY.txt:5389
msgid "1.0a2 (2010-11-09)"
msgstr ""

#: ../../../HISTORY.txt:5394
msgid ""
"All references to events by interface (e.g. "
"``pyramid.interfaces.INewRequest``) have been changed to reference their "
"concrete classes (e.g. ``pyramid.events.NewRequest``) in documentation "
"about making subscriptions."
msgstr ""

#: ../../../HISTORY.txt:5399
msgid ""
"All references to Pyramid-the-application were changed from mod-`pyramid`"
" to app-`Pyramid`.  A custom role setting was added to ``docs/conf.py`` "
"to allow for this.  (internal)"
msgstr ""

#: ../../../HISTORY.txt:5404
msgid "1.0a1 (2010-11-05)"
msgstr ""

#: ../../../HISTORY.txt:5407
msgid "Features (delta from BFG 1.3)"
msgstr ""

#: ../../../HISTORY.txt:5409
msgid ""
"Mako templating renderer supports resource specification format for "
"template lookups and within Mako templates. Absolute filenames must be "
"used in Pyramid to avoid this lookup process."
msgstr ""

#: ../../../HISTORY.txt:5413
msgid ""
"Add ``pyramid.httpexceptions`` module, which is a facade for the "
"``webob.exc`` module."
msgstr ""

#: ../../../HISTORY.txt:5416
msgid "Direct built-in support for the Mako templating language."
msgstr ""

#: ../../../HISTORY.txt:5418
msgid ""
"A new configurator method exists: ``add_handler``.  This method adds a "
"Pylons-style \"view handler\" (such a thing used to be called a "
"\"controller\" in Pylons 1.0)."
msgstr ""

#: ../../../HISTORY.txt:5422
msgid "New argument to configurator: ``session_factory``."
msgstr ""

#: ../../../HISTORY.txt:5424
msgid "New method on configurator: ``set_session_factory``"
msgstr ""

#: ../../../HISTORY.txt:5426
msgid ""
"Using ``request.session`` now returns a (dictionary-like) session object "
"if a session factory has been configured."
msgstr ""

#: ../../../HISTORY.txt:5429
msgid ""
"The request now has a new attribute: ``tmpl_context`` for benefit of "
"Pylons users."
msgstr ""

#: ../../../HISTORY.txt:5432
msgid ""
"The decorator previously known as ``pyramid.view.bfg_view`` is now known "
"most formally as ``pyramid.view.view_config`` in docs and paster "
"templates.  An import of ``pyramid.view.bfg_view``, however, will "
"continue to work \"forever\"."
msgstr ""

#: ../../../HISTORY.txt:5437
msgid ""
"New API methods in ``pyramid.session``: ``signed_serialize`` and "
"``signed_deserialize``."
msgstr ""

#: ../../../HISTORY.txt:5440
msgid ""
"New interface: ``pyramid.interfaces.IRendererInfo``.  An object of this "
"type is passed to renderer factory constructors (see \"Backwards "
"Incompatibilities\")."
msgstr ""

#: ../../../HISTORY.txt:5444
msgid ""
"New event type: ``pyramid.interfaces.IBeforeRender``.  An object of this "
"type is sent as an event before a renderer is invoked (but after the "
"application-level renderer globals factory added via "
"``pyramid.configurator.configuration.set_renderer_globals_factory``, if "
"any, has injected its own keys).  Applications may now subscribe to the "
"``IBeforeRender`` event type in order to introspect the and modify the "
"set of renderer globals before they are passed to a renderer.  The event "
"object iself has a dictionary-like interface that can be used for this "
"purpose.  For example::"
msgstr ""

#: ../../../HISTORY.txt:5461
msgid ""
"If a subscriber attempts to add a key that already exist in the renderer "
"globals dictionary, a ``KeyError`` is raised.  This limitation is due to "
"the fact that subscribers cannot be ordered relative to each other.  The "
"set of keys added to the renderer globals dictionary by all subscribers "
"and app-level globals factories must be unique."
msgstr ""

#: ../../../HISTORY.txt:5467
msgid ""
"New class: ``pyramid.response.Response``.  This is a pure facade for "
"``webob.Response`` (old code need not change to use this facade, it's "
"existence is mostly for vanity and documentation-generation purposes)."
msgstr ""

#: ../../../HISTORY.txt:5471
msgid ""
"All preexisting paster templates (except ``zodb``) now use \"imperative\""
" configuration (``starter``, ``routesalchemy``, ``alchemy``)."
msgstr ""

#: ../../../HISTORY.txt:5474
msgid ""
"A new paster template named ``pyramid_starter_zcml`` exists, which uses "
"declarative configuration."
msgstr ""

#: ../../../HISTORY.txt:5478
msgid "Documentation (delta from BFG 1.3)"
msgstr ""

#: ../../../HISTORY.txt:5480
msgid "Added a ``pyramid.httpexceptions`` API documentation chapter."
msgstr ""

#: ../../../HISTORY.txt:5482
msgid "Added a ``pyramid.session`` API documentation chapter."
msgstr ""

#: ../../../HISTORY.txt:5484
msgid "Added a ``Session Objects`` narrative documentation chapter."
msgstr ""

#: ../../../HISTORY.txt:5486
msgid "Added an API chapter for the ``pyramid.personality`` module."
msgstr ""

#: ../../../HISTORY.txt:5488
msgid "Added an API chapter for the ``pyramid.response`` module."
msgstr ""

#: ../../../HISTORY.txt:5490
msgid ""
"All documentation which previously referred to ``webob.Response`` now "
"uses ``pyramid.response.Response`` instead."
msgstr ""

#: ../../../HISTORY.txt:5493
msgid ""
"The documentation has been overhauled to use imperative configuration, "
"moving declarative configuration (ZCML) explanations to a separate "
"narrative chapter ``declarative.rst``."
msgstr ""

#: ../../../HISTORY.txt:5497
msgid ""
"The ZODB Wiki tutorial was updated to take into account changes to the "
"``pyramid_zodb`` paster template."
msgstr ""

#: ../../../HISTORY.txt:5500
msgid ""
"The SQL Wiki tutorial was updated to take into account changes to the "
"``pyramid_routesalchemy`` paster template."
msgstr ""

#: ../../../HISTORY.txt:5504
msgid "Backwards Incompatibilities (with BFG 1.3)"
msgstr ""

#: ../../../HISTORY.txt:5506
msgid ""
"There is no longer an ``IDebugLogger`` registered as a named utility with"
" the name ``repoze.bfg.debug``."
msgstr ""

#: ../../../HISTORY.txt:5509
msgid ""
"The logger which used to have the name of ``repoze.bfg.debug`` now has "
"the name ``pyramid.debug``."
msgstr ""

#: ../../../HISTORY.txt:5512
msgid ""
"The deprecated API ``pyramid.testing.registerViewPermission`` has been "
"removed."
msgstr ""

#: ../../../HISTORY.txt:5515
msgid ""
"The deprecated API named ``pyramid.testing.registerRoutesMapper`` has "
"been removed."
msgstr ""

#: ../../../HISTORY.txt:5518
msgid "The deprecated API named ``pyramid.request.get_request`` was removed."
msgstr ""

#: ../../../HISTORY.txt:5520
msgid "The deprecated API named ``pyramid.security.Unauthorized`` was removed."
msgstr ""

#: ../../../HISTORY.txt:5523
msgid ""
"The deprecated API named ``pyramid.view.view_execution_permitted`` was "
"removed."
msgstr ""

#: ../../../HISTORY.txt:5526
msgid "The deprecated API named ``pyramid.view.NotFound`` was removed."
msgstr ""

#: ../../../HISTORY.txt:5528
msgid "The ``bfgshell`` paster command is now named ``pshell``."
msgstr ""

#: ../../../HISTORY.txt:5530
msgid ""
"The Venusian \"category\" for all built-in Venusian decorators (e.g. "
"``subscriber`` and ``view_config``/``bfg_view``) is now ``pyramid`` "
"instead of ``bfg``."
msgstr ""

#: ../../../HISTORY.txt:5534
msgid ""
"``pyramid.renderers.rendered_response`` function removed; use "
"``render_pyramid.renderers.render_to_response`` instead."
msgstr ""

#: ../../../HISTORY.txt:5537
msgid ""
"Renderer factories now accept a *renderer info object* rather than an "
"absolute resource specification or an absolute path.  The object has the "
"following attributes: ``name`` (the ``renderer=`` value), ``package`` "
"(the 'current package' when the renderer configuration statement was "
"found), ``type``: the renderer type, ``registry``: the current registry, "
"and ``settings``: the deployment settings dictionary."
msgstr ""

#: ../../../HISTORY.txt:5544
msgid ""
"Third-party ``repoze.bfg`` renderer implementations that must be ported "
"to Pyramid will need to account for this."
msgstr ""

#: ../../../HISTORY.txt:5547
msgid ""
"This change was made primarily to support more flexible Mako template "
"rendering."
msgstr ""

#: ../../../HISTORY.txt:5550
msgid ""
"The presence of the key ``repoze.bfg.message`` in the WSGI environment "
"when an exception occurs is now deprecated.  Instead, code which relies "
"on this environ value should use the ``exception`` attribute of the "
"request (e.g. ``request.exception[0]``) to retrieve the message."
msgstr ""

#: ../../../HISTORY.txt:5555
msgid ""
"The values ``bfg_localizer`` and ``bfg_locale_name`` kept on the request "
"during internationalization for caching purposes were never APIs.  These "
"however have changed to ``localizer`` and ``locale_name``, respectively."
msgstr ""

#: ../../../HISTORY.txt:5559
msgid ""
"The default ``cookie_name`` value of the ``authtktauthenticationpolicy`` "
"ZCML now defaults to ``auth_tkt`` (it used to default to "
"``repoze.bfg.auth_tkt``)."
msgstr ""

#: ../../../HISTORY.txt:5562
msgid ""
"The default ``cookie_name`` value of the "
"``pyramid.authentication.AuthTktAuthenticationPolicy`` constructor now "
"defaults to ``auth_tkt`` (it used to default to ``repoze.bfg.auth_tkt``)."
msgstr ""

#: ../../../HISTORY.txt:5566
msgid ""
"The ``request_type`` argument to the ``view`` ZCML directive, the "
"``pyramid.configuration.Configurator.add_view`` method, or the "
"``pyramid.view.view_config`` decorator (nee ``bfg_view``) is no longer "
"permitted to be one of the strings ``GET``, ``HEAD``, ``PUT``, ``POST`` "
"or ``DELETE``, and now must always be an interface.  Accepting the "
"method-strings as ``request_type`` was a backwards compatibility strategy"
" servicing repoze.bfg 1.0 applications.  Use the ``request_method`` "
"parameter instead to specify that a view a string request-method "
"predicate."
msgstr ""

#: ../../changes.rst:11
msgid ":mod:`repoze.bfg` Change History (previous name for Pyramid)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2
msgid "1.3b1 (2010-10-25)"
msgstr ""

#: ../../../BFG_HISTORY.txt:7
msgid ""
"The ``paster`` template named ``bfg_routesalchemy`` has been updated to "
"use SQLAlchemy declarative syntax.  Thanks to Ergo^."
msgstr ""

#: ../../../BFG_HISTORY.txt:13
msgid ""
"When a renderer factory could not be found, a misleading error message "
"was raised if the renderer name was not a string."
msgstr ""

#: ../../../BFG_HISTORY.txt:19
msgid ""
"The \"\"bfgwiki2\" (SQLAlchemy + url dispatch) tutorial has been updated "
"slightly.  In particular, the source packages no longer attempt to use a "
"private index, and the recommended Python version is now 2.6.  It was "
"also updated to take into account the changes to the "
"``bfg_routesalchemy`` template used to set up an environment."
msgstr ""

#: ../../../BFG_HISTORY.txt:25
msgid ""
"The \"bfgwiki\" (ZODB + traversal) tutorial has been updated slightly. In"
" particular, the source packages no longer attempt to use a private "
"index, and the recommended Python version is now 2.6."
msgstr ""

#: ../../../BFG_HISTORY.txt:30
msgid "1.3a15 (2010-09-30)"
msgstr ""

#: ../../../BFG_HISTORY.txt:35
msgid ""
"The ``repoze.bfg.traversal.traversal_path`` API now eagerly attempts to "
"encode a Unicode ``path`` into ASCII before attempting to split it and "
"decode its segments.  This is for convenience, effectively to allow a "
"(stored-as-Unicode-in-a-database, or retrieved-as-Unicode-from-a-request-"
"parameter) Unicode path to be passed to ``find_model``, which eventually "
"internally uses the ``traversal_path`` function under the hood.  In "
"version 1.2 and prior, if the ``path`` was Unicode, that Unicode was "
"split on slashes and each resulting segment value was Unicode.  An "
"inappropriate call to the ``decode()`` method of a resulting Unicode path"
" segment could cause a ``UnicodeDecodeError`` to occur even if the "
"Unicode representation of the path contained no 'high order' characters "
"(it effectively did a \"double decode\").  By converting the Unicode path"
" argument to ASCII before we attempt to decode and split, genuine errors "
"will occur in a more obvious place while also allowing us to handle (for "
"convenience) the case that it's a Unicode representation formed entirely "
"from ASCII-compatible characters."
msgstr ""

#: ../../../BFG_HISTORY.txt:54
msgid "1.3a14 (2010-09-14)"
msgstr ""

#: ../../../BFG_HISTORY.txt:59
msgid ""
"If an exception view was registered through the legacy "
"``set_notfound_view`` or ``set_forbidden_view`` APIs, the context sent to"
" the view was incorrect (could be ``None`` inappropriately)."
msgstr ""

#: ../../../BFG_HISTORY.txt:66
msgid "Compatibility with WebOb 1.0."
msgstr ""

#: ../../../BFG_HISTORY.txt:69
msgid "Requirements"
msgstr ""

#: ../../../BFG_HISTORY.txt:71
msgid "Now requires WebOb >= 1.0."
msgstr ""

#: ../../../BFG_HISTORY.txt:76
msgid ""
"Due to changes introduced WebOb 1.0, the "
"``repoze.bfg.request.make_request_ascii`` event subscriber no longer "
"works, so it has been removed.  This subscriber was meant to be used in a"
" deployment so that code written before BFG 0.7.0 could run unchanged.  "
"At this point, such code will need to be rewritten to expect Unicode from"
" ``request.GET``, ``request.POST`` and ``request.params`` or it will need"
" to be changed to use ``request.str_POST``, ``request.str_GET`` and/or "
"``request.str_params`` instead of the non-``str`` versions of same, as "
"the non-``str`` versions of the same APIs always now perform decoding to "
"Unicode."
msgstr ""

#: ../../../BFG_HISTORY.txt:89
msgid "Errata"
msgstr ""

#: ../../../BFG_HISTORY.txt:91
msgid ""
"A prior changelog entry asserted that the ``INewResponse`` event was not "
"sent to listeners if the response was not \"valid\" (if a view or "
"renderer returned a response object that did not have a "
"status/headers/app_iter).  This is not true in this release, nor was it "
"true in 1.3a13."
msgstr ""

#: ../../../BFG_HISTORY.txt:98
msgid "1.3a13 (2010-09-14)"
msgstr ""

#: ../../../BFG_HISTORY.txt:103
msgid ""
"The ``traverse`` route predicate could not successfully generate a "
"traversal path."
msgstr ""

#: ../../../BFG_HISTORY.txt:109
msgid ""
"In support of making it easier to configure applications which are "
"\"secure by default\", a default permission feature was added.  If "
"supplied, the default permission is used as the permission string to all "
"view registrations which don't otherwise name a permission. These APIs "
"are in support of that:"
msgstr ""

#: ../../../BFG_HISTORY.txt:115
msgid ""
"A new constructor argument was added to the Configurator: "
"``default_permission``."
msgstr ""

#: ../../../BFG_HISTORY.txt:118
msgid "A new method was added to the Configurator: ``set_default_permission``."
msgstr ""

#: ../../../BFG_HISTORY.txt:121
msgid "A new ZCML directive was added: ``default_permission``."
msgstr ""

#: ../../../BFG_HISTORY.txt:123
msgid ""
"Add a new request API: ``request.add_finished_callback``.  Finished "
"callbacks are called by the router unconditionally near the very end of "
"request processing.  See the \"Using Finished Callbacks\" section of the "
"\"Hooks\" narrative chapter of the documentation for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:129
msgid ""
"A ``request.matched_route`` attribute is now added to the request when a "
"route has matched.  Its value is the \"route\" object that matched (see "
"the ``IRoute`` interface within ``repoze.bfg.interfaces`` API "
"documentation for the API of a route object)."
msgstr ""

#: ../../../BFG_HISTORY.txt:135
msgid ""
"The ``exception`` attribute of the request is now set slightly earlier "
"and in a slightly different set of scenarios, for benefit of \"finished "
"callbacks\" and \"response callbacks\".  In previous versions, the "
"``exception`` attribute of the request was not set at all if an exception"
" view was not found.  In this version, the ``request.exception`` "
"attribute is set immediately when an exception is caught by the router, "
"even if an exception view could not be found."
msgstr ""

#: ../../../BFG_HISTORY.txt:144
msgid ""
"The ``add_route`` method of a Configurator now accepts a ``pregenerator``"
" argument.  The pregenerator for the resulting route is called by "
"``route_url`` in order to adjust the set of arguments passed to it by the"
" user for special purposes, such as Pylons 'subdomain' support.  It will "
"influence the URL returned by ``route_url``.  See the "
"``repoze.bfg.interfaces.IRoutePregenerator`` interface for more "
"information."
msgstr ""

#: ../../../BFG_HISTORY.txt:155
msgid ""
"The router no longer sets the value ``wsgiorg.routing_args`` into the "
"environ when a route matches. The value used to be something like ``((), "
"matchdict)``.  This functionality was only ever obliquely referred to in "
"change logs; it was never documented as an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:161
msgid ""
"The ``exception`` attribute of the request now defaults to ``None``. In "
"prior versions, the ``request.exception`` attribute did not exist if an "
"exception was not raised by user code during request processing; it only "
"began existence once an exception view was found."
msgstr ""

#: ../../../BFG_HISTORY.txt:170
msgid ""
"The ``repoze.bfg.interfaces.IWSGIApplicationCreatedEvent`` event "
"interface was renamed to ``repoze.bfg.interfaces.IApplicationCreated``.  "
"Likewise, the ``repoze.bfg.events.WSGIApplicationCreatedEvent`` class was"
" renamed to ``repoze.bfg.events.ApplicationCreated``.  The older aliases "
"will continue to work indefinitely."
msgstr ""

#: ../../../BFG_HISTORY.txt:177
msgid ""
"The ``repoze.bfg.interfaces.IAfterTraversal`` event interface was renamed"
" to ``repoze.bfg.interfaces.IContextFound``.  Likewise, the "
"``repoze.bfg.events.AfterTraversal`` class was renamed to "
"``repoze.bfg.events.ContextFound``.  The older aliases will continue to "
"work indefinitely."
msgstr ""

#: ../../../BFG_HISTORY.txt:183
msgid ""
"References to the WSGI environment values ``bfg.routes.matchdict`` and "
"``bfg.routes.route`` were removed from documentation.  These will stick "
"around internally for several more releases, but it is "
"``request.matchdict`` and ``request.matched_route`` are now the "
"\"official\" way to obtain the matchdict and the route object which "
"resulted in the match."
msgstr ""

#: ../../../BFG_HISTORY.txt:193
msgid "Added documentation for the ``default_permission`` ZCML directive."
msgstr ""

#: ../../../BFG_HISTORY.txt:195
msgid ""
"Added documentation for the ``default_permission`` constructor value and "
"the ``set_default_permission`` method in the Configurator API "
"documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:199
msgid ""
"Added a new section to the \"security\" chapter named \"Setting a Default"
" Permission\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:202
msgid ""
"Document ``renderer_globals_factory`` and ``request_factory`` arguments "
"to Configurator constructor."
msgstr ""

#: ../../../BFG_HISTORY.txt:205
msgid ""
"Added two sections to the \"Hooks\" chapter of the documentation: \"Using"
" Response Callbacks\" and \"Using Finished Callbacks\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:208
msgid ""
"Added documentation of the ``request.exception`` attribute to the "
"``repoze.bfg.request.Request`` API documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:211
msgid ""
"Added glossary entries for \"response callback\" and \"finished "
"callback\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:214
msgid ""
"The \"Request Processing\" narrative chapter has been updated to note "
"finished and response callback steps."
msgstr ""

#: ../../../BFG_HISTORY.txt:217
msgid "New interface in interfaces API documentation: ``IRoutePregenerator``."
msgstr ""

#: ../../../BFG_HISTORY.txt:219
msgid ""
"Added a \"The Matched Route\" section to the URL Dispatch narrative docs "
"chapter, detailing the ``matched_route`` attribute."
msgstr ""

#: ../../../BFG_HISTORY.txt:223
msgid "1.3a12 (2010-09-08)"
msgstr ""

#: ../../../BFG_HISTORY.txt:228
msgid ""
"Fix a bug in ``repoze.bfg.url.static_url`` URL generation: if two "
"resource specifications were used to create two separate static views, "
"but they shared a common prefix, it was possible that ``static_url`` "
"would generate an incorrect URL."
msgstr ""

#: ../../../BFG_HISTORY.txt:233
msgid ""
"Fix another bug in ``repoze.bfg.static_url`` URL generation: too many "
"slashes in generated URL."
msgstr ""

#: ../../../BFG_HISTORY.txt:236
msgid ""
"Prevent a race condition which could result in a ``RuntimeError`` when "
"rendering a Chameleon template that has not already been rendered once.  "
"This would usually occur directly after a restart, when more than one "
"person or thread is trying to execute the same view at the same time: "
"https://bugs.launchpad.net/karl3/+bug/621364"
msgstr ""

#: ../../../BFG_HISTORY.txt:245
msgid ""
"The argument to ``repoze.bfg.configuration.Configurator.add_route`` which"
" was previously called ``path`` is now called ``pattern`` for better "
"explicability.  For backwards compatibility purposes, passing a keyword "
"argument named ``path`` to ``add_route`` will still work indefinitely."
msgstr ""

#: ../../../BFG_HISTORY.txt:251
msgid ""
"The ``path`` attribute to the ZCML ``route`` directive is now named "
"``pattern`` for better explicability.  The older ``path`` attribute will "
"continue to work indefinitely."
msgstr ""

#: ../../../BFG_HISTORY.txt:258
msgid ""
"All narrative, API, and tutorial docs which referred to a route pattern "
"as a ``path`` have now been updated to refer to them as a ``pattern``."
msgstr ""

#: ../../../BFG_HISTORY.txt:262
msgid ""
"The ``repoze.bfg.interfaces`` API documentation page is now rendered via "
"``repoze.sphinx.autointerface``."
msgstr ""

#: ../../../BFG_HISTORY.txt:265
msgid ""
"The URL Dispatch narrative chapter now refers to the ``interfaces`` "
"chapter to explain the API of an ``IRoute`` object."
msgstr ""

#: ../../../BFG_HISTORY.txt:271
msgid ""
"The routesalchemy template has been updated to use ``pattern`` in its "
"route declarations rather than ``path``."
msgstr ""

#: ../../../BFG_HISTORY.txt:277
msgid ""
"``tests_require`` now includes ``repoze.sphinx.autointerface`` as a "
"dependency."
msgstr ""

#: ../../../BFG_HISTORY.txt:283
msgid ""
"Add an API to the ``Configurator`` named ``get_routes_mapper``. This "
"returns an object implementing the ``IRoutesMapper`` interface."
msgstr ""

#: ../../../BFG_HISTORY.txt:286
msgid ""
"The ``repoze.bfg.urldispatch.RoutesMapper`` object now has a "
"``get_route`` method which returns a single Route object or ``None``."
msgstr ""

#: ../../../BFG_HISTORY.txt:290
msgid ""
"A new interface ``repoze.bfg.interfaces.IRoute`` was added.  The "
"``repoze.bfg.urldispatch.Route`` object implements this interface."
msgstr ""

#: ../../../BFG_HISTORY.txt:293
msgid ""
"The canonical attribute for accessing the routing pattern from a route "
"object is now ``pattern`` rather than ``path``."
msgstr ""

#: ../../../BFG_HISTORY.txt:296
msgid ""
"Use ``hash()`` rather than ``id()`` when computing the \"phash\" of a "
"custom route/view predicate in order to allow the custom predicate some "
"control over which predicates are \"equal\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:300
msgid ""
"Use ``response.headerlist.append`` instead of ``response.headers.add`` in"
" ``repoze.bfg.request.add_global_response_headers`` in case the response "
"is not a WebOb response."
msgstr ""

#: ../../../BFG_HISTORY.txt:305
msgid ""
"The ``repoze.bfg.urldispatch.Route`` constructor (not an API) now accepts"
" a different ordering of arguments.  Previously it was ``(pattern, name, "
"factory=None, predicates=())``.  It is now ``(name, pattern, "
"factory=None, predicates=())``.  This is in support of consistency with "
"``configurator.add_route``."
msgstr ""

#: ../../../BFG_HISTORY.txt:311
msgid ""
"The ``repoze.bfg.urldispatch.RoutesMapper.connect`` method (not an API) "
"now accepts a different ordering of arguments.  Previously it was "
"``(pattern, name, factory=None, predicates=())``.  It is now ``(name, "
"pattern, factory=None, predicates=())``.  This is in support of "
"consistency with ``configurator.add_route``."
msgstr ""

#: ../../../BFG_HISTORY.txt:318
msgid "1.3a11 (2010-09-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:323
msgid ""
"Process the response callbacks and the NewResponse event earlier, to "
"enable mutations to the response to take effect."
msgstr ""

#: ../../../BFG_HISTORY.txt:327
msgid "1.3a10 (2010-09-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:332
msgid ""
"A new ``repoze.bfg.request.Request.add_response_callback`` API has been "
"added.  This method is documented in the new ``repoze.bfg.request`` API "
"chapter.  It can be used to influence response values before a concrete "
"response object has been created."
msgstr ""

#: ../../../BFG_HISTORY.txt:337
msgid ""
"The ``repoze.bfg.interfaces.INewResponse`` interface now includes a "
"``request`` attribute; as a result, a handler for INewResponse now has "
"access to the request which caused the response."
msgstr ""

#: ../../../BFG_HISTORY.txt:341
msgid ""
"Each of the follow methods of the Configurator now allow the below-named "
"arguments to be passed as \"dotted name strings\" (e.g. \"foo.bar.baz\") "
"rather than as actual implementation objects that must be imported:"
msgstr ""

#: ../../../BFG_HISTORY.txt:349
msgid "setup_registry"
msgstr ""

#: ../../../BFG_HISTORY.txt:347
msgid ""
"root_factory, authentication_policy, authorization_policy, debug_logger, "
"locale_negotiator, request_factory, renderer_globals_factory"
msgstr ""

#: ../../../BFG_HISTORY.txt:352
msgid "add_subscriber"
msgstr ""

#: ../../../BFG_HISTORY.txt:352
msgid "subscriber, iface"
msgstr ""

#: ../../../BFG_HISTORY.txt:355
msgid "derive_view"
msgstr ""

#: ../../../BFG_HISTORY.txt:355 ../../../BFG_HISTORY.txt:370
#: ../../../BFG_HISTORY.txt:373
msgid "view"
msgstr ""

#: ../../../BFG_HISTORY.txt:358
msgid "add_view"
msgstr ""

#: ../../../BFG_HISTORY.txt:358
msgid "view, ``for_``, context, request_type, containment"
msgstr ""

#: ../../../BFG_HISTORY.txt:361
msgid "add_route()"
msgstr ""

#: ../../../BFG_HISTORY.txt:361
msgid "view, view_for, factory, ``for_``, view_context"
msgstr ""

#: ../../../BFG_HISTORY.txt:364
msgid "scan"
msgstr ""

#: ../../../BFG_HISTORY.txt:364
msgid "package"
msgstr ""

#: ../../../BFG_HISTORY.txt:367
msgid "add_renderer"
msgstr ""

#: ../../../BFG_HISTORY.txt:367 ../../../BFG_HISTORY.txt:376
#: ../../../BFG_HISTORY.txt:379
msgid "factory"
msgstr ""

#: ../../../BFG_HISTORY.txt:370
msgid "set_forbidden_view"
msgstr ""

#: ../../../BFG_HISTORY.txt:373
msgid "set_notfound_view"
msgstr ""

#: ../../../BFG_HISTORY.txt:376
msgid "set_request_factory"
msgstr ""

#: ../../../BFG_HISTORY.txt:379
msgid "set_renderer_globals_factory()"
msgstr ""

#: ../../../BFG_HISTORY.txt:382
msgid "set_locale_negotiator"
msgstr ""

#: ../../../BFG_HISTORY.txt:382
msgid "negotiator"
msgstr ""

#: ../../../BFG_HISTORY.txt:385
msgid "testing_add_subscriber"
msgstr ""

#: ../../../BFG_HISTORY.txt:385
msgid "event_iface"
msgstr ""

#: ../../../BFG_HISTORY.txt:390
msgid ""
"The route pattern registered internally for a local \"static view\" "
"(either via the ``static`` ZCML directive or via the ``add_static_view`` "
"method of the configurator) was incorrect.  It was regsistered for e.g. "
"``static*traverse``, while it should have been registered for "
"``static/*traverse``.  Symptom: two static views could not reliably be "
"added to a system when they both shared the same path prefix (e.g. "
"``/static`` and ``/static2``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:401
msgid ""
"The INewResponse event is now not sent to listeners if the response "
"returned by view code (or a renderer) is not a \"real\" response (e.g. if"
" it does not have ``.status``, ``.headerlist`` and ``.app_iter`` "
"attribtues)."
msgstr ""

#: ../../../BFG_HISTORY.txt:409
msgid ""
"Add an API chapter for the ``repoze.bfg.request`` module, which includes "
"documentation for the ``repoze.bfg.request.Request`` class (the \"request"
" object\")."
msgstr ""

#: ../../../BFG_HISTORY.txt:413
msgid ""
"Modify the \"Request and Response\" narrative chapter to reference the "
"new ``repoze.bfg.request`` API chapter.  Some content was moved from this"
" chapter into the API documentation itself."
msgstr ""

#: ../../../BFG_HISTORY.txt:417
msgid ""
"Various changes to denote that Python dotted names are now allowed as "
"input to Configurator methods."
msgstr ""

#: ../../../BFG_HISTORY.txt:423
msgid ""
"The (internal) feature which made it possible to attach a "
"``global_response_headers`` attribute to the request (which was assumed "
"to contain a sequence of header key/value pairs which would later be "
"added to the response by the router), has been removed. The functionality"
" of ``repoze.bfg.request.Request.add_response_callback`` takes its place."
msgstr ""

#: ../../../BFG_HISTORY.txt:431
msgid ""
"The ``repoze.bfg.events.NewResponse`` class's construct has changed: it "
"now must be created with ``(request, response)`` rather than simply "
"``(response)``."
msgstr ""

#: ../../../BFG_HISTORY.txt:436
msgid "1.3a9 (2010-08-22)"
msgstr ""

#: ../../../BFG_HISTORY.txt:441
msgid ""
"The Configurator now accepts a dotted name *string* to a package as a "
"``package`` constructor argument. The ``package`` argument was previously"
" required to be a package *object* (not a dotted name string)."
msgstr ""

#: ../../../BFG_HISTORY.txt:446
msgid ""
"The ``repoze.bfg.configuration.Configurator.with_package`` method was "
"added.  This method returns a new Configurator using the same application"
" registry as the configurator object it is called upon. The new "
"configurator is created afresh with its ``package`` constructor argument "
"set to the value passed to ``with_package``. This feature will make it "
"easier for future BFG versions to allow dotted names as arguments in "
"places where currently only object references are allowed (the work to "
"allow dotted names isntead of object references everywhere has not yet "
"been done, however)."
msgstr ""

#: ../../../BFG_HISTORY.txt:456
msgid ""
"The new ``repoze.bfg.configuration.Configurator.maybe_dotted`` method "
"resolves a Python dotted name string supplied as its ``dotted`` argument "
"to a global Python object.  If the value cannot be resolved, a "
"``repoze.bfg.configuration.ConfigurationError`` is raised.  If the value "
"supplied as ``dotted`` is not a string, the value is returned "
"unconditionally without any resolution attempted."
msgstr ""

#: ../../../BFG_HISTORY.txt:463
msgid ""
"The new ``repoze.bfg.configuration.Configurator.absolute_resource_spec`` "
"method resolves a potentially relative \"resource specification\" string "
"into an absolute version.  If the value supplied as ``relative_spec`` is "
"not a string, the value is returned unconditionally without any "
"resolution attempted."
msgstr ""

#: ../../../BFG_HISTORY.txt:473
msgid ""
"The functions in ``repoze.bfg.renderers`` named ``render`` and "
"``render_to_response`` introduced in 1.3a6 previously took a set of "
"``**values`` arguments for the values to be passed to the renderer. This "
"was wrong, as renderers don't need to accept only dictionaries (they can "
"accept any type of object).  Now, the value sent to the renderer must be "
"supplied as a positional argument named ``value``. The ``request`` "
"argument is still a keyword argument, however."
msgstr ""

#: ../../../BFG_HISTORY.txt:481
msgid ""
"The functions in ``repoze.bfg.renderers`` named ``render`` and "
"``render_to_response`` now accept an additonal keyword argument named "
"``package``."
msgstr ""

#: ../../../BFG_HISTORY.txt:485
msgid ""
"The ``get_renderer`` API in ``repoze.bfg.renderers`` now accepts a "
"``package`` argument."
msgstr ""

#: ../../../BFG_HISTORY.txt:491
msgid ""
"The ZCML ``include`` directive docs were incorrect: they specified "
"``filename`` rather than (the correct) ``file`` as an allowable "
"attribute."
msgstr ""

#: ../../../BFG_HISTORY.txt:498
msgid ""
"The ``repoze.bfg.resource.resolve_resource_spec`` function can now accept"
" a package object as its ``pname`` argument instead of just a package "
"name."
msgstr ""

#: ../../../BFG_HISTORY.txt:502
msgid ""
"The ``_renderer_factory_from_name`` and ``_renderer_from_name`` methods "
"of the Configurator were removed.  These were never APIs."
msgstr ""

#: ../../../BFG_HISTORY.txt:505
msgid ""
"The ``_render``, ``_render_to_response`` and ``_make_response`` functions"
" with ``repoze.bfg.render`` (added in 1.3a6) have been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:509
msgid "A new helper class ``repoze.bfg.renderers.RendererHelper`` was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:512
msgid ""
"The _map_view function of ``repoze.bfg.configuration`` now takes only a "
"renderer_name argument instead of both a ``renderer`` and "
"``renderer``_name argument.  It also takes a ``package`` argument now."
msgstr ""

#: ../../../BFG_HISTORY.txt:517
msgid ""
"Use ``imp.get_suffixes`` indirection in ``repoze.bfg.path.package_name`` "
"instead of hardcoded ``.py`` ``.pyc`` and ``.pyo`` to use for comparison "
"when attemtping to decide if a directory is a package."
msgstr ""

#: ../../../BFG_HISTORY.txt:522
msgid ""
"Make tests runnable again under Jython (although they do not all pass "
"currently)."
msgstr ""

#: ../../../BFG_HISTORY.txt:525
msgid "The reify decorator now maintains the docstring of the function it wraps."
msgstr ""

#: ../../../BFG_HISTORY.txt:529
msgid "1.3a8 (2010-08-08)"
msgstr ""

#: ../../../BFG_HISTORY.txt:534
msgid ""
"New public interface: ``repoze.bfg.exceptions.IExceptionResponse``. This "
"interface is provided by all internal exception classes (such as "
"``repoze.bfg.exceptions.NotFound`` and "
"``repoze.bfg.exceptions.Forbidden``), instances of which are both "
"exception objects and can behave as WSGI response objects.  This "
"interface is made public so that exception classes which are also valid "
"WSGI response factories can be configured to implement them or exception "
"instances which are also or response instances can be configured to "
"provide them."
msgstr ""

#: ../../../BFG_HISTORY.txt:544
msgid "New API class: ``repoze.bfg.view.AppendSlashNotFoundViewFactory``."
msgstr ""

#: ../../../BFG_HISTORY.txt:546
msgid ""
"There can only be one Not Found view in any ``repoze.bfg`` application.  "
"Even if you use ``repoze.bfg.view.append_slash_notfound_view`` as the Not"
" Found view, ``repoze.bfg`` still must generate a ``404 Not Found`` "
"response when it cannot redirect to a slash-appended URL; this not found "
"response will be visible to site users."
msgstr ""

#: ../../../BFG_HISTORY.txt:553
msgid ""
"If you don't care what this 404 response looks like, and you only need "
"redirections to slash-appended route URLs, you may use the "
"``repoze.bfg.view.append_slash_notfound_view`` object as the Not Found "
"view.  However, if you wish to use a *custom* notfound view callable when"
" a URL cannot be redirected to a slash-appended URL, you may wish to use "
"an instance of the ``repoze.bfg.view.AppendSlashNotFoundViewFactory`` "
"class as the Not Found view, supplying the notfound view callable as the "
"first argument to its constructor.  For instance::"
msgstr ""

#: ../../../BFG_HISTORY.txt:572
msgid ""
"The ``notfound_view`` supplied must adhere to the two-argument view "
"callable calling convention of ``(context, request)`` (``context`` will "
"be the exception object)."
msgstr ""

#: ../../../BFG_HISTORY.txt:579
msgid ""
"Expanded the \"Cleaning Up After a Request\" section of the URL Dispatch "
"narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:582
msgid ""
"Expanded the \"Redirecting to Slash-Appended Routes\" section of the URL "
"Dispatch narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:588
msgid ""
"Previously, two default view functions were registered at Configurator "
"setup (one for ``repoze.bfg.exceptions.NotFound`` named "
"``default_notfound_view`` and one for ``repoze.bfg.exceptions.Forbidden``"
" named ``default_forbidden_view``) to render internal exception "
"responses. Those default view functions have been removed, replaced with "
"a generic default view function which is registered at Configurator setup"
" for the ``repoze.bfg.interfaces.IExceptionResponse`` interface that "
"simply returns the exception instance; the ``NotFound`` and ``Forbidden``"
" classes are now still exception factories but they are also response "
"factories which generate instances that implement the new "
"``repoze.bfg.interfaces.IExceptionResponse`` interface."
msgstr ""

#: ../../../BFG_HISTORY.txt:602
msgid "1.3a7 (2010-08-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:607
msgid ""
"The ``repoze.bfg.configuration.Configurator.add_route`` API now returns "
"the route object that was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:610
msgid ""
"A ``repoze.bfg.events.subscriber`` decorator was added.  This decorator "
"decorates module-scope functions, which are then treated as event "
"listeners after a scan() is performed.  See the Events narrative "
"documentation chapter and the ``repoze.bfg.events`` module documentation "
"for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:619
msgid ""
"When adding a view for a route which did not yet exist (\"did not yet "
"exist\" meaning, temporally, a view was added with a route name for a "
"route which had not yet been added via add_route), the value of the "
"``custom_predicate`` argument to ``add_view`` was lost.  Symptom: wrong "
"view matches when using URL dispatch and custom view predicates together."
msgstr ""

#: ../../../BFG_HISTORY.txt:626
msgid ""
"Pattern matches for a ``:segment`` marker in a URL dispatch route pattern"
" now always match at least one character.  See \"Backwards "
"Incompatibilities\" below in this changelog."
msgstr ""

#: ../../../BFG_HISTORY.txt:633
msgid ""
"A bug existed in the regular expression to do URL matching.  As an "
"example, the URL matching machinery would cause the pattern ``/{foo}`` to"
" match the root URL ``/`` resulting in a match dictionary of "
"``{'foo':u''}`` or the pattern ``/{fud}/edit might match the URL "
"``//edit`` resulting in a match dictionary of ``{'fud':u''}``.  It was "
"always the intent that ``:segment`` markers in the pattern would need to "
"match *at least one* character, and never match the empty string.  This, "
"however, means that in certain circumstances, a routing match which your "
"application inadvertently depended upon may no longer happen."
msgstr ""

#: ../../../BFG_HISTORY.txt:647
msgid ""
"Added description of the ``repoze.bfg.events.subscriber`` decorator to "
"the Events narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:650
msgid ""
"Added ``repoze.bfg.events.subscriber`` API documentation to "
"``repoze.bfg.events`` API docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:653
msgid ""
"Added a section named \"Zope 3 Enforces 'TTW' Authorization Checks By "
"Default; BFG Does Not\" to the \"Design Defense\" chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:657
msgid "1.3a6 (2010-07-25)"
msgstr ""

#: ../../../BFG_HISTORY.txt:662
msgid ""
"New argument to ``repoze.bfg.configuration.Configurator.add_route`` and "
"the ``route`` ZCML directive: ``traverse``.  If you would like to cause "
"the ``context`` to be something other than the ``root`` object when this "
"route matches, you can spell a traversal pattern as the ``traverse`` "
"argument.  This traversal pattern will be used as the traversal path: "
"traversal will begin at the root object implied by this route (either the"
" global root, or the object returned by the ``factory`` associated with "
"this route)."
msgstr ""

#: ../../../BFG_HISTORY.txt:671
msgid ""
"The syntax of the ``traverse`` argument is the same as it is for "
"``path``. For example, if the ``path`` provided is "
"``articles/:article/edit``, and the ``traverse`` argument provided is "
"``/:article``, when a request comes in that causes the route to match in "
"such a way that the ``article`` match value is '1' (when the request URI "
"is ``/articles/1/edit``), the traversal path will be generated as ``/1``."
"  This means that the root object's ``__getitem__`` will be called with "
"the name ``1`` during the traversal phase.  If the ``1`` object exists, "
"it will become the ``context`` of the request.  The Traversal narrative "
"has more information about traversal."
msgstr ""

#: ../../../BFG_HISTORY.txt:683
msgid ""
"If the traversal path contains segment marker names which are not present"
" in the path argument, a runtime error will occur.  The ``traverse`` "
"pattern should not contain segment markers that do not exist in the "
"``path``."
msgstr ""

#: ../../../BFG_HISTORY.txt:688
msgid ""
"A similar combining of routing and traversal is available when a route is"
" matched which contains a ``*traverse`` remainder marker in its path.  "
"The ``traverse`` argument allows you to associate route patterns with an "
"arbitrary traversal path without using a ``*traverse`` remainder marker; "
"instead you can use other match information."
msgstr ""

#: ../../../BFG_HISTORY.txt:695
msgid ""
"Note that the ``traverse`` argument is ignored when attached to a route "
"that has a ``*traverse`` remainder marker in its path."
msgstr ""

#: ../../../BFG_HISTORY.txt:698
msgid ""
"A new method of the ``Configurator`` exists: ``set_request_factory``.  If"
" used, this method will set the factory used by the ``repoze.bfg`` router"
" to create all request objects."
msgstr ""

#: ../../../BFG_HISTORY.txt:702 ../../../BFG_HISTORY.txt:706
msgid ""
"The ``Configurator`` constructor takes an additional argument: "
"``request_factory``.  If used, this argument will set the factory used by"
" the ``repoze.bfg`` router to create all request objects."
msgstr ""

#: ../../../BFG_HISTORY.txt:710
msgid ""
"A new method of the ``Configurator`` exists: "
"``set_renderer_globals_factory``.  If used, this method will set the "
"factory used by the ``repoze.bfg`` router to create renderer globals."
msgstr ""

#: ../../../BFG_HISTORY.txt:715
msgid ""
"A new method of the ``Configurator`` exists: ``get_settings``.  If used, "
"this method will return the current settings object (performs the same "
"job as the ``repoze.bfg.settings.get_settings`` API)."
msgstr ""

#: ../../../BFG_HISTORY.txt:719
msgid ""
"The ``Configurator`` constructor takes an additional argument: "
"``renderer_globals_factory``.  If used, this argument will set the "
"factory used by the ``repoze.bfg`` router to create renderer globals."
msgstr ""

#: ../../../BFG_HISTORY.txt:724
msgid ""
"Add ``repoze.bfg.renderers.render``, "
"``repoze.bfg.renderers.render_to_response`` and "
"``repoze.bfg.renderers.get_renderer`` functions.  These are imperative "
"APIs which will use the same rendering machinery used by view "
"configurations with a ``renderer=`` attribute/argument to produce a "
"rendering or renderer.  Because these APIs provide a central API for all "
"rendering, they now form the preferred way to perform imperative template"
" rendering.  Using functions named ``render_*`` from modules such as "
"``repoze.bfg.chameleon_zpt`` and ``repoze.bfg.chameleon_text`` is now "
"discouraged (although not deprecated).  The code the backing older "
"templating-system-specific APIs now calls into the newer "
"``repoze.bfg.renderer`` code."
msgstr ""

#: ../../../BFG_HISTORY.txt:737
msgid ""
"The ``repoze.bfg.configuration.Configurator.testing_add_template`` has "
"been renamed to ``testing_add_renderer``.  A backwards compatibility "
"alias is present using the old name."
msgstr ""

#: ../../../BFG_HISTORY.txt:744
msgid ""
"The ``Hybrid`` narrative chapter now contains a description of the "
"``traverse`` route argument."
msgstr ""

#: ../../../BFG_HISTORY.txt:747
msgid ""
"The ``Hooks`` narrative chapter now contains sections about changing the "
"request factory and adding a renderer globals factory."
msgstr ""

#: ../../../BFG_HISTORY.txt:750
msgid "The API documentation includes a new module: ``repoze.bfg.renderers``."
msgstr ""

#: ../../../BFG_HISTORY.txt:753
msgid ""
"The ``Templates`` chapter was updated; all narrative that used "
"templating-specific APIs within examples to perform rendering (such as "
"the ``repoze.bfg.chameleon_zpt.render_template_to_response`` method) was "
"changed to use ``repoze.bfg.renderers.render_*`` functions."
msgstr ""

#: ../../../BFG_HISTORY.txt:762
msgid ""
"The ``header`` predicate (when used as either a view predicate or a route"
" predicate) had a problem when specified with a name/regex pair.  When "
"the header did not exist in the headers dictionary, the regex match could"
" be fed ``None``, causing it to throw a ``TypeError: expected string or "
"buffer`` exception.  Now, the predicate returns False as intended."
msgstr ""

#: ../../../BFG_HISTORY.txt:772
msgid ""
"The ``repoze.bfg.renderers.rendered_response`` function was never an "
"official API, but may have been imported by extensions in the wild. It is"
" officially deprecated in this release.  Use "
"``repoze.bfg.renderers.render_to_response`` instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:777
msgid ""
"The following APIs are *documentation* deprecated (meaning they are "
"officially deprecated in documentation but do not raise a deprecation "
"error upon their usage, and may continue to work for an indefinite period"
" of time):"
msgstr ""

#: ../../../BFG_HISTORY.txt:782
msgid ""
"In the ``repoze.bfg.chameleon_zpt`` module: ``get_renderer``, "
"``get_template``, ``render_template``, ``render_template_to_response``.  "
"The suggested alternatives are documented within the docstrings of those "
"methods (which are still present in the documentation)."
msgstr ""

#: ../../../BFG_HISTORY.txt:788
msgid ""
"In the ``repoze.bfg.chameleon_text`` module: ``get_renderer``, "
"``get_template``, ``render_template``, ``render_template_to_response``.  "
"The suggested alternatives are documented within the docstrings of those "
"methods (which are still present in the documentation)."
msgstr ""

#: ../../../BFG_HISTORY.txt:794
msgid ""
"In general, to perform template-related functions, one should now use the"
" various methods in the ``repoze.bfg.renderers`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:800
msgid ""
"A new internal exception class (*not* an API) named "
"``repoze.bfg.exceptions.PredicateMismatch`` now exists.  This exception "
"is currently raised when no constituent view of a multiview can be called"
" (due to no predicate match).  Previously, in this situation, a "
"``repoze.bfg.exceptions.NotFound`` was raised.  We provide backwards "
"compatibility for code that expected a ``NotFound`` to be raised when no "
"predicates match by causing ``repoze.bfg.exceptions.PredicateMismatch`` "
"to inherit from ``NotFound``.  This will cause any exception view "
"registered for ``NotFound`` to be called when a predicate mismatch "
"occurs, as was the previous behavior."
msgstr ""

#: ../../../BFG_HISTORY.txt:812
msgid ""
"There is however, one perverse case that will expose a backwards "
"incompatibility.  If 1) you had a view that was registered as a member of"
" a multiview 2) this view explicitly raised a ``NotFound`` exception *in "
"order to* proceed to the next predicate check in the multiview, that code"
" will now behave differently: rather than skipping to the next view "
"match, a NotFound will be raised to the top-level exception handling "
"machinery instead.  For code to be depending upon the behavior of a view "
"raising ``NotFound`` to proceed to the next predicate match, would be "
"tragic, but not impossible, given that ``NotFound`` is a public "
"interface. ``repoze.bfg.exceptions.PredicateMismatch`` is not a public "
"API and cannot be depended upon by application code, so you should not "
"change your view code to raise ``PredicateMismatch``.  Instead, move the "
"logic which raised the ``NotFound`` exception in the view out into a "
"custom view predicate."
msgstr ""

#: ../../../BFG_HISTORY.txt:828
msgid ""
"If, when you run your application's unit test suite under BFG 1.3, a "
"``KeyError`` naming a template or a ``ValueError`` indicating that a "
"'renderer factory' is not registered may is raised (e.g. ``ValueError: No"
" factory for renderer named '.pt' when looking up "
"karl.views:templates/snippets.pt``), you may need to perform some extra "
"setup in your test code."
msgstr ""

#: ../../../BFG_HISTORY.txt:835
msgid ""
"The best solution is to use the "
"``repoze.bfg.configuration.Configurator.testing_add_renderer`` (or, "
"alternately the deprecated "
"``repoze.bfg.testing.registerTemplateRenderer`` or "
"``registerDummyRenderer``) API within the code comprising each individual"
" unit test suite to register a \"dummy\" renderer for each of the "
"templates and renderers used by code under test.  For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:847
msgid ""
"This will register a basic dummy renderer for this particular missing "
"template.  The ``testing_add_renderer`` API actually *returns* the "
"renderer, but if you don't care about how the render is used, you don't "
"care about having a reference to it either."
msgstr ""

#: ../../../BFG_HISTORY.txt:852
msgid ""
"A more rough way to solve the issue exists.  It causes the \"real\" "
"template implementations to be used while the system is under test, which"
" is suboptimal, because tests will run slower, and unit tests won't "
"actually *be* unit tests, but it is easier.  Always ensure you call the "
"``setup_registry()`` method of the Configurator .  Eg::"
msgstr ""

#: ../../../BFG_HISTORY.txt:862
msgid ""
"Calling ``setup_registry`` only has an effect if you're *passing in* a "
"``registry`` argument to the Configurator constructor. ``setup_registry``"
" is called by the course of normal operations anyway if you do not pass "
"in a ``registry``."
msgstr ""

#: ../../../BFG_HISTORY.txt:867
msgid ""
"If your test suite isn't using a Configurator yet, and is still using the"
" older ``repoze.bfg.testing`` APIs name ``setUp`` or ``cleanUp``, these "
"will register the renderers on your behalf."
msgstr ""

#: ../../../BFG_HISTORY.txt:871
msgid ""
"A variant on the symptom for this theme exists: you may already be "
"dutifully registering a dummy template or renderer for a template used by"
" the code you're testing using ``testing_register_renderer`` or "
"``registerTemplateRenderer``, but (perhaps unbeknownst to you) the code "
"under test expects to be able to use a \"real\" template renderer "
"implementation to retrieve or render *another* template that you forgot "
"was being rendered as a side effect of calling the code you're testing.  "
"This happened to work because it found the *real* template while the "
"system was under test previously, and now it cannot.  The solution is the"
" same."
msgstr ""

#: ../../../BFG_HISTORY.txt:882
msgid ""
"It may also help reduce confusion to use a *resource specification* to "
"specify the template path in the test suite and code rather than a "
"relative path in either.  A resource specification is unambiguous, while "
"a relative path needs to be relative to \"here\", where \"here\" isn't "
"always well-defined (\"here\" in a test suite may or may not be the same "
"as \"here\" in the code under test)."
msgstr ""

#: ../../../BFG_HISTORY.txt:890
msgid "1.3a5 (2010-07-14)"
msgstr ""

#: ../../../BFG_HISTORY.txt:895
msgid ""
"New internal exception: ``repoze.bfg.exceptions.URLDecodeError``. This "
"URL is a subclass of the built-in Python exception named "
"``UnicodeDecodeError``."
msgstr ""

#: ../../../BFG_HISTORY.txt:899
msgid ""
"When decoding a URL segment to Unicode fails, the exception raised is now"
" ``repoze.bfg.exceptions.URLDecodeError`` instead of "
"``UnicodeDecodeError``.  This makes it possible to register an exception "
"view invoked specifically when ``repoze.bfg`` cannot decode a URL."
msgstr ""

#: ../../../BFG_HISTORY.txt:908
msgid ""
"Fix regression in "
"``repoze.bfg.configuration.Configurator.add_static_view``.  Before 1.3a4,"
" view names that contained a slash were supported as route prefixes. "
"1.3a4 broke this by trying to treat them as full URLs."
msgstr ""

#: ../../../BFG_HISTORY.txt:916
msgid ""
"The ``repoze.bfg.exceptions.URLDecodeError`` exception was added to the "
"exceptions chapter of the API documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:922
msgid ""
"in previous releases, when a URL could not be decoded from UTF-8 during "
"traversal, a ``TypeError`` was raised.  Now the error which is raised is "
"a ``repoze.bfg.exceptions.URLDecodeError``."
msgstr ""

#: ../../../BFG_HISTORY.txt:927
msgid "1.3a4 (2010-07-03)"
msgstr ""

#: ../../../BFG_HISTORY.txt:932
msgid ""
"Undocumented hook: make ``get_app`` and ``get_root`` of the "
"``repoze.bfg.paster.BFGShellCommand`` hookable in cases where endware may"
" interfere with the default versions."
msgstr ""

#: ../../../BFG_HISTORY.txt:936
msgid ""
"In earlier versions, a custom route predicate associated with a url "
"dispatch route (each of the predicate functions fed to the "
"``custom_predicates`` argument of "
"``repoze.bfg.configuration.Configurator.add_route``) has always required "
"a 2-positional argument signature, e.g. ``(context, request)``.  Before "
"this release, the ``context`` argument was always ``None``."
msgstr ""

#: ../../../BFG_HISTORY.txt:944
msgid ""
"As of this release, the first argument passed to a predicate is now a "
"dictionary conventionally named ``info`` consisting of ``route``, and "
"``match``.  ``match`` is a dictionary: it represents the arguments "
"matched in the URL by the route.  ``route`` is an object representing the"
" route which was matched."
msgstr ""

#: ../../../BFG_HISTORY.txt:950
msgid ""
"This is useful when predicates need access to the route match.  For "
"example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:963
msgid ""
"The ``route`` object is an object that has two useful attributes: "
"``name`` and ``path``.  The ``name`` attribute is the route name. The "
"``path`` attribute is the route pattern.  An example of using the route "
"in a set of route predicates::"
msgstr ""

#: ../../../BFG_HISTORY.txt:976
msgid ""
"The ``repoze.bfg.url.route_url`` API has changed.  If a keyword "
"``_app_url`` is present in the arguments passed to ``route_url``, this "
"value will be used as the protocol/hostname/port/leading path prefix of "
"the generated URL.  For example, using an ``_app_url`` of "
"``http://example.com:8080/foo`` would cause the URL "
"``http://example.com:8080/foo/fleeb/flub`` to be returned from this "
"function if the expansion of the route pattern associated with the "
"``route_name`` expanded to ``/fleeb/flub``."
msgstr ""

#: ../../../BFG_HISTORY.txt:985
msgid ""
"It is now possible to use a URL as the ``name`` argument fed to "
"``repoze.bfg.configuration.Configurator.add_static_view``.  When the name"
" argument is a URL, the ``repoze.bfg.url.static_url`` API will generate "
"join this URL (as a prefix) to a path including the static file name.  "
"This makes it more possible to put static media on a separate webserver "
"for production, while keeping static media package-internal and served by"
" the development webserver during development."
msgstr ""

#: ../../../BFG_HISTORY.txt:997
msgid ""
"The authorization chapter of the ZODB Wiki Tutorial "
"(docs/tutorials/bfgwiki) was changed to demonstrate authorization via a "
"group rather than via a direct username (thanks to Alex Marandon)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1002
msgid ""
"The authorization chapter of the SQLAlchemy Wiki Tutorial "
"(docs/tutorials/bfgwiki2) was changed to demonstrate authorization via a "
"group rather than via a direct username."
msgstr ""

#: ../../../BFG_HISTORY.txt:1006
msgid ""
"Redirect requests for tutorial sources to "
"http://docs.repoze.org/bfgwiki-1.3 and "
"http://docs.repoze.org/bfgwiki2-1.3/ respectively."
msgstr ""

#: ../../../BFG_HISTORY.txt:1010
msgid ""
"A section named ``Custom Route Predicates`` was added to the URL Dispatch"
" narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:1013
msgid ""
"The Static Resources chapter has been updated to mention using "
"``static_url`` to generate URLs to external webservers."
msgstr ""

#: ../../../BFG_HISTORY.txt:1019
msgid ""
"Removed ``repoze.bfg.static.StaticURLFactory`` in favor of a new "
"abstraction revolving around the (still-internal) "
"``repoze.bfg.static.StaticURLInfo`` helper class."
msgstr ""

#: ../../../BFG_HISTORY.txt:1024
msgid "1.3a3 (2010-05-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1029
msgid ""
"The ``bfg_alchemy`` and ``bfg_routesalchemy`` templates no longer "
"register a ``handle_teardown`` event listener which calls "
"``DBSession.remove``.  This was found by Chris Withers to be unnecessary."
msgstr ""

#: ../../../BFG_HISTORY.txt:1037
msgid ""
"The \"bfgwiki2\" (URL dispatch wiki) tutorial code and documentation was "
"changed to remove the ``handle_teardown`` event listener which calls "
"``DBSession.remove``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1041
msgid ""
"Any mention of the ``handle_teardown`` event listener as used by the "
"paster templates was removed from the URL Dispatch narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:1044
msgid ""
"A section entitled Detecting Available Languages was added to the i18n "
"narrative docs chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:1048
msgid "1.3a2 (2010-04-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1053
msgid ""
"A locale negotiator no longer needs to be registered explicitly. The "
"default locale negotiator at "
"``repoze.bfg.i18n.default_locale_negotiator`` is now used unconditionally"
" as... um, the default locale negotiator."
msgstr ""

#: ../../../BFG_HISTORY.txt:1058
msgid "The default locale negotiator has become more complex."
msgstr ""

#: ../../../BFG_HISTORY.txt:1060
msgid ""
"First, the negotiator looks for the ``_LOCALE_`` attribute of the request"
" object (possibly set by a view or an event listener)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1063
msgid "Then it looks for the ``request.params['_LOCALE_']`` value."
msgstr ""

#: ../../../BFG_HISTORY.txt:1065
msgid "Then it looks for the ``request.cookies['_LOCALE_']`` value."
msgstr ""

#: ../../../BFG_HISTORY.txt:1070
msgid ""
"The default locale negotiator now looks for the parameter named "
"``_LOCALE_`` rather than a parameter named ``locale`` in "
"``request.params``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1077
msgid ""
"A locale negotiator may now return ``None``, signifying that the default "
"locale should be used."
msgstr ""

#: ../../../BFG_HISTORY.txt:1083
msgid ""
"Documentation concerning locale negotiation in the Internationalizationa "
"and Localization chapter was updated."
msgstr ""

#: ../../../BFG_HISTORY.txt:1086
msgid ""
"Expanded portion of i18n narrative chapter docs which discuss working "
"with gettext files."
msgstr ""

#: ../../../BFG_HISTORY.txt:1090
msgid "1.3a1 (2010-04-26)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1095
msgid ""
"Added \"exception views\".  When you use an exception (anything that "
"inherits from the Python ``Exception`` builtin) as view context argument,"
" e.g.::"
msgstr ""

#: ../../../BFG_HISTORY.txt:1107
msgid ""
"For the above example, when the ``repoze.bfg.exceptions.NotFound`` "
"exception is raised by any view or any root factory, the "
"``notfound_view`` view callable will be invoked and its response "
"returned."
msgstr ""

#: ../../../BFG_HISTORY.txt:1112
msgid ""
"Other normal view predicates can also be used in combination with an "
"exception view registration::"
msgstr ""

#: ../../../BFG_HISTORY.txt:1123
msgid ""
"The above exception view names the ``route_name`` of ``home``, meaning "
"that it will only be called when the route matched has a name of "
"``home``.  You can therefore have more than one exception view for any "
"given exception in the system: the \"most specific\" one will be called "
"when the set of request circumstances which match the view registration."
"  The only predicate that cannot be not be used successfully is ``name``."
"  The name used to look up an exception view is always the empty string."
msgstr ""

#: ../../../BFG_HISTORY.txt:1132
msgid ""
"Existing (pre-1.3) normal views registered against objects inheriting "
"from ``Exception`` will continue to work.  Exception views used for user-"
"defined exceptions and system exceptions used as contexts will also work."
msgstr ""

#: ../../../BFG_HISTORY.txt:1137
msgid ""
"The feature can be used with any view registration mechanism "
"(``@bfg_view`` decorator, ZCML, or imperative ``config.add_view`` "
"styles)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1141
msgid "This feature was kindly contributed by Andrey Popp."
msgstr ""

#: ../../../BFG_HISTORY.txt:1143
msgid ""
"Use \"Venusian\" (`http://docs.repoze.org/venusian "
"<http://docs.repoze.org/venusian>`_) to perform ``bfg_view`` decorator "
"scanning rather than relying on a BFG-internal decorator scanner.  (Truth"
" be told, Venusian is really just a generalization of the BFG-internal "
"decorator scanner)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1149
msgid ""
"Internationalization and localization features as documented in the "
"narrative documentation chapter entitled ``Internationalization and "
"Localization``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1153
msgid ""
"A new deployment setting named ``default_locale_name`` was added. If this"
" string is present as a Paster ``.ini`` file option, it will be "
"considered the default locale name.  The default locale name is used "
"during locale-related operations such as language translation."
msgstr ""

#: ../../../BFG_HISTORY.txt:1158
msgid ""
"It is now possible to turn on Chameleon template \"debugging mode\" for "
"all Chameleon BFG templates by setting a BFG-related Paster ``.ini`` file"
" setting named ``debug_templates``. The exceptions raised by Chameleon "
"templates when a rendering fails are sometimes less than helpful.  "
"``debug_templates`` allows you to configure your application development "
"environment so that exceptions generated by Chameleon during template "
"compilation and execution will contain more helpful debugging "
"information.  This mode is on by default in all new projects."
msgstr ""

#: ../../../BFG_HISTORY.txt:1168
msgid ""
"Add a new method of the Configurator named ``derive_view`` which can be "
"used to generate a BFG view callable from a user-supplied function, "
"instance, or class. This useful for external framework and plugin authors"
" wishing to wrap callables supplied by their users which follow the same "
"calling conventions and response conventions as objects that can be "
"supplied directly to BFG as a view callable. See the ``derive_view`` "
"method in the ``repoze.bfg.configuration.Configurator`` docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:1178
msgid "ZCML"
msgstr ""

#: ../../../BFG_HISTORY.txt:1180
msgid "Add a ``translationdir`` ZCML directive to support localization."
msgstr ""

#: ../../../BFG_HISTORY.txt:1182
msgid "Add a ``localenegotiator`` ZCML directive to support localization."
msgstr ""

#: ../../../BFG_HISTORY.txt:1187
msgid ""
"The exception views feature replaces the need for the "
"``set_notfound_view`` and ``set_forbidden_view`` methods of the "
"``Configurator`` as well as the ``notfound`` and ``forbidden`` ZCML "
"directives.  Those methods and directives will continue to work for the "
"foreseeable future, but they are deprecated in the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:1197
msgid "A new install-time dependency on the ``venusian`` distribution was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1200
msgid ""
"A new install-time dependency on the ``translationstring`` distribution "
"was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1203
msgid ""
"Chameleon 1.2.3 or better is now required (internationalization and per-"
"template debug settings)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1209
msgid ""
"View registrations and lookups are now done with three \"requires\" "
"arguments instead of two to accomodate orthogonality of exception views."
msgstr ""

#: ../../../BFG_HISTORY.txt:1213
msgid ""
"The ``repoze.bfg.interfaces.IForbiddenView`` and "
"``repoze.bfg.interfaces.INotFoundView`` interfaces were removed; they "
"weren't APIs and they became vestigial with the addition of exception "
"views."
msgstr ""

#: ../../../BFG_HISTORY.txt:1218
msgid ""
"Remove ``repoze.bfg.compat.pkgutil_26.py`` and import alias "
"``repoze.bfg.compat.walk_packages``.  These were only required by "
"internal scanning machinery; Venusian replaced the internal scanning "
"machinery, so these are no longer required."
msgstr ""

#: ../../../BFG_HISTORY.txt:1226
msgid "Exception view documentation was added to the ``Hooks`` narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:1229
msgid ""
"A new narrative chapter entitled ``Internationalization and "
"Localization`` was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1232
msgid ""
"The \"Environment Variables and ``ini`` File Settings\" chapter was "
"changed: documentation about the ``default_locale_name`` setting was "
"added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1236
msgid "A new API chapter for the ``repoze.bfg.i18n`` module was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1238
msgid ""
"Documentation for the new ``translationdir`` and ``localenegotiator`` "
"ZCML directives were added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1241
msgid ""
"A section was added to the Templates chapter entitled \"Nicer Exceptions "
"in Templates\" describing the result of setting ``debug_templates = "
"true``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1248
msgid ""
"All paster templates now create a ``setup.cfg`` which includes commands "
"related to nose testing and Babel message catalog extraction/compilation."
msgstr ""

#: ../../../BFG_HISTORY.txt:1252
msgid ""
"A ``default_locale_name = en`` setting was added to each existing paster "
"template."
msgstr ""

#: ../../../BFG_HISTORY.txt:1255
msgid ""
"A ``debug_templates = true`` setting was added to each existing paster "
"template."
msgstr ""

#: ../../../BFG_HISTORY.txt:1259
msgid "Licensing"
msgstr ""

#: ../../../BFG_HISTORY.txt:1261
msgid ""
"The Edgewall (BSD) license was added to the LICENSES.txt file, as some "
"code in the ``repoze.bfg.i18n`` derives from Babel source."
msgstr ""

#: ../../../BFG_HISTORY.txt:1265
msgid "1.2 (2010-02-10)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1267
msgid "No changes from 1.2b6."
msgstr ""

#: ../../../BFG_HISTORY.txt:1270
msgid "1.2b6 (2010-02-06)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1275
msgid ""
"Remove magical feature of ``repoze.bfg.url.model_url`` which prepended a "
"fully-expanded urldispatch route URL before a the model's path if it was "
"noticed that the request had matched a route. This feature was ill-"
"conceived, and didn't work in all scenarios."
msgstr ""

#: ../../../BFG_HISTORY.txt:1283
msgid ""
"More correct conversion of provided ``renderer`` values to resource "
"specification values (internal)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1287
msgid "1.2b5 (2010-02-04)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1292
msgid ""
"1.2b4 introduced a bug whereby views added via a route configuration that"
" named a view callable and also a ``view_attr`` became broken. Symptom: "
"``MyViewClass is not callable`` or the ``__call__`` of a class was being "
"called instead of the method named via ``view_attr``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1298
msgid ""
"Fix a bug whereby a ``renderer`` argument to the ``@bfg_view`` decorator "
"that provided a package-relative template filename might not have been "
"resolved properly.  Symptom: inappropriate ``Missing template resource`` "
"errors."
msgstr ""

#: ../../../BFG_HISTORY.txt:1304
msgid "1.2b4 (2010-02-03)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1309
msgid ""
"Update GAE tutorial to use Chameleon instead of Jinja2 (now that it's "
"possible)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1315
msgid ""
"Ensure that ``secure`` flag for AuthTktAuthenticationPolicy constructor "
"does what it's documented to do (merge Daniel Holth's fancy-cookies-2 "
"branch)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1322
msgid ""
"Add ``path`` and ``http_only`` options to AuthTktAuthenticationPolicy "
"constructor (merge Daniel Holth's fancy-cookies-2 branch)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1329
msgid ""
"Remove ``view_header``, ``view_accept``, ``view_xhr``, "
"``view_path_info``, ``view_request_method``, ``view_request_param``, and "
"``view_containment`` predicate arguments from the "
"``Configurator.add_route`` argument list.  These arguments were "
"speculative.  If you need the features exposed by these arguments, add a "
"view associated with a route using the ``route_name`` argument to the "
"``add_view`` method instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:1337
msgid ""
"Remove ``view_header``, ``view_accept``, ``view_xhr``, "
"``view_path_info``, ``view_request_method``, ``view_request_param``, and "
"``view_containment`` predicate arguments from the ``route`` ZCML "
"directive attribute set.  These attributes were speculative.  If you need"
" the features exposed by these attributes, add a view associated with a "
"route using the ``route_name`` attribute of the ``view`` ZCML directive "
"instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:1348
msgid ""
"Remove dependency on ``sourcecodegen`` (not depended upon by Chameleon "
"1.1.1+)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1352
msgid "1.2b3 (2010-01-24)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1357
msgid ""
"When \"hybrid mode\" (both traversal and urldispatch) is in use, default "
"to finding route-related views even if a non-route-related view "
"registration has been made with a more specific context.  The default "
"used to be to find views with a more specific context first. Use the new "
"``use_global_views`` argument to the route definition to get back the "
"older behavior."
msgstr ""

#: ../../../BFG_HISTORY.txt:1367
msgid ""
"Add ``use_global_views`` argument to ``add_route`` method of "
"Configurator.  When this argument is true, views registered for *no* "
"route will be found if no more specific view related to the route is "
"found."
msgstr ""

#: ../../../BFG_HISTORY.txt:1372
msgid ""
"Add ``use_global_views`` attribute to ZCML ``<route>`` directive (see "
"above)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1378
msgid ""
"When registering a view, register the view adapter with the \"requires\" "
"interfaces as ``(request_type, context_type)`` rather than "
"``(context_type, request_type)``.  This provides for saner lookup, "
"because the registration will always be made with a specific request "
"interface, but registration may not be made with a specific context "
"interface.  In general, when creating multiadapters, you want to order "
"the requires interfaces so that the elements which are more likely to be "
"registered using specific interfaces are ordered before those which are "
"less likely."
msgstr ""

#: ../../../BFG_HISTORY.txt:1389
msgid "1.2b2 (2010-01-21)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1394
msgid ""
"When the ``Configurator`` is passed an instance of "
"``zope.component.registry.Components`` as a ``registry`` constructor "
"argument, fix the instance up to have the attributes we expect of an "
"instance of ``repoze.bfg.registry.Registry`` when ``setup_registry`` is "
"called.  This makes it possible to use the global Zope component registry"
" as a BFG application registry."
msgstr ""

#: ../../../BFG_HISTORY.txt:1401
msgid ""
"When WebOb 0.9.7.1 was used, a deprecation warning was issued for the "
"class attribute named ``charset`` within ``repoze.bfg.request.Request``."
"  BFG now *requires* WebOb >= 0.9.7, and code was added so that this "
"deprecation warning has disappeared."
msgstr ""

#: ../../../BFG_HISTORY.txt:1406
msgid ""
"Fix a view lookup ordering bug whereby a view with a larger number of "
"predicates registered first (literally first, not \"earlier\") for a "
"triad would lose during view lookup to one registered with fewer."
msgstr ""

#: ../../../BFG_HISTORY.txt:1410
msgid ""
"Make sure views with exactly N custom predicates are always called before"
" views with exactly N non-custom predicates given all else is equal in "
"the view configuration."
msgstr ""

#: ../../../BFG_HISTORY.txt:1417
msgid "Change renderings of ZCML directive documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:1419
msgid ""
"Add a narrative documentation chapter: \"Using the Zope Component "
"Architecture in repoze.bfg\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:1425
msgid "Require WebOb >= 0.9.7"
msgstr ""

#: ../../../BFG_HISTORY.txt:1428
msgid "1.2b1 (2010-01-18)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1433
msgid ""
"In ``bfg_routesalchemy``, ``bfg_alchemy`` paster templates and the "
"``bfgwiki2`` tutorial, clean up the SQLAlchemy connection by registering "
"a ``repoze.tm.after_end`` callback instead of relying on a ``__del__`` "
"method of a ``Cleanup`` class added to the WSGI environment.  The "
"``__del__`` strategy was fragile and caused problems in the wild.  Thanks"
" to Daniel Holth for testing."
msgstr ""

#: ../../../BFG_HISTORY.txt:1443
msgid ""
"Read logging configuration from PasteDeploy config file ``loggers`` "
"section (and related) when ``paster bfgshell`` is invoked."
msgstr ""

#: ../../../BFG_HISTORY.txt:1449
msgid "Major rework in preparation for book publication."
msgstr ""

#: ../../../BFG_HISTORY.txt:1452
msgid "1.2a11 (2010-01-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1457
msgid ""
"Make ``paster bfgshell`` and ``paster create -t bfg_xxx`` work on Jython "
"(fix minor incompatibility with treatment of ``__doc__`` at the class "
"level)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1461
msgid ""
"Updated dependency on ``WebOb`` to require a version which supports "
"features now used in tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:1467
msgid ""
"Jython compatibility (at least when repoze.bfg.jinja2 is used as the "
"templating engine; Chameleon does not work under Jython)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1470
msgid ""
"Show the derived abspath of template resource specifications in the "
"traceback when a renderer template cannot be found."
msgstr ""

#: ../../../BFG_HISTORY.txt:1473
msgid ""
"Show the original traceback when a Chameleon template cannot be rendered "
"due to a platform incompatibility."
msgstr ""

#: ../../../BFG_HISTORY.txt:1477
msgid "1.2a10 (2010-01-04)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1482
msgid ""
"The ``Configurator.add_view`` method now accepts an argument named "
"``context``.  This is an alias for the older argument named ``for_``; it "
"is preferred over ``for_``, but ``for_`` will continue to be supported "
"\"forever\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:1487
msgid ""
"The ``view`` ZCML directive now accepts an attribute named ``context``.  "
"This is an alias for the older attribute named ``for``; it is preferred "
"over ``for``, but ``for`` will continue to be supported \"forever\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:1492
msgid ""
"The ``Configurator.add_route`` method now accepts an argument named "
"``view_context``.  This is an alias for the older argument named "
"``view_for``; it is preferred over ``view_for``, but ``view_for`` will "
"continue to be supported \"forever\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:1497
msgid ""
"The ``route`` ZCML directive now accepts an attribute named "
"``view_context``.  This is an alias for the older attribute named "
"``view_for``; it is preferred over ``view_for``, but ``view_for`` will "
"continue to be supported \"forever\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:1503
msgid "Documentation and Paster Templates"
msgstr ""

#: ../../../BFG_HISTORY.txt:1505
msgid "LaTeX rendering tweaks."
msgstr ""

#: ../../../BFG_HISTORY.txt:1507
msgid ""
"All uses of the ``Configurator.add_view`` method that used its ``for_`` "
"argument now use the ``context`` argument instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:1510
msgid ""
"All uses of the ``Configurator.add_route`` method that used its "
"``view_for`` argument now use the ``view_context`` argument instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:1513
msgid ""
"All uses of the ``view`` ZCML directive that used its ``for`` attribute "
"now use the ``context`` attribute instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:1516
msgid ""
"All uses of the ``route`` ZCML directive that used its ``view_for`` "
"attribute now use the ``view_context`` attribute instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:1519
msgid ""
"Add a (minimal) tutorial dealing with use of ``repoze.catalog`` in a "
"``repoze.bfg`` application."
msgstr ""

#: ../../../BFG_HISTORY.txt:1523 ../../../BFG_HISTORY.txt:1537
msgid "Documentation Licensing"
msgstr ""

#: ../../../BFG_HISTORY.txt:1525
msgid ""
"Loosen the documentation licensing to allow derivative works: it is now "
"offered under the `Creative Commons Attribution-Noncommercial-Share Alike"
" 3.0 United States License <http://creativecommons.org/licenses/by-nc-"
"sa/3.0/us/>`_.  This is only a documentation licensing change; the "
"``repoze.bfg`` software continues to be offered under the Repoze Public "
"License at http://repoze.org/license.html (BSD-like)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1534
msgid "1.2a9 (2009-12-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1539
msgid ""
"The *documentation* (the result of ``make <html|latex|htmlhelp>`` within "
"the ``docs`` directory) in this release is now offered under the Creative"
" Commons Attribution-Noncommercial-No Derivative Works 3.0 United States "
"License as described by http://creativecommons.org/licenses/by-nc-"
"nd/3.0/us/ .  This is only a licensing change for the documentation; the "
"``repoze.bfg`` software continues to be offered under the Repoze Public "
"License at http://repoze.org/license.html (BSD-like)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1551
msgid "Added manual index entries to generated index."
msgstr ""

#: ../../../BFG_HISTORY.txt:1553
msgid ""
"Document the previously existing (but non-API) "
"``repoze.bfg.configuration.Configurator.setup_registry`` method as an "
"official API of a ``Configurator``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1557
msgid "Fix syntax errors in various documentation code blocks."
msgstr ""

#: ../../../BFG_HISTORY.txt:1559
msgid ""
"Created new top-level documentation section: \"ZCML Directives\". This "
"section contains detailed ZCML directive information, some of which was "
"removed from various narrative chapters."
msgstr ""

#: ../../../BFG_HISTORY.txt:1563
msgid "The LaTeX rendering of the documentation has been improved."
msgstr ""

#: ../../../BFG_HISTORY.txt:1565
msgid ""
"Added a \"Fore-Matter\" section with author, copyright, and licensing "
"information."
msgstr ""

#: ../../../BFG_HISTORY.txt:1569
msgid "1.2a8 (2009-12-24)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1574
msgid "Add a ``**kw`` arg to the ``Configurator.add_settings`` API."
msgstr ""

#: ../../../BFG_HISTORY.txt:1576
msgid "Add ``hook_zca`` and ``unhook_zca`` methods to the ``Configurator`` API."
msgstr ""

#: ../../../BFG_HISTORY.txt:1579
msgid ""
"The ``repoze.bfg.testing.setUp`` method now returns a ``Configurator`` "
"instance which can be used to do further configuration during unit tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:1586
msgid ""
"The ``json`` renderer failed to set the response content type to "
"``application/json``.  It now does, by setting "
"``request.response_content_type`` unless this attribute is already set."
msgstr ""

#: ../../../BFG_HISTORY.txt:1591
msgid ""
"The ``string`` renderer failed to set the response content type to "
"``text/plain``.  It now does, by setting "
"``request.response_content_type`` unless this attribute is already set."
msgstr ""

#: ../../../BFG_HISTORY.txt:1599
msgid ""
"General documentation improvements by using better Sphinx roles such as "
"\"class\", \"func\", \"meth\", and so on.  This means that there are many"
" more hyperlinks pointing to API documentation for API definitions in all"
" narrative, tutorial, and API documentation elements."
msgstr ""

#: ../../../BFG_HISTORY.txt:1605
msgid ""
"Added a description of imperative configuration in various places which "
"only described ZCML configuration."
msgstr ""

#: ../../../BFG_HISTORY.txt:1608
msgid "A syntactical refreshing of various tutorials."
msgstr ""

#: ../../../BFG_HISTORY.txt:1610
msgid ""
"Added the ``repoze.bfg.authentication``, ``repoze.bfg.authorization``, "
"and ``repoze.bfg.interfaces`` modules to API documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:1617
msgid ""
"The ``repoze.bfg.testing.registerRoutesMapper`` API (added in an early "
"1.2 alpha) was deprecated.  Its import now generates a deprecation "
"warning."
msgstr ""

#: ../../../BFG_HISTORY.txt:1622
msgid "1.2a7 (2009-12-20)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1627
msgid ""
"Add four new testing-related APIs to the "
"``repoze.bfg.configuration.Configurator`` class: "
"``testing_securitypolicy``, ``testing_models``, "
"``testing_add_subscriber``, and ``testing_add_template``.  These were "
"added in order to provide more direct access to the functionality of the "
"``repoze.bfg.testing`` APIs named ``registerDummySecurityPolicy``, "
"``registerModels``, ``registerEventListener``, and "
"``registerTemplateRenderer`` when a configurator is used.  The "
"``testing`` APIs named are nominally deprecated (although they will "
"likely remain around \"forever\", as they are in heavy use in the wild)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1639
msgid ""
"Add a new API to the ``repoze.bfg.configuration.Configurator`` class: "
"``add_settings``.  This API can be used to add \"settings\" (information "
"returned within via the ``repoze.bfg.settings.get_settings`` API) after "
"the configurator has been initially set up.  This is most useful for "
"testing purposes."
msgstr ""

#: ../../../BFG_HISTORY.txt:1645
msgid ""
"Add a ``custom_predicates`` argument to the ``Configurator`` ``add_view``"
" method, the ``bfg_view`` decorator and the attribute list of the ZCML "
"``view`` directive.  If ``custom_predicates`` is specified, it must be a "
"sequence of predicate callables (a predicate callable accepts two "
"arguments: ``context`` and ``request`` and returns ``True`` or "
"``False``).  The associated view callable will only be invoked if all "
"custom predicates return ``True``.  Use one or more custom predicates "
"when no existing predefined predicate is useful.  Predefined and custom "
"predicates can be mixed freely."
msgstr ""

#: ../../../BFG_HISTORY.txt:1655
msgid ""
"Add a ``custom_predicates`` argument to the ``Configurator`` "
"``add_route`` and the attribute list of the ZCML ``route`` directive.  If"
" ``custom_predicates`` is specified, it must be a sequence of predicate "
"callables (a predicate callable accepts two arguments: ``context`` and "
"``request`` and returns ``True`` or ``False``).  The associated route "
"will match will only be invoked if all custom predicates return ``True``,"
" else route matching continues.  Note that the value ``context`` will "
"always be ``None`` when passed to a custom route predicate.  Use one or "
"more custom predicates when no existing predefined predicate is useful. "
"Predefined and custom predicates can be mixed freely."
msgstr ""

#: ../../../BFG_HISTORY.txt:1670
msgid ""
"Remove the ``repoze.bfg.testing.registerTraverser`` function.  This "
"function was never an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:1674
msgid "Documenation"
msgstr ""

#: ../../../BFG_HISTORY.txt:1676
msgid ""
"Doc-deprecated most helper functions in the ``repoze.bfg.testing`` "
"module.  These helper functions likely won't be removed any time soon, "
"nor will they generate a warning any time soon, due to their heavy use in"
" the wild, but equivalent behavior exists in methods of a Configurator."
msgstr ""

#: ../../../BFG_HISTORY.txt:1683
msgid "1.2a6 (2009-12-18)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1688
msgid ""
"The ``Configurator`` object now has two new methods: ``begin`` and "
"``end``.  The ``begin`` method is meant to be called before any "
"\"configuration\" begins (e.g. before ``add_view``, et. al are called).  "
"The ``end`` method is meant to be called after all \"configuration\" is "
"complete."
msgstr ""

#: ../../../BFG_HISTORY.txt:1694
msgid ""
"Previously, before there was imperative configuration at all (1.1 and "
"prior), configuration begin and end was invariably implied by the process"
" of loading a ZCML file.  When a ZCML load happened, the threadlocal data"
" structure containing the request and registry was modified before the "
"load, and torn down after the load, making sure that all framework code "
"that needed ``get_current_registry`` for the duration of the ZCML load "
"was satisfied."
msgstr ""

#: ../../../BFG_HISTORY.txt:1702
msgid ""
"Some API methods called during imperative configuration, (such as "
"``Configurator.add_view`` when a renderer is involved) end up for "
"historical reasons calling ``get_current_registry``.  However, in 1.2a5 "
"and below, the Configurator supplied no functionality that allowed people"
" to make sure that ``get_current_registry`` returned the registry implied"
" by the configurator being used.  ``begin`` now serves this purpose.  "
"Inversely, ``end`` pops the thread local stack, undoing the actions of "
"``begin``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1711
msgid ""
"We make this boundary explicit to reduce the potential for confusion when"
" the configurator is used in different circumstances (e.g. in unit tests "
"and app code vs. just in initial app setup)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1715
msgid ""
"Existing code written for 1.2a1-1.2a5 which does not call ``begin`` or "
"``end`` continues to work in the same manner it did before.  It is "
"however suggested that this code be changed to call ``begin`` and ``end``"
" to reduce the potential for confusion in the future."
msgstr ""

#: ../../../BFG_HISTORY.txt:1720
msgid ""
"All ``paster`` templates which generate an application skeleton now make "
"use of the new ``begin`` and ``end`` methods of the Configurator they use"
" in their respective copies of ``run.py`` and ``tests.py``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1728
msgid ""
"All documentation that makes use of a ``Configurator`` object to do "
"application setup and test setup now makes use of the new ``begin`` and "
"``end`` methods of the configurator."
msgstr ""

#: ../../../BFG_HISTORY.txt:1735
msgid ""
"When a ``repoze.bfg.exceptions.NotFound`` or "
"``repoze.bfg.exceptions.Forbidden`` *class* (as opposed to instance) was "
"raised as an exception within a root factory (or route root factory), the"
" exception would not be caught properly by the ``repoze.bfg.`` Router and"
" it would propagate to up the call stack, as opposed to rendering the not"
" found view or the forbidden view as would have been expected."
msgstr ""

#: ../../../BFG_HISTORY.txt:1743
msgid ""
"When Chameleon page or text templates used as renderers were added "
"imperatively (via ``Configurator.add_view`` or some derivative), they "
"too-eagerly attempted to look up the ``reload_templates`` setting via "
"``get_settings``, meaning they were always registered in non-auto-reload-"
"mode (the default).  Each now waits until its respective ``template`` "
"attribute is accessed to look up the value."
msgstr ""

#: ../../../BFG_HISTORY.txt:1750
msgid ""
"When a route with the same name as a previously registered route was "
"added, the old route was not removed from the mapper's routelist. "
"Symptom: the old registered route would be used (and possibly matched) "
"during route lookup when it should not have had a chance to ever be used."
msgstr ""

#: ../../../BFG_HISTORY.txt:1757
msgid "1.2a5 (2009-12-10)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1762
msgid ""
"When the ``repoze.bfg.exceptions.NotFound`` or "
"``repoze.bfg.exceptions.Forbidden`` error is raised from within a custom "
"root factory or the ``factory`` of a route, the appropriate response is "
"now sent to the requesting user agent (the result of the notfound view or"
" the forbidden view, respectively).  When these errors are raised from "
"within a root factory, the ``context`` passed to the notfound or "
"forbidden view will be ``None``.  Also, the request will not be decorated"
" with ``view_name``, ``subpath``, ``context``, etc. as would normally be "
"the case if traversal had been allowed to take place."
msgstr ""

#: ../../../BFG_HISTORY.txt:1776
msgid ""
"The exception class representing the error raised by various methods of a"
" ``Configurator`` is now importable as "
"``repoze.bfg.exceptions.ConfigurationError``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1783
msgid ""
"General documentation freshening which takes imperative configuration "
"into account in more places and uses glossary references more liberally."
msgstr ""

#: ../../../BFG_HISTORY.txt:1787
msgid ""
"Remove explanation of changing the request type in a new request event "
"subscriber, as other predicates are now usually an easier way to get this"
" done."
msgstr ""

#: ../../../BFG_HISTORY.txt:1791
msgid ""
"Added \"Thread Locals\" narrative chapter to documentation, and added a "
"API chapter documenting the ``repoze.bfg.threadlocals`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:1794
msgid ""
"Added a \"Special Exceptions\" section to the \"Views\" narrative "
"documentation chapter explaining the effect of raising "
"``repoze.bfg.exceptions.NotFound`` and "
"``repoze.bfg.exceptions.Forbidden`` from within view code."
msgstr ""

#: ../../../BFG_HISTORY.txt:1802
msgid ""
"A new dependency on the ``twill`` package was added to the ``setup.py`` "
"``tests_require`` argument (Twill will only be downloaded when "
"``repoze.bfg`` ``setup.py test`` or ``setup.py nosetests`` is invoked)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1808
msgid "1.2a4 (2009-12-07)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1813
msgid ""
"``repoze.bfg.testing.DummyModel`` now accepts a new constructor keyword "
"argument: ``__provides__``.  If this constructor argument is provided, it"
" should be an interface or a tuple of interfaces.  The resulting model "
"will then provide these interfaces (they will be attached to the "
"constructed model via ``zope.interface.alsoProvides``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1823
msgid ""
"Operation on GAE was broken, presumably because the "
"``repoze.bfg.configuration`` module began to attempt to import the "
"``repoze.bfg.chameleon_zpt`` and ``repoze.bfg.chameleon_text`` modules, "
"and these cannot be used on non-CPython platforms.  It now tolerates "
"startup time import failures for these modules, and only raise an import "
"error when a template from one of these packages is actually used."
msgstr ""

#: ../../../BFG_HISTORY.txt:1832
msgid "1.2a3 (2009-12-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1837
msgid ""
"The ``repoze.bfg.url.route_url`` function inappropriately passed along "
"``_query`` and/or ``_anchor`` arguments to the ``mapper.generate`` "
"function, resulting in blowups."
msgstr ""

#: ../../../BFG_HISTORY.txt:1841
msgid ""
"When two views were registered with differering ``for`` interfaces or "
"classes, and the ``for`` of first view registered was a superclass of the"
" second, the ``repoze.bfg`` view machinery would incorrectly associate "
"the two views with the same \"multiview\". Multiviews are meant to be "
"collections of views that have *exactly* the same for/request/viewname "
"values, without taking inheritance into account.  Symptom: wrong view "
"callable found even when you had correctly specified a ``for_`` "
"interface/class during view configuration for one or both view "
"configurations."
msgstr ""

#: ../../../BFG_HISTORY.txt:1854
msgid ""
"The ``repoze.bfg.templating`` module has been removed; it had been "
"deprecated in 1.1 and never actually had any APIs in it."
msgstr ""

#: ../../../BFG_HISTORY.txt:1858
msgid "1.2a2 (2009-11-29)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1863
msgid ""
"The long description of this package (as shown on PyPI) was not valid "
"reStructuredText, and so was not renderable."
msgstr ""

#: ../../../BFG_HISTORY.txt:1866
msgid ""
"Trying to use an HTTP method name string such as ``GET`` as a "
"``request_type`` predicate argument caused a startup time failure when it"
" was encountered in imperative configuration or in a decorator (symptom: "
"``Type Error: Required specification must be a specification``).  This "
"now works again, although ``request_method`` is now the preferred "
"predicate argument for associating a view configuration with an HTTP "
"request method."
msgstr ""

#: ../../../BFG_HISTORY.txt:1877
msgid ""
"Fixed \"Startup\" narrative documentation chapter; it was explaining "
"\"the old way\" an application constructor worked."
msgstr ""

#: ../../../BFG_HISTORY.txt:1881
msgid "1.2a1 (2009-11-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:1886
msgid "An imperative configuration mode."
msgstr ""

#: ../../../BFG_HISTORY.txt:1888
msgid ""
"A ``repoze.bfg`` application can now begin its life as a single Python "
"file.  Later, the application might evolve into a set of Python files in "
"a package.  Even later, it might start making use of other configuration "
"features, such as ``ZCML``.  But neither the use of a package nor the use"
" of non-imperative configuration is required to create a simple "
"``repoze.bfg`` application any longer."
msgstr ""

#: ../../../BFG_HISTORY.txt:1895
msgid ""
"Imperative configuration makes ``repoze.bfg`` competetive with "
"\"microframeworks\" such as `Bottle <http://bottle.paws.de/>`_ and "
"`Tornado <http://www.tornadoweb.org/>`_.  ``repoze.bfg`` has a good deal "
"of functionality that most microframeworks lack, so this is hopefully a "
"\"best of both worlds\" feature."
msgstr ""

#: ../../../BFG_HISTORY.txt:1901
msgid "The simplest possible ``repoze.bfg`` application is now::"
msgstr ""

#: ../../../BFG_HISTORY.txt:1916
msgid ""
"A new class now exists: ``repoze.bfg.configuration.Configurator``. This "
"class forms the basis for sharing machinery between \"imperatively\" "
"configured applications and traditional declaratively-configured "
"applications."
msgstr ""

#: ../../../BFG_HISTORY.txt:1921
msgid ""
"The ``repoze.bfg.testing.setUp`` function now accepts three extra "
"optional keyword arguments: ``registry``, ``request`` and ``hook_zca``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1925
msgid ""
"If the ``registry`` argument is not ``None``, the argument will be "
"treated as the registry that is set as the \"current registry\" (it will "
"be returned by ``repoze.bfg.threadlocal.get_current_registry``) for the "
"duration of the test.  If the ``registry`` argument is ``None`` (the "
"default), a new registry is created and used for the duration of the "
"test."
msgstr ""

#: ../../../BFG_HISTORY.txt:1932
msgid ""
"The value of the ``request`` argument is used as the \"current request\" "
"(it will be returned by ``repoze.bfg.threadlocal.get_current_request``) "
"for the duration of the test; it defaults to ``None``."
msgstr ""

#: ../../../BFG_HISTORY.txt:1937
msgid ""
"If ``hook_zca`` is ``True`` (the default), the "
"``zope.component.getSiteManager`` function will be hooked with a function"
" that returns the value of ``registry`` (or the default-created registry "
"if ``registry`` is ``None``) instead of the registry returned by "
"``zope.component.getGlobalSiteManager``, causing the Zope Component "
"Architecture API (``getSiteManager``, ``getAdapter``, ``getUtility``, and"
" so on) to use the testing registry instead of the global ZCA registry."
msgstr ""

#: ../../../BFG_HISTORY.txt:1946
msgid ""
"The ``repoze.bfg.testing.tearDown`` function now accepts an "
"``unhook_zca`` argument.  If this argument is ``True`` (the default), "
"``zope.component.getSiteManager.reset()`` will be called. This will cause"
" the result of the ``zope.component.getSiteManager`` function to be the "
"global ZCA registry (the result of "
"``zope.component.getGlobalSiteManager``) once again."
msgstr ""

#: ../../../BFG_HISTORY.txt:1953
msgid ""
"The ``run.py`` module in various ``repoze.bfg`` ``paster`` templates now "
"use a ``repoze.bfg.configuration.Configurator`` class instead of the "
"(now-legacy) ``repoze.bfg.router.make_app`` function to produce a WSGI "
"application."
msgstr ""

#: ../../../BFG_HISTORY.txt:1961
msgid ""
"The documentation now uses the \"request-only\" view calling convention "
"in most examples (as opposed to the ``context, request`` convention).  "
"This is a documentation-only change; the ``context, request`` convention "
"is also supported and documented, and will be \"forever\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:1967
msgid "``repoze.bfg.configuration`` API documentation has been added."
msgstr ""

#: ../../../BFG_HISTORY.txt:1969
msgid ""
"A narrative documentation chapter entitled \"Creating Your First "
"``repoze.bfg`` Application\" has been added.  This chapter details usage "
"of the new ``repoze.bfg.configuration.Configurator`` class, and "
"demonstrates a simplified \"imperative-mode\" configuration; doing "
"``repoze.bfg`` application configuration imperatively was previously much"
" more difficult."
msgstr ""

#: ../../../BFG_HISTORY.txt:1976
msgid ""
"A narrative documentation chapter entitled \"Configuration, Decorations "
"and Code Scanning\" explaining ZCML- vs. imperative- vs. decorator-based "
"configuration equivalence."
msgstr ""

#: ../../../BFG_HISTORY.txt:1980
msgid ""
"The \"ZCML Hooks\" chapter has been renamed to \"Hooks\"; it documents "
"how to override hooks now via imperative configuration and ZCML."
msgstr ""

#: ../../../BFG_HISTORY.txt:1983
msgid ""
"The explanation about how to supply an alternate \"response factory\" has"
" been removed from the \"Hooks\" chapter.  This feature may be removed in"
" a later release (it still works now, it's just not documented)."
msgstr ""

#: ../../../BFG_HISTORY.txt:1988
msgid ""
"Add a section entitled \"Test Set Up and Tear Down\" to the unittesting "
"chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:1994
msgid ""
"The ACL authorization policy debugging output when "
"``debug_authorization`` console debugging output was turned on wasn't as "
"clear as it could have been when a view execution was denied due to an "
"authorization failure resulting from the set of principals passed never "
"having matched any ACE in any ACL in the lineage.  Now in this case, we "
"report ``<default deny>`` as the ACE value and either the root ACL or "
"``<No ACL found on any object in model lineage>`` if no ACL was found."
msgstr ""

#: ../../../BFG_HISTORY.txt:2003
msgid ""
"When two views were registered with the same ``accept`` argument, but "
"were otherwise registered with the same arguments, if a request entered "
"the application which had an ``Accept`` header that accepted *either* of "
"the media types defined by the set of views registered with predicates "
"that otherwise matched, a more or less \"random\" one view would \"win\"."
"  Now, we try harder to use the view callable associated with the view "
"configuration that has the most specific ``accept`` argument.  Thanks to "
"Alberto Valverde for an initial patch."
msgstr ""

#: ../../../BFG_HISTORY.txt:2016
msgid ""
"The routes mapper is no longer a root factory wrapper.  It is now "
"consulted directly by the router."
msgstr ""

#: ../../../BFG_HISTORY.txt:2019
msgid "The ``repoze.bfg.registry.make_registry`` callable has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2021
msgid "The ``repoze.bfg.view.map_view`` callable has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2023
msgid "The ``repoze.bfg.view.owrap_view`` callable has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2025
msgid "The ``repoze.bfg.view.predicate_wrap`` callable has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2027
msgid "The ``repoze.bfg.view.secure_view`` callable has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2029
msgid "The ``repoze.bfg.view.authdebug_view`` callable has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2031
msgid ""
"The ``repoze.bfg.view.renderer_from_name`` callable has been removed.  "
"Use ``repoze.bfg.configuration.Configurator.renderer_from_name`` instead "
"(still not an API, however)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2035
msgid ""
"The ``repoze.bfg.view.derive_view`` callable has been removed.  Use "
"``repoze.bfg.configuration.Configurator.derive_view`` instead (still not "
"an API, however)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2039
msgid ""
"The ``repoze.bfg.settings.get_options`` callable has been removed. Its "
"job has been subsumed by the ``repoze.bfg.settings.Settings`` class "
"constructor."
msgstr ""

#: ../../../BFG_HISTORY.txt:2043
msgid ""
"The ``repoze.bfg.view.requestonly`` function has been moved to "
"``repoze.bfg.configuration.requestonly``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2046
msgid ""
"The ``repoze.bfg.view.rendered_response`` function has been moved to "
"``repoze.bfg.configuration.rendered_response``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2049
msgid ""
"The ``repoze.bfg.view.decorate_view`` function has been moved to "
"``repoze.bfg.configuration.decorate_view``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2052
msgid ""
"The ``repoze.bfg.view.MultiView`` class has been moved to "
"``repoze.bfg.configuration.MultiView``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2055
msgid "The ``repoze.bfg.zcml.Uncacheable`` class has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2057
msgid "The ``repoze.bfg.resource.resource_spec`` function has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2059
msgid ""
"All ZCML directives which deal with attributes which are paths now use "
"the ``path`` method of the ZCML context to resolve a relative name to an "
"absolute one (imperative configuration requirement)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2063
msgid ""
"The ``repoze.bfg.scripting.get_root`` API now uses a 'real' WebOb request"
" rather than a FakeRequest when it sets up the request as a threadlocal."
msgstr ""

#: ../../../BFG_HISTORY.txt:2067
msgid ""
"The ``repoze.bfg.traversal.traverse`` API now uses a 'real' WebOb request"
" rather than a FakeRequest when it calls the traverser."
msgstr ""

#: ../../../BFG_HISTORY.txt:2070
msgid "The ``repoze.bfg.request.FakeRequest`` class has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2072
msgid ""
"Most uses of the ZCA threadlocal API (the ``getSiteManager``, "
"``getUtility``, ``getAdapter``, ``getMultiAdapter`` threadlocal API) have"
" been removed from the core.  Instead, when a threadlocal is necessary, "
"the core uses the ``repoze.bfg.threadlocal.get_current_registry`` API to "
"obtain the registry."
msgstr ""

#: ../../../BFG_HISTORY.txt:2079
msgid ""
"The internal ILogger utility named ``repoze.bfg.debug`` is now just an "
"IDebugLogger unnamed utility.  A named utility with the old name is "
"registered for b/w compat."
msgstr ""

#: ../../../BFG_HISTORY.txt:2083
msgid ""
"The ``repoze.bfg.interfaces.ITemplateRendererFactory`` interface was "
"removed; it has become unused."
msgstr ""

#: ../../../BFG_HISTORY.txt:2086
msgid ""
"Instead of depending on the ``martian`` package to do code scanning, we "
"now just use our own scanning routines."
msgstr ""

#: ../../../BFG_HISTORY.txt:2089
msgid ""
"We now no longer have a dependency on ``repoze.zcml`` package; instead, "
"the ``repoze.bfg`` package includes implementations of the ``adapter``, "
"``subscriber`` and ``utility`` directives."
msgstr ""

#: ../../../BFG_HISTORY.txt:2093
msgid "Relating to the following functions:"
msgstr ""

#: ../../../BFG_HISTORY.txt:2095
msgid "``repoze.bfg.view.render_view``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2097
msgid "``repoze.bfg.view.render_view_to_iterable``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2099
msgid "``repoze.bfg.view.render_view_to_response``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2101
msgid "``repoze.bfg.view.append_slash_notfound_view``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2103
msgid "``repoze.bfg.view.default_notfound_view``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2105
msgid "``repoze.bfg.view.default_forbidden_view``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2107
msgid "``repoze.bfg.configuration.rendered_response``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2109
msgid "``repoze.bfg.security.has_permission``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2111
msgid "``repoze.bfg.security.authenticated_userid``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2113
msgid "``repoze.bfg.security.effective_principals``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2115
msgid "``repoze.bfg.security.view_execution_permitted``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2117
msgid "``repoze.bfg.security.remember``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2119
msgid "``repoze.bfg.security.forget``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2121
msgid "``repoze.bfg.url.route_url``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2123
msgid "``repoze.bfg.url.model_url``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2125
msgid "``repoze.bfg.url.static_url``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2127
msgid "``repoze.bfg.traversal.virtual_root``"
msgstr ""

#: ../../../BFG_HISTORY.txt:2129
msgid ""
"Each of these functions now expects to be called with a request object "
"that has a ``registry`` attribute which represents the current "
"``repoze.bfg`` registry.  They fall back to obtaining the registry from "
"the threadlocal API."
msgstr ""

#: ../../../BFG_HISTORY.txt:2135
msgid "Backwards Incompatibilites"
msgstr ""

#: ../../../BFG_HISTORY.txt:2137
msgid ""
"Unit tests which use ``zope.testing.cleanup.cleanUp`` for the purpose of "
"isolating tests from one another may now begin to fail due to lack of "
"isolation between tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:2141
msgid ""
"Here's why: In repoze.bfg 1.1 and prior, the registry returned by "
"``repoze.bfg.threadlocal.get_current_registry`` when no other registry "
"had been pushed on to the threadlocal stack was the "
"``zope.component.globalregistry.base`` global registry (aka the result of"
" ``zope.component.getGlobalSiteManager()``).  In repoze.bfg 1.2+, "
"however, the registry returned in this situation is the new module-scope "
"``repoze.bfg.registry.global_registry`` object.  The "
"``zope.testing.cleanup.cleanUp`` function clears the "
"``zope.component.globalregistry.base`` global registry unconditionally.  "
"However, it does not know about the "
"``repoze.bfg.registry.global_registry`` object, so it does not clear it."
msgstr ""

#: ../../../BFG_HISTORY.txt:2154
msgid ""
"If you use the ``zope.testing.cleanup.cleanUp`` function in the ``setUp``"
" of test cases in your unit test suite instead of using the (more correct"
" as of 1.1) ``repoze.bfg.testing.setUp``, you will need to replace all "
"calls to ``zope.testing.cleanup.cleanUp`` with a call to "
"``repoze.bfg.testing.setUp``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2160
msgid ""
"If replacing all calls to ``zope.testing.cleanup.cleanUp`` with a call to"
" ``repoze.bfg.testing.setUp`` is infeasible, you can put this bit of code"
" somewhere that is executed exactly **once** (*not* for each test in a "
"test suite; in the `` __init__.py`` of your package or your package's "
"``tests`` subpackage would be a reasonable place)::"
msgstr ""

#: ../../../BFG_HISTORY.txt:2171
msgid ""
"When there is no \"current registry\" in the "
"``repoze.bfg.threadlocal.manager`` threadlocal data structure (this is "
"the case when there is no \"current request\" or we're not in the midst "
"of a ``r.b.testing.setUp``-bounded unit test), the ``.get`` method of the"
" manager returns a data structure containing a *global* registry.  In "
"previous releases, this function returned the global Zope \"base\" "
"registry: the result of ``zope.component.getGlobalSiteManager``, which is"
" an instance of the ``zope.component.registry.Component`` class.  In this"
" release, however, the global registry returns a globally importable "
"instance of the ``repoze.bfg.registry.Registry`` class.  This registry "
"instance can always be imported as "
"``repoze.bfg.registry.global_registry``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2185
msgid ""
"Effectively, this means that when you call "
"``repoze.bfg.threadlocal.get_current_registry`` when no request or "
"``setUp`` bounded unit test is in effect, you will always get back the "
"global registry that lives in ``repoze.bfg.registry.global_registry``.  "
"It also means that ``repoze.bfg`` APIs that *call* "
"``get_current_registry`` will use this registry."
msgstr ""

#: ../../../BFG_HISTORY.txt:2193
msgid ""
"This change was made because ``repoze.bfg`` now expects the registry it "
"uses to have a slightly different API than a bare instance of "
"``zope.component.registry.Components``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2197
msgid ""
"View registration no longer registers a "
"``repoze.bfg.interfaces.IViewPermission`` adapter (it is no longer "
"checked by the framework; since 1.1, views have been responsible for "
"providing their own security)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2202
msgid ""
"The ``repoze.bfg.router.make_app`` callable no longer accepts the "
"``authentication_policy`` nor the ``authorization_policy`` arguments.  "
"This feature was deprecated in version 1.0 and has been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2207
msgid ""
"Obscure: the machinery which configured views with a ``request_type`` "
"*and* a ``route_name`` would ignore the request interface implied by "
"``route_name`` registering a view only for the interface implied by "
"``request_type``.  In the unlikely event that you were trying to use "
"these two features together, the symptom would have been that views that "
"named a ``request_type`` but which were also associated with routes were "
"not found when the route matched.  Now if a view is configured with both "
"a ``request_type`` and a ``route_name``, an error is raised."
msgstr ""

#: ../../../BFG_HISTORY.txt:2217
msgid ""
"The ``route`` ZCML directive now no longer accepts the ``request_type`` "
"or ``view_request_type`` attributes.  These attributes didn't actually "
"work in any useful way (see entry above this one)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2222
msgid ""
"Because the ``repoze.bfg`` package now includes implementations of the "
"``adapter``, ``subscriber`` and ``utility`` ZCML directives, it is now an"
" error to have ``<include package=\"repoze.zcml\" file=\"meta.zcml\"/>`` "
"in the ZCML of a ``repoze.bfg`` application.  A ZCML conflict error will "
"be raised if your ZCML does so.  This shouldn't be an issue for "
"\"normal\" installations; it has always been the responsibility of the "
"``repoze.bfg.includes`` ZCML to include this file in the past; it now "
"just doesn't."
msgstr ""

#: ../../../BFG_HISTORY.txt:2231
msgid ""
"The ``repoze.bfg.testing.zcml_configure`` API was removed.  Use the "
"``Configurator.load_zcml`` API instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:2237
msgid ""
"The ``repoze.bfg.router.make_app`` function is now nominally deprecated."
"  Its import and usage does not throw a warning, nor will it probably "
"ever disappear.  However, using a "
"``repoze.bfg.configuration.Configurator`` class is now the preferred way "
"to generate a WSGI application."
msgstr ""

#: ../../../BFG_HISTORY.txt:2243
msgid ""
"Note that ``make_app`` calls ``zope.component.getSiteManager.sethook( "
"repoze.bfg.threadlocal.get_current_registry)`` on the caller's behalf, "
"hooking ZCA global API lookups, for backwards compatibility purposes.  If"
" you disuse ``make_app``, your calling code will need to perform this "
"call itself, at least if your application uses the ZCA global API "
"(``getSiteManager``, ``getAdapter``, etc)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2254
msgid ""
"A dependency on the ``martian`` package has been removed (its "
"functionality is replaced internally)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2257
msgid ""
"A dependency on the ``repoze.zcml`` package has been removed (its "
"functionality is replaced internally)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2261
msgid "1.1.1 (2009-11-21)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2266
msgid ""
"\"Hybrid mode\" applications (applications which explicitly used "
"traversal *after* url dispatch via ``<route>`` paths containing the "
"``*traverse`` element) were broken in 1.1-final and all 1.1 alpha and "
"beta releases.  Views registered without a ``route_name`` route shadowed "
"views registered with a ``route_name`` inappropriately."
msgstr ""

#: ../../../BFG_HISTORY.txt:2273
msgid "1.1 (2009-11-15)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2278
msgid "Remove dead IRouteRequirement interface from ``repoze.bfg.zcml`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:2284
msgid "Improve the \"Extending an Existing Application\" narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:2286
msgid "Add more sections to the \"Defending Design\" chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:2289
msgid "1.1b4 (2009-11-12)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2294
msgid ""
"Use ``alsoProvides`` in the urldispatch module to attach an interface to "
"the request rather than ``directlyProvides`` to avoid disturbing "
"interfaces set in a NewRequest event handler."
msgstr ""

#: ../../../BFG_HISTORY.txt:2301
msgid "Move 1.0.1 and previous changelog to HISTORY.txt."
msgstr ""

#: ../../../BFG_HISTORY.txt:2303
msgid "Add examples to ``repoze.bfg.url.model_url`` docstring."
msgstr ""

#: ../../../BFG_HISTORY.txt:2305
msgid "Add \"Defending BFG Design\" chapter to frontpage docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:2308
msgid "Templates"
msgstr ""

#: ../../../BFG_HISTORY.txt:2310
msgid ""
"Remove ``ez_setup.py`` and its import from all paster templates, samples,"
" and tutorials for ``distribute`` compatibility.  The documentation "
"already explains how to install virtualenv (which will include some "
"``setuptools`` package), so these files, imports and usages were "
"superfluous."
msgstr ""

#: ../../../BFG_HISTORY.txt:2319
msgid ""
"The ``options`` kw arg to the ``repoze.bfg.router.make_app`` function is "
"deprecated.  In its place is the keyword argument ``settings``.  The "
"``options`` keyword continues to work, and a deprecation warning is not "
"emitted when it is detected.  However, the paster templates, code "
"samples, and documentation now make reference to ``settings`` rather than"
" ``options``.  This change/deprecation was mainly made for purposes of "
"clarity and symmetry with the ``get_settings()`` API and dicussions of "
"\"settings\" in various places in the docs: we want to use the same name "
"to refer to the same thing everywhere."
msgstr ""

#: ../../../BFG_HISTORY.txt:2331
msgid "1.1b3 (2009-11-06)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2336
msgid ""
"``repoze.bfg.testing.registerRoutesMapper`` testing facility added. This "
"testing function registers a routes \"mapper\" object in the registry, "
"for tests which require its presence.  This function is documented in the"
" ``repoze.bfg.testing`` API documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:2344
msgid ""
"Compound statements that used an assignment entered into in an "
"interactive IPython session invoked via ``paster bfgshell`` no longer "
"fail to mutate the shell namespace correctly.  For example, this set of "
"statements used to fail::"
msgstr ""

#: ../../../BFG_HISTORY.txt:2354
msgid ""
"In this release, the ``bar`` function is found and the correct output is "
"now sent to the console.  Thanks to Daniel Holth for the patch."
msgstr ""

#: ../../../BFG_HISTORY.txt:2358
msgid ""
"The ``bfgshell`` command did not function properly; it was still "
"expecting to be able to call the root factory with a bare ``environ`` "
"rather than a request object."
msgstr ""

#: ../../../BFG_HISTORY.txt:2365
msgid ""
"The ``repoze.bfg.scripting.get_root`` function now expects a ``request`` "
"object as its second argument rather than an ``environ``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2370
msgid "1.1b2 (2009-11-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2375
msgid ""
"Prevent PyPI installation failure due to ``easy_install`` trying way too "
"hard to guess the best version of Paste.  When ``easy_install`` pulls "
"from PyPI it reads links off various pages to determine \"more up to "
"date\" versions. It incorrectly picks up a link for an ancient version of"
" a package named \"Paste-Deploy-0.1\" (note the dash) when trying to find"
" the \"Paste\" distribution and somehow believes it's the latest version "
"of \"Paste\".  It also somehow \"helpfully\" decides to check out a "
"version of this package from SVN.  We pin the Paste dependency version to"
" a version greater than 1.7 to work around this ``easy_install`` bug."
msgstr ""

#: ../../../BFG_HISTORY.txt:2389
msgid ""
"Fix \"Hybrid\" narrative chapter: stop claiming that ``<view>`` "
"statements that mention a route_name need to come afer (in XML order) the"
" ``<route>`` statement which creates the route.  This hasn't been true "
"since 1.1a1."
msgstr ""

#: ../../../BFG_HISTORY.txt:2394
msgid ""
"\"What's New in ``repoze.bfg`` 1.1\" document added to narrative "
"documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:2400
msgid ""
"Add a new event type: ``repoze.bfg.events.AfterTraversal``.  Events of "
"this type will be sent after traversal is completed, but before any view "
"code is invoked.  Like ``repoze.bfg.events.NewRequest``, This event will "
"have a single attribute: ``request`` representing the current request.  "
"Unlike the request attribute of ``repoze.bfg.events.NewRequest`` however,"
" during an AfterTraversal event, the request object will possess "
"attributes set by the traverser, most notably ``context``, which will be "
"the context used when a view is found and invoked.  The interface "
"``repoze.bfg.events.IAfterTraversal`` can be used to subscribe to the "
"event.  For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:2415
msgid ""
"Like any framework event, a subscriber function should expect one "
"parameter: ``event``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2421
msgid ""
"Rather than depending on ``chameleon.core`` and ``chameleon.zpt`` "
"distributions individually, depend on Malthe's repackaged ``Chameleon`` "
"distribution (which includes both ``chameleon.core`` and "
"``chameleon.zpt``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2427
msgid "1.1b1 (2009-11-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2432
msgid ""
"The routes root factory called route factories and the default route "
"factory with an environ rather than a request.  One of the symptoms of "
"this bug: applications generated using the ``bfg_zodb`` paster template "
"in 1.1a9 did not work properly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2437
msgid ""
"Reinstate ``renderer`` alias for ``view_renderer`` in the ``<route>`` "
"ZCML directive (in-the-wild 1.1a bw compat)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2440
msgid ""
"``bfg_routesalchemy`` paster template: change ``<route>`` declarations: "
"rename ``renderer`` attribute to ``view_renderer``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2443
msgid ""
"Header values returned by the ``authtktauthenticationpolicy`` "
"``remember`` and ``forget`` methods would be of type ``unicode``. This "
"violated the WSGI spec, causing a ``TypeError`` to be raised when these "
"headers were used under ``mod_wsgi``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2448
msgid ""
"If a BFG app that had a route matching the root URL was mounted under a "
"path in modwsgi, ala ``WSGIScriptAlias /myapp "
"/Users/chrism/projects/modwsgi/env/bfg.wsgi``, the home route (a route "
"with the path of ``'/'`` or ``''``) would not match when the path "
"``/myapp`` was visited (only when the path ``/myapp/`` was visited).  "
"This is now fixed: if the urldispatch root factory notes that the "
"PATH_INFO is empty, it converts it to a single slash before trying to do "
"matching."
msgstr ""

#: ../../../BFG_HISTORY.txt:2460
msgid ""
"In ``<route>`` declarations in tutorial ZCML, rename ``renderer`` "
"attribute to ``view_renderer`` (fwd compat)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2463
msgid "Fix various tutorials broken by 1.1a9 ``<route>`` directive changes."
msgstr ""

#: ../../../BFG_HISTORY.txt:2468
msgid "Deal with a potential circref in the traversal module."
msgstr ""

#: ../../../BFG_HISTORY.txt:2471
msgid "1.1a9 (2009-10-31)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2476
msgid ""
"An incorrect ZCML conflict would be encountered when the "
"``request_param`` predicate attribute was used on the ZCML ``view`` "
"directive if any two otherwise same-predicated views had the combination "
"of a predicate value with an ``=`` sign and one without (e.g. ``a`` vs. "
"``a=123``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2485
msgid ""
"In previous versions of BFG, the \"root factory\" (the ``get_root`` "
"callable passed to ``make_app`` or a function pointed to by the "
"``factory`` attribute of a route) was called with a \"bare\" WSGI "
"environment.  In this version, and going forward, it will be called with "
"a ``request`` object.  The request object passed to the factory "
"implements dictionary-like methods in such a way that existing root "
"factory code which expects to be passed an environ will continue to work."
msgstr ""

#: ../../../BFG_HISTORY.txt:2494
msgid ""
"The ``__call__`` of a plugin \"traverser\" implementation (registered as "
"an adapter for ``ITraverser`` or ``ITraverserFactory``) will now receive "
"a *request* as the single argument to its ``__call__`` method.  In "
"previous versions it was passed a WSGI ``environ`` object.  The request "
"object passed to the factory implements dictionary-like methods in such a"
" way that existing traverser code which expects to be passed an environ "
"will continue to work."
msgstr ""

#: ../../../BFG_HISTORY.txt:2502
msgid ""
"The ZCML ``route`` directive's attributes ``xhr``, ``request_method``, "
"``path_info``, ``request_param``, ``header`` and ``accept`` are now "
"*route* predicates rather than *view* predicates. If one or more of these"
" predicates is specified in the route configuration, all of the "
"predicates must return true for the route to match a request.  If one or "
"more of the route predicates associated with a route returns ``False`` "
"when checked during a request, the route match fails, and the next match "
"in the routelist is tried.  This differs from the previous behavior, "
"where no route predicates existed and all predicates were considered view"
" predicates, because in that scenario, the next route was not tried."
msgstr ""

#: ../../../BFG_HISTORY.txt:2517
msgid ""
"Various changes were made to narrative and API documentation supporting "
"the change from passing a request rather than an environ to root "
"factories and traversers."
msgstr ""

#: ../../../BFG_HISTORY.txt:2524
msgid ""
"The request implements dictionary-like methods that mutate and query the "
"WSGI environ.  This is only for the purpose of backwards compatibility "
"with root factories which expect an ``environ`` rather than a request."
msgstr ""

#: ../../../BFG_HISTORY.txt:2529
msgid ""
"The ``repoze.bfg.request.create_route_request_factory`` function, which "
"returned a request factory was removed in favor of a "
"``repoze.bfg.request.route_request_interface`` function, which returns an"
" interface."
msgstr ""

#: ../../../BFG_HISTORY.txt:2534
msgid ""
"The ``repoze.bfg.request.Request`` class, which is a subclass of "
"``webob.Request`` now defines its own ``__setattr__``, ``__getattr__`` "
"and ``__delattr__`` methods, which override the default WebOb behavior.  "
"The default WebOb behavior stores attributes of the request in "
"``self.environ['webob.adhoc_attrs']``, and retrieves them from that "
"dictionary during a ``__getattr__``. This behavior was undesirable for "
"speed and \"expectation\" reasons. Now attributes of the ``request`` are "
"stored in ``request.__dict__`` (as you otherwise might expect from an "
"object that did not override these methods)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2545
msgid ""
"The router no longer calls ``repoze.bfg.traversal._traverse`` and does "
"its work \"inline\" (speed)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2548
msgid ""
"Reverse the order in which the router calls the request factory and the "
"root factory.  The request factory is now called first; the resulting "
"request is passed to the root factory."
msgstr ""

#: ../../../BFG_HISTORY.txt:2552
msgid ""
"The ``repoze.bfg.request.request_factory`` function has been removed.  "
"Its functionality is no longer required."
msgstr ""

#: ../../../BFG_HISTORY.txt:2555
msgid ""
"The \"routes root factory\" that wraps the default root factory when "
"there are routes mentioned in the configuration now attaches an interface"
" to the request via ``zope.interface.directlyProvides``. This replaces "
"logic in the (now-gone) ``repoze.bfg.request.request_factory`` function."
msgstr ""

#: ../../../BFG_HISTORY.txt:2561
msgid ""
"The ``route`` and ``view`` ZCML directives now register an interface as a"
" named utility (retrieved from "
"``repoze.bfg.request.route_request_interface``) rather than a request "
"factory (the previous return value of the now-missing "
"``repoze.bfg.request.create_route_request_factory``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2567
msgid "The ``repoze.bfg.functional`` module was renamed to ``repoze.bfg.compat``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2573
msgid ""
"Explicitly revert the feature introduced in 1.1a8: where the name "
"``root`` is available as an attribute of the request before a NewRequest "
"event is emitted.  This makes some potential future features impossible, "
"or at least awkward (such as grouping traversal and view lookup into a "
"single adapter lookup)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2579
msgid ""
"The ``containment``, ``attr`` and ``renderer`` attributes of the "
"``route`` ZCML directive were removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:2583
msgid "1.1a8 (2009-10-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2588
msgid "Add ``path_info`` view configuration predicate."
msgstr ""

#: ../../../BFG_HISTORY.txt:2590
msgid ""
"``paster bfgshell`` now supports IPython if it's available for import.  "
"Thanks to Daniel Holth for the initial patch."
msgstr ""

#: ../../../BFG_HISTORY.txt:2593
msgid ""
"Add ``repoze.bfg.testing.registerSettings`` API, which is documented in "
"the \"repoze.bfg.testing\" API chapter.  This allows for registration of "
"\"settings\" values obtained via ``repoze.bfg.settings.get_settings()`` "
"for use in unit tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:2598
msgid ""
"The name ``root`` is available as an attribute of the request slightly "
"earlier now (before a NewRequest event is emitted). ``root`` is the "
"result of the application \"root factory\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:2602
msgid ""
"Added ``max_age`` parameter to ``authtktauthenticationpolicy`` ZCML "
"directive.  If this value is set, it must be an integer representing the "
"number of seconds which the auth tkt cookie will survive. Mainly, its "
"existence allows the auth_tkt cookie to survive across browser sessions."
msgstr ""

#: ../../../BFG_HISTORY.txt:2611
msgid ""
"Fix bug encountered during \"scan\" (when ``<scan ..>`` directive is used"
" in ZCML) introduced in 1.1a7.  Symptom: ``AttributeError: object has no "
"attribute __provides__`` raised at startup time."
msgstr ""

#: ../../../BFG_HISTORY.txt:2615
msgid ""
"The ``reissue_time`` argument to the ``authtktauthenticationpolicy`` ZCML"
" directive now actually works.  When it is set to an integer value, an "
"authticket set-cookie header is appended to the response whenever a "
"request requires authentication and 'now' minus the authticket's "
"timestamp is greater than ``reissue_time`` seconds."
msgstr ""

#: ../../../BFG_HISTORY.txt:2624
msgid ""
"Add a chapter titled \"Request and Response\" to the narrative "
"documentation, content cribbed from the WebOb documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:2627
msgid "Call out predicate attributes of ZCML directive within \"Views\" chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:2630
msgid ""
"Fix route_url documentation (``_query`` argument documented as ``query`` "
"and ``_anchor`` argument documented as ``anchor``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2636
msgid ""
"The ``authtkt`` authentication policy ``remember`` method now no longer "
"honors ``token`` or ``userdata`` keyword arguments."
msgstr ""

#: ../../../BFG_HISTORY.txt:2642
msgid ""
"Change how ``bfg_view`` decorator works when used as a class method "
"decorator.  In 1.1a7, the``scan``directive actually tried to grope every "
"class in scanned package at startup time, calling ``dir`` against each "
"found class, and subsequently invoking ``getattr`` against each thing "
"found by ``dir`` to see if it was a method.  This led to some strange "
"symptoms (e.g. ``AttributeError: object has no attribute __provides__``),"
" and was generally just a bad idea.  Now, instead of groping classes for "
"methods at startup time, we just cause the ``bfg_view`` decorator itself "
"to populate the method's class' ``__dict__`` when it is used as a method "
"decorator.  This also requires a nasty _getframe thing but it's slightly "
"less nasty than the startup time groping behavior.  This is essentially a"
" reversion back to 1.1a6 \"grokking\" behavior plus some special magic "
"for using the ``bfg_view`` decorator as method decorator inside the "
"``bfg_view`` class itself."
msgstr ""

#: ../../../BFG_HISTORY.txt:2658
msgid ""
"The router now checks for a ``global_response_headers`` attribute of the "
"request object before returning a response.  If this value exists, it is "
"presumed to be a sequence of two-tuples, representing a set of headers to"
" append to the 'normal' response headers.  This feature is internal, "
"rather than exposed externally, because it's unclear whether it will stay"
" around in the long term.  It was added to support the ``reissue_time`` "
"feature of the authtkt authentication policy."
msgstr ""

#: ../../../BFG_HISTORY.txt:2667
msgid "The interface ITraverserFactory is now just an alias for ITraverser."
msgstr ""

#: ../../../BFG_HISTORY.txt:2670
msgid "1.1a7 (2009-10-18)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2675
msgid ""
"More than one ``@bfg_view`` decorator may now be stacked on top of any "
"number of others.  Each invocation of the decorator registers a single "
"view configuration.  For instance, the following combination of "
"decorators and a function will register two view configurations for the "
"same view callable::"
msgstr ""

#: ../../../BFG_HISTORY.txt:2688
msgid ""
"This makes it possible to associate more than one view configuration with"
" a single callable without requiring any ZCML."
msgstr ""

#: ../../../BFG_HISTORY.txt:2691
msgid "The ``@bfg_view`` decorator can now be used against a class method::"
msgstr ""

#: ../../../BFG_HISTORY.txt:2705
msgid ""
"When the bfg_view decorator is used against a class method, a view is "
"registered for the *class* (it's a \"class view\" where the \"attr\" "
"happens to be the name of the method it is attached to), so the class "
"it's defined within must have a suitable constructor: one that accepts "
"``context, request`` or just ``request``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2714
msgid ""
"Added ``Changing the Traverser`` and ``Changing How "
":mod:`repoze.bfg.url.model_url` Generates a URL`` to the \"Hooks\" "
"narrative chapter of the docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:2721
msgid ""
"Remove ``ez_setup.py`` and imports of it within ``setup.py``.  In the new"
" world, and as per virtualenv setup instructions, people will already "
"have either setuptools or distribute."
msgstr ""

#: ../../../BFG_HISTORY.txt:2726
msgid "1.1a6 (2009-10-15)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2731
msgid ""
"Add ``xhr``, ``accept``, and ``header`` view configuration predicates to "
"ZCML view declaration, ZCML route declaration, and ``bfg_view`` "
"decorator.  See the ``Views`` narrative documentation chapter for more "
"information about these predicates."
msgstr ""

#: ../../../BFG_HISTORY.txt:2736
msgid ""
"Add ``setUp`` and ``tearDown`` functions to the ``repoze.bfg.testing`` "
"module.  Using ``setUp`` in a test setup and ``tearDown`` in a test "
"teardown is now the recommended way to do component registry setup and "
"teardown.  Previously, it was recommended that a single function named "
"``repoze.bfg.testing.cleanUp`` be called in both the test setup and tear "
"down.  ``repoze.bfg.testing.cleanUp`` still exists (and will exist "
"\"forever\" due to its widespread use); it is now just an alias for "
"``repoze.bfg.testing.setUp`` and is nominally deprecated."
msgstr ""

#: ../../../BFG_HISTORY.txt:2746
msgid ""
"The BFG component registry is now available in view and event subscriber "
"code as an attribute of the request ie. ``request.registry``.  This fact "
"is currently undocumented except for this note, because BFG developers "
"never need to interact with the registry directly anywhere else."
msgstr ""

#: ../../../BFG_HISTORY.txt:2752
msgid ""
"The BFG component registry now inherits from ``dict``, meaning that it "
"can optionally be used as a simple dictionary.  *Component* registrations"
" performed against it via e.g. ``registerUtility``, ``registerAdapter``, "
"and similar API methods are kept in a completely separate namespace than "
"its dict members, so using the its component API methods won't effect the"
" keys and values in the dictionary namespace.  Likewise, though the "
"component registry \"happens to be\" a dictionary, use of mutating "
"dictionary methods such as ``__setitem__`` will have no influence on any "
"component registrations made against it.  In other words, the registry "
"object you obtain via e.g. "
"``repoze.bfg.threadlocal.get_current_registry`` or ``request.registry`` "
"happens to be both a component registry and a dictionary, but using its "
"component-registry API won't impact data added to it via its dictionary "
"API and vice versa.  This is a forward compatibility move based on the "
"goals of \"marco\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:2768
msgid ""
"Expose and document ``repoze.bfg.testing.zcml_configure`` API.  This "
"function populates a component registry from a ZCML file for testing "
"purposes.  It is documented in the \"Unit and Integration Testing\" "
"chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:2776
msgid ""
"Virtual hosting narrative docs chapter updated with info about "
"``mod_wsgi``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2779
msgid ""
"Point all index URLs at the literal 1.1 index (this alpha cycle may go on"
" a while)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2782
msgid ""
"Various tutorial test modules updated to use ``repoze.bfg.testing.setUp``"
" and ``repoze.bfg.testing.tearDown`` methods in order to encourage this "
"as best practice going forward."
msgstr ""

#: ../../../BFG_HISTORY.txt:2786
msgid ""
"Added \"Creating Integration Tests\" section to unit testing narrative "
"documentation chapter.  As a result, the name of the unittesting chapter "
"is now \"Unit and Integration Testing\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:2793
msgid ""
"Importing ``getSiteManager`` and ``get_registry`` from "
"``repoze.bfg.registry`` is no longer supported.  These imports were "
"deprecated in repoze.bfg 1.0.  Import of ``getSiteManager`` should be "
"done as ``from zope.component import getSiteManager``.  Import of "
"``get_registry`` should be done as ``from repoze.bfg.threadlocal import "
"get_current_registry``.  This was done to prevent a circular import "
"dependency."
msgstr ""

#: ../../../BFG_HISTORY.txt:2801
msgid ""
"Code bases which alternately invoke both ``zope.testing.cleanup.cleanUp``"
" and ``repoze.bfg.testing.cleanUp`` (treating them equivalently, using "
"them interchangeably) in the setUp/tearDown of unit tests will begin to "
"experience test failures due to lack of test isolation.  The \"right\" "
"mechanism is ``repoze.bfg.testing.cleanUp`` (or the combination of "
"``repoze.bfg.testing.setUp`` and ``repoze.bfg.testing.tearDown``). but a "
"good number of legacy codebases will use ``zope.testing.cleanup.cleanUp``"
" instead.  We support ``zope.testing.cleanup.cleanUp`` but not in "
"combination with ``repoze.bfg.testing.cleanUp`` in the same codebase.  "
"You should use one or the other test cleanup function in a single "
"codebase, but not both."
msgstr ""

#: ../../../BFG_HISTORY.txt:2818
msgid ""
"Created new ``repoze.bfg.configuration`` module which assumes "
"responsibilities previously held by the ``repoze.bfg.registry`` and "
"``repoze.bfg.router`` modules (avoid a circular import dependency)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2822
msgid ""
"The result of the ``zope.component.getSiteManager`` function in unit "
"tests set up with ``repoze.bfg.testing.cleanUp`` or "
"``repoze.bfg.testing.setUp`` will be an instance of "
"``repoze.bfg.registry.Registry`` instead of the global "
"``zope.component.globalregistry.base`` registry.  This also means that "
"the threadlocal ZCA API functions such as ``getAdapter`` and "
"``getUtility`` as well as internal BFG machinery (such as ``model_url`` "
"and ``route_url``) will consult this registry within unit tests. This is "
"a forward compatibility move based on the goals of \"marco\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:2833
msgid ""
"Removed ``repoze.bfg.testing.addCleanUp`` function and associated module-"
"scope globals.  This was never an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:2837
msgid "1.1a5 (2009-10-10)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2842
msgid ""
"Change \"Traversal + ZODB\" and \"URL Dispatch + SQLAlchemy\" Wiki "
"tutorials to make use of the new-to-1.1 \"renderer\" feature (return "
"dictionaries from all views)."
msgstr ""

#: ../../../BFG_HISTORY.txt:2846
msgid ""
"Add tests to the \"URL Dispatch + SQLAlchemy\" tutorial after the "
"\"view\" step."
msgstr ""

#: ../../../BFG_HISTORY.txt:2849
msgid ""
"Added a diagram of model graph traversal to the \"Traversal\" narrative "
"chapter of the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:2852
msgid ""
"An ``exceptions`` API chapter was added, documenting the new "
"``repoze.bfg.exceptions`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:2855
msgid ""
"Describe \"request-only\" view calling conventions inside the urldispatch"
" narrative chapter, where it's most helpful."
msgstr ""

#: ../../../BFG_HISTORY.txt:2858
msgid ""
"Add a diagram which explains the operation of the BFG router to the "
"\"Router\" narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:2864
msgid ""
"Add a new ``repoze.bfg.testing`` API: ``registerRoute``, for registering "
"routes to satisfy calls to e.g. ``repoze.bfg.url.route_url`` in unit "
"tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:2868
msgid ""
"The ``notfound`` and ``forbidden`` ZCML directives now accept the "
"following addtional attributes: ``attr``, ``renderer``, and ``wrapper``."
"  These have the same meaning as they do in the context of a ZCML "
"``view`` directive."
msgstr ""

#: ../../../BFG_HISTORY.txt:2873
msgid ""
"For behavior like Django's ``APPEND_SLASH=True``, use the "
"``repoze.bfg.view.append_slash_notfound_view`` view as the Not Found view"
" in your application.  When this view is the Not Found view (indicating "
"that no view was found), and any routes have been defined in the "
"configuration of your application, if the value of ``PATH_INFO`` does not"
" already end in a slash, and if the value of ``PATH_INFO`` *plus* a slash"
" matches any route's path, do an HTTP redirect to the slash-appended "
"PATH_INFO.  Note that this will *lose* ``POST`` data information (turning"
" it into a GET), so you shouldn't rely on this to redirect POST requests."
msgstr ""

#: ../../../BFG_HISTORY.txt:2884
msgid "Speed up ``repoze.bfg.location.lineage`` slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2886
msgid ""
"Speed up ``repoze.bfg.encode.urlencode`` (nee' "
"``repoze.bfg.url.urlencode``) slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2889
msgid "Speed up ``repoze.bfg.traversal.model_path``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2891
msgid "Speed up ``repoze.bfg.traversal.model_path_tuple`` slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2893
msgid "Speed up ``repoze.bfg.traversal.traverse`` slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2895
msgid "Speed up ``repoze.bfg.url.model_url`` slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2897
msgid "Speed up ``repoze.bfg.url.route_url`` slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2899
msgid "Sped up ``repoze.bfg.traversal.ModelGraphTraverser:__call__`` slightly."
msgstr ""

#: ../../../BFG_HISTORY.txt:2902
msgid "Minor speedup of ``repoze.bfg.router.Router.__call__``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2904
msgid ""
"New ``repoze.bfg.exceptions`` module was created to house exceptions that"
" were previously sprinkled through various modules."
msgstr ""

#: ../../../BFG_HISTORY.txt:2910
msgid ""
"Move ``repoze.bfg.traversal._url_quote`` into ``repoze.bfg.encode`` as "
"``url_quote``."
msgstr ""

#: ../../../BFG_HISTORY.txt:2916
msgid ""
"The import of ``repoze.bfg.view.NotFound`` is deprecated in favor of "
"``repoze.bfg.exceptions.NotFound``.  The old location still functions, "
"but emits a deprecation warning."
msgstr ""

#: ../../../BFG_HISTORY.txt:2920
msgid ""
"The import of ``repoze.bfg.security.Unauthorized`` is deprecated in favor"
" of ``repoze.bfg.exceptions.Forbidden``.  The old location still "
"functions but emits a deprecation warning.  The rename from "
"``Unauthorized`` to ``Forbidden`` brings parity to the name of the "
"exception and the system view it invokes when raised."
msgstr ""

#: ../../../BFG_HISTORY.txt:2929
msgid ""
"We previously had a Unicode-aware wrapper for the ``urllib.urlencode`` "
"function named ``repoze.bfg.url.urlencode`` which delegated to the stdlib"
" function, but which marshalled all unicode values to utf-8 strings "
"before calling the stdlib version. A newer replacement now lives in "
"``repoze.bfg.encode`` The replacement does not delegate to the stdlib."
msgstr ""

#: ../../../BFG_HISTORY.txt:2936
msgid ""
"The replacement diverges from the stdlib implementation and the previous "
"``repoze.bfg.url`` url implementation inasmuch as its ``doseq`` argument "
"is now a decoy: it always behaves in the ``doseq=True`` way (which is the"
" only sane behavior) for speed purposes."
msgstr ""

#: ../../../BFG_HISTORY.txt:2942
msgid ""
"The old import location (``repoze.bfg.url.urlencode``) still functions "
"and has not been deprecated."
msgstr ""

#: ../../../BFG_HISTORY.txt:2945
msgid ""
"In 0.8a7, the return value expected from an object implementing "
"``ITraverserFactory`` was changed from a sequence of values to a "
"dictionary containing the keys ``context``, ``view_name``, ``subpath``, "
"``traversed``, ``virtual_root``, ``virtual_root_path``, and ``root``.  "
"Until now, old-style traversers which returned a sequence have continued "
"to work but have generated a deprecation warning.  In this release, "
"traversers which return a sequence instead of a dictionary will no longer"
" work."
msgstr ""

#: ../../../BFG_HISTORY.txt:2955
msgid "1.1a4 (2009-09-23)"
msgstr ""

#: ../../../BFG_HISTORY.txt:2960
msgid ""
"On 64-bit Linux systems, views that were members of a multiview "
"(orderings of views with predicates) were not evaluated in the proper "
"order.  Symptom: in a configuration that had two views with the same name"
" but one with a ``request_method=POST`` predicate and one without, the "
"one without the predicate would be called unconditionally (even if the "
"request was a POST request).  Thanks much to Sebastien Douche for "
"providing the buildbots that pointed this out."
msgstr ""

#: ../../../BFG_HISTORY.txt:2972
msgid ""
"Added a tutorial which explains how to use ``repoze.session`` (ZODB-based"
" sessions) in a ZODB-based repoze.bfg app."
msgstr ""

#: ../../../BFG_HISTORY.txt:2975
msgid ""
"Added a tutorial which explains how to add ZEO to a ZODB-based "
"``repoze.bfg`` application."
msgstr ""

#: ../../../BFG_HISTORY.txt:2978
msgid ""
"Added a tutorial which explains how to run a ``repoze.bfg`` application "
"under `mod_wsgi <http://code.google.com/p/modwsgi/>`_. See \"Running a "
"repoze.bfg Application under mod_wsgi\" in the tutorials section of the "
"documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:2986
msgid ""
"Add a ``repoze.bfg.url.static_url`` API which is capable of generating "
"URLs to static resources defined by the ``<static>`` ZCML directive.  See"
" the \"Views\" narrative chapter's section titled \"Generating Static "
"Resource URLs\" for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:2991
msgid ""
"Add a ``string`` renderer.  This renderer converts a non-Response return "
"value of any view callble into a string.  It is documented in the "
"\"Views\" narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:2995
msgid ""
"Give the ``route`` ZCML directive the ``view_attr`` and ``view_renderer``"
" parameters (bring up to speed with 1.1a3 features).  These can also be "
"spelled as ``attr`` and ``renderer``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3002
msgid ""
"An object implementing the ``IRenderer`` interface (and "
"``ITemplateRenderer`, which is a subclass of ``IRenderer``) must now "
"accept an extra ``system`` argument in its ``__call__`` method "
"implementation.  Values computed by the system (as opposed to by the "
"view) are passed by the system in the ``system`` parameter, which will "
"always be a dictionary.  Keys in the dictionary include: ``view`` (the "
"view object that returned the value), ``renderer_name`` (the template "
"name or simple name of the renderer), ``context`` (the context object "
"passed to the view), and ``request`` (the request object passed to the "
"view).  Previously only ITemplateRenderers received system arguments as "
"elements inside the main ``value`` dictionary."
msgstr ""

#: ../../../BFG_HISTORY.txt:3018
msgid ""
"The way ``bfg_view`` declarations are scanned for has been modified. This"
" should have no external effects."
msgstr ""

#: ../../../BFG_HISTORY.txt:3021
msgid ""
"Speed: do not register an ITraverserFactory in configure.zcml; instead "
"rely on queryAdapter and a manual default to ModelGraphTraverser."
msgstr ""

#: ../../../BFG_HISTORY.txt:3025
msgid ""
"Speed: do not register an IContextURL in configure.zcml; instead rely on "
"queryAdapter and a manual default to TraversalContextURL."
msgstr ""

#: ../../../BFG_HISTORY.txt:3028
msgid ""
"General speed microimprovements for helloworld benchmark: replace "
"try/excepts with statements which use 'in' keyword."
msgstr ""

#: ../../../BFG_HISTORY.txt:3032
msgid "1.1a3 (2009-09-16)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3037
msgid ""
"The \"Views\" narrative chapter in the documentation has been updated "
"extensively to discuss \"renderers\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:3043
msgid ""
"A ``renderer`` attribute has been added to view configurations, replacing"
" the previous (1.1a2) version's ``template`` attribute.  A \"renderer\" "
"is an object which accepts the return value of a view and converts it to "
"a string.  This includes, but is not limited to, templating systems."
msgstr ""

#: ../../../BFG_HISTORY.txt:3049
msgid ""
"A new interface named ``IRenderer`` was added.  The existing interface, "
"``ITemplateRenderer`` now derives from this new interface.  This "
"interface is internal."
msgstr ""

#: ../../../BFG_HISTORY.txt:3053
msgid ""
"A new interface named ``IRendererFactory`` was added.  An existing "
"interface named ``ITemplateRendererFactory`` now derives from this "
"interface.  This interface is internal."
msgstr ""

#: ../../../BFG_HISTORY.txt:3057
msgid ""
"The ``view`` attribute of the ``view`` ZCML directive is no longer "
"required if the ZCML directive also has a ``renderer`` attribute. This is"
" useful when the renderer is a template renderer and no names need be "
"passed to the template at render time."
msgstr ""

#: ../../../BFG_HISTORY.txt:3062
msgid ""
"A new zcml directive ``renderer`` has been added.  It is documented in "
"the \"Views\" narrative chapter of the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:3065
msgid ""
"A ZCML ``view`` directive (and the associated ``bfg_view`` decorator) can"
" now accept a \"wrapper\" value.  If a \"wrapper\" value is supplied, it "
"is the value of a separate view's *name* attribute. When a view with a "
"``wrapper`` attribute is rendered, the \"inner\" view is first rendered "
"normally.  Its body is then attached to the request as \"wrapped_body\", "
"and then a wrapper view name is looked up and rendered (using "
"``repoze.bfg.render_view_to_response``), passed the request and the "
"context.  The wrapper view is assumed to do something sensible with "
"``request.wrapped_body``, usually inserting its structure into some other"
" rendered template.  This feature makes it possible to specify "
"(potentially nested) \"owrap\" relationships between views using only "
"ZCML or decorators (as opposed always using ZPT METAL and analogues to "
"wrap view renderings in outer wrappers)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3082
msgid ""
"When used under Python < 2.6, BFG now has an installation time dependency"
" on the ``simplejson`` package."
msgstr ""

#: ../../../BFG_HISTORY.txt:3088
msgid ""
"The ``repoze.bfg.testing.registerDummyRenderer`` API has been deprecated "
"in favor of ``repoze.bfg.testing.registerTemplateRenderer``.  A "
"deprecation warning is *not* issued at import time for the former name; "
"it will exist \"forever\"; its existence has been removed from the "
"documentation, however."
msgstr ""

#: ../../../BFG_HISTORY.txt:3095
msgid ""
"The ``repoze.bfg.templating.renderer_from_cache`` function has been moved"
" to ``repoze.bfg.renderer.template_renderer_factory``.  This was never an"
" API, but code in the wild was spotted that used it.  A deprecation "
"warning is issued at import time for the former."
msgstr ""

#: ../../../BFG_HISTORY.txt:3103
msgid ""
"The ``ITemplateRenderer`` interface has been changed.  Previously its "
"``__call__`` method accepted ``**kw``.  It now accepts a single "
"positional parameter named ``kw`` (REVISED: it accepts two positional "
"parameters as of 1.1a4: ``value`` and ``system``).  This is mostly an "
"internal change, but it was exposed in APIs in one place: if you've used "
"the ``repoze.bfg.testing.registerDummyRenderer`` API in your tests with a"
" custom \"renderer\" argument with your own renderer implementation, you "
"will need to change that renderer implementation to accept ``kw`` instead"
" of ``**kw`` in its ``__call__`` method (REVISED: make it accept "
"``value`` and ``system`` positional arguments as of 1.1a4)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3115
msgid ""
"The ``ITemplateRendererFactory`` interface has been changed. Previously "
"its ``__call__`` method accepted an ``auto_reload`` keyword parameter.  "
"Now its ``__call__`` method accepts no keyword parameters.  Renderers are"
" now themselves responsible for determining details of auto-reload.  This"
" is purely an internal change.  This interface was never external."
msgstr ""

#: ../../../BFG_HISTORY.txt:3122
msgid ""
"The ``template_renderer`` ZCML directive introduced in 1.1a2 has been "
"removed.  It has been replaced by the ``renderer`` directive."
msgstr ""

#: ../../../BFG_HISTORY.txt:3125
msgid ""
"The previous release (1.1a2) added a view configuration attribute named "
"``template``.  In this release, the attribute has been renamed to "
"``renderer``.  This signifies that the attribute is more generic: it can "
"now be not just a template name but any renderer name (ala ``json``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3131
msgid ""
"In the previous release (1.1a2), the Chameleon text template renderer was"
" used if the system didn't associate the ``template`` view configuration "
"value with a filename with a \"known\" extension. In this release, you "
"must use a ``renderer`` attribute which is a path that ends with a "
"``.txt`` extension (e.g. ``templates/foo.txt``) to use the Chameleon text"
" renderer."
msgstr ""

#: ../../../BFG_HISTORY.txt:3139
msgid "1.1a2 (2009-09-14)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3144
msgid ""
"A ZCML ``view`` directive (and the associated ``bfg_view`` decorator) can"
" now accept an \"attr\" value.  If an \"attr\" value is supplied, it is "
"considered a method named of the view object to be called when the "
"response is required.  This is typically only good for views that are "
"classes or instances (not so useful for functions, as functions typically"
" have no methods other than ``__call__``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3152
msgid ""
"A ZCML ``view`` directive (and the associated ``bfg_view`` decorator) can"
" now accept a \"template\" value.  If a \"template\" value is supplied, "
"and the view callable returns a dictionary, the associated template is "
"rendered with the dictionary as keyword arguments.  See the section named"
" \"Views That Have a ``template``\" in the \"Views\" narrative "
"documentation chapter for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:3160
msgid "1.1a1 (2009-09-06)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3165
msgid ""
"\"tests\" module removed from the bfg_alchemy paster template; these "
"tests didn't work."
msgstr ""

#: ../../../BFG_HISTORY.txt:3168
msgid ""
"Bugfix: the ``discriminator`` for the ZCML \"route\" directive was "
"incorrect.  It was possible to register two routes that collided without "
"the system spitting out a ConfigurationConflictError at startup time."
msgstr ""

#: ../../../BFG_HISTORY.txt:3176
msgid ""
"Feature addition: view predicates.  These are exposed as the "
"``request_method``, ``request_param``, and ``containment`` attributes of "
"a ZCML ``view`` declaration, or the respective arguments to a "
"``@bfg_view`` decorator.  View predicates can be used to register a view "
"for a more precise set of environment parameters than was previously "
"possible.  For example, you can register two views with the same ``name``"
" with different ``request_param`` attributes.  If the ``request.params`` "
"dict contains 'foo' (request_param=\"foo\"), one view might be called; if"
" it contains 'bar' (request_param=\"bar\"), another view might be called."
" ``request_param`` can also name a key/value pair ala ``foo=123``. This "
"will match only when the ``foo`` key is in the request.params dict and it"
" has the value '123'.  This particular example makes it possible to write"
" separate view functions for different form submissions.  The other "
"predicates, ``containment`` and ``request_method`` work similarly.  "
"``containment`` is a view predicate that will match only when the "
"context's graph lineage has an object possessing a particular class or "
"interface, for example. ``request_method`` is a view predicate that will "
"match when the HTTP ``REQUEST_METHOD`` equals some string (eg. 'POST')."
msgstr ""

#: ../../../BFG_HISTORY.txt:3197
msgid ""
"The ``@bfg_view`` decorator now accepts three additional arguments: "
"``request_method``, ``request_param``, and ``containment``. "
"``request_method`` is used when you'd like the view to match only a "
"request with a particular HTTP ``REQUEST_METHOD``; a string naming the "
"``REQUEST_METHOD`` can also be supplied as ``request_type`` for backwards"
" compatibility.  ``request_param`` is used when you'd like a view to "
"match only a request that contains a particular ``request.params`` key "
"(with or without a value).  ``containment`` is used when you'd like to "
"match a request that has a context that has some class or interface in "
"its graph lineage.  These are collectively known as \"view predicates\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:3209
msgid ""
"The ``route`` ZCML directive now honors ``view_request_method``, "
"``view_request_param`` and ``view_containment`` attributes, which pass "
"along these values to the associated view if any is provided. "
"Additionally, the ``request_type`` attribute can now be spelled as "
"``view_request_type``, and ``permission`` can be spelled as "
"``view_permission``.  Any attribute which starts with ``view_`` can now "
"be spelled without the ``view_`` prefix, so ``view_for`` can be spelled "
"as ``for`` now, etc.  Both forms are documented in the urldispatch "
"narraitve documentation chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:3219
msgid ""
"The ``request_param`` ZCML view directive attribute (and its ``bfg_view``"
" decorator cousin) can now specify both a key and a value.  For example, "
"``request_param=\"foo=123\"`` means that the foo key must have a value of"
" ``123`` for the view to \"match\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:3224
msgid ""
"Allow ``repoze.bfg.traversal.find_interface`` API to use a class object "
"as the argument to compare against the ``model`` passed in. This means "
"you can now do ``find_interface(model, SomeClass)`` and the first object "
"which is found in the lineage which has ``SomeClass`` as its class (or "
"the first object found which has ``SomeClass`` as any of its "
"superclasses) will be returned."
msgstr ""

#: ../../../BFG_HISTORY.txt:3231
msgid ""
"Added ``static`` ZCML directive which registers a route for a view that "
"serves up files in a directory.  See the \"Views\" narrative "
"documentation chapter's \"Serving Static Resources Using a ZCML "
"Directive\" section for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:3236
msgid ""
"The ``repoze.bfg.view.static`` class now accepts a string as its first "
"argument (\"root_dir\") that represents a package-relative name e.g. "
"``somepackage:foo/bar/static``.  This is now the preferred mechanism for "
"spelling package-relative static paths using this class.  A "
"``package_name`` keyword argument has been left around for backwards "
"compatibility.  If it is supplied, it will be honored."
msgstr ""

#: ../../../BFG_HISTORY.txt:3243
msgid ""
"The API ``repoze.bfg.testing.registerView`` now takes a ``permission`` "
"argument.  Use this instead of using "
"``repoze.bfg.testing.registerViewPermission``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3247
msgid ""
"The ordering of route declarations vs. the ordering of view declarations "
"that use a \"route_name\" in ZCML no longer matters. Previously it had "
"been impossible to use a route_name from a route that had not yet been "
"defined in ZCML (order-wise) within a \"view\" declaration."
msgstr ""

#: ../../../BFG_HISTORY.txt:3253
msgid ""
"The repoze.bfg router now catches both "
"``repoze.bfg.security.Unauthorized`` and ``repoze.bfg.view.NotFound`` "
"exceptions while rendering a view. When the router catches an "
"``Unauthorized``, it returns the registered forbidden view.  When the "
"router catches a ``NotFound``, it returns the registered notfound view."
msgstr ""

#: ../../../BFG_HISTORY.txt:3263
msgid ""
"Change urldispatch internals: Route object is now constructed using a "
"path, a name, and a factory instead of a name, a matcher, a generator, "
"and a factory."
msgstr ""

#: ../../../BFG_HISTORY.txt:3267
msgid ""
"Move (non-API) default_view, default_forbidden_view, and "
"default_notfound_view functions into the ``repoze.bfg.view`` module "
"(moved from ``repoze.bfg.router``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3271
msgid ""
"Removed ViewPermissionFactory from ``repoze.bfg.security``.  View "
"permission checking is now done by registering and looking up an "
"ISecuredView."
msgstr ""

#: ../../../BFG_HISTORY.txt:3275
msgid ""
"The ``static`` ZCML directive now uses a custom root factory when "
"constructing a route."
msgstr ""

#: ../../../BFG_HISTORY.txt:3278
msgid ""
"The interface ``IRequestFactories`` was removed from the "
"repoze.bfg.interfaces module.  This interface was never an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:3281
msgid ""
"The function named ``named_request_factories`` and the data structure "
"named ``DEFAULT_REQUEST_FACTORIES`` have been removed from the "
"``repoze.bfg.request`` module.  These were never APIs."
msgstr ""

#: ../../../BFG_HISTORY.txt:3285
msgid ""
"The ``IViewPermissionFactory`` interface has been removed.  This was "
"never an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:3291
msgid ""
"Request-only-convention examples in the \"Views\" narrative documentation"
" were broken."
msgstr ""

#: ../../../BFG_HISTORY.txt:3294
msgid ""
"Fixed documentation bugs related to forget and remember in security API "
"docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:3297
msgid ""
"Fixed documentation for ``repoze.bfg.view.static`` (in narrative "
"``Views`` chapter)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3303
msgid "The API ``repoze.bfg.testing.registerViewPermission`` has been deprecated."
msgstr ""

#: ../../../BFG_HISTORY.txt:3309
msgid ""
"The interfaces ``IPOSTRequest``, ``IGETRequest``, ``IPUTRequest``, "
"``IDELETERequest``, and ``IHEADRequest`` have been removed from the "
"``repoze.bfg.interfaces`` module.  These were not documented as APIs "
"post-1.0.  Instead of using one of these, use a ``request_method`` ZCML "
"attribute or ``request_method`` bfg_view decorator parameter containing "
"an HTTP method name (one of ``GET``, ``POST``, ``HEAD``, ``PUT``, "
"``DELETE``) instead of one of these interfaces if you were using one "
"explicitly.  Passing a string in the set (``GET``, ``HEAD``, ``PUT``, "
"``POST``, ``DELETE``) as a ``request_type`` argument will work too.  "
"Rationale: instead of relying on interfaces attached to the request "
"object, BFG now uses a \"view predicate\" to determine the request type."
msgstr ""

#: ../../../BFG_HISTORY.txt:3322
msgid ""
"Views registered without the help of the ZCML ``view`` directive are now "
"responsible for performing their own authorization checking."
msgstr ""

#: ../../../BFG_HISTORY.txt:3325
msgid ""
"The ``registry_manager`` backwards compatibility alias importable from "
"\"repoze.bfg.registry\", deprecated since repoze.bfg 0.9 has been "
"removed.  If you are tring to use the registry manager within a debug "
"script of your own, use a combination of the "
"\"repoze.bfg.paster.get_app\" and \"repoze.bfg.scripting.get_root\" APIs "
"instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:3332
msgid ""
"The ``INotFoundAppFactory`` interface has been removed; it has been "
"deprecated since repoze.bfg 0.9.  If you have something like the "
"following in your ``configure.zcml``::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3339 ../../../BFG_HISTORY.txt:3354
msgid "Replace it with something like::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3344
msgid ""
"See \"Changing the Not Found View\" in the \"Hooks\" chapter of the "
"documentation for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:3347
msgid ""
"The ``IUnauthorizedAppFactory`` interface has been removed; it has been "
"deprecated since repoze.bfg 0.9.  If you have something like the "
"following in your ``configure.zcml``::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3359
msgid ""
"See \"Changing the Forbidden View\" in the \"Hooks\" chapter of the "
"documentation for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:3362
msgid ""
"``ISecurityPolicy``-based security policies, deprecated since repoze.bfg "
"0.9, have been removed.  If you have something like this in your "
"``configure.zcml``, it will no longer work::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3371
msgid ""
"If ZCML like the above exists in your application, you will receive an "
"error at startup time.  Instead of the above, you'll need something "
"like::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3378
msgid ""
"This is just an example.  See the \"Security\" chapter of the repoze.bfg "
"documentation for more information about configuring security policies."
msgstr ""

#: ../../../BFG_HISTORY.txt:3382
msgid ""
"Custom ZCML directives which register an authentication or authorization "
"policy (ala \"authtktauthenticationpolicy\" or "
"\"aclauthorizationpolicy\") should register the policy \"eagerly\" in the"
" ZCML directive instead of from within a ZCML action.  If an "
"authentication or authorization policy is not found in the component "
"registry by the view machinery during deferred ZCML processing, view "
"security will not work as expected."
msgstr ""

#: ../../../BFG_HISTORY.txt:3391
msgid "1.0.1 (2009-07-22)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3393
msgid ""
"Added support for ``has_resource``, ``resource_isdir``, and "
"``resource_listdir`` to the resource \"OverrideProvider\"; this fixes a "
"bug with a symptom that a file could not be overridden in a resource "
"directory unless a file with the same name existed in the original "
"directory being overridden."
msgstr ""

#: ../../../BFG_HISTORY.txt:3399
msgid ""
"Fixed documentation bug showing invalid test for values from the "
"``matchdict``:  they are stored as attributes of the ``Article``, rather "
"than subitems."
msgstr ""

#: ../../../BFG_HISTORY.txt:3403
msgid ""
"Fixed documentation bug showing wrong environment key for the "
"``matchdict`` produced by the matching route."
msgstr ""

#: ../../../BFG_HISTORY.txt:3406
msgid ""
"Added a workaround for a bug in Python 2.6, 2.6.1, and 2.6.2 having to do"
" with a recursion error in the mimetypes module when trying to serve "
"static files from Paste's FileApp: http://bugs.python.org/issue5853.  "
"Symptom: File \"/usr/lib/python2.6/mimetypes.py\", line 244, in "
"guess_type return guess_type(url, strict) RuntimeError: maximum recursion"
" depth exceeded.  Thanks to Armin Ronacher for identifying the symptom "
"and pointing out a fix."
msgstr ""

#: ../../../BFG_HISTORY.txt:3415
msgid "Minor edits to tutorials for accuracy based on feedback."
msgstr ""

#: ../../../BFG_HISTORY.txt:3417
msgid "Declared Paste and PasteDeploy dependencies."
msgstr ""

#: ../../../BFG_HISTORY.txt:3420
msgid "1.0 (2009-07-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3422
msgid "Retested and added some content to GAE tutorial."
msgstr ""

#: ../../../BFG_HISTORY.txt:3424
msgid "Edited \"Extending\" narrative docs chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:3426
msgid ""
"Added \"Deleting the Database\" section to the \"Defining Models\" "
"chapter of the traversal wiki tutorial."
msgstr ""

#: ../../../BFG_HISTORY.txt:3429
msgid "Spell checking of narratives and tutorials."
msgstr ""

#: ../../../BFG_HISTORY.txt:3432
msgid "1.0b2 (2009-07-03)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3434
msgid ""
"``remoteuserauthenticationpolicy`` ZCML directive didn't work without an "
"``environ_key`` directive (didn't match docs)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3437
msgid ""
"Fix ``configure_zcml`` filespec check on Windows.  Previously if an "
"absolute filesystem path including a drive letter was passed as "
"``filename`` (or as ``configure_zcml`` in the options dict) to "
"``repoze.bfg.router.make_app``, it would be treated as a "
"package:resource_name specification."
msgstr ""

#: ../../../BFG_HISTORY.txt:3443
msgid ""
"Fix inaccuracies and import errors in bfgwiki (traversal+ZODB) and "
"bfgwiki2 (urldispatch+SA) tutorials."
msgstr ""

#: ../../../BFG_HISTORY.txt:3446
msgid "Use bfgsite index for all tutorial setup.cfg files."
msgstr ""

#: ../../../BFG_HISTORY.txt:3448
msgid "Full documentation grammar/style/spelling audit."
msgstr ""

#: ../../../BFG_HISTORY.txt:3451
msgid "1.0b1 (2009-07-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3456
msgid ""
"Allow a Paste config file (``configure_zcml``) value or an environment "
"variable (``BFG_CONFIGURE_ZCML``) to name a ZCML file (optionally "
"package-relative) that will be used to bootstrap the application.  "
"Previously, the integrator could not influence which ZCML file was used "
"to do the boostrapping (only the original application developer could do "
"so)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3466
msgid ""
"Added a \"Resources\" chapter to the narrative documentation which "
"explains how to override resources within one package from another "
"package."
msgstr ""

#: ../../../BFG_HISTORY.txt:3470
msgid ""
"Added an \"Extending\" chapter to the narrative documentation which "
"explains how to extend or modify an existing BFG application using "
"another Python package and ZCML."
msgstr ""

#: ../../../BFG_HISTORY.txt:3475
msgid "1.0a9 (2009-07-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3480
msgid ""
"Make it possible to pass strings in the form "
"\"package_name:relative/path\" to APIs like ``render_template``, "
"``render_template_to_response``, and ``get_template``.  Sometimes the "
"package in which a caller lives is a direct namespace package, so the "
"module which is returned is semi-useless for navigating from. In this "
"way, the caller can control the horizontal and vertical of where things "
"get looked up from."
msgstr ""

#: ../../../BFG_HISTORY.txt:3489
msgid "1.0a8 (2009-07-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3494
msgid ""
"Deprecate the ``authentication_policy`` and ``authorization_policy`` "
"arguments to ``repoze.bfg.router.make_app``.  Instead, developers should "
"use the various authentication policy ZCML directives "
"(``repozewho1authenticationpolicy``, ``remoteuserauthenticationpolicy`` "
"and ``authtktauthenticationpolicy``) and the `aclauthorizationpolicy`` "
"authorization policy directive as described in the changes to the "
"\"Security\" narrative documenation chapter and the wiki tutorials."
msgstr ""

#: ../../../BFG_HISTORY.txt:3506
msgid "Add three new ZCML directives which configure authentication policies:"
msgstr ""

#: ../../../BFG_HISTORY.txt:3509
msgid "``repozewho1authenticationpolicy``"
msgstr ""

#: ../../../BFG_HISTORY.txt:3511
msgid "``remoteuserauthenticationpolicy``"
msgstr ""

#: ../../../BFG_HISTORY.txt:3513
msgid "``authtktauthenticationpolicy``"
msgstr ""

#: ../../../BFG_HISTORY.txt:3515
msgid ""
"Add a new ZCML directive which configures an ACL authorization policy "
"named ``aclauthorizationpolicy``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3521
msgid ""
"Bug fix: when a ``repoze.bfg.resource.PackageOverrides`` class was "
"instantiated, and the package it was overriding already had a "
"``__loader__`` attribute, it would fail at startup time, even if the "
"``__loader__`` attribute was another PackageOverrides instance.  We now "
"replace any ``__loader__`` that is also a PackageOverrides instance.  "
"Symptom: ``ConfigurationExecutionError: <type 'exceptions.TypeError'>: "
"Package <module 'karl.views' from "
"'/Users/chrism/projects/osi/bfgenv/src/karl/karl/views/__init__.pyc'> "
"already has a __loader__ (probably a module in a zipped egg)``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3532
msgid "1.0a7 (2009-06-30)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3537
msgid ""
"Add a ``reload_resources`` configuration file setting (aka the "
"``BFG_RELOAD_RESOURCES`` environment variable).  When this is set to "
"true, the server never needs to be restarted when moving files between "
"directory resource overrides (esp. for templates currently)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3542
msgid ""
"Add a ``reload_all`` configuration file setting (aka the "
"``BFG_RELOAD_ALL`` environment variable) that implies both "
"``reload_resources`` and ``reload_templates``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3546
msgid ""
"The ``static`` helper view class now uses a ``PackageURLParser`` in order"
" to allow for the overriding of static resources (CSS / logo files, etc) "
"using the ``resource`` ZCML directive.  The ``PackageURLParser`` class "
"was added to a (new) ``static`` module in BFG; it is a subclass of the "
"``StaticURLParser`` class in ``paste.urlparser``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3553
msgid ""
"The ``repoze.bfg.templating.renderer_from_cache`` function now checks for"
" the ``reload_resources`` setting; if it's true, it does not register a "
"template renderer (it won't use the registry as a template renderer "
"cache)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3561
msgid "Add ``pkg_resources`` to the glossary."
msgstr ""

#: ../../../BFG_HISTORY.txt:3563
msgid ""
"Update the \"Environment\" docs to note the existence of "
"``reload_resources`` and ``reload_all``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3566
msgid ""
"Updated the ``bfg_alchemy`` paster template to include two views: the "
"view on the root shows a list of links to records;  the view on a record "
"shows the details for that object."
msgstr ""

#: ../../../BFG_HISTORY.txt:3573
msgid ""
"Use a colon instead of a tab as the separator between package name and "
"relpath to form the \"spec\" when register a ITemplateRenderer."
msgstr ""

#: ../../../BFG_HISTORY.txt:3576
msgid ""
"Register a ``repoze.bfg.resource.OverrideProvider`` as a pkg_resources "
"provider only for modules which are known to have overrides, instead of "
"globally, when a <resource> directive is used (performance)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3582
msgid "1.0a6 (2009-06-29)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3587
msgid ""
"Use ``caller_package`` function instead of ``caller_module`` function "
"within ``templating`` to avoid needing to name the caller module in "
"resource overrides (actually match docs)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3591
msgid ""
"Make it possible to override templates stored directly in a module with "
"templates in a subdirectory of the same module, stored directly within "
"another module, or stored in a subdirectory of another module (actually "
"match docs)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3597
msgid "1.0a5 (2009-06-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3602
msgid ""
"A new ZCML directive exists named \"resource\".  This ZCML directive "
"allows you to override Chameleon templates within a package (both "
"directories full of templates and individual template files) with other "
"templates in the same package or within another package.  This allows you"
" to \"fake out\" a view's use of a template, causing it to retrieve a "
"different template than the one actually named by a relative path to a "
"call like ``render_template_to_response('templates/mytemplate.pt')``.  "
"For example, you can override a template file by doing::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3617
msgid ""
"The string passed to \"to_override\" and \"override_with\" is named a "
"\"specification\".  The colon separator in a specification separates the "
"package name from a package-relative directory name.  The colon and the "
"following relative path are optional.  If they are not specified, the "
"override attempts to resolve every lookup into a package from the "
"directory of another package.  For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3630
msgid "Individual subdirectories within a package can also be overridden::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3637
msgid ""
"If you wish to override a directory with another directory, you must make"
" sure to attach the slash to the end of both the ``to_override`` "
"specification and the ``override_with`` specification.  If you fail to "
"attach a slash to the end of a specification that points a directory, you"
" will get unexpected results.  You cannot override a directory "
"specification with a file specification, and vice versa (a startup error "
"will occur if you try)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3645
msgid ""
"You cannot override a resource with itself (a startup error will occur if"
" you try)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3648
msgid ""
"Only individual *package* resources may be overridden.  Overrides will "
"not traverse through subpackages within an overridden package. This means"
" that if you want to override resources for both "
"``some.package:templates``, and ``some.package.views:templates``, you "
"will need to register two overrides."
msgstr ""

#: ../../../BFG_HISTORY.txt:3654
msgid ""
"The package name in a specification may start with a dot, meaning that "
"the package is relative to the package in which the ZCML file resides.  "
"For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3663
msgid ""
"Overrides for the same ``to_overrides`` specification can be named "
"multiple times within ZCML.  Each ``override_with`` path will be "
"consulted in the order defined within ZCML, forming an override search "
"path."
msgstr ""

#: ../../../BFG_HISTORY.txt:3668
msgid ""
"Resource overrides can actually override resources other than templates."
"  Any software which uses the ``pkg_resources`` "
"``get_resource_filename``, ``get_resource_stream`` or "
"``get_resource_string`` APIs will obtain an overridden file when an "
"override is used.  However, the only built-in facility which uses the "
"``pkg_resources`` API within BFG is the templating stuff, so we only call"
" out template overrides here."
msgstr ""

#: ../../../BFG_HISTORY.txt:3676
msgid ""
"Use the ``pkg_resources`` API to locate template filenames instead of "
"dead-reckoning using the ``os.path`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:3679
msgid ""
"The ``repoze.bfg.templating`` module now uses ``pkg_resources`` to locate"
" and register template files instead of using an absolute path name."
msgstr ""

#: ../../../BFG_HISTORY.txt:3684
msgid "1.0a4 (2009-06-25)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3689
msgid ""
"Cause ``:segment`` matches in route paths to put a Unicode-decoded and "
"URL-dequoted value in the matchdict for the value matched. Previously a "
"non-decoded non-URL-dequoted string was placed in the matchdict as the "
"value."
msgstr ""

#: ../../../BFG_HISTORY.txt:3694
msgid ""
"Cause ``*remainder`` matches in route paths to put a *tuple* in the "
"matchdict dictionary in order to be able to present Unicode-decoded and "
"URL-dequoted values for the traversal path.  Previously a non-decoded "
"non-URL-dequoted string was placed in the matchdict as the value."
msgstr ""

#: ../../../BFG_HISTORY.txt:3700
msgid ""
"Add optional ``max_age`` keyword value to the ``remember`` method of "
"``repoze.bfg.authentication.AuthTktAuthenticationPolicy``; if this value "
"is passed to ``remember``, the generated cookie will have a corresponding"
" Max-Age value."
msgstr ""

#: ../../../BFG_HISTORY.txt:3708
msgid ""
"Add information to the URL Dispatch narrative documentation about path "
"pattern matching syntax."
msgstr ""

#: ../../../BFG_HISTORY.txt:3714
msgid ""
"Make ``route_url`` URL-quote segment replacements during generation. "
"Remainder segments are not quoted."
msgstr ""

#: ../../../BFG_HISTORY.txt:3718
msgid "1.0a3 (2009-06-24)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3721 ../../../BFG_HISTORY.txt:5059
#: ../../../BFG_HISTORY.txt:5148 ../../../BFG_HISTORY.txt:5175
#: ../../../BFG_HISTORY.txt:5190 ../../../BFG_HISTORY.txt:5257
#: ../../../BFG_HISTORY.txt:5300 ../../../BFG_HISTORY.txt:5413
#: ../../../BFG_HISTORY.txt:5521
msgid "Implementation Changes"
msgstr ""

#: ../../../BFG_HISTORY.txt:3723
msgid ""
"``repoze.bfg`` no longer relies on the Routes package to interpret URL "
"paths.  All known existing ``path`` patterns will continue to work with "
"the reimplemented logic, which lives in ``repoze.bfg.urldispatch``.  "
"``<route>`` ZCML directives which use certain attributes (uncommon ones) "
"may not work (see \"Backwards Incompatibilities\" below)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3733
msgid ""
"``model_url`` when passed a request that was generated as a result of a "
"route match would fail in a call to ``route.generate``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3736
msgid ""
"BFG-on-GAE didn't work due to a corner case bug in the fallback Python "
"implementation of ``threading.local`` (symptom: \"Initialization "
"arguments are not supported\").  Thanks to Michael Bernstein for the bug "
"report."
msgstr ""

#: ../../../BFG_HISTORY.txt:3744
msgid ""
"Added a \"corner case\" explanation to the \"Hybrid Apps\" chapter "
"explaining what to do when \"the wrong\" view is matched."
msgstr ""

#: ../../../BFG_HISTORY.txt:3747
msgid ""
"Use ``repoze.bfg.url.route_url`` API in tutorials rather than Routes "
"``url_for`` API."
msgstr ""

#: ../../../BFG_HISTORY.txt:3753
msgid ""
"Added the ``repoze.bfg.url.route_url`` API.  This API allows you to "
"generate URLs based on ``<route>`` declarations.  See the URL Dispatch "
"narrative chapter and the \"repoze.bfg.url\" module API documentation for"
" more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:3761
msgid ""
"As a result of disusing Routes, using the Routes ``url_for`` API inside a"
" BFG application (as was suggested by previous iterations of tutorials) "
"will no longer work.  Use the ``repoze.bfg.url.route_url`` method "
"instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:3766
msgid ""
"The following attributes on the ``<route>`` ZCML directive no longer "
"work: ``encoding``, ``static``, ``filter``, ``condition_method``, "
"``condition_subdomain``, ``condition_function``, ``explicit``, or "
"``subdomains``.  These were all Routes features."
msgstr ""

#: ../../../BFG_HISTORY.txt:3771
msgid ""
"The ``<route>`` ZCML directive no longer supports the ``<requirement>`` "
"subdirective.  This was a Routes feature."
msgstr ""

#: ../../../BFG_HISTORY.txt:3775
msgid "1.0a2 (2009-06-23)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3780
msgid ""
"The ``bfg_routesalchemy`` paster template app tests failed due to a "
"mismatch between test and view signatures."
msgstr ""

#: ../../../BFG_HISTORY.txt:3786
msgid ""
"Add a ``view_for`` attribute to the ``route`` ZCML directive.  This "
"attribute should refer to an interface or a class (ala the ``for`` "
"attribute of the ``view`` ZCML directive)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3793
msgid ""
"Conditional documentation in installation section (\"how to install a "
"Python interpreter\")."
msgstr ""

#: ../../../BFG_HISTORY.txt:3799
msgid ""
"The ``callback`` argument of the ``repoze.bfg.authentication`` "
"authentication policies named ``RepozeWho1AuthenticationPolicy``, "
"``RemoteUserAuthenticationPolicy``, and ``AuthTktAuthenticationPolicy`` "
"now must accept two positional arguments: the orginal argument accepted "
"by each (userid or identity) plus a second argument, which will be the "
"current request. Apologies, this is required to service finding groups "
"when there is no \"global\" database connection."
msgstr ""

#: ../../../BFG_HISTORY.txt:3809
msgid "1.0a1 (2009-06-22)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3814
msgid ""
"A new ZCML directive was added named ``notfound``.  This ZCML directive "
"can be used to name a view that should be invoked when the request can't "
"otherwise be resolved to a view callable.  For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3821
msgid ""
"A new ZCML directive was added named ``forbidden``.  This ZCML directive "
"can be used to name a view that should be invoked when a view callable "
"for a request is found, but cannot be invoked due to an authorization "
"failure.  For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3829
msgid ""
"Allow views to be *optionally* defined as callables that accept only a "
"request object, instead of both a context and a request (which still "
"works, and always will).  The following types work as views in this "
"style:"
msgstr ""

#: ../../../BFG_HISTORY.txt:3834
msgid "functions that accept a single argument ``request``, e.g.::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3839
msgid ""
"new and old-style classes that have an ``__init__`` method that accepts "
"``self, request``, e.g.::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3846
msgid ""
"Arbitrary callables that have a ``__call__`` method that accepts ``self, "
"request``, e.g.::"
msgstr ""

#: ../../../BFG_HISTORY.txt:3854
msgid ""
"This likely should have been the calling convention all along, as the "
"request has ``context`` as an attribute already, and with views called as"
" a result of URL dispatch, having the context in the arguments is not "
"very useful.  C'est la vie."
msgstr ""

#: ../../../BFG_HISTORY.txt:3859
msgid ""
"Cache the absolute path in the caller's package globals within "
"``repoze.bfg.path`` to get rid of repeated (expensive) calls to "
"os.path.abspath."
msgstr ""

#: ../../../BFG_HISTORY.txt:3863
msgid ""
"Add ``reissue_time`` and ``timeout`` parameters to "
"``repoze.bfg.authentication.AuthTktAuthenticationPolicy`` constructor.  "
"If these are passed, cookies will be reset every so often (cadged from "
"the same change to repoze.who lately)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3868
msgid ""
"The matchdict related to the matching of a Routes route is available on "
"the request as the ``matchdict`` attribute: ``request.matchdict``.  If no"
" route matched, this attribute will be None."
msgstr ""

#: ../../../BFG_HISTORY.txt:3873
msgid ""
"Make 404 responses slightly cheaper by showing ``environ[\"PATH_INFO\"]``"
" on the notfound result page rather than the fullly computed URL."
msgstr ""

#: ../../../BFG_HISTORY.txt:3877
msgid "Move LRU cache implementation into a separate package (``repoze.lru``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3880
msgid ""
"The concepts of traversal and URL dispatch have been unified.  It is now "
"possible to use the same sort of factory as both a traversal \"root "
"factory\" and what used to be referred to as a urldispatch \"context "
"factory\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:3885
msgid ""
"When the root factory argument (as a first argument) passed to "
"``repoze.bfg.router.make_app`` is ``None``, a *default* root factory is "
"used.  This is in support of using routes as \"root finders\"; it "
"supplants the idea that there is a default ``IRoutesContextFactory``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3891
msgid ""
"The `view`` ZCML statement and the ``repoze.bfg.view.bfg_view`` decorator"
" now accept an extra argument: ``route_name``.  If a ``route_name`` is "
"specified, it must match the name of a previously defined ``route`` "
"statement.  When it is specified, the view will only be called when that "
"route matches during a request."
msgstr ""

#: ../../../BFG_HISTORY.txt:3897
msgid ""
"It is now possible to perfom traversal *after* a route has matched. Use "
"the pattern ``*traverse`` in a ``<route>`` ``path`` attribute within "
"ZCML, and the path remainder which it matches will be used as a traversal"
" path."
msgstr ""

#: ../../../BFG_HISTORY.txt:3902
msgid ""
"When any route defined matches, the WSGI environment will now contain a "
"key ``bfg.routes.route`` (the Route object which matched), and a key "
"``bfg.routes.matchdict`` (the result of calling route.match)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3909
msgid ""
"Utility registrations against ``repoze.bfg.interfaces.INotFoundView`` and"
" ``repoze.bfg.interfaces.IForbiddenView`` are now deprecated.  Use the "
"``notfound`` and ``forbidden`` ZCML directives instead (see the \"Hooks\""
" chapter for more information).  Such registrations will continue to "
"work, but the notfound and forbidden directives do \"extra work\" to "
"ensure that the callable named by the directive can be called by the "
"router even if it's a class or request-argument-only view."
msgstr ""

#: ../../../BFG_HISTORY.txt:3920 ../../../BFG_HISTORY.txt:4070
msgid "Removals"
msgstr ""

#: ../../../BFG_HISTORY.txt:3922
msgid ""
"The ``IRoutesContext``, ``IRoutesContextFactory``, and "
"``IContextNotFound`` interfaces were removed from "
"``repoze.bfg.interfaces``.  These were never APIs."
msgstr ""

#: ../../../BFG_HISTORY.txt:3926
msgid ""
"The ``repoze.bfg.urldispatch.RoutesContextNotFound``, "
"``repoze.bfg.urldispatch.RoutesModelTraverser`` and "
"``repoze.bfg.urldispatch.RoutesContextURL`` classes were removed. These "
"were also never APIs."
msgstr ""

#: ../../../BFG_HISTORY.txt:3934
msgid ""
"Moved the ``repoze.bfg.push`` module, which implemented the ``pushpage`` "
"decorator, into a separate distribution, ``repoze.bfg.pushpage``. "
"Applications which used this decorator should continue to work after "
"adding that distribution to their installation requirements."
msgstr ""

#: ../../../BFG_HISTORY.txt:3939
msgid ""
"Changing the default request factory via an IRequestFactory utility "
"registration (as used to be documented in the \"Hooks\" chapter's "
"\"Changing the request factory\" section) is no longer supported.  The "
"dance to manufacture a request is complicated as a result of unifying "
"traversal and url dispatch, making it highly unlikely for anyone to be "
"able to override it properly.  For those who just want to decorate or "
"modify a request, use a NewRequestEvent subscriber (see the Events "
"chapter in the documentation)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3948
msgid ""
"The ``repoze.bfg.IRequestFactory`` interface was removed.  See the bullet"
" above for why."
msgstr ""

#: ../../../BFG_HISTORY.txt:3951
msgid ""
"Routes \"context factories\" (spelled as the factory argument to a route "
"statement in ZCML) must now expect the WSGI environ as a single argument "
"rather than a set of keyword arguments.  They can obtain the match "
"dictionary by asking for environ['bfg.routes.matchdict'].  This is the "
"same set of keywords that used to be passed to urldispatch \"context "
"factories\" in BFG 0.9 and below."
msgstr ""

#: ../../../BFG_HISTORY.txt:3959
msgid ""
"Using the ``@zope.component.adapter`` decorator on a bfg view function no"
" longer works.  Use the ``@repoze.bfg.view.bfg_view`` decorator instead "
"to mark a function (or a class) as a view."
msgstr ""

#: ../../../BFG_HISTORY.txt:3963
msgid ""
"The name under which the matching route object is found in the environ "
"was changed from ``bfg.route`` to ``bfg.routes.route``."
msgstr ""

#: ../../../BFG_HISTORY.txt:3966
msgid ""
"Finding the root is now done *before* manufacturing a request object (and"
" sending a new request event) within the router (it used to be performed "
"afterwards)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3970
msgid ""
"Adding ``*path_info`` to a route no longer changes the PATH_INFO for a "
"request that matches using URL dispatch.  This feature was only there to "
"service the ``repoze.bfg.wsgi.wsgiapp2`` decorator and it did it wrong; "
"use ``*subpath`` instead now."
msgstr ""

#: ../../../BFG_HISTORY.txt:3975
msgid ""
"The values of ``subpath``, ``traversed``, and ``virtual_root_path`` "
"attached to the request object are always now tuples instead of lists "
"(performance)."
msgstr ""

#: ../../../BFG_HISTORY.txt:3982
msgid ""
"The ``bfg_alchemy`` Paster template named \"repoze.tm\" in its pipeline "
"rather than \"repoze.tm2\", causing the startup to fail."
msgstr ""

#: ../../../BFG_HISTORY.txt:3985
msgid ""
"Move BBB logic for registering an "
"IAuthenticationPolicy/IForbiddenView/INotFoundView based on older "
"concepts from the router module's ``make_app`` function into the "
"``repoze.bfg.zcml.zcml_configure`` callable, to service compatibility "
"with scripts that use \"zope.configuration.xmlconfig\" (replace with "
"``repoze.bfg.zml.zcml_configure`` as necessary to get BBB logic)"
msgstr ""

#: ../../../BFG_HISTORY.txt:3996
msgid ""
"Add interface docs related to how to create authentication policies and "
"authorization policies to the \"Security\" narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:3999
msgid ""
"Added a (fairly sad) \"Combining Traversal and URL Dispatch\" chapter to "
"the narrative documentation.  This explains the usage of ``*traverse`` "
"and ``*subpath`` in routes URL patters."
msgstr ""

#: ../../../BFG_HISTORY.txt:4003
msgid ""
"A \"router\" chapter explaining the request/response lifecycle at a high "
"level was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:4006
msgid ""
"Replaced all mentions and explanations of a routes \"context factory\" "
"with equivalent explanations of a \"root factory\" (context factories "
"have been disused)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4010
msgid ""
"Updated Routes bfgwiki2 tutorial to reflect the fact that context "
"factories are now no longer used."
msgstr ""

#: ../../../BFG_HISTORY.txt:4014
msgid "0.9.1 (2009-06-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4019
msgid ""
"Add API named ``repoze.bfg.settings.get_settings`` which retrieves a "
"derivation of values passed as the ``options`` value of "
"``repoze.bfg.router.make_app``.  This API should be preferred instead of "
"using getUtility(ISettings).  I added a new ``repoze.bfg.settings`` API "
"document as well."
msgstr ""

#: ../../../BFG_HISTORY.txt:4028
msgid ""
"Restored missing entry point declaration for bfg_alchemy paster template,"
" which was accidentally removed in 0.9."
msgstr ""

#: ../../../BFG_HISTORY.txt:4034
msgid ""
"Fix a reference to ``wsgiapp`` in the ``wsgiapp2`` API documentation "
"within the ``repoze.bfg.wsgi`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:4038
msgid "API Removals"
msgstr ""

#: ../../../BFG_HISTORY.txt:4040
msgid ""
"The ``repoze.bfg.location.locate`` API was removed: it didn't do enough "
"to be very helpful and had a misleading name."
msgstr ""

#: ../../../BFG_HISTORY.txt:4044
msgid "0.9 (2009-06-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4049
msgid ""
"It was not possible to register a custom ``IRoutesContextFactory`` for "
"use as a default context factory as documented in the \"Hooks\" chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:4056
msgid ""
"The ``request_type`` argument of ZCML ``view`` declarations and "
"``bfg_view`` decorators can now be one of the strings ``GET``, ``POST``, "
"``PUT``, ``DELETE``, or ``HEAD`` instead of a reference to the respective"
" interface type imported from ``repoze.bfg.interfaces``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4062
msgid ""
"The ``route`` ZCML directive now accepts ``request_type`` as an alias for"
" its ``condition_method`` argument for symmetry with the ``view`` "
"directive."
msgstr ""

#: ../../../BFG_HISTORY.txt:4066
msgid ""
"The ``bfg_routesalchemy`` paster template now provides a unit test and "
"actually uses the database during a view rendering."
msgstr ""

#: ../../../BFG_HISTORY.txt:4072
msgid ""
"Remove ``repoze.bfg.threadlocal.setManager``.  It was only used in unit "
"tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:4075
msgid ""
"Remove ``repoze.bfg.wsgi.HTTPException``, ``repoze.bfg.wsgi.NotFound``, "
"and ``repoze.bfg.wsgi.Unauthorized``. These classes were disused with the"
" introduction of the ``IUnauthorizedView`` and ``INotFoundView`` "
"machinery."
msgstr ""

#: ../../../BFG_HISTORY.txt:4083
msgid ""
"Add description to narrative templating chapter about how to use "
"Chameleon text templates."
msgstr ""

#: ../../../BFG_HISTORY.txt:4086
msgid ""
"Changed Views narrative chapter to use method strings rather than "
"interface types, and moved advanced interface type usage to Events "
"narrative chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:4090
msgid "Added a Routes+SQLAlchemy wiki tutorial."
msgstr ""

#: ../../../BFG_HISTORY.txt:4093
msgid "0.9a8 (2009-05-31)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4098
msgid ""
"It is now possible to register a custom "
"``repoze.bfg.interfaces.INotFoundView`` for a given application. This "
"feature replaces the ``repoze.bfg.interfaces.INotFoundAppFactory`` "
"feature previously described in the Hooks chapter.  The INotFoundView "
"will be called when the framework detects that a view lookup done as a "
"result of a request fails; it should accept a context object and a "
"request object; it should return an IResponse object (a webob response, "
"basically).  See the Hooks narrative chapter of the BFG docs for more "
"info."
msgstr ""

#: ../../../BFG_HISTORY.txt:4109
msgid ""
"The error presented when a view invoked by the router returns a non-"
"response object now includes the view's name for troubleshooting "
"purposes."
msgstr ""

#: ../../../BFG_HISTORY.txt:4116
msgid "A \"new response\" event is emitted for forbidden and notfound views."
msgstr ""

#: ../../../BFG_HISTORY.txt:4121
msgid ""
"The ``repoze.bfg.interfaces.INotFoundAppFactory`` interface has been "
"deprecated in favor of using the new "
"``repoze.bfg.interfaces.INotFoundView`` mechanism."
msgstr ""

#: ../../../BFG_HISTORY.txt:4126
msgid "Renames"
msgstr ""

#: ../../../BFG_HISTORY.txt:4128
msgid ""
"Renamed ``repoze.bfg.interfaces.IForbiddenResponseFactory`` to "
"``repoze.bfg.interfaces.IForbiddenView``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4132
msgid "0.9a7 (2009-05-30)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4137
msgid ""
"Remove \"context\" argument from ``effective_principals`` and "
"``authenticated_userid`` function APIs in ``repoze.bfg.security``, "
"effectively a doing reversion to 0.8 and before behavior.  Both functions"
" now again accept only the ``request`` parameter."
msgstr ""

#: ../../../BFG_HISTORY.txt:4143
msgid "0.9a6 (2009-05-29)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4148
msgid ""
"Changed \"BFG Wiki\" tutorial to use AuthTktAuthenticationPolicy rather "
"than repoze.who."
msgstr ""

#: ../../../BFG_HISTORY.txt:4154
msgid ""
"Add an AuthTktAuthenticationPolicy.  This policy retrieves credentials "
"from an auth_tkt cookie managed by the application itself (instead of "
"relying on an upstream data source for authentication data).  See the "
"Security API chapter of the documentation for more info."
msgstr ""

#: ../../../BFG_HISTORY.txt:4160
msgid ""
"Allow RemoteUserAuthenticationPolicy and RepozeWho1AuthenticationPolicy "
"to accept various constructor arguments.  See the Security API chapter of"
" the documentation for more info."
msgstr ""

#: ../../../BFG_HISTORY.txt:4166
msgid "0.9a5 (2009-05-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4171
msgid ""
"Add a ``get_app`` API functions to the ``paster`` module.  This obtains a"
" WSGI application from a config file given a config file name and a "
"section name.  See the ``repoze.bfg.paster`` API docs for more "
"information."
msgstr ""

#: ../../../BFG_HISTORY.txt:4176
msgid ""
"Add a new module named ``scripting``.  It contains a ``get_root`` API "
"function, which, provided a Router instance, returns a traversal root "
"object and a \"closer\".  See the ``repoze.bfg.scripting`` API docs for "
"more info."
msgstr ""

#: ../../../BFG_HISTORY.txt:4182
msgid "0.9a4 (2009-05-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4187
msgid ""
"Try checking for an \"old style\" security policy *after* we parse ZCML "
"(thinko)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4191
msgid "0.9a3 (2009-05-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4196
msgid ""
"Allow IAuthenticationPolicy and IAuthorizationPolicy to be overridden via"
" ZCML registrations (do ZCML parsing after registering these in "
"router.py)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4203
msgid ""
"Added \"BFG Wiki\" tutorial to documentation; it describes step-by-step "
"how to create a traversal-based ZODB application with authentication."
msgstr ""

#: ../../../BFG_HISTORY.txt:4210
msgid ""
"Added deprecations for imports of ``ACLSecurityPolicy``, "
"``InheritingACLSecurityPolicy``, ``RemoteUserACLSecurityPolicy``, "
"``RemoteUserInheritingACLSecurityPolicy``, ``WhoACLSecurityPolicy``, and "
"``WhoInheritingACLSecurityPolicy`` from the ``repoze.bfg.security`` "
"module; for the meantime (for backwards compatibility purposes) these "
"live in the ``repoze.bfg.secpols`` module.  Note however, that the entire"
" concept of a \"security policy\" is deprecated in BFG in favor of "
"separate authentication and authorization policies, so any use of a "
"security policy will generate additional deprecation warnings even if you"
" do start using ``repoze.bfg.secpols``.  ``repoze.bfg.secpols`` will "
"disappear in a future release of ``repoze.bfg``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4224
msgid "Deprecated Import Alias Removals"
msgstr ""

#: ../../../BFG_HISTORY.txt:4226
msgid ""
"Remove ``repoze.bfg.template`` module.  All imports from this package "
"have been deprecated since 0.3.8.  Instead, import ``get_template``, "
"``render_template``, and ``render_template_to_response`` from the "
"``repoze.bfg.chameleon_zpt`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:4232
msgid ""
"Remove backwards compatibility import alias for "
"``repoze.bfg.traversal.split_path`` (deprecated since 0.6.5).  This must "
"now be imported as ``repoze.bfg.traversal.traversal_path``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4236
msgid ""
"Remove backwards compatibility import alias for "
"``repoze.bfg.urldispatch.RoutesContext`` (deprecated since 0.6.5). This "
"must now be imported as ``repoze.bfg.urldispatch.DefaultRoutesContext``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4241
msgid ""
"Removed backwards compatibility import aliases for "
"``repoze.bfg.router.get_options`` and ``repoze.bfg.router.Settings`` "
"(deprecated since 0.6.2).  These both must now be imported from "
"``repoze.bfg.settings``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4246
msgid ""
"Removed backwards compatibility import alias for "
"``repoze.bfg.interfaces.IRootPolicy`` (deprecated since 0.6.2).  It must "
"be imported as ``repoze.bfg.interfaces.IRootFactory`` now."
msgstr ""

#: ../../../BFG_HISTORY.txt:4250
msgid ""
"Removed backwards compatibility import alias for "
"``repoze.bfg.interfaces.ITemplate`` (deprecated since 0.4.4).  It must be"
" imported as ``repoze.bfg.interfaces.ITemplateRenderer`` now."
msgstr ""

#: ../../../BFG_HISTORY.txt:4254
msgid ""
"Removed backwards compatibility import alias for "
"``repoze.bfg.interfaces.ITemplateFactory`` (deprecated since 0.4.4). It "
"must be imported as ``repoze.bfg.interfaces.ITemplateRendererFactory`` "
"now."
msgstr ""

#: ../../../BFG_HISTORY.txt:4259
msgid ""
"Removed backwards compatibility import alias for "
"``repoze.bfg.chameleon_zpt.ZPTTemplateFactory`` (deprecated since 0.4.4)."
"  This must be imported as ``repoze.bfg.ZPTTemplateRenderer`` now."
msgstr ""

#: ../../../BFG_HISTORY.txt:4265
msgid "0.9a2 (2009-05-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4270
msgid ""
"A paster command has been added named \"bfgshell\".  This command can be "
"used to get an interactive prompt with your BFG root object in the global"
" namespace.  E.g.::"
msgstr ""

#: ../../../BFG_HISTORY.txt:4276
msgid "See the ``Project`` chapter in the BFG documentation for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:4282
msgid ""
"The name ``repoze.bfg.registry.registry_manager`` was never an API, but "
"scripts in the wild were using it to set up an environment for use under "
"a debug shell.  A backwards compatibility shim has been added for this "
"purpose, but the feature is deprecated."
msgstr ""

#: ../../../BFG_HISTORY.txt:4288
msgid "0.9a1 (2009-5-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4293
msgid ""
"New API functions named ``forget`` and ``remember`` are available in the "
"``security`` module.  The ``forget`` function returns headers which will "
"cause the currently authenticated user to be logged out when set in a "
"response.  The ``remember`` function (when passed the proper arguments) "
"will return headers which will cause a principal to be \"logged in\" when"
" set in a response.  See the Security API chapter of the docs for more "
"info."
msgstr ""

#: ../../../BFG_HISTORY.txt:4301
msgid ""
"New keyword arguments to the ``repoze.bfg.router.make_app`` call have "
"been added: ``authentication_policy`` and ``authorization_policy``.  "
"These should, respectively, be an implementation of an authentication "
"policy (an object implementing the "
"``repoze.bfg.interfaces.IAuthenticationPolicy`` interface) and an "
"implementation of an authorization policy (an object implementing "
"``repoze.bfg.interfaces.IAuthorizationPolicy)``.  Concrete "
"implementations of authentication policies exist in "
"``repoze.bfg.authentication``.  Concrete implementations of authorization"
" policies exist in ``repoze.bfg.authorization``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4312
msgid ""
"Both ``authentication_policy`` and ``authorization_policy`` default to "
"``None``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4315
msgid ""
"If ``authentication_policy`` is ``None``, but ``authorization_policy`` is"
" *not* ``None``, then ``authorization_policy`` is ignored (the ability to"
" do authorization depends on authentication)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4320
msgid ""
"If the ``authentication_policy`` argument is *not* ``None``, and the "
"``authorization_policy`` argument *is* ``None``, the authorization policy"
" defaults to an authorization implementation that uses ACLs "
"(``repoze.bfg.authorization.ACLAuthorizationPolicy``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4325
msgid ""
"We no longer encourage configuration of \"security policies\" using ZCML,"
" as previously we did for ``ISecurityPolicy``.  This is because it's not "
"uncommon to need to configure settings for concrete authorization or "
"authentication policies using paste .ini parameters; the app entry point "
"for your application is the natural place to do this."
msgstr ""

#: ../../../BFG_HISTORY.txt:4332
msgid ""
"Two new abstractions have been added in the way of adapters used by the "
"system: an ``IAuthorizationPolicy`` and an ``IAuthenticationPolicy``.  A "
"combination of these (as registered by the ``securitypolicy`` ZCML "
"directive) take the place of the ``ISecurityPolicy`` abstraction in "
"previous releases of repoze.who. The API functions in "
"``repoze.who.security`` (such as ``authentication_userid``, "
"``effective_principals``, ``has_permission``, and so on) have been "
"changed to try to make use of these new adapters.  If you're using an "
"older ``ISecurityPolicy`` adapter, the system will still work, but it "
"will print deprecation warnings when such a policy is used."
msgstr ""

#: ../../../BFG_HISTORY.txt:4344
msgid ""
"The way the (internal) IViewPermission utilities registered via ZCML are "
"invoked has changed.  They are purely adapters now, returning a boolean "
"result, rather than returning a callable. You shouldn't have been using "
"these anyway. ;-)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4349
msgid ""
"New concrete implementations of IAuthenticationPolicy have been added to "
"the ``repoze.bfg.authentication`` module: "
"``RepozeWho1AuthenticationPolicy`` which uses ``repoze.who`` identity to "
"retrieve authentication data from and ``RemoteUserAuthenticationPolicy``,"
" which uses the ``REMOTE_USER`` value in the WSGI environment to retrieve"
" authentication data."
msgstr ""

#: ../../../BFG_HISTORY.txt:4356
msgid ""
"A new concrete implementation of IAuthorizationPolicy has been added to "
"the ``repoze.bfg.authorization`` module: ``ACLAuthorizationPolicy`` which"
" uses ACL inheritance to do authorization."
msgstr ""

#: ../../../BFG_HISTORY.txt:4361
msgid ""
"It is now possible to register a custom "
"``repoze.bfg.interfaces.IForbiddenResponseFactory`` for a given "
"application.  This feature replaces the "
"``repoze.bfg.interfaces.IUnauthorizedAppFactory`` feature previously "
"described in the Hooks chapter.  The IForbiddenResponseFactory will be "
"called when the framework detects an authorization failure; it should "
"accept a context object and a request object; it should return an "
"IResponse object (a webob response, basically).  Read the below point for"
" more info and see the Hooks narrative chapter of the BFG docs for more "
"info."
msgstr ""

#: ../../../BFG_HISTORY.txt:4375
msgid ""
"Custom NotFound and Forbidden (nee' Unauthorized) WSGI applications "
"(registered as a utility for INotFoundAppFactory and "
"IUnauthorizedAppFactory) could rely on an environment key named "
"``message`` describing the circumstance of the response.  This key has "
"been renamed to ``repoze.bfg.message`` (as per the WSGI spec, which "
"requires environment extensions to contain dots)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4385
msgid ""
"The ``repoze.bfg.interfaces.IUnauthorizedAppFactory`` interface has been "
"deprecated in favor of using the new "
"``repoze.bfg.interfaces.IForbiddenResponseFactory`` mechanism."
msgstr ""

#: ../../../BFG_HISTORY.txt:4389
msgid ""
"The ``view_execution_permitted`` API should now be imported from the "
"``repoze.bfg.security`` module instead of the ``repoze.bfg.view`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:4393
msgid ""
"The ``authenticated_userid`` and ``effective_principals`` APIs in "
"``repoze.bfg.security`` used to only take a single argument (request).  "
"They now accept two arguments (``context`` and ``request``).  Calling "
"them with a single argument is still supported but issues a deprecation "
"warning.  (NOTE: this change was reverted in 0.9a7; meaning the 0.9 "
"versions of these functions again accept ``request`` only, just like 0.8 "
"and before)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4401
msgid ""
"Use of \"old-style\" security policies (those base on ISecurityPolicy) is"
" now deprecated.  See the \"Security\" chapter of the docs for info about"
" activating an authorization policy and an authentication poicy."
msgstr ""

#: ../../../BFG_HISTORY.txt:4406
msgid "0.8.1 (2009-05-21)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4411
msgid ""
"Class objects may now be used as view callables (both via ZCML and via "
"use of the ``bfg_view`` decorator in Python 2.6 as a class decorator).  "
"The calling semantics when using a class as a view callable is similar to"
" that of using a class as a Zope \"browser view\": the class' "
"``__init__`` must accept two positional parameters (conventionally named "
"``context``, and ``request``).  The resulting instance must be callable "
"(it must have a ``__call__`` method). When called, the instance should "
"return a response.  For example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:4433
msgid ""
"Removed the pickling of ZCML actions (the code that wrote "
"``configure.zcml.cache`` next to ``configure.zcml`` files in projects).  "
"The code which managed writing and reading of the cache file was a source"
" of subtle bugs when users switched between imperative (e.g. "
"``@bfg_view``) registrations and declarative registrations (e.g. the "
"``view`` directive in ZCML) on the same project. On a moderately-sized "
"project (535 ZCML actions and 15 ZCML files), executing actions read from"
" the pickle was saving us only about 200ms (2.5 sec vs 2.7 sec average). "
"On very small projects (1 ZCML file and 4 actions), startup time was "
"comparable, and sometimes even slower when reading from the pickle, and "
"both ways were so fast that it really just didn't matter anyway."
msgstr ""

#: ../../../BFG_HISTORY.txt:4447
msgid "0.8 (2009-05-18)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4452
msgid ""
"Added a ``traverse`` function to the ``repoze.bfg.traversal`` module.  "
"This function may be used to retrieve certain values computed during path"
" resolution.  See the Traversal API chapter of the documentation for more"
" information about this function."
msgstr ""

#: ../../../BFG_HISTORY.txt:4460
msgid ""
"Internal: ``ITraverser`` callables should now return a dictionary rather "
"than a tuple.  Up until 0.7.0, all ITraversers were assumed to return a "
"3-tuple.  In 0.7.1, ITraversers were assumed to return a 6-tuple.  As (by"
" evidence) it's likely we'll need to add further information to the "
"return value of an ITraverser callable, 0.8 assumes that an ITraverser "
"return a dictionary with certain elements in it.  See the "
"``repoze.bfg.interfaces.ITraverser`` interface for the list of keys that "
"should be present in the dictionary. ``ITraversers`` which return tuples "
"will still work, although a deprecation warning will be issued."
msgstr ""

#: ../../../BFG_HISTORY.txt:4474
msgid ""
"If your code used the ITraverser interface directly (not via an API "
"function such as ``find_model``) via an adapter lookup, you'll need to "
"change your code to expect a dictionary rather than a 3- or 6-tuple if "
"your code ever gets return values from the default ModelGraphTraverser or"
" RoutesModelTraverser adapters."
msgstr ""

#: ../../../BFG_HISTORY.txt:4481
msgid "0.8a7 (2009-05-16)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4486
msgid ""
"The ``RoutesMapper`` class in ``repoze.bfg.urldispatch`` has been "
"removed, as well as its documentation.  It had been deprecated since "
"0.6.3.  Code in ``repoze.bfg.urldispatch.RoutesModelTraverser`` which "
"catered to it has also been removed."
msgstr ""

#: ../../../BFG_HISTORY.txt:4491
msgid ""
"The semantics of the ``route`` ZCML directive have been simplified. "
"Previously, it was assumed that to use a route, you wanted to map a route"
" to an externally registered view.  The new ``route`` directive instead "
"has a ``view`` attribute which is required, specifying the dotted path to"
" a view callable.  When a route directive is processed, a view is "
"*registered* using the name attribute of the route directive as its name "
"and the callable as its value.  The ``view_name`` and ``provides`` "
"attributes of the ``route`` directive are therefore no longer used.  "
"Effectively, if you were previously using the ``route`` directive, it "
"means you must change a pair of ZCML directives that look like this::"
msgstr ""

#: ../../../BFG_HISTORY.txt:4516
msgid "To a ZCML directive that looks like this::"
msgstr ""

#: ../../../BFG_HISTORY.txt:4525
msgid ""
"In other words, to make old code work, remove the ``view`` directives "
"that were only there to serve the purpose of backing ``route`` "
"directives, and move their ``view=`` attribute into the ``route`` "
"directive itself."
msgstr ""

#: ../../../BFG_HISTORY.txt:4530
msgid ""
"This change also necessitated that the ``name`` attribute of the "
"``route`` directive is now required.  If you were previously using "
"``route`` directives without a ``name`` attribute, you'll need to add one"
" (the name is arbitrary, but must be unique among all ``route`` and "
"``view`` statements)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4536
msgid ""
"The ``provides`` attribute of the ``route`` directive has also been "
"removed.  This directive specified a sequence of interface types that the"
" generated context would be decorated with.  Since route views are always"
" generated now for a single interface (``repoze.bfg.IRoutesContext``) as "
"opposed to being looked up arbitrarily, there is no need to decorate any "
"context to ensure a view is found."
msgstr ""

#: ../../../BFG_HISTORY.txt:4547
msgid ""
"Added API docs for the ``repoze.bfg.testing`` methods "
"``registerAdapter``, ``registerUtiity``, ``registerSubscriber``, and "
"``cleanUp``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4551
msgid "Added glossary entry for \"root factory\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:4553
msgid ""
"Noted existence of ``repoze.bfg.pagetemplate`` template bindings in "
"\"Available Add On Template System Bindings\" in Templates chapter in "
"narrative docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:4557
msgid ""
"Update \"Templates\" narrative chapter in docs (expand to show a sample "
"template and correct macro example)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4563
msgid ""
"Courtesty Carlos de la Guardia, added an ``alchemy`` Paster template.  "
"This paster template sets up a BFG project that uses SQAlchemy (with "
"SQLite) and uses traversal to resolve URLs.  (no Routes areused).  This "
"template can be used via ``paster create -t bfg_alchemy``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4569
msgid ""
"The Routes ``Route`` object used to resolve the match is now put into the"
" environment as ``bfg.route`` when URL dispatch is used."
msgstr ""

#: ../../../BFG_HISTORY.txt:4572
msgid ""
"You can now change the default Routes \"context factory\" globally. See "
"the \"ZCML Hooks\" chapter of the documentation (in the \"Changing the "
"Default Routes Context Factory\" section)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4577
msgid "0.8a6 (2009-05-11)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4582
msgid ""
"Added a ``routesalchemy`` Paster template.  This paster template sets up "
"a BFG project that uses SQAlchemy (with SQLite) and uses Routes "
"exclusively to resolve URLs (no traversal root factory is used).  This "
"template can be used via ``paster create -t bfg_routesalchemy``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4591
msgid ""
"Added documentation to the URL Dispatch chapter about how to catch the "
"root URL using a ZCML ``route`` directive."
msgstr ""

#: ../../../BFG_HISTORY.txt:4594
msgid ""
"Added documentation to the URL Dispatch chapter about how to perform a "
"cleanup function at the end of a request (e.g. close the SQL connection)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4601
msgid ""
"In version 0.6.3, passing a ``get_root`` callback (a \"root factory\") to"
" ``repoze.bfg.router.make_app`` became optional if any ``route`` "
"declaration was made in ZCML.  The intent was to make it possible to "
"disuse traversal entirely, instead relying entirely on URL dispatch "
"(Routes) to resolve all contexts.  However a compound set of bugs "
"prevented usage of a Routes-based root view (a view which responds to "
"\"/\").  One bug existed in `repoze.bfg.urldispatch``, another existed in"
" Routes itself."
msgstr ""

#: ../../../BFG_HISTORY.txt:4610
msgid ""
"To resolve this issue, the urldispatch module was fixed, and a fork of "
"the Routes trunk was put into the \"dev\" index named ``Routes-1.11dev-"
"chrism-home``.  The source for the fork exists at "
"`http://bitbucket.org/chrism/routes-home/ <http://bitbucket.org/chrism"
"/routes-home/>`_ (broken link); its contents have been merged into the "
"Routes trunk (what will be Routes 1.11)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4619
msgid "0.8a5 (2009-05-08)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4624
msgid ""
"Two new security policies were added: "
"RemoteUserInheritingACLSecurityPolicy and WhoInheritingACLSecurityPolicy."
"  These are security policies which take into account *all* ACLs defined "
"in the lineage of a context rather than stopping at the first ACL found "
"in a lineage.  See the \"Security\" chapter of the API documentation for "
"more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:4631
msgid ""
"The API and narrative documentation dealing with security was changed to "
"introduce the new \"inheriting\" security policy variants."
msgstr ""

#: ../../../BFG_HISTORY.txt:4634
msgid "Added glossary entry for \"lineage\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:4639
msgid ""
"The security policy previously named "
"``RepozeWhoIdentityACLSecurityPolicy`` now has the slightly saner name of"
" ``WhoACLSecurityPolicy``.  A deprecation warning is emitted when this "
"policy is imported under the \"old\" name; usually this is due to its use"
" in ZCML within your application.  If you're getting this deprecation "
"warning, change your ZCML to use the new name, e.g. change::"
msgstr ""

#: ../../../BFG_HISTORY.txt:4652
msgid "To::"
msgstr ""

#: ../../../BFG_HISTORY.txt:4660
msgid "0.8a4 (2009-05-04)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4665
msgid ""
"``zope.testing`` is no longer a direct dependency, although our "
"dependencies (such as ``zope.interface``, ``repoze.zcml``, etc) still "
"depend on it."
msgstr ""

#: ../../../BFG_HISTORY.txt:4669
msgid ""
"Tested on Google App Engine.  Added a tutorial to the documentation "
"explaining how to deploy a BFG app to GAE."
msgstr ""

#: ../../../BFG_HISTORY.txt:4675
msgid ""
"Applications which rely on ``zope.testing.cleanup.cleanUp`` in unit tests"
" can still use that function indefinitely.  However, for maximum forward "
"compatibility, they should import ``cleanUp`` from ``repoze.bfg.testing``"
" instead of from ``zope.testing.cleanup``. The BFG paster templates and "
"docs have been changed to use this function instead of the "
"``zope.testing.cleanup`` version."
msgstr ""

#: ../../../BFG_HISTORY.txt:4683
msgid "0.8a3 (2009-05-03)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4688
msgid ""
"Don't require a successful import of ``zope.testing`` at BFG application "
"runtime.  This allows us to get rid of ``zope.testing`` on platforms like"
" GAE which have file limits."
msgstr ""

#: ../../../BFG_HISTORY.txt:4693
msgid "0.8a2 (2009-05-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4698
msgid ""
"We no longer include the ``configure.zcml`` of the ``chameleon.zpt`` "
"package within the ``configure.zcml`` of the \"repoze.bfg.includes\" "
"package.  This has been a no-op for some time now."
msgstr ""

#: ../../../BFG_HISTORY.txt:4702
msgid ""
"The ``repoze.bfg.chameleon_zpt`` package no longer imports from "
"``chameleon.zpt`` at module scope, deferring the import until later "
"within a method call.  The ``chameleon.zpt`` package can't be imported on"
" platforms like GAE."
msgstr ""

#: ../../../BFG_HISTORY.txt:4708
msgid "0.8a1 (2009-05-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4711
msgid "Deprecation Warning and Import Alias Removals"
msgstr ""

#: ../../../BFG_HISTORY.txt:4713
msgid ""
"Since version 0.6.1, a deprecation warning has been emitted when the name"
" ``model_url`` is imported from the ``repoze.bfg.traversal`` module.  "
"This import alias (and the deprecation warning) has been removed.  Any "
"import of the ``model_url`` function will now need to be done from "
"``repoze.bfg.url``; any import of the name ``model_url`` from "
"``repoze.bfg.traversal`` will now fail.  This was done to remove a "
"dependency on zope.deferredimport."
msgstr ""

#: ../../../BFG_HISTORY.txt:4721
msgid ""
"Since version 0.6.5, a deprecation warning has been emitted when the name"
" ``RoutesModelTraverser`` is imported from the ``repoze.bfg.traversal`` "
"module.  This import alias (and the deprecation warning) has been "
"removed.  Any import of the ``RoutesModelTraverser`` class will now need "
"to be done from ``repoze.bfg.urldispatch``; any import of the name "
"``RoutesModelTraverser`` from ``repoze.bfg.traversal`` will now fail.  "
"This was done to remove a dependency on zope.deferredimport."
msgstr ""

#: ../../../BFG_HISTORY.txt:4733
msgid ""
"This release of ``repoze.bfg`` is \"C-free\".  This means it has no hard "
"dependencies on any software that must be compiled from C source at "
"installation time.  In particular, ``repoze.bfg`` no longer depends on "
"the ``lxml`` package."
msgstr ""

#: ../../../BFG_HISTORY.txt:4738
msgid ""
"This change has introduced some backwards incompatibilities, described in"
" the \"Backwards Incompatibilities\" section below."
msgstr ""

#: ../../../BFG_HISTORY.txt:4741
msgid ""
"This release was tested on Windows XP.  It appears to work fine and all "
"the tests pass."
msgstr ""

#: ../../../BFG_HISTORY.txt:4747
msgid "Incompatibilities related to making ``repoze.bfg`` \"C-free\":"
msgstr ""

#: ../../../BFG_HISTORY.txt:4749
msgid ""
"Removed the ``repoze.bfg.chameleon_genshi`` module, and thus support for "
"Genshi-style chameleon templates.  Genshi-style Chameleon templates "
"depend upon ``lxml``, which is implemented in C (as opposed to pure "
"Python) and the ``repoze.bfg`` core is \"C-free\" as of this release. You"
" may get Genshi-style Chameleon support back by installing the "
"``repoze.bfg.chameleon_genshi`` package availalable from "
"http://svn.repoze.org/repoze.bfg.chameleon_genshi (also available in the "
"index at http://dist.repoze.org/bfg/0.8/simple). All existing code that "
"depended on the ``chameleon_genshi`` module prior to this release of "
"``repoze.bfg`` should work without change after this addon is installed."
msgstr ""

#: ../../../BFG_HISTORY.txt:4761
msgid ""
"Removed the ``repoze.bfg.xslt`` module and thus support for XSL "
"templates.  The ``repoze.bfg.xslt`` module depended upon ``lxml``, which "
"is implemented in C, and the ``repoze.bfg`` core is \"C-free\" as of this"
" release.  You bay get XSL templating back by installing the "
"``repoze.bfg.xslt`` package available from "
"http://svn.repoze.org/repoze.bfg.xslt/ (also available in the index at "
"http://dist.repoze.org/bfg/0.8/simple).  All existing code that depended "
"upon the ``xslt`` module prior to this release of ``repoze.bfg`` should "
"work without modification after this addon is installed."
msgstr ""

#: ../../../BFG_HISTORY.txt:4772
msgid ""
"Removed the ``repoze.bfg.interfaces.INodeTemplateRenderer`` interface and"
" the an old b/w compat aliases from that interface to "
"``repoze.bfg.interfaces.INodeTemplate``.  This interface must now be "
"imported from the ``repoze.bfg.xslt.interfaces`` package after "
"installation of the ``repoze.bfg.xslt`` addon package described above as "
"``repoze.bfg.interfaces.INodeTemplateRenderer``.  This interface was "
"never part of any public API."
msgstr ""

#: ../../../BFG_HISTORY.txt:4780
msgid "Other backwards incompatibilities:"
msgstr ""

#: ../../../BFG_HISTORY.txt:4782
msgid ""
"The ``render_template`` function in ``repoze.bfg.chameleon_zpt`` returns "
"Unicode instead of a string.  Likewise, the individual values returned by"
" the iterable created by the ``render_template_to_iterable`` function are"
" also each Unicode. This is actually a backwards incompatibility "
"inherited from our new use of the combination of ``chameleon.core`` "
"1.0b32 (the non-lxml-depending version) and ``chameleon.zpt`` 1.0b16+ ; "
"the ``chameleon.zpt`` PageTemplateFile implementation used to return a "
"string, but now returns Unicode."
msgstr ""

#: ../../../BFG_HISTORY.txt:4793
msgid "0.7.1 (2009-05-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4796
msgid "Index-Related"
msgstr ""

#: ../../../BFG_HISTORY.txt:4798
msgid ""
"The canonical package index location for ``repoze.bfg`` has changed. The "
"\"old\" index (http://dist.repoze.org/lemonade/dev/simple) has been "
"superseded by a new index location "
"(`http://dist.repoze.org/bfg/current/simple "
"<http://dist.repoze.org/bfg/current/simple>`_).  The installation "
"documentation has been updated as well as the ``setup.cfg`` file in this "
"package.  The \"lemonade\" index still exists, but it is not guaranteed "
"to have the latest BFG software in it, nor will it be maintained in the "
"future."
msgstr ""

#: ../../../BFG_HISTORY.txt:4811
msgid ""
"The \"paster create\" templates have been modified to use links to the "
"new \"bfg.repoze.org\" and \"docs.repoze.org\" websites."
msgstr ""

#: ../../../BFG_HISTORY.txt:4814
msgid ""
"Added better documentation for virtual hosting at a URL prefix within the"
" virtual hosting docs chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:4817
msgid ""
"The interface for ``repoze.bfg.interfaces.ITraverser`` and the built-in "
"implementations that implement the interface "
"(``repoze.bfg.traversal.ModelGraphTraverser``, and "
"``repoze.bfg.urldispatch.RoutesModelTraverser``) now expect the "
"``__call__`` method of an ITraverser to return 3 additional arguments: "
"``traversed``, ``virtual_root``, and ``virtual_root_path`` (the old "
"contract was that the ``__call__`` method of an ITraverser returned; "
"three arguments, the contract new is that it returns six).  ``traversed``"
" will be a sequence of Unicode names that were traversed (including the "
"virtual root path, if any) or ``None`` if no traversal was performed, "
"``virtual_root`` will be a model object representing the virtual root (or"
" the physical root if traversal was not performed), and "
"``virtual_root_path`` will be a sequence representing the virtual root "
"path (a sequence of Unicode names) or ``None`` if traversal was not "
"performed."
msgstr ""

#: ../../../BFG_HISTORY.txt:4834
msgid ""
"Six arguments are now returned from BFG ITraversers.  They are returned "
"in this order: ``context``, ``view_name``, ``subpath``, ``traversed``, "
"``virtual_root``, and ``virtual_root_path``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4838
msgid ""
"Places in the BFG code which called an ITraverser continue to accept a "
"3-argument return value, although BFG will generate and log a warning "
"when one is encountered."
msgstr ""

#: ../../../BFG_HISTORY.txt:4842
msgid ""
"The request object now has the following attributes: ``traversed`` (the "
"sequence of names traversed or ``None`` if traversal was not performed), "
"``virtual_root`` (the model object representing the virtual root, "
"including the virtual root path if any), and ``virtual_root_path`` (the "
"seuquence of names representing the virtual root path or ``None`` if "
"traversal was not performed)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4849
msgid ""
"A new decorator named ``wsgiapp2`` was added to the ``repoze.bfg.wsgi`` "
"module.  This decorator performs the same function as "
"``repoze.bfg.wsgi.wsgiapp`` except it fixes up the ``SCRIPT_NAME``, and "
"``PATH_INFO`` environment values before invoking the WSGI subapplication."
msgstr ""

#: ../../../BFG_HISTORY.txt:4855
msgid ""
"The ``repoze.bfg.testing.DummyRequest`` object now has default attributes"
" for ``traversed``, ``virtual_root``, and ``virtual_root_path``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4859
msgid ""
"The RoutesModelTraverser now behaves more like the Routes "
"\"RoutesMiddleware\" object when an element in the match dict is named "
"``path_info`` (usually when there's a pattern like "
"``http://foo/*path_info``).  When this is the case, the ``PATH_INFO`` "
"environment variable is set to the value in the match dict, and the "
"``SCRIPT_NAME`` is appended to with the prefix of the original "
"``PATH_INFO`` not including the value of the new variable."
msgstr ""

#: ../../../BFG_HISTORY.txt:4867
msgid ""
"The notfound debug now shows the traversed path, the virtual root, and "
"the virtual root path too."
msgstr ""

#: ../../../BFG_HISTORY.txt:4870
msgid ""
"Speed up / clarify 'traversal' module's 'model_path', 'model_path_tuple',"
" and '_model_path_list' functions."
msgstr ""

#: ../../../BFG_HISTORY.txt:4876
msgid ""
"In previous releases, the ``repoze.bfg.url.model_url``, "
"``repoze.bfg.traversal.model_path`` and "
"``repoze.bfg.traversal.model_path_tuple`` functions always ignored the "
"``__name__`` argument of the root object in a model graph ( effectively "
"replacing it with a leading ``/`` in the returned value) when a path or "
"URL was generated.  The code required to perform this operation was not "
"efficient.  As of this release, the root object in a model graph *must* "
"have a ``__name__`` attribute that is either ``None`` or the empty string"
" (``''``) for URLs and paths to be generated properly from these APIs.  "
"If your root model object has a ``__name__`` argument that is not one of "
"these values, you will need to change your code for URLs and paths to be "
"generated properly.  If your model graph has a root node with a string "
"``__name__`` that is not null, the value of ``__name__`` will be "
"prepended to every path and URL generated."
msgstr ""

#: ../../../BFG_HISTORY.txt:4892
msgid ""
"The ``repoze.bfg.location.LocationProxy`` class and the "
"``repoze.bfg.location.ClassAndInstanceDescr`` class have both been "
"removed in order to be able to eventually shed a dependency on "
"``zope.proxy``.  Neither of these classes was ever an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:4897
msgid ""
"In all previous releases, the ``repoze.bfg.location.locate`` function "
"worked like so: if a model did not explicitly provide the "
"``repoze.bfg.interfaces.ILocation`` interface, ``locate`` returned a "
"``LocationProxy`` object representing ``model`` with its ``__parent__`` "
"attribute assigned to ``parent`` and a ``__name__`` attribute assigned to"
" ``__name__``.  In this release, the ``repoze.bfg.location.locate`` "
"function simply jams the ``__name__`` and ``__parent__`` attributes on to"
" the supplied model unconditionally, no matter if the object implements "
"ILocation or not, and it never returns a proxy.  This was done because "
"the LocationProxy behavior has now moved into an add-on package "
"(``repoze.bfg.traversalwrapper``), in order to eventually be able to shed"
" a dependency on ``zope.proxy``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4911
msgid ""
"In all previous releases, by default, if traversal was used (as opposed "
"to URL-dispatch), and the root object supplied "
"the``repoze.bfg.interfaces.ILocation`` interface, but the children "
"returned via its ``__getitem__`` returned an object that did not "
"implement the same interface, ``repoze.bfg`` provided some implicit help "
"during traversal.  This traversal feature wrapped subobjects from the "
"root (and thereafter) that did not implement ``ILocation`` in proxies "
"which automatically provided them with a ``__name__`` and ``__parent__`` "
"attribute based on the name being traversed and the previous object "
"traversed.  This feature has now been removed from the base "
"``repoze.bfg`` package for purposes of eventually shedding a dependency "
"on ``zope.proxy``."
msgstr ""

#: ../../../BFG_HISTORY.txt:4924
msgid ""
"In order to re-enable the wrapper behavior for older applications which "
"cannot be changed, register the \"traversalwrapper\" "
"``ModelGraphTraverser`` as the traversal policy, rather than the default "
"``ModelGraphTraverser``. To use this feature, you will need to install "
"the ``repoze.bfg.traversalwrapper`` package (an add-on package, available"
" at http://svn.repoze.org/repoze.bfg.traversalwrapper) Then change your "
"application's ``configure.zcml`` to include the following stanza:"
msgstr ""

#: ../../../BFG_HISTORY.txt:4937
msgid "<adapter"
msgstr ""

#: ../../../BFG_HISTORY.txt:4934
msgid ""
"factory=\"repoze.bfg.traversalwrapper.ModelGraphTraverser\" "
"provides=\"repoze.bfg.interfaces.ITraverserFactory\" for=\"*\" />"
msgstr ""

#: ../../../BFG_HISTORY.txt:4939
msgid ""
"When this ITraverserFactory is used instead of the default, no object in "
"the graph (even the root object) must supply a ``__name__`` or "
"``__parent__`` attribute.  Even if subobjects returned from the root *do*"
" implement the ILocation interface, these will still be wrapped in "
"proxies that override the object's \"real\" ``__parent__`` and "
"``__name__`` attributes."
msgstr ""

#: ../../../BFG_HISTORY.txt:4946
msgid ""
"See also changes to the \"Models\" chapter of the documentation (in the "
"\"Location-Aware Model Instances\") section."
msgstr ""

#: ../../../BFG_HISTORY.txt:4950
msgid "0.7.0 (2009-04-11)"
msgstr ""

#: ../../../BFG_HISTORY.txt:4955
msgid ""
"Fix a bug in ``repoze.bfg.wsgi.HTTPException``: the content length was "
"returned as an int rather than as a string."
msgstr ""

#: ../../../BFG_HISTORY.txt:4958
msgid ""
"Add explicit dependencies on ``zope.deferredimport``, "
"``zope.deprecation``, and ``zope.proxy`` for forward compatibility "
"reasons (``zope.component`` will stop relying on ``zope.deferredimport`` "
"soon and although we use it directly, it's only a transitive dependency, "
"and ''zope.deprecation`` and ``zope.proxy`` are used directly even though"
" they're only transitive dependencies as well)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4966
msgid ""
"Using ``model_url`` or ``model_path`` against a broken model graph (one "
"with models that had a non-root model with a ``__name__`` of ``None``) "
"caused an inscrutable error to be thrown: ( if not "
"``_must_quote[cachekey].search(s): TypeError: expected string or "
"buffer``).  Now URLs and paths generated against graphs that have None "
"names in intermediate nodes will replace the None with the empty string, "
"and, as a result, the error won't be raised.  Of course the URL or path "
"will still be bogus."
msgstr ""

#: ../../../BFG_HISTORY.txt:4978
msgid ""
"Make it possible to have ``testing.DummyTemplateRenderer`` return some "
"nondefault string representation."
msgstr ""

#: ../../../BFG_HISTORY.txt:4981
msgid ""
"Added a new ``anchor`` keyword argument to ``model_url``.  If ``anchor`` "
"is present, its string representation will be used as a named anchor in "
"the generated URL (e.g. if ``anchor`` is passed as ``foo`` and the model "
"URL is ``http://example.com/model/url``, the generated URL will be "
"``http://example.com/model/url#foo``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:4991
msgid ""
"The default request charset encoding is now ``utf-8``.  As a result, the "
"request machinery will attempt to decode values from the utf-8 encoding "
"to Unicode automatically when they are obtained via ``request.params``, "
"``request.GET``, and ``request.POST``.  The previous behavior of BFG was "
"to return a bytestring when a value was accessed in this manner.  This "
"change will break form handling code in apps that rely on values from "
"those APIs being considered bytestrings.  If you are manually decoding "
"values from form submissions in your application, you'll either need to "
"change the code that does that to expect Unicode values from "
"``request.params``, ``request.GET`` and ``request.POST``, or you'll need "
"to explicitly reenable the previous behavior.  To reenable the previous "
"behavior, add the following to your application's ``configure.zcml``::"
msgstr ""

#: ../../../BFG_HISTORY.txt:5009
msgid ""
"See also the documentation in the \"Views\" chapter of the BFG docs "
"entitled \"Using Views to Handle Form Submissions (Unicode and Character "
"Set Issues)\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:5016
msgid ""
"Add a section to the narrative Views chapter entitled \"Using Views to "
"Handle Form Submissions (Unicode and Character Set Issues)\" explaining "
"implicit decoding of form data values."
msgstr ""

#: ../../../BFG_HISTORY.txt:5021
msgid "0.6.9 (2009-02-16)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5026
msgid ""
"lru cache was unstable under concurrency (big surprise!) when it tried to"
" redelete a key in the cache that had already been deleted. Symptom: line"
" 64 in put:del data[oldkey]:KeyError: '/some/path'. Now we just ignore "
"the key error if we can't delete the key (it has already been deleted)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5032
msgid ""
"Empty location names in model paths when generating a URL using "
"``repoze.bfg.model_url`` based on a model obtained via traversal are no "
"longer ignored in the generated URL.  This means that if a non-root model"
" object has a ``__name__`` of ``''``, the URL will reflect it (e.g. "
"``model_url`` will generate ``http://foo/bar//baz`` if an object with the"
" ``__name__`` of ``''`` is a child of bar and the parent of baz).  URLs "
"generated with empty path segments are, however, still irresolveable by "
"the model graph traverser on request ingress (the traverser strips empty "
"path segment names)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5045
msgid ""
"Microspeedups of ``repoze.bfg.traversal.model_path``, "
"``repoze.bfg.traversal.model_path_tuple``, "
"``repoze.bfg.traversal.quote_path_segment``, and "
"``repoze.bfg.url.urlencode``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5050
msgid "add zip_safe = false to setup.cfg."
msgstr ""

#: ../../../BFG_HISTORY.txt:5055
msgid ""
"Add a note to the ``repoze.bfg.traversal.quote_path_segment`` API docs "
"about caching of computed values."
msgstr ""

#: ../../../BFG_HISTORY.txt:5061
msgid ""
"Simplification of ``repoze.bfg.traversal.TraversalContextURL.__call__`` "
"(it now uses ``repoze.bfg.traversal.model_path`` instead of rolling its "
"own path-generation)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5067
msgid "0.6.8 (2009-02-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5072
msgid ""
"The ``repoze.bfg.traversal.model_path`` API now returns a *quoted* string"
" rather than a string represented by series of unquoted elements joined "
"via ``/`` characters.  Previously it returned a string or unicode object "
"representing the model path, with each segment name in the path joined "
"together via ``/`` characters, e.g. ``/foo /bar``.  Now it returns a "
"string, where each segment is a UTF-8 encoded and URL-quoted element e.g."
" ``/foo%20/bar``.  This change was (as discussed briefly on the repoze-"
"dev maillist) necessary to accomodate model objects which themselves have"
" ``__name__`` attributes that contain the ``/`` character."
msgstr ""

#: ../../../BFG_HISTORY.txt:5083
msgid ""
"For people that have no models that have high-order Unicode ``__name__`` "
"attributes or ``__name__`` attributes with values that require URL-"
"quoting with in their model graphs, this won't cause any issue.  However,"
" if you have code that currently expects ``model_path`` to return an "
"unquoted string, or you have an existing application with data generated "
"via the old method, and you're too lazy to change anything, you may wish "
"replace the BFG-imported ``model_path`` in your code with this function "
"(this is the code of the \"old\" ``model_path`` implementation)::"
msgstr ""

#: ../../../BFG_HISTORY.txt:5106
msgid ""
"The ``repoze.bfg.traversal.find_model`` API no longer implicitly converts"
" unicode representations of a full path passed to it as a Unicode object "
"into a UTF-8 string.  Callers should either use prequoted path strings "
"returned by ``repoze.bfg.traversal.model_path``, or tuple values returned"
" by the result of ``repoze.bfg.traversal.model_path_tuple`` or they "
"should use the guidelines about passing a string ``path`` argument "
"described in the ``find_model`` API documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5116 ../../../BFG_HISTORY.txt:5755
#: ../../../BFG_HISTORY.txt:6222
msgid "Bugfixes"
msgstr ""

#: ../../../BFG_HISTORY.txt:5118
#, python-format
msgid ""
"Each argument contained in ``elements`` passed to "
"``repoze.bfg.traversal.model_path`` will now have any ``/`` characters "
"contained within quoted to ``%2F`` in the returned string.  Previously, "
"``/`` characters in elements were left unquoted (a bug)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5127
msgid ""
"A ``repoze.bfg.traversal.model_path_tuple`` API was added.  This API is "
"an alternative to ``model_path`` (which returns a string); "
"``model_path_tuple`` returns a model path as a tuple (much like Zope's "
"``getPhysicalPath``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5132
msgid ""
"A ``repoze.bfg.traversal.quote_path_segment`` API was added.  This API "
"will quote an individual path segment (string or unicode object).  See "
"the ``repoze.bfg.traversal`` API documentation for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:5137
msgid ""
"The ``repoze.bfg.traversal.find_model`` API now accepts \"path tuples\" "
"(see the above note regarding ``model_path_tuple``) as well as string "
"path representations (from ``repoze.bfg.traversal.model_path``) as a "
"``path`` argument."
msgstr ""

#: ../../../BFG_HISTORY.txt:5142
msgid ""
"Add ` `renderer`` argument (defaulting to None) to "
"``repoze.bfg.testing.registerDummyRenderer``.  This makes it possible, "
"for instance, to register a custom renderer that raises an exception in a"
" unit test."
msgstr ""

#: ../../../BFG_HISTORY.txt:5150
msgid ""
"Moved _url_quote function back to ``repoze.bfg.traversal`` from "
"``repoze.bfg.url``.  This is not an API."
msgstr ""

#: ../../../BFG_HISTORY.txt:5154
msgid "0.6.7 (2009-01-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5159
msgid ""
"The ``repoze.bfg.url.model_url`` API now works against contexts derived "
"from Routes URL dispatch (``Routes.util.url_for`` is called under the "
"hood)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5163
msgid ""
"\"Virtual root\" support for traversal-based applications has been added."
"  Virtual root support is useful when you'd like to host some model in a "
"``repoze.bfg`` model graph as an application under a URL pathname that "
"does not include the model path itself.  For more information, see the "
"(new) \"Virtual Hosting\" chapter in the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5170
msgid ""
"A ``repoze.bfg.traversal.virtual_root`` API has been added.  When called,"
" it returns the virtual root object (or the physical root object if no "
"virtual root has been specified)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5177
msgid ""
"``repoze.bfg.traversal.RoutesModelTraverser`` has been moved to "
"``repoze.bfg.urldispatch``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5180
msgid ""
"``model_url`` URL generation is now performed via an adapter lookup based"
" on the context and the request."
msgstr ""

#: ../../../BFG_HISTORY.txt:5183
msgid ""
"ZCML which registers two adapters for the ``IContextURL`` interface has "
"been added to the configure.zcml in ``repoze.bfg.includes``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5187
msgid "0.6.6 (2009-01-26)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5192
msgid ""
"There is an indirection in ``repoze.bfg.url.model_url`` now that consults"
" a utility to generate the base model url (without extra elements or a "
"query string).  Eventually this will service virtual hosting; for now "
"it's undocumented and should not be hooked."
msgstr ""

#: ../../../BFG_HISTORY.txt:5198
msgid "0.6.5 (2009-01-26)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5203
msgid ""
"You can now override the NotFound and Unauthorized responses that "
"``repoze.bfg`` generates when a view cannot be found or cannot be invoked"
" due to lack of permission.  See the \"ZCML Hooks\" chapter in the docs "
"for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:5208
msgid "Added Routes ZCML directive attribute explanations in documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5210
msgid ""
"Added a ``traversal_path`` API to the traversal module; see the "
"\"traversal\" API chapter in the docs.  This was a function previously "
"known as ``split_path`` that was not an API but people were using it "
"anyway.  Unlike ``split_path``, it now returns a tuple instead of a list "
"(as its values are cached)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5219
msgid ""
"The ``repoze.bfg.view.render_view_to_response`` API will no longer raise "
"a ValueError if an object returned by a view function it calls does not "
"possess certain attributes (``headerlist``, ``app_iter``, ``status``).  "
"This API used to attempt to perform a check using the ``is_response`` "
"function in ``repoze.bfg.view``, and raised a ``ValueError`` if the "
"``is_response`` check failed.  The responsibility is now the caller's to "
"ensure that the return value from a view function is a \"real\" response."
msgstr ""

#: ../../../BFG_HISTORY.txt:5228
msgid ""
"WSGI environ dicts passed to ``repoze.bfg`` 's Router must now contain a "
"REQUEST_METHOD key/value; if they do not, a KeyError will be raised "
"(speed)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5232
msgid ""
"It is no longer permissible to pass a \"nested\" list of principals to "
"``repoze.bfg.ACLAuthorizer.permits`` (e.g. ``['fred', ['larry', "
"'bob']]``).  The principals list must be fully expanded.  This feature "
"was never documented, and was never an API, so it's not a backwards "
"incompatibility."
msgstr ""

#: ../../../BFG_HISTORY.txt:5238
msgid ""
"It is no longer permissible for a security ACE to contain a \"nested\" "
"list of permissions (e.g. ``(Allow, Everyone, ['read', ['view', ['write',"
" 'manage']]])`)`.  The list must instead be fully expanded (e.g. "
"``(Allow, Everyone, ['read', 'view', 'write', 'manage])``).  This feature"
" was never documented, and was never an API, so it's not a backwards "
"incompatibility."
msgstr ""

#: ../../../BFG_HISTORY.txt:5245
msgid ""
"The ``repoze.bfg.urldispatch.RoutesRootFactory`` now injects the "
"``wsgiorg.routing_args`` environment variable into the environ when a "
"route matches.  This is a tuple of ((), routing_args) where routing_args "
"is the value that comes back from the routes mapper match (the \"match "
"dict\")."
msgstr ""

#: ../../../BFG_HISTORY.txt:5251
msgid ""
"The ``repoze.bfg.traversal.RoutesModelTraverser`` class now wants to "
"obtain the ``view_name`` and ``subpath`` from the "
"``wsgiorgs.routing_args`` environment variable.  It falls back to "
"obtaining these from the context for backwards compatibility."
msgstr ""

#: ../../../BFG_HISTORY.txt:5259
msgid ""
"Get rid of ``repoze.bfg.security.ACLAuthorizer``: the "
"``ACLSecurityPolicy`` now does what it did inline."
msgstr ""

#: ../../../BFG_HISTORY.txt:5262
msgid ""
"Get rid of ``repoze.bfg.interfaces.NoAuthorizationInformation`` "
"exception: it was used only by ``ACLAuthorizer``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5265
msgid ""
"Use a homegrown NotFound error instead of ``webob.exc.HTTPNotFound`` (the"
" latter is slow)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5268
msgid ""
"Use a homegrown Unauthorized error instead of ``webob.exc.Unauthorized`` "
"(the latter is slow)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5271
msgid ""
"the ``repoze.bfg.lru.lru_cached`` decorator now uses functools.wraps in "
"order to make documentation of LRU-cached functions possible."
msgstr ""

#: ../../../BFG_HISTORY.txt:5274
msgid "Various speed micro-tweaks."
msgstr ""

#: ../../../BFG_HISTORY.txt:5279
msgid ""
"``repoze.bfg.testing.DummyModel`` did not have a ``get`` method; it now "
"does."
msgstr ""

#: ../../../BFG_HISTORY.txt:5283
msgid "0.6.4 (2009-01-23)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5288
msgid ""
"The ``unicode_path_segments`` configuration variable and the "
"``BFG_UNICODE_PATH_SEGMENTS`` configuration variable have been removed.  "
"Path segments are now always passed to model ``__getitem__`` methods as "
"unicode.  \"True\" has been the default for this setting since 0.5.4, but"
" changing this configuration setting to false allowed you to go back to "
"passing raw path element strings to model ``__getitem__`` methods.  "
"Removal of this knob services a speed goal (we get about +80 req/s by "
"removing the check), and it's clearer just to always expect unicode path "
"segments in model ``__getitem__`` methods."
msgstr ""

#: ../../../BFG_HISTORY.txt:5302
msgid ""
"``repoze.bfg.traversal.split_path`` now also handles decoding path "
"segments to unicode (for speed, because its results are cached)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5307
msgid "``repoze.bfg.traversal.step`` was made a method of the"
msgstr ""

#: ../../../BFG_HISTORY.txt:5307
msgid "ModelGraphTraverser."
msgstr ""

#: ../../../BFG_HISTORY.txt:5309
msgid ""
"Use \"precooked\" Request subclasses (e.g. "
"``repoze.bfg.request.GETRequest``) that correspond to HTTP request "
"methods within ``router.py`` when constructing a request object rather "
"than using ``alsoProvides`` to attach the proper interface to an "
"unsubclassed ``webob.Request``.  This pattern is purely an optimization "
"(e.g. preventing calls to ``alsoProvides`` means the difference between "
"590 r/s and 690 r/s on a MacBook 2GHz)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5317
msgid ""
"Tease out an extra 4% performance boost by changing the Router; instead "
"of using imported ZCA APIs, use the same APIs directly against the "
"registry that is an attribute of the Router."
msgstr ""

#: ../../../BFG_HISTORY.txt:5321
msgid ""
"The registry used by BFG is now a subclass of "
"``zope.component.registry.Components`` (defined as "
"``repoze.bfg.registry.Registry``); it has a ``notify`` method, a "
"``registerSubscriptionAdapter`` and a ``registerHandler`` method. If no "
"subscribers are registered via ``registerHandler`` or "
"``registerSubscriptionAdapter``, ``notify`` is a noop for speed."
msgstr ""

#: ../../../BFG_HISTORY.txt:5328
msgid ""
"The Allowed and Denied classes in ``repoze.bfg.security`` now are lazier "
"about constructing the representation of a reason message for speed; "
"``repoze.bfg.view_execution_permitted`` takes advantage of this."
msgstr ""

#: ../../../BFG_HISTORY.txt:5333
msgid ""
"The ``is_response`` check was sped up by about half at the expense of "
"making its code slightly uglier."
msgstr ""

#: ../../../BFG_HISTORY.txt:5337 ../../../BFG_HISTORY.txt:5536
#: ../../../BFG_HISTORY.txt:5580
msgid "New Modules"
msgstr ""

#: ../../../BFG_HISTORY.txt:5339
msgid ""
"``repoze.bfg.lru`` implements an LRU cache class and a decorator for "
"internal use."
msgstr ""

#: ../../../BFG_HISTORY.txt:5343
msgid "0.6.3 (2009-01-19)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5348
msgid ""
"Readd ``root_policy`` attribute on Router object (as a property which "
"returns the IRootFactory utility).  It was inadvertently removed in "
"0.6.2.  Code in the wild depended upon its presence (esp. scripts and "
"\"debug\" helpers)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5356
msgid ""
"URL-dispatch has been overhauled: it is no longer necessary to manually "
"create a RoutesMapper in your application's entry point callable in order"
" to use URL-dispatch (aka `Routes <http://routes.groovie.org>`_).  A new "
"``route`` directive has been added to the available list of ZCML "
"directives.  Each ``route`` directive inserted into your application's "
"``configure.zcml`` establishes a Routes mapper connection.  If any "
"``route`` declarations are made via ZCML within a particular application,"
" the ``get_root`` callable passed in to ``repoze.bfg.router.make_app`` "
"will automatically be wrapped in the equivalent of a RoutesMapper. "
"Additionally, the new ``route`` directive allows the specification of a "
"``context_interfaces`` attribute for a route, this will be used to tag "
"the manufactured routes context with specific interfaces when a route "
"specifying a ``context_interfaces`` attribute is matched."
msgstr ""

#: ../../../BFG_HISTORY.txt:5371
msgid ""
"A new interface ``repoze.bfg.interfaces.IContextNotFound`` was added.  "
"This interface is attached to a \"dummy\" context generated when Routes "
"cannot find a match and there is no \"fallback\" get_root callable that "
"uses traversal."
msgstr ""

#: ../../../BFG_HISTORY.txt:5376
msgid ""
"The ``bfg_starter`` and ``bfg_zodb`` \"paster create\" templates now "
"contain images and CSS which are displayed when the default page is "
"displayed after initial project generation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5380
msgid ""
"Allow the ``repoze.bfg.view.static`` helper to be passed a relative "
"``root_path`` name; it will be considered relative to the file in which "
"it was called."
msgstr ""

#: ../../../BFG_HISTORY.txt:5384
msgid ""
"The functionality of ``repoze.bfg.convention`` has been merged into the "
"core.  Applications which make use of ``repoze.bfg.convention`` will "
"continue to work indefinitely, but it is recommended that apps stop "
"depending upon it.  To do so, substitute imports of "
"``repoze.bfg.convention.bfg_view`` with imports of "
"``repoze.bfg.view.bfg_view``, and change the stanza in ZCML from "
"``<convention package=\".\">`` to ``<scan package=\".\">``.  As a result "
"of the merge, bfg has grown a new dependency: ``martian``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5393
msgid ""
"View functions which use the pushpage decorator are now pickleable "
"(meaning their use won't prevent a ``configure.zcml.cache`` file from "
"being written to disk)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5397
msgid ""
"Instead of invariably using ``webob.Request`` as the \"request factory\" "
"(e.g. in the ``Router`` class) and ``webob.Response`` and the \"response "
"factory\" (e.g. in ``render_template_to_response``), allow both to be "
"overridden via a ZCML utility hook.  See the \"Using ZCML Hooks\" chapter"
" of the documentation for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:5406
msgid ""
"The class ``repoze.bfg.urldispatch.RoutesContext`` has been renamed to "
"``repoze.bfg.urldispatch.DefaultRoutesContext``.  The class should be "
"imported by the new name as necessary (although in reality it probably "
"shouldn't be imported from anywhere except internally within BFG, as it's"
" not part of the API)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5415
msgid ""
"The ``repoze.bfg.wsgi.wsgiapp`` decorator now uses "
"``webob.Request.get_response`` to do its work rather than relying on "
"homegrown WSGI code."
msgstr ""

#: ../../../BFG_HISTORY.txt:5419
msgid ""
"The ``repoze.bfg.view.static`` helper now uses "
"``webob.Request.get_response`` to do its work rather than relying on "
"homegrown WSGI code."
msgstr ""

#: ../../../BFG_HISTORY.txt:5423
msgid ""
"The ``repoze.bfg.urldispatch.RoutesModelTraverser`` class has been moved "
"to ``repoze.bfg.traversal.RoutesModelTraverser``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5426
msgid ""
"The ``repoze.bfg.registry.makeRegistry`` function was renamed to "
"``repoze.bfg.registry.populateRegistry`` and now accepts a ``registry`` "
"argument (which should be an instance of "
"``zope.component.registry.Components``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5432
msgid "Documentation Additions"
msgstr ""

#: ../../../BFG_HISTORY.txt:5434
msgid ""
"Updated narrative urldispatch chapter with changes required by "
"``<route..>`` ZCML directive."
msgstr ""

#: ../../../BFG_HISTORY.txt:5437
msgid ""
"Add a section on \"Using BFG Security With URL Dispatch\" into the "
"urldispatch chapter of the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5440
msgid ""
"Better documentation of security policy implementations that ship with "
"repoze.bfg."
msgstr ""

#: ../../../BFG_HISTORY.txt:5443
msgid ""
"Added a \"Using ZPT Macros in repoze.bfg\" section to the narrative "
"templating chapter."
msgstr ""

#: ../../../BFG_HISTORY.txt:5447
msgid "0.6.2 (2009-01-13)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5452
msgid ""
"Tests can be run with coverage output if you've got ``nose`` installed in"
" the interpreter which you use to run tests.  Using an interpreter with "
"``nose`` installed, do ``python setup.py nosetests`` within a checkout of"
" the ``repoze.bfg`` package to see test coverage output."
msgstr ""

#: ../../../BFG_HISTORY.txt:5458
msgid ""
"Added a ``post`` argument to the ``repoze.bfg.testing:DummyRequest`` "
"constructor."
msgstr ""

#: ../../../BFG_HISTORY.txt:5461
msgid ""
"Added ``__len__`` and ``__nonzero__`` to "
"``repoze.bfg.testing:DummyModel``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5463
msgid ""
"The ``repoze.bfg.registry.get_options`` callable (now renamed to "
"``repoze.bfg.setings.get_options``) used to return only framework-"
"specific keys and values in the dictionary it returned. It now returns "
"all the keys and values in the dictionary it is passed *plus* any "
"framework-specific settings culled from the environment.  As a side "
"effect, all PasteDeploy application-specific config file settings are "
"made available as attributes of the ``ISettings`` utility from within "
"BFG."
msgstr ""

#: ../../../BFG_HISTORY.txt:5472
msgid ""
"Renamed the existing BFG paster template to ``bfg_starter``.  Added "
"another template (``bfg_zodb``) showing default ZODB setup using "
"``repoze.zodbconn``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5476
msgid ""
"Add a method named ``assert_`` to the DummyTemplateRenderer.  This method"
" accepts keyword arguments.  Each key/value pair in the keyword arguments"
" causes an assertion to be made that the renderer received this key with "
"a value equal to the asserted value."
msgstr ""

#: ../../../BFG_HISTORY.txt:5481
msgid ""
"Projects generated by the paster templates now use the "
"``DummyTemplateRenderer.assert_`` method in their view tests."
msgstr ""

#: ../../../BFG_HISTORY.txt:5484
msgid ""
"Make the (internal) thread local registry manager maintain a stack of "
"registries in order to make it possible to call one BFG application from "
"inside another."
msgstr ""

#: ../../../BFG_HISTORY.txt:5488
msgid ""
"An interface specific to the HTTP verb (GET/PUT/POST/DELETE/HEAD) is "
"attached to each request object on ingress.  The HTTP-verb-related "
"interfaces are defined in ``repoze.bfg.interfaces`` and are "
"``IGETRequest``, ``IPOSTRequest``, ``IPUTRequest``, ``IDELETERequest`` "
"and ``IHEADRequest``.  These interfaces can be specified as the "
"``request_type`` attribute of a bfg view declaration.  A view naming a "
"specific HTTP-verb-matching interface will be found only if the view is "
"defined with a request_type that matches the HTTP verb in the incoming "
"request.  The more general ``IRequest`` interface can be used as the "
"request_type to catch all requests (and this is indeed the default).  All"
" requests implement ``IRequest``. The HTTP-verb-matching idea was "
"pioneered by `repoze.bfg.restrequest "
"<http://pypi.python.org/pypi/repoze.bfg.restrequest/1.0.1>`_ . That "
"package is no longer required, but still functions fine."
msgstr ""

#: ../../../BFG_HISTORY.txt:5507
msgid ""
"Fix a bug where the Paste configuration's ``unicode_path_segments`` (and "
"os.environ's ``BFG_UNICODE_PATH_SEGMENTS``) may have been defaulting to "
"false in some circumstances.  It now always defaults to true, matching "
"the documentation and intent."
msgstr ""

#: ../../../BFG_HISTORY.txt:5512
msgid ""
"The ``repoze.bfg.traversal.find_model`` API did not work properly when "
"passed a ``path`` argument which was unicode and contained high-order "
"bytes when the ``unicode_path_segments`` or ``BFG_UNICODE_PATH_SEGMENTS``"
" configuration variables were \"true\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:5517
msgid ""
"A new module was added: ``repoze.bfg.settings``.  This contains "
"deployment-settings-related code."
msgstr ""

#: ../../../BFG_HISTORY.txt:5523
msgid ""
"The ``make_app`` callable within ``repoze.bfg.router`` now registers the "
"``root_policy`` argument as a utility (unnamed, using the new "
"``repoze.bfg.interfaces.IRootFactory`` as a provides interface) rather "
"than passing it as the first argument to the ``repoze.bfg.router.Router``"
" class.  As a result, the ``repoze.bfg.router.Router`` router class only "
"accepts a single argument: ``registry``.  The "
"``repoze.bfg.router.Router`` class retrieves the root policy via a "
"utility lookup now.  The ``repoze.bfg.router.make_app`` API also now "
"performs some important application registrations that were previously "
"handled inside ``repoze.bfg.registry.makeRegistry``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5538
msgid ""
"A ``repoze.bfg.settings`` module was added.  It contains code related to "
"deployment settings.  Most of the code it contains was moved to it from "
"the ``repoze.bfg.registry`` module."
msgstr ""

#: ../../../BFG_HISTORY.txt:5545
msgid ""
"The ``repoze.bfg.settings.Settings`` class (an instance of which is "
"registered as a utility providing ``repoze.bfg.interfaces.ISettings`` "
"when any application is started) now automatically calls "
"``repoze.bfg.settings.get_options`` on the options passed to its "
"constructor.  This means that usage of ``get_options`` within an "
"application's ``make_app`` function is no longer required (the \"raw\" "
"``options`` dict or None may be passed)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5553
msgid ""
"Remove old cold which attempts to recover from trying to unpickle a "
"``z3c.pt`` template; Chameleon has been the templating engine for a good "
"long time now.  Running repoze.bfg against a sandbox that has pickled "
"``z3c.pt`` templates it will now just fail with an unpickling error, but "
"can be fixed by deleting the template cache files."
msgstr ""

#: ../../../BFG_HISTORY.txt:5563
msgid ""
"Moved the ``repoze.bfg.registry.Settings`` class.  This has been moved to"
" ``repoze.bfg.settings.Settings``. A deprecation warning is issued when "
"it is imported from the older location."
msgstr ""

#: ../../../BFG_HISTORY.txt:5567
msgid ""
"Moved the ``repoze.bfg.registry.get_options`` function This has been "
"moved to ``repoze.bfg.settings.get_options``.  A deprecation warning is "
"issued when it is imported from the older location."
msgstr ""

#: ../../../BFG_HISTORY.txt:5571
msgid ""
"The ``repoze.bfg.interfaces.IRootPolicy`` interface was renamed within "
"the interfaces package.  It has been renamed to ``IRootFactory``.  A "
"deprecation warning is issued when it is imported from the older "
"location."
msgstr ""

#: ../../../BFG_HISTORY.txt:5577
msgid "0.6.1 (2009-01-06)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5582
msgid ""
"A new module ``repoze.bfg.url`` has been added.  It contains the "
"``model_url`` API (moved from ``repoze.bfg.traversal``) and an "
"implementation of ``urlencode`` (like Python's ``urllib.urlencode``) "
"which can handle Unicode keys and values in parameters to the ``query`` "
"argument."
msgstr ""

#: ../../../BFG_HISTORY.txt:5591
msgid ""
"The ``model_url`` function has been moved from ``repoze.bfg.traversal`` "
"into ``repoze.bfg.url``.  It can still be imported from "
"``repoze.bfg.traversal`` but an import from ``repoze.bfg.traversal`` will"
" emit a DeprecationWarning."
msgstr ""

#: ../../../BFG_HISTORY.txt:5599
msgid ""
"A ``static`` helper class was added to the ``repoze.bfg.views`` module.  "
"Instances of this class are willing to act as BFG views which return "
"static resources using files on disk.  See the ``repoze.bfg.view`` docs "
"for more info."
msgstr ""

#: ../../../BFG_HISTORY.txt:5604
msgid ""
"The ``repoze.bfg.url.model_url`` API (nee' "
"``repoze.bfg.traversal.model_url``) now accepts and honors a keyword "
"argument named ``query``.  The value of this argument will be used to "
"compose a query string, which will be attached to the generated URL "
"before it is returned.  See the API docs (in the docs directory or `on "
"the web <http://static.repoze.org/bfgdocs>`_) for more information."
msgstr ""

#: ../../../BFG_HISTORY.txt:5613
msgid "0.6 (2008-12-26)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5618
msgid ""
"Rather than prepare the \"stock\" implementations of the ZCML directives "
"from the ``zope.configuration`` package for use under ``repoze.bfg``, "
"``repoze.bfg`` now makes available the implementations of directives from"
" the ``repoze.zcml`` package (see http://static.repoze.org/zcmldocs). As "
"a result, the ``repoze.bfg`` package now depends on the ``repoze.zcml`` "
"package, and no longer depends directly on the ``zope.component``, "
"``zope.configuration``, ``zope.interface``, or ``zope.proxy`` packages."
msgstr ""

#: ../../../BFG_HISTORY.txt:5627
msgid ""
"The primary reason for this change is to enable us to eventually reduce "
"the number of inappropriate ``repoze.bfg`` Zope package dependencies, as "
"well as to shed features of dependent package directives that don't make "
"sense for ``repoze.bfg``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5632
msgid ""
"Note that currently the set of requirements necessary to use bfg has not "
"changed.  This is due to inappropriate Zope package requirements in "
"``chameleon.zpt``, which will hopefully be remedied soon. NOTE: in "
"lemonade index a 1.0b8-repozezcml0 package exists which does away with "
"these requirements."
msgstr ""

#: ../../../BFG_HISTORY.txt:5638
msgid ""
"BFG applications written prior to this release which expect the \"stock\""
" ``zope.component`` ZCML directive implementations (e.g. ``adapter``, "
"``subscriber``, or ``utility``) to function now must either 1) include "
"the ``meta.zcml`` file from ``zope.component`` manually (e.g. ``<include "
"package=\"zope.component\" file=\"meta.zcml\">``) and include the "
"``zope.security`` package as an ``install_requires`` dependency or 2) "
"change the ZCML in their applications to use the declarations from "
"`repoze.zcml <http://static.repoze.org/zcmldocs/>`_ instead of the stock "
"declarations.  ``repoze.zcml`` only makes available the ``adapter``, "
"``subscriber`` and ``utility`` directives."
msgstr ""

#: ../../../BFG_HISTORY.txt:5649
msgid ""
"In short, if you've got an existing BFG application, after this update, "
"if your application won't start due to an import error for "
"\"zope.security\", the fastest way to get it working again is to add "
"``zope.security`` to the \"install_requires\" of your BFG application's "
"``setup.py``, then add the following ZCML anywhere in your application's "
"``configure.zcml``::"
msgstr ""

#: ../../../BFG_HISTORY.txt:5658
msgid "Then re-``setup.py develop`` or reinstall your application."
msgstr ""

#: ../../../BFG_HISTORY.txt:5660
msgid ""
"The ``http://namespaces.repoze.org/bfg`` XML namespace is now the default"
" XML namespace in ZCML for paster-generated applications.  The docs have "
"been updated to reflect this."
msgstr ""

#: ../../../BFG_HISTORY.txt:5664
msgid ""
"The copies of BFG's ``meta.zcml`` and ``configure.zcml`` were removed "
"from the root of the ``repoze.bfg`` package.  In 0.3.6, a new package "
"named ``repoze.bfg.includes`` was added, which contains the \"correct\" "
"copies of these ZCML files; the ones that were removed were for backwards"
" compatibility purposes."
msgstr ""

#: ../../../BFG_HISTORY.txt:5670
msgid ""
"The BFG ``view`` ZCML directive no longer calls "
"``zope.component.interface.provideInterface`` for the ``for`` interface. "
"We don't support ``provideInterface`` in BFG because it mutates the "
"global registry."
msgstr ""

#: ../../../BFG_HISTORY.txt:5676
msgid "Other"
msgstr ""

#: ../../../BFG_HISTORY.txt:5678
msgid ""
"The minimum requirement for ``chameleon.core`` is now 1.0b13.  The "
"minimum requirement for ``chameleon.zpt`` is now 1.0b8.  The minimum "
"requirement for ``chameleon.genshi`` is now 1.0b2."
msgstr ""

#: ../../../BFG_HISTORY.txt:5682
msgid ""
"Updated paster template \"ez_setup.py\" to one that requires setuptools "
"0.6c9."
msgstr ""

#: ../../../BFG_HISTORY.txt:5685
msgid ""
"Turn ``view_execution_permitted`` from the ``repoze.bfg.view`` module "
"into a documented API."
msgstr ""

#: ../../../BFG_HISTORY.txt:5688
msgid "Doc cleanups."
msgstr ""

#: ../../../BFG_HISTORY.txt:5690
msgid "Documented how to create a view capable of serving static resources."
msgstr ""

#: ../../../BFG_HISTORY.txt:5693
msgid "0.5.6 (2008-12-18)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5695
msgid ""
"Speed up ``traversal.model_url`` execution by using a custom url quoting "
"function instead of Python's ``urllib.quote``, by caching URL path "
"segment quoting and encoding results, by disusing Python's "
"``urlparse.urljoin`` in favor of a simple string concatenation, and by "
"using ``ob.__class__ is unicode`` rather than ``isinstance(ob, unicode)``"
" in one strategic place."
msgstr ""

#: ../../../BFG_HISTORY.txt:5703
msgid "0.5.5 (2008-12-17)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5708
msgid ""
"In the past, during traversal, the ModelGraphTraverser (the default "
"traverser) always passed each URL path segment to any ``__getitem__`` "
"method of a model object as a byte string (a ``str`` object).  Now, by "
"default the ModelGraphTraverser attempts to decode the path segment to "
"Unicode (a ``unicode`` object) using the UTF-8 encoding before passing it"
" to the ``__getitem__`` method of a model object.  This makes it possible"
" for model objects to be dumber in ``__getitem__`` when trying to resolve"
" a subobject, as model objects themselves no longer need to try to divine"
" whether or not to try to decode the path segment passed by the "
"traverser."
msgstr ""

#: ../../../BFG_HISTORY.txt:5719
msgid ""
"Note that since 0.5.4, URLs generated by repoze.bfg's ``model_url`` API "
"will contain UTF-8 encoded path segments as necessary, so any URL "
"generated by BFG itself will be decodeable by the traverser.  If another "
"application generates URLs to a BFG application, to be resolved "
"successully, it should generate the URL with UTF-8 encoded path segments "
"to be successfully resolved.  The decoder is not at all magical: if a "
"non-UTF-8-decodeable path segment (e.g. one encoded using UTF-16 or some "
"other insanity) is passed in the URL, BFG will raise a ``TypeError`` with"
" a message indicating it could not decode the path segment."
msgstr ""

#: ../../../BFG_HISTORY.txt:5729
msgid ""
"To turn on the older behavior, where path segments were not decoded to "
"Unicode before being passed to model object ``__getitem__`` by the "
"traverser, and were passed as a raw byte string, set the "
"``unicode_path_segments`` configuration setting to a false value in your "
"BFG application's section of the paste .ini file, for example::"
msgstr ""

#: ../../../BFG_HISTORY.txt:5737
msgid ""
"Or start the application using the ``BFG_UNICODE_PATH_SEGMENT`` envvar "
"set to a false value::"
msgstr ""

#: ../../../BFG_HISTORY.txt:5743
msgid "0.5.4 (2008-12-13)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5748
msgid ""
"URL-quote \"extra\" element names passed in as ``**elements`` to the "
"``traversal.model_url`` API.  If any of these names is a Unicode string, "
"encode it to UTF-8 before URL-quoting.  This is a slight backwards "
"incompatibility that will impact you if you were already UTF-8 encoding "
"or URL-quoting the values you passed in as ``elements`` to this API."
msgstr ""

#: ../../../BFG_HISTORY.txt:5757
msgid ""
"UTF-8 encode each segment in the model path used to generate a URL before"
" url-quoting it within the ``traversal.model_url`` API.  This is a "
"bugfix, as Unicode cannot always be successfully URL-quoted."
msgstr ""

#: ../../../BFG_HISTORY.txt:5764
msgid ""
"Make it possible to run unit tests using a buildout-generated Python "
"\"interpreter\"."
msgstr ""

#: ../../../BFG_HISTORY.txt:5767
msgid ""
"Add ``request.root`` to ``router.Router`` in order to have easy access to"
" the application root."
msgstr ""

#: ../../../BFG_HISTORY.txt:5771
msgid "0.5.3 (2008-12-07)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5773
msgid ""
"Remove the ``ITestingTemplateRenderer`` interface.  When "
"``testing.registerDummyRenderer`` is used, it instead registers a dummy "
"implementation using ``ITemplateRenderer`` interface, which is checked "
"for when the built-in templating facilities do rendering.  This change "
"also allows developers to make explcit named utility registrations in the"
" ZCML registry against ``ITemplateRenderer``; these will be found before "
"any on-disk template is looked up."
msgstr ""

#: ../../../BFG_HISTORY.txt:5782
msgid "0.5.2 (2008-12-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5784
msgid ""
"The component registration handler for views (functions or class "
"instances) now observes component adaptation annotations (see "
"``zope.component.adaptedBy``) and uses them before the fallback values "
"for ``for_`` and ``request_type``. This change does not affect existing "
"code insomuch as the code does not rely on these defaults when an "
"annotation is set on the view (unlikely).  This means that for a new-"
"style class you can do ``zope.component.adapts(ISomeContext, "
"ISomeRequest)`` at class scope or at module scope as a decorator to a bfg"
" view function you can do ``@zope.component.adapter(ISomeContext, "
"ISomeRequest)``.  This differs from r.bfg.convention inasmuch as you "
"still need to put something in ZCML for the registrations to get done; "
"it's only the defaults that will change if these declarations exist."
msgstr ""

#: ../../../BFG_HISTORY.txt:5797
msgid ""
"Strip all slashes from end and beginning of path in clean_path within "
"traversal machinery."
msgstr ""

#: ../../../BFG_HISTORY.txt:5801
msgid "0.5.1 (2008-11-25)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5803
msgid "Add ``keys``, ``items``, and ``values`` methods to ``testing.DummyModel``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5806
msgid "Add __delitem__ method to ``testing.DummyModel``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5809
msgid "0.5.0 (2008-11-18)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5811
msgid ""
"Fix ModelGraphTraverser; don't try to change the ``__name__`` or "
"``__parent__`` of an object that claims it implements ILocation during "
"traversal even if the ``__name__`` or ``__parent__`` of the object "
"traversed does not match the name used in the traversal step or the or "
"the traversal parent .  Rationale: it was insane to do so. This bug was "
"only found due to a misconfiguration in an application that mistakenly "
"had intermediate persistent non-ILocation objects; traversal was causing "
"a persistent write on every request under this setup."
msgstr ""

#: ../../../BFG_HISTORY.txt:5820
msgid ""
"``repoze.bfg.location.locate`` now unconditionally sets ``__name__`` and "
"``__parent__`` on objects which provide ILocation (it previously only set"
" them conditionally if they didn't match attributes already present on "
"the object via equality)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5826
msgid "0.4.9 (2008-11-17)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5828
msgid ""
"Add chameleon text template API (chameleon ${name} renderings where the "
"template does not need to be wrapped in any containing XML)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5831
msgid "Change docs to explain install in terms of a virtualenv (unconditionally)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5834
msgid ""
"Make pushpage decorator compatible with repoze.bfg.convention's "
"``bfg_view`` decorator when they're stacked."
msgstr ""

#: ../../../BFG_HISTORY.txt:5837
msgid "Add content_length attribute to testing.DummyRequest."
msgstr ""

#: ../../../BFG_HISTORY.txt:5839
msgid ""
"Change paster template ``tests.py`` to include a true unit test.  Retain "
"old test as an integration test.  Update documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5842
msgid ""
"Document view registrations against classes and ``repoze.bfg.convention``"
" in context."
msgstr ""

#: ../../../BFG_HISTORY.txt:5845
msgid ""
"Change the default paster template to register its single view against a "
"class rather than an interface."
msgstr ""

#: ../../../BFG_HISTORY.txt:5848
msgid ""
"Document adding a request type interface to the request via a subscriber "
"function in the events narrative documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5852
msgid "0.4.8 (2008-11-12)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5857
msgid ""
"``repoze.bfg.traversal.model_url`` now always appends a slash to all "
"generated URLs unless further elements are passed in as the third and "
"following arguments.  Rationale: views often use ``model_url`` without "
"the third-and-following arguments in order to generate a URL for a model "
"in order to point at the default view of a model.  The URL that points to"
" the default view of the *root* model is technically ``http://mysite/`` "
"as opposed to ``http://mysite`` (browsers happen to ask for '/' "
"implicitly in the GET request).  Because URLs are never automatically "
"generated for anything *except* models by ``model_url``, and because the "
"root model is not really special, we continue this pattern.  The impact "
"of this change is minimal (at most you will have too many slashes in your"
" URL, which BFG deals with gracefully anyway)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5871
msgid "0.4.7 (2008-11-11)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5876
msgid ""
"Allow ``testing.registerEventListener`` to be used with Zope 3 style "
"\"object events\" (subscribers accept more than a single event argument)."
" We extend the list with the arguments, rather than append."
msgstr ""

#: ../../../BFG_HISTORY.txt:5881
msgid "0.4.6 (2008-11-10)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5886
msgid ""
"The ``model_path`` and ``model_url`` traversal APIs returned the wrong "
"value for the root object (e.g. ``model_path`` returned ``''`` for the "
"root object, while it should have been returning ``'/'``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5891
msgid "0.4.5 (2008-11-09)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5896
msgid ""
"Added a ``clone`` method and a ``__contains__`` method to the DummyModel "
"testing object."
msgstr ""

#: ../../../BFG_HISTORY.txt:5899
msgid ""
"Allow DummyModel objects to receive extra keyword arguments, which will "
"be attached as attributes."
msgstr ""

#: ../../../BFG_HISTORY.txt:5902
msgid "The DummyTemplateRenderer now returns ``self`` as its implementation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5905
msgid "0.4.4 (2008-11-08)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5910
msgid ""
"Added a ``repoze.bfg.testing`` module to attempt to make it slightly "
"easier to write unittest-based automated tests of BFG applications. "
"Information about this module is in the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:5914
msgid ""
"The default template renderer now supports testing better by looking for "
"``ITestingTemplateRenderer`` using a relative pathname.  This is exposed "
"indirectly through the API named ``registerTemplateRenderer`` in "
"``repoze.bfg.testing``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5922
msgid ""
"The names ``repoze.bfg.interfaces.ITemplate`` , "
"``repoze.bfg.interfaces.ITemplateFactory`` and "
"``repoze.bfg.interfaces.INodeTemplate`` have been deprecated.  These "
"should now be imported as ``repoze.bfg.interfaces.ITemplateRenderer`` and"
" ``repoze.bfg.interfaces.ITemplateRendererFactory``, and "
"``INodeTemplateRenderer`` respectively."
msgstr ""

#: ../../../BFG_HISTORY.txt:5929
msgid ""
"The name ``repoze.bfg.chameleon_zpt.ZPTTemplateFactory`` is deprecated. "
"Use ``repoze.bfg.chameleon_zpt.ZPTTemplateRenderer``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5932
msgid ""
"The name ``repoze.bfg.chameleon_genshi.GenshiTemplateFactory`` is "
"deprecated.  Use ``repoze.bfg.chameleon_genshi.GenshiTemplateRenderer``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5935
msgid ""
"The name ``repoze.bfg.xslt.XSLTemplateFactory`` is deprecated.  Use "
"``repoze.bfg.xslt.XSLTemplateRenderer``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5939
msgid "0.4.3 (2008-11-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5944
msgid ""
"Not passing the result of \"get_options\" as the second argument of "
"make_app could cause attribute errors when attempting to look up settings"
" against the ISettings object (internal).  Fixed by giving the Settings "
"objects defaults for ``debug_authorization`` and ``debug_notfound``."
msgstr ""

#: ../../../BFG_HISTORY.txt:5949
msgid ""
"Return an instance of ``Allowed`` (rather than ``True``) from "
"``has_permission`` when no security policy is in use."
msgstr ""

#: ../../../BFG_HISTORY.txt:5952
msgid ""
"Fix bug where default deny in authorization check would throw a TypeError"
" (use ``ACLDenied`` instead of ``Denied``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:5956
msgid "0.4.2 (2008-11-02)"
msgstr ""

#: ../../../BFG_HISTORY.txt:5961
msgid ""
"Expose a single ILogger named \"repoze.bfg.debug\" as a utility; this "
"logger is registered unconditionally and is used by the authorization "
"debug machinery.  Applications may also make use of it as necessary "
"rather than inventing their own logger, for convenience."
msgstr ""

#: ../../../BFG_HISTORY.txt:5966
msgid ""
"The ``BFG_DEBUG_AUTHORIZATION`` envvar and the ``debug_authorization`` "
"config file value now only imply debugging of view-invoked security "
"checks.  Previously, information was printed for every call to "
"``has_permission`` as well, which made output confusing.  To debug "
"``has_permission`` checks and other manual permission checks, use the "
"debugger and print statements in your own code."
msgstr ""

#: ../../../BFG_HISTORY.txt:5973
msgid ""
"Authorization debugging info is now only present in the HTTP response "
"body oif ``debug_authorization`` is true."
msgstr ""

#: ../../../BFG_HISTORY.txt:5976
msgid "The format of authorization debug messages was improved."
msgstr ""

#: ../../../BFG_HISTORY.txt:5978
msgid ""
"A new ``BFG_DEBUG_NOTFOUND`` envvar was added and a symmetric "
"``debug_notfound`` config file value was added.  When either is true, and"
" a NotFound response is returned by the BFG router (because a view could "
"not be found), debugging information is printed to stderr.  When this "
"value is set true, the body of HTTPNotFound responses will also contain "
"the same debugging information."
msgstr ""

#: ../../../BFG_HISTORY.txt:5985
msgid ""
"``Allowed`` and ``Denied`` responses from the security machinery are now "
"specialized into two types: ACL types, and non-ACL types.  The ACL-"
"related responses are instances of ``repoze.bfg.security.ACLAllowed`` and"
" ``repoze.bfg.security.ACLDenied``.  The non-ACL-related responses are "
"``repoze.bfg.security.Allowed`` and ``repoze.bfg.security.Denied``.  The "
"allowed-type responses continue to evaluate equal to things that "
"themselves evaluate equal to the ``True`` boolean, while the denied-type "
"responses continue to evaluate equal to things that themselves evaluate "
"equal to the ``False`` boolean.  The only difference between the two "
"types is the information attached to them for debugging purposes."
msgstr ""

#: ../../../BFG_HISTORY.txt:5996
msgid ""
"Added a new ``BFG_DEBUG_ALL`` envvar and a symmetric ``debug_all`` config"
" file value.  When either is true, all other debug-related flags are set "
"true unconditionally (e.g. ``debug_notfound`` and "
"``debug_authorization``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6004
msgid "Added info about debug flag changes."
msgstr ""

#: ../../../BFG_HISTORY.txt:6006
msgid ""
"Added a section to the security chapter named \"Debugging Imperative "
"Authorization Failures\" (for e.g. ``has_permssion``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6012
msgid ""
"Change default paster template generator to use ``Paste#http`` server "
"rather than ``PasteScript#cherrpy`` server.  The cherrypy server has a "
"security risk in it when ``REMOTE_USER`` is trusted by the downstream "
"application."
msgstr ""

#: ../../../BFG_HISTORY.txt:6018
msgid "0.4.1 (2008-10-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6023
msgid ""
"If the ``render_view_to_response`` function was called, if the view was "
"found and called, but it returned something that did not implement "
"IResponse, the error would pass by unflagged.  This was noticed when I "
"created a view function that essentially returned None, but received a "
"NotFound error rather than a ValueError when the view was rendered.  This"
" was fixed."
msgstr ""

#: ../../../BFG_HISTORY.txt:6031
msgid "0.4.0 (2008-10-03)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6036
msgid ""
"An \"Environment and Configuration\" chapter was added to the narrative "
"portion of the documentation."
msgstr ""

#: ../../../BFG_HISTORY.txt:6042
msgid "Ensure bfg doesn't generate warnings when running under Python 2.6."
msgstr ""

#: ../../../BFG_HISTORY.txt:6045
msgid ""
"The environment variable ``BFG_RELOAD_TEMPLATES`` is now available "
"(serves the same purpose as ``reload_templates`` in the config file)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6048
msgid ""
"A new configuration file option ``debug_authorization`` was added. This "
"turns on printing of security authorization debug statements to "
"``sys.stderr``.  The ``BFG_DEBUG_AUTHORIZATION`` environment variable was"
" also added; this performs the same duty."
msgstr ""

#: ../../../BFG_HISTORY.txt:6056
msgid ""
"The environment variable ``BFG_SECURITY_DEBUG`` did not always work. It "
"has been renamed to ``BFG_DEBUG_AUTHORIZATION`` and fixed."
msgstr ""

#: ../../../BFG_HISTORY.txt:6062
msgid ""
"A deprecation warning is now issued when old API names from the "
"``repoze.bfg.templates`` module are imported."
msgstr ""

#: ../../../BFG_HISTORY.txt:6066 ../../../BFG_HISTORY.txt:6080
#: ../../../BFG_HISTORY.txt:6205
msgid "Backwards incompatibilities"
msgstr ""

#: ../../../BFG_HISTORY.txt:6068
msgid ""
"The ``BFG_SECURITY_DEBUG`` environment variable was renamed to "
"``BFG_DEBUG_AUTHORIZATION``."
msgstr ""

#: ../../../BFG_HISTORY.txt:6072
msgid "0.3.9 (2008-08-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6077
msgid "A ``repoze.bfg.location`` API module was added."
msgstr ""

#: ../../../BFG_HISTORY.txt:6082
msgid ""
"Applications must now use the ``repoze.bfg.interfaces.ILocation`` "
"interface rather than ``zope.location.interfaces.ILocation`` to represent"
" that a model object is \"location-aware\".  We've removed a dependency "
"on ``zope.location`` for cleanliness purposes: as new versions of zope "
"libraries are released which have improved dependency information, "
"getting rid of our dependence on ``zope.location`` will prevent a newly "
"installed repoze.bfg application from requiring the ``zope.security``, "
"egg, which not truly used at all in a \"stock\" repoze.bfg setup.  These "
"dependencies are still required by the stack at this time; this is purely"
" a futureproofing move."
msgstr ""

#: ../../../BFG_HISTORY.txt:6094
msgid ""
"The security and model documentation for previous versions of "
"``repoze.bfg`` recommended using the "
"``zope.location.interfaces.ILocation`` interface to represent that a "
"model object is \"location-aware\".  This documentation has been changed "
"to reflect that this interface should now be imported from "
"``repoze.bfg.interfaces.ILocation`` instead."
msgstr ""

#: ../../../BFG_HISTORY.txt:6102
msgid "0.3.8 (2008-08-26)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6107
msgid "Documented URL dispatch better in narrative form."
msgstr ""

#: ../../../BFG_HISTORY.txt:6112
msgid ""
"Routes URL dispatch did not have access to the WSGI environment, so "
"conditions such as method=GET did not work."
msgstr ""

#: ../../../BFG_HISTORY.txt:6118
msgid "Add ``principals_allowed_by_permission`` API to security module."
msgstr ""

#: ../../../BFG_HISTORY.txt:6120
msgid ""
"Replace ``z3c.pt`` support with support for ``chameleon.zpt``. Chameleon "
"is the new name for the package that used to be named ``z3c.pt``.  NOTE: "
"If you update a ``repoze.bfg`` SVN checkout that you're using for "
"development, you will need to run \"setup.py install\" or \"setup.py "
"develop\" again in order to obtain the proper Chameleon packages.  "
"``z3c.pt`` is no longer supported by ``repoze.bfg``.  All API functions "
"that used to render ``z3c.pt`` templates will work fine with the new "
"packages, and your templates should render almost identically."
msgstr ""

#: ../../../BFG_HISTORY.txt:6130
msgid ""
"Add a ``repoze.bfg.chameleon_zpt`` module.  This module provides "
"Chameleon ZPT support."
msgstr ""

#: ../../../BFG_HISTORY.txt:6133
msgid "Add a ``repoze.bfg.xslt`` module.  This module provides XSLT support."
msgstr ""

#: ../../../BFG_HISTORY.txt:6136
msgid ""
"Add a ``repoze.bfg.chameleon_genshi`` module.  This provides direct "
"Genshi support, which did not exist previously."
msgstr ""

#: ../../../BFG_HISTORY.txt:6142
msgid ""
"Importing API functions directly from ``repoze.bfg.template`` is now "
"deprecated.  The ``get_template``, ``render_template``, "
"``render_template_to_response`` functions should now be imported from "
"``repoze.chameleon_zpt``.  The ``render_transform``, and "
"``render_transform_to_response`` functions should now be imported from "
"``repoze.bfg.xslt``.  The ``repoze.bfg.template`` module will remain "
"around \"forever\" to support backwards compatibility."
msgstr ""

#: ../../../BFG_HISTORY.txt:6151
msgid "0.3.7 (2008-09-09)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6156
msgid "Add compatibility with z3c.pt 1.0a7+ (z3c.pt became a namespace package)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6161
msgid "``repoze.bfg.traversal.find_model`` function did not function properly."
msgstr ""

#: ../../../BFG_HISTORY.txt:6164
msgid "0.3.6 (2008-09-04)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6169
msgid "Add startup process docs."
msgstr ""

#: ../../../BFG_HISTORY.txt:6171
msgid ""
"Allow configuration cache to be bypassed by actions which include special"
" \"uncacheable\" discriminators (for actions that have variable results)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6177
msgid ""
"Move core repoze.bfg ZCML into a ``repoze.bfg.includes`` package so we "
"can use repoze.bfg better as a namespace package.  Adjust the code "
"generator to use it.  We've left around the ``configure.zcml`` in the "
"repoze.bfg package directly so as not to break older apps."
msgstr ""

#: ../../../BFG_HISTORY.txt:6182
msgid ""
"When a zcml application registry cache was unpickled, and it contained a "
"reference to an object that no longer existed (such as a view), bfg would"
" not start properly."
msgstr ""

#: ../../../BFG_HISTORY.txt:6187
msgid "0.3.5 (2008-09-01)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6192
msgid ""
"Event notification is issued after application is created and configured "
"(``IWSGIApplicationCreatedEvent``)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6195
msgid ""
"New API module: ``repoze.bfg.view``.  This module contains the functions "
"named ``render_view_to_response``, ``render_view_to_iterable``, "
"``render_view`` and ``is_response``, which are documented in the API "
"docs.  These features aid programmatic (non-server-driven) view "
"execution."
msgstr ""

#: ../../../BFG_HISTORY.txt:6202
msgid "0.3.4 (2008-08-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6207
msgid ""
"Make ``repoze.bfg`` a namespace package so we can allow folks to create "
"subpackages (e.g. ``repoze.bfg.otherthing``) within separate eggs.  This "
"is a backwards incompatible change which makes it impossible to import "
"\"make_app\" and \"get_options\" from the ``repoze.bfg`` module directly."
" This change will break all existing apps generated by the paster code "
"generator.  Instead, you need to import these functions as "
"``repoze.bfg.router:make_app`` and ``repoze.bfg.registry:get_options``, "
"respectively.  Sorry folks, it has to be done now or never, and "
"definitely better now."
msgstr ""

#: ../../../BFG_HISTORY.txt:6220
msgid "Add ``model_path`` API function to traversal module."
msgstr ""

#: ../../../BFG_HISTORY.txt:6224
msgid "Normalize path returned by repoze.bfg.caller_path."
msgstr ""

#: ../../../BFG_HISTORY.txt:6227
msgid "0.3.3 (2008-08-23)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6229
msgid "Fix generated test.py module to use project name rather than package name."
msgstr ""

#: ../../../BFG_HISTORY.txt:6233
msgid "0.3.2 (2008-08-23)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6235
msgid "Remove ``sampleapp`` sample application from bfg package itself."
msgstr ""

#: ../../../BFG_HISTORY.txt:6237
msgid "Remove dependency on FormEncode (only needed by sampleapp)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6239
msgid ""
"Fix paster template generation so that case-sensitivity is preserved for "
"project vs. package name."
msgstr ""

#: ../../../BFG_HISTORY.txt:6242
msgid ""
"Depend on ``z3c.pt`` version 1.0a1 (which requires the ``[lxml]`` extra "
"currently)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6245
msgid ""
"Read and write a pickled ZCML actions list, stored as "
"``configure.zcml.cache`` next to the applications's \"normal\" "
"configuration file.  A given bfg app will usually start faster if it's "
"able to read the pickle data.  It fails gracefully to reading the real "
"ZCML file if it cannot read the pickle."
msgstr ""

#: ../../../BFG_HISTORY.txt:6252
msgid "0.3.1 (2008-08-20)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6254
msgid ""
"Generated application differences: ``make_app`` entry point renamed to "
"``app`` in order to have a different name than the bfg function of the "
"same name, to prevent confusion."
msgstr ""

#: ../../../BFG_HISTORY.txt:6258
msgid ""
"Add \"options\" processing to bfg's ``make_app`` to support runtime "
"options.  A new API function named ``get_options`` was added to the "
"registry module.  This function is typically used in an application's "
"``app`` entry point.  The Paste config file section for the app can now "
"supply the ``reload_templates`` option, which, if true, will prevent the "
"need to restart the appserver in order for ``z3c.pt`` or XSLT template "
"changes to be detected."
msgstr ""

#: ../../../BFG_HISTORY.txt:6266
msgid ""
"Use only the module name in generated project's \"test_suite\" (run all "
"tests found in the package)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6269
msgid ""
"Default port for generated apps changed from 5432 to 6543 (Postgres "
"default port is 6543)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6273
msgid "0.3.0 (2008-08-16)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6275
msgid "Add ``get_template`` API to template module."
msgstr ""

#: ../../../BFG_HISTORY.txt:6278
msgid "0.2.9 (2008-08-11)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6280
msgid ""
"0.2.8 was \"brown bag\" release.  It didn't work at all.  Symptom: "
"ComponentLookupError when trying to render a page."
msgstr ""

#: ../../../BFG_HISTORY.txt:6284
msgid "0.2.8 (2008-08-11)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6286
msgid ""
"Add ``find_model`` and ``find_root`` traversal APIs.  In the process, "
"make ITraverser a uni-adapter (on context) rather than a multiadapter (on"
" context and request)."
msgstr ""

#: ../../../BFG_HISTORY.txt:6291
msgid "0.2.7 (2008-08-05)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6293
msgid ""
"Add a ``request_type`` attribute to the available attributes of a "
"``bfg:view`` configure.zcml element.  This attribute will have a value "
"which is a dotted Python path, pointing at an interface.  If the request "
"object implements this interface when the view lookup is performed, the "
"appropriate view will be called.  This is meant to allow for simple "
"\"skinning\" of sites based on request type.  An event subscriber should "
"attach the interface to the request on ingress to support skins."
msgstr ""

#: ../../../BFG_HISTORY.txt:6301
msgid ""
"Remove \"template only\" views.  These were just confusing and were never"
" documented."
msgstr ""

#: ../../../BFG_HISTORY.txt:6304
msgid ""
"Small url dispatch overhaul: the ``connect`` method of the "
"``urldispatch.RoutesMapper`` object now accepts a keyword parameter named"
" ``context_factory``.  If this parameter is supplied, it must be a "
"callable which returns an instance.  This instance is used as the context"
" for the request when a route is matched."
msgstr ""

#: ../../../BFG_HISTORY.txt:6310
msgid ""
"The registration of a RoutesModelTraverser no longer needs to be "
"performed by the application; it's in the bfg ZCML now."
msgstr ""

#: ../../../BFG_HISTORY.txt:6314
msgid "0.2.6 (2008-07-31)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6316
msgid ""
"Add event sends for INewRequest and INewResponse.  See the events.rst "
"chapter in the documentation's ``api`` directory."
msgstr ""

#: ../../../BFG_HISTORY.txt:6320
msgid "0.2.5 (2008-07-28)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6322
msgid "Add ``model_url`` API."
msgstr ""

#: ../../../BFG_HISTORY.txt:6325
msgid "0.2.4 (2008-07-27)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6327
msgid "Added url-based dispatch."
msgstr ""

#: ../../../BFG_HISTORY.txt:6330
msgid "0.2.3 (2008-07-20)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6332
msgid "Add API functions for authenticated_userid and effective_principals."
msgstr ""

#: ../../../BFG_HISTORY.txt:6335
msgid "0.2.2 (2008-07-20)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6337
msgid "Add authenticated_userid and effective_principals API to security policy."
msgstr ""

#: ../../../BFG_HISTORY.txt:6341
msgid "0.2.1 (2008-07-20)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6343
msgid "Add find_interface API."
msgstr ""

#: ../../../BFG_HISTORY.txt:6346
msgid "0.2 (2008-07-19)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6348
msgid "Add wsgiapp decorator."
msgstr ""

#: ../../../BFG_HISTORY.txt:6350
msgid ""
"The concept of \"view factories\" was removed in favor of always calling "
"a view, which is a callable that returns a response directly (as opposed "
"to returning a view).  As a result, the ``factory`` attribute in the "
"bfg:view ZCML statement has been renamed to ``view``.  Various interface "
"names were changed also."
msgstr ""

#: ../../../BFG_HISTORY.txt:6356
msgid ""
"``render_template`` and ``render_transform`` no longer return a Response "
"object.  Instead, these return strings.  The old behavior can be obtained"
" by using ``render_template_to_response`` and "
"``render_transform_to_response``."
msgstr ""

#: ../../../BFG_HISTORY.txt:6361
msgid ""
"Added 'repoze.bfg.push:pushpage' decorator, which creates BFG views from "
"callables which take (context, request) and return a mapping of top-level"
" names."
msgstr ""

#: ../../../BFG_HISTORY.txt:6365
msgid "Added ACL-based security."
msgstr ""

#: ../../../BFG_HISTORY.txt:6367
msgid "Support for XSLT templates via a render_transform method"
msgstr ""

#: ../../../BFG_HISTORY.txt:6370
msgid "0.1 (2008-07-08)"
msgstr ""

#: ../../../BFG_HISTORY.txt:6372
msgid "Initial release."
msgstr ""
