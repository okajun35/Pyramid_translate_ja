# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/traversal.rst:4
msgid ":mod:`pyramid.traversal`"
msgstr ""

#: of pyramid.traversal.find_interface:1
msgid ""
"Return the first resource found in the :term:`lineage` of ``resource`` "
"which, a) if ``class_or_interface`` is a Python class object, is an "
"instance of the class or any subclass of that class or b) if "
"``class_or_interface`` is a :term:`interface`, provides the specified "
"interface.  Return ``None`` if no resource providing "
"``interface_or_class`` can be found in the lineage.  The ``resource`` "
"passed in *must* be :term:`location`-aware."
msgstr ""

#: of pyramid.traversal.find_resource:1
msgid ""
"Given a resource object and a string or tuple representing a path (such "
"as the return value of :func:`pyramid.traversal.resource_path` or "
":func:`pyramid.traversal.resource_path_tuple`), return a resource in this"
" application's resource tree at the specified path.  The resource passed "
"in *must* be :term:`location`-aware.  If the path cannot be resolved (if "
"the respective node in the resource tree does not exist), a "
":exc:`KeyError` will be raised."
msgstr ""

#: of pyramid.traversal.find_resource:9
msgid ""
"This function is the logical inverse of "
":func:`pyramid.traversal.resource_path` and "
":func:`pyramid.traversal.resource_path_tuple`; it can resolve any path "
"string or tuple generated by either of those functions."
msgstr ""

#: of pyramid.traversal.find_resource:14
msgid ""
"Rules for passing a *string* as the ``path`` argument: if the first "
"character in the path string is the ``/`` character, the path is "
"considered absolute and the resource tree traversal will start at the "
"root resource.  If the first character of the path string is *not* the "
"``/`` character, the path is considered relative and resource tree "
"traversal will begin at the resource object supplied to the function as "
"the ``resource`` argument.  If an empty string is passed as ``path``, the"
" ``resource`` passed in will be returned.  Resource path strings must be "
"escaped in the following manner: each Unicode path segment must be "
"encoded as UTF-8 and as each path segment must escaped via Python's "
":mod:`urllib.quote`. For example, ``/path/to%20the/La%20Pe%C3%B1a`` "
"(absolute) or ``to%20the/La%20Pe%C3%B1a`` (relative).  The "
":func:`pyramid.traversal.resource_path` function generates strings which "
"follow these rules (albeit only absolute ones)."
msgstr ""

#: of pyramid.traversal.find_resource:30
msgid ""
"Rules for passing *text* (Unicode) as the ``path`` argument are the same "
"as those for a string.  In particular, the text may not have any nonascii"
" characters in it."
msgstr ""

#: of pyramid.traversal.find_resource:34
msgid ""
"Rules for passing a *tuple* as the ``path`` argument: if the first "
"element in the path tuple is the empty string (for example ``('', 'a', "
"'b', 'c')``, the path is considered absolute and the resource tree "
"traversal will start at the resource tree root object.  If the first "
"element in the path tuple is not the empty string (for example ``('a', "
"'b', 'c')``), the path is considered relative and resource tree traversal"
" will begin at the resource object supplied to the function as the "
"``resource`` argument.  If an empty sequence is passed as ``path``, the "
"``resource`` passed in itself will be returned.  No URL-quoting or "
"UTF-8-encoding of individual path segments within the tuple is required "
"(each segment may be any string or unicode object representing a resource"
" name).  Resource path tuples generated by "
":func:`pyramid.traversal.resource_path_tuple` can always be resolved by "
"``find_resource``."
msgstr ""

#: of pyramid.traversal.find_root:1
msgid ""
"Find the root node in the resource tree to which ``resource`` belongs. "
"Note that ``resource`` should be :term:`location`-aware. Note that the "
"root resource is available in the request object by accessing the "
"``request.root`` attribute."
msgstr ""

#: of pyramid.traversal.resource_path:1
msgid ""
"Return a string object representing the absolute physical path of the "
"resource object based on its position in the resource tree, e.g "
"``/foo/bar``.  Any positional arguments passed in as ``elements`` will be"
" appended as path segments to the end of the resource path.  For "
"instance, if the resource's path is ``/foo/bar`` and ``elements`` equals "
"``('a', 'b')``, the returned string will be ``/foo/bar/a/b``.  The first "
"character in the string will always be the ``/`` character (a leading "
"``/`` character in a path string represents that the path is absolute)."
msgstr ""

#: of pyramid.traversal.resource_path:10
msgid ""
"Resource path strings returned will be escaped in the following manner: "
"each unicode path segment will be encoded as UTF-8 and each path segment "
"will be escaped via Python's :mod:`urllib.quote`. For example, "
"``/path/to%20the/La%20Pe%C3%B1a``."
msgstr ""

#: of pyramid.traversal.resource_path:15
msgid ""
"This function is a logical inverse of "
":mod:`pyramid.traversal.find_resource`: it can be used to generate path "
"references that can later be resolved via that function."
msgstr ""

#: of pyramid.traversal.resource_path:19
#: pyramid.traversal.resource_path_tuple:16
msgid "The ``resource`` passed in *must* be :term:`location`-aware."
msgstr ""

#: of pyramid.traversal.resource_path:23
msgid ""
"Each segment in the path string returned will use the ``__name__`` "
"attribute of the resource it represents within the resource tree.  Each "
"of these segments *should* be a unicode or string object (as per the "
"contract of :term:`location`-awareness).  However, no conversion or "
"safety checking of resource names is performed.  For instance, if one of "
"the resources in your tree has a ``__name__`` which (by error) is a "
"dictionary, the :func:`pyramid.traversal.resource_path` function will "
"attempt to append it to a string and it will cause a "
":exc:`pyramid.exceptions.URLDecodeError`."
msgstr ""

#: of pyramid.traversal.resource_path:35
msgid ""
"The :term:`root` resource *must* have a ``__name__`` attribute with a "
"value of either ``None`` or the empty string for paths to be generated "
"properly.  If the root resource has a non-null ``__name__`` attribute, "
"its name will be prepended to the generated path rather than a single "
"leading '/' character."
msgstr ""

#: of pyramid.traversal.resource_path_tuple:1
msgid ""
"Return a tuple representing the absolute physical path of the "
"``resource`` object based on its position in a resource tree, e.g ``('', "
"'foo', 'bar')``.  Any positional arguments passed in as ``elements`` will"
" be appended as elements in the tuple representing the resource path.  "
"For instance, if the resource's path is ``('', 'foo', 'bar')`` and "
"elements equals ``('a', 'b')``, the returned tuple will be ``('', 'foo', "
"'bar', 'a', 'b')``.  The first element of this tuple will always be the "
"empty string (a leading empty string element in a path tuple represents "
"that the path is absolute)."
msgstr ""

#: of pyramid.traversal.resource_path_tuple:12
msgid ""
"This function is a logical inverse of "
":func:`pyramid.traversal.find_resource`: it can be used to generate path "
"references that can later be resolved by that function."
msgstr ""

#: of pyramid.traversal.resource_path_tuple:20
msgid ""
"Each segment in the path tuple returned will equal the ``__name__`` "
"attribute of the resource it represents within the resource tree.  Each "
"of these segments *should* be a unicode or string object (as per the "
"contract of :term:`location`-awareness).  However, no conversion or "
"safety checking of resource names is performed.  For instance, if one of "
"the resources in your tree has a ``__name__`` which (by error) is a "
"dictionary, that dictionary will be placed in the path tuple; no warning "
"or error will be given."
msgstr ""

#: of pyramid.traversal.resource_path_tuple:31
msgid ""
"The :term:`root` resource *must* have a ``__name__`` attribute with a "
"value of either ``None`` or the empty string for path tuples to be "
"generated properly.  If the root resource has a non-null ``__name__`` "
"attribute, its name will be the first element in the generated path tuple"
" rather than the empty string."
msgstr ""

#: of pyramid.traversal.virtual_root:1
msgid ""
"Provided any :term:`resource` and a :term:`request` object, return the "
"resource object representing the :term:`virtual root` of the current "
":term:`request`.  Using a virtual root in a :term:`traversal` -based "
":app:`Pyramid` application permits rooting. For example, the resource at "
"the traversal path ``/cms`` will be found at ``http://example.com/`` "
"instead of rooting it at ``http://example.com/cms/``."
msgstr ""

#: of pyramid.traversal.virtual_root:9
msgid ""
"If the ``resource`` passed in is a context obtained via "
":term:`traversal`, and if the ``HTTP_X_VHM_ROOT`` key is in the WSGI "
"environment, the value of this key will be treated as a 'virtual root "
"path': the :func:`pyramid.traversal.find_resource` API will be used to "
"find the virtual root resource using this path; if the resource is found,"
" it will be returned.  If the ``HTTP_X_VHM_ROOT`` key is not present in "
"the WSGI environment, the physical :term:`root` of the resource tree will"
" be returned instead."
msgstr ""

#: of pyramid.traversal.virtual_root:18
msgid ""
"Virtual roots are not useful at all in applications that use :term:`URL "
"dispatch`. Contexts obtained via URL dispatch don't really support being "
"virtually rooted (each URL dispatch context is both its own physical and "
"virtual root).  However if this API is called with a ``resource`` "
"argument which is a context obtained via URL dispatch, the resource "
"passed in will be returned unconditionally."
msgstr ""

#: of pyramid.traversal.traverse:1
msgid ""
"Given a resource object as ``resource`` and a string or tuple "
"representing a path as ``path`` (such as the return value of "
":func:`pyramid.traversal.resource_path` or "
":func:`pyramid.traversal.resource_path_tuple` or the value of "
"``request.environ['PATH_INFO']``), return a dictionary with the keys "
"``context``, ``root``, ``view_name``, ``subpath``, ``traversed``, "
"``virtual_root``, and ``virtual_root_path``."
msgstr ""

#: of pyramid.traversal.traverse:9
msgid "A definition of each value in the returned dictionary:"
msgstr ""

#: of pyramid.traversal.traverse:11
msgid ""
"``context``: The :term:`context` (a :term:`resource` object) found via "
"traversal or url dispatch.  If the ``path`` passed in is the empty "
"string, the value of the ``resource`` argument passed to this function is"
" returned."
msgstr ""

#: of pyramid.traversal.traverse:16
msgid ""
"``root``: The resource object at which :term:`traversal` begins. If the "
"``resource`` passed in was found via url dispatch or if the ``path`` "
"passed in was relative (non-absolute), the value of the ``resource`` "
"argument passed to this function is returned."
msgstr ""

#: of pyramid.traversal.traverse:21
msgid ""
"``view_name``: The :term:`view name` found during :term:`traversal` or "
":term:`url dispatch`; if the ``resource`` was found via traversal, this "
"is usually a representation of the path segment which directly follows "
"the path to the ``context`` in the ``path``.  The ``view_name`` will be a"
" Unicode object or the empty string.  The ``view_name`` will be the empty"
" string if there is no element which follows the ``context`` path.  An "
"example: if the path passed is ``/foo/bar``, and a resource object is "
"found at ``/foo`` (but not at ``/foo/bar``), the 'view name' will be "
"``u'bar'``.  If the ``resource`` was found via urldispatch, the view_name"
" will be the name the route found was registered with."
msgstr ""

#: of pyramid.traversal.traverse:34
msgid ""
"``subpath``: For a ``resource`` found via :term:`traversal`, this is a "
"sequence of path segments found in the ``path`` that follow the "
"``view_name`` (if any).  Each of these items is a Unicode object.  If no "
"path segments follow the ``view_name``, the subpath will be the empty "
"sequence.  An example: if the path passed is ``/foo/bar/baz/buz``, and a "
"resource object is found at ``/foo`` (but not ``/foo/bar``), the 'view "
"name' will be ``u'bar'`` and the :term:`subpath` will be ``[u'baz', "
"u'buz']``. For a ``resource`` found via url dispatch, the subpath will be"
" a sequence of values discerned from ``*subpath`` in the route pattern "
"matched or the empty sequence."
msgstr ""

#: of pyramid.traversal.traverse:46
msgid ""
"``traversed``: The sequence of path elements traversed from the root to "
"find the ``context`` object during :term:`traversal`. Each of these items"
" is a Unicode object.  If no path segments were traversed to find the "
"``context`` object (e.g. if the ``path`` provided is the empty string), "
"the ``traversed`` value will be the empty sequence.  If the ``resource`` "
"is a resource found via :term:`url dispatch`, traversed will be None."
msgstr ""

#: of pyramid.traversal.traverse:54
msgid ""
"``virtual_root``: A resource object representing the 'virtual' root of "
"the resource tree being traversed during :term:`traversal`. See "
":ref:`vhosting_chapter` for a definition of the virtual root object.  If "
"no virtual hosting is in effect, and the ``path`` passed in was absolute,"
" the ``virtual_root`` will be the *physical* root resource object (the "
"object at which :term:`traversal` begins).  If the ``resource`` passed in"
" was found via :term:`URL dispatch` or if the ``path`` passed in was "
"relative, the ``virtual_root`` will always equal the ``root`` object (the"
" resource passed in)."
msgstr ""

#: of pyramid.traversal.traverse:65
msgid ""
"``virtual_root_path`` -- If :term:`traversal` was used to find the "
"``resource``, this will be the sequence of path elements traversed to "
"find the ``virtual_root`` resource.  Each of these items is a Unicode "
"object.  If no path segments were traversed to find the ``virtual_root`` "
"resource (e.g. if virtual hosting is not in effect), the ``traversed`` "
"value will be the empty list. If url dispatch was used to find the "
"``resource``, this will be ``None``."
msgstr ""

#: of pyramid.traversal.traverse:74
msgid "If the path cannot be resolved, a :exc:`KeyError` will be raised."
msgstr ""

#: of pyramid.traversal.traverse:76
msgid ""
"Rules for passing a *string* as the ``path`` argument: if the first "
"character in the path string is the with the ``/`` character, the path "
"will considered absolute and the resource tree traversal will start at "
"the root resource.  If the first character of the path string is *not* "
"the ``/`` character, the path is considered relative and resource tree "
"traversal will begin at the resource object supplied to the function as "
"the ``resource`` argument.  If an empty string is passed as ``path``, the"
" ``resource`` passed in will be returned.  Resource path strings must be "
"escaped in the following manner: each Unicode path segment must be "
"encoded as UTF-8 and each path segment must escaped via Python's "
":mod:`urllib.quote`. For example, ``/path/to%20the/La%20Pe%C3%B1a`` "
"(absolute) or ``to%20the/La%20Pe%C3%B1a`` (relative).  The "
":func:`pyramid.traversal.resource_path` function generates strings which "
"follow these rules (albeit only absolute ones)."
msgstr ""

#: of pyramid.traversal.traverse:92
msgid ""
"Rules for passing a *tuple* as the ``path`` argument: if the first "
"element in the path tuple is the empty string (for example ``('', 'a', "
"'b', 'c')``, the path is considered absolute and the resource tree "
"traversal will start at the resource tree root object.  If the first "
"element in the path tuple is not the empty string (for example ``('a', "
"'b', 'c')``), the path is considered relative and resource tree traversal"
" will begin at the resource object supplied to the function as the "
"``resource`` argument.  If an empty sequence is passed as ``path``, the "
"``resource`` passed in itself will be returned.  No URL-quoting or "
"UTF-8-encoding of individual path segments within the tuple is required "
"(each segment may be any string or unicode object representing a resource"
" name)."
msgstr ""

#: of pyramid.traversal.traverse:105
msgid ""
"Explanation of the conversion of ``path`` segment values to Unicode "
"during traversal: Each segment is URL-unquoted, and decoded into Unicode."
" Each segment is assumed to be encoded using the UTF-8 encoding (or a "
"subset, such as ASCII); a :exc:`pyramid.exceptions.URLDecodeError` is "
"raised if a segment cannot be decoded.  If a segment name is empty or if "
"it is ``.``, it is ignored.  If a segment name is ``..``, the previous "
"segment is deleted, and the ``..`` is ignored.  As a result of this "
"process, the return values ``view_name``, each element in the "
"``subpath``, each element in ``traversed``, and each element in the "
"``virtual_root_path`` will be Unicode as opposed to a string, and will be"
" URL-decoded."
msgstr ""

#: of pyramid.traversal.traversal_path:1
msgid ""
"Variant of :func:`pyramid.traversal.traversal_path_info` suitable for "
"decoding paths that are URL-encoded."
msgstr ""

#: of pyramid.traversal.traversal_path:4
msgid ""
"If this function is passed a Unicode object instead of a sequence of "
"bytes as ``path``, that Unicode object *must* directly encodeable to "
"ASCII.  For example, u'/foo' will work but u'/<unprintable unicode>' (a "
"Unicode object with characters that cannot be encoded to ascii) will not."
" A :exc:`UnicodeEncodeError` will be raised if the Unicode cannot be "
"encoded directly to ASCII."
msgstr ""

