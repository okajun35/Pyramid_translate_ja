# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/compat.rst:4
msgid ":mod:`pyramid.compat`"
msgstr ""

#: ../../api/compat.rst:6
msgid ""
"The ``pyramid.compat`` module provides platform and version compatibility"
" for Pyramid and its add-ons across Python platform and version "
"differences.  APIs will be removed from this module over time as Pyramid "
"ceases to support systems which require compatibility imports."
msgstr ""

#: of pyramid.compat.ascii_native_:1
msgid ""
"Python 3: If ``s`` is an instance of ``text_type``, return "
"``s.encode('ascii')``, otherwise return ``str(s, 'ascii', 'strict')``"
msgstr ""

#: of pyramid.compat.ascii_native_:4
msgid ""
"Python 2: If ``s`` is an instance of ``text_type``, return "
"``s.encode('ascii')``, otherwise return ``str(s)``"
msgstr ""

#: ../../api/compat.rst:17
msgid ""
"Binary type for this platform.  For Python 3, it's ``bytes``.  For Python"
" 2, it's ``str``."
msgstr ""

#: of pyramid.compat.bytes_:1
msgid ""
"If ``s`` is an instance of ``text_type``, return ``s.encode(encoding, "
"errors)``, otherwise return ``s``"
msgstr ""

#: ../../api/compat.rst:24
msgid ""
"Sequence of class types for this platform.  For Python 3, it's "
"``(type,)``.  For Python 2, it's ``(type, types.ClassType)``."
msgstr ""

#: ../../api/compat.rst:29
msgid ""
"On Python 2, the ``ConfigParser`` module, on Python 3, the "
"``configparser`` module."
msgstr ""

#: ../../api/compat.rst:34
msgid ""
"On Python 2, the ``cgi.escape`` function, on Python 3, the "
"``html.escape`` function."
msgstr ""

#: ../../api/compat.rst:39
msgid "Exec code in a compatible way on both Python 2 and 3."
msgstr ""

#: ../../api/compat.rst:43
msgid ""
"On Python 2, the string value ``im_func``, on Python 3, the string value "
"``__func__``."
msgstr ""

#: ../../api/compat.rst:48
msgid ""
"On Python 2, the ``raw_input`` function, on Python 3, the ``input`` "
"function."
msgstr ""

#: ../../api/compat.rst:53
msgid ""
"Sequence of integer types for this platform.  For Python 3, it's "
"``(int,)``.  For Python 2, it's ``(int, long)``."
msgstr ""

#: ../../api/compat.rst:58
msgid ""
"Return ``True`` if ``v`` is a non-``str`` iterable on both Python 2 and "
"Python 3."
msgstr ""

#: ../../api/compat.rst:63
msgid "Return ``d.items()`` on Python 3, ``d.iteritems()`` on Python 2."
msgstr ""

#: ../../api/compat.rst:67
msgid "Return ``d.values()`` on Python 3, ``d.itervalues()`` on Python 2."
msgstr ""

#: ../../api/compat.rst:71
msgid "Return ``d.keys()`` on Python 3, ``d.iterkeys()`` on Python 2."
msgstr ""

#: ../../api/compat.rst:75
msgid ""
"Long type for this platform.  For Python 3, it's ``int``.  For Python 2, "
"it's ``long``."
msgstr ""

#: ../../api/compat.rst:80
msgid "Return ``list(map(v))`` on Python 3, ``map(v)`` on Python 2."
msgstr ""

#: ../../api/compat.rst:84
msgid "``cPickle`` module if it exists, ``pickle`` module otherwise."
msgstr ""

#: ../../api/compat.rst:88
msgid "``True`` if running on Python 3, ``False`` otherwise."
msgstr ""

#: ../../api/compat.rst:92
msgid "``True`` if running on PyPy, ``False`` otherwise."
msgstr ""

#: ../../api/compat.rst:96
msgid ""
"Reraise an exception in a compatible way on both Python 2 and Python 3, "
"e.g. ``reraise(*sys.exc_info())``."
msgstr ""

#: ../../api/compat.rst:101
msgid ""
"Sequence of string types for this platform.  For Python 3, it's "
"``(str,)``.  For Python 2, it's ``(basestring,)``."
msgstr ""

#: ../../api/compat.rst:106
msgid ""
"On Python 2, the ``Cookie.SimpleCookie`` class, on Python 3, the "
"``http.cookies.SimpleCookie`` module."
msgstr ""

#: of pyramid.compat.text_:1
msgid ""
"If ``s`` is an instance of ``binary_type``, return ``s.decode(encoding, "
"errors)``, otherwise return ``s``"
msgstr ""

#: ../../api/compat.rst:113
msgid ""
"Text type for this platform.  For Python 3, it's ``str``.  For Python 2, "
"it's ``unicode``."
msgstr ""

#: of pyramid.compat.native_:1
msgid ""
"Python 3: If ``s`` is an instance of ``text_type``, return ``s``, "
"otherwise return ``str(s, encoding, errors)``"
msgstr ""

#: of pyramid.compat.native_:4
msgid ""
"Python 2: If ``s`` is an instance of ``text_type``, return "
"``s.encode(encoding, errors)``, otherwise return ``str(s)``"
msgstr ""

#: ../../api/compat.rst:120
msgid "``urlparse`` module on Python 2, ``urllib.parse`` module on Python 3."
msgstr ""

#: ../../api/compat.rst:124
msgid ""
"``urllib.quote`` function on Python 2, ``urllib.parse.quote`` function on"
" Python 3."
msgstr ""

#: ../../api/compat.rst:129
msgid ""
"``urllib.quote_plus`` function on Python 2, ``urllib.parse.quote_plus`` "
"function on Python 3."
msgstr ""

#: ../../api/compat.rst:134
msgid ""
"``urllib.unquote`` function on Python 2, ``urllib.parse.unquote`` "
"function on Python 3."
msgstr ""

#: ../../api/compat.rst:139
msgid ""
"``urllib.urlencode`` function on Python 2, ``urllib.parse.urlencode`` "
"function on Python 3."
msgstr ""

#: ../../api/compat.rst:144
msgid ""
"``urllib2.urlopen`` function on Python 2, ``urllib.request.urlopen`` "
"function on Python 3."
msgstr ""

#: ../../api/compat.rst:149
msgid ""
"On Python 2, return ``url_unquote(v).decode(encoding(encoding, "
"errors))``; on Python 3, return the result of ``urllib.parse.unquote``."
msgstr ""

#: ../../api/compat.rst:154
msgid ""
"On Python 2, return ``native_(url_unquote_text_v, encoding, errors))``; "
"on Python 3, return the result of ``urllib.parse.unquote``."
msgstr ""

