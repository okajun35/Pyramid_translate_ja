# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../narr/commandline.rst:4
msgid "Command-Line Pyramid"
msgstr ""

#: ../../narr/commandline.rst:6
msgid ""
"Your :app:`Pyramid` application can be controlled and inspected using a "
"variety of command-line utilities.  These utilities are documented in "
"this chapter."
msgstr ""

#: ../../narr/commandline.rst:17
msgid "Displaying Matching Views for a Given URL"
msgstr ""

#: ../../narr/commandline.rst:19
msgid "See also the output of :ref:`pviews --help <pviews_script>`."
msgstr ""

#: ../../narr/commandline.rst:21
msgid ""
"For a big application with several views, it can be hard to keep the view"
" configuration details in your head, even if you defined all the views "
"yourself. You can use the ``pviews`` command in a terminal window to "
"print a summary of matching routes and views for a given URL in your "
"application. The ``pviews`` command accepts two arguments. The first "
"argument to ``pviews`` is the path to your application's ``.ini`` file "
"and section name inside the ``.ini`` file which points to your "
"application.  This should be of the format ``config_file#section_name``. "
"The second argument is the URL to test for matching views.  The "
"``section_name`` may be omitted; if it is, it's considered to be "
"``main``."
msgstr ""

#: ../../narr/commandline.rst:32
msgid ""
"Here is an example for a simple view configuration using "
":term:`traversal`:"
msgstr ""

#: ../../narr/commandline.rst:49
msgid ""
"The output always has the requested URL at the top and below that all the"
" views that matched with their view configuration details. In this "
"example only one view matches, so there is just a single *View* section. "
"For each matching view, the full code path to the associated view "
"callable is shown, along with any permissions and predicates that are "
"part of that view configuration."
msgstr ""

#: ../../narr/commandline.rst:55
msgid "A more complex configuration might generate something like this:"
msgstr ""

#: ../../narr/commandline.rst:101
msgid ""
"In this case, we are dealing with a :term:`URL dispatch` application. "
"This specific URL has two matching routes. The matching route information"
" is displayed first, followed by any views that are associated with that "
"route. As you can see from the second matching route output, a route can "
"be associated with more than one view."
msgstr ""

#: ../../narr/commandline.rst:107
msgid ""
"For a URL that doesn't match any views, ``pviews`` will simply print out "
"a *Not found* message."
msgstr ""

#: ../../narr/commandline.rst:118
msgid "The Interactive Shell"
msgstr ""

#: ../../narr/commandline.rst:120
msgid "See also the output of :ref:`pshell --help <pshell_script>`."
msgstr ""

#: ../../narr/commandline.rst:122
msgid ""
"Once you've installed your program for development using ``pip install -e"
" .``, you can use an interactive Python shell to execute expressions in a"
" Python environment exactly like the one that will be used when your "
"application runs \"for real\".  To do so, use the ``pshell`` command line"
" utility."
msgstr ""

#: ../../narr/commandline.rst:127
msgid ""
"The argument to ``pshell`` follows the format "
"``config_file#section_name`` where ``config_file`` is the path to your "
"application's ``.ini`` file and ``section_name`` is the ``app`` section "
"name inside the ``.ini`` file which points to your application.  For "
"example, your application ``.ini`` file might have an ``[app:main]`` "
"section that looks like so:"
msgstr ""

#: ../../narr/commandline.rst:144
msgid ""
"If so, you can use the following command to invoke a debug shell using "
"the name ``main`` as a section name:"
msgstr ""

#: ../../narr/commandline.rst:173
msgid ""
"The WSGI application that is loaded will be available in the shell as the"
" ``app`` global. Also, if the application that is loaded is the "
":app:`Pyramid` app with no surrounding :term:`middleware`, the ``root`` "
"object returned by the default :term:`root factory`, ``registry``, and "
"``request`` will be available."
msgstr ""

#: ../../narr/commandline.rst:178
msgid ""
"You can also simply rely on the ``main`` default section name by omitting"
" any hash after the filename:"
msgstr ""

#: ../../narr/commandline.rst:185
msgid "Press ``Ctrl-D`` to exit the interactive shell (or ``Ctrl-Z`` on Windows)."
msgstr ""

#: ../../narr/commandline.rst:194
msgid "Extending the Shell"
msgstr ""

#: ../../narr/commandline.rst:196
msgid ""
"It is convenient when using the interactive shell often to have some "
"variables significant to your application already loaded as globals when "
"you start the ``pshell``. To facilitate this, ``pshell`` will look for a "
"special ``[pshell]`` section in your INI file and expose the subsequent "
"key/value pairs to the shell.  Each key is a variable name that will be "
"global within the pshell session; each value is a :term:`dotted Python "
"name`. If specified, the special key ``setup`` should be a :term:`dotted "
"Python name` pointing to a callable that accepts the dictionary of "
"globals that will be loaded into the shell. This allows for some custom "
"initializing code to be executed each time the ``pshell`` is run. The "
"``setup`` callable can also be specified from the commandline using the "
"``--setup`` option which will override the key in the INI file."
msgstr ""

#: ../../narr/commandline.rst:209
msgid ""
"For example, you want to expose your model to the shell along with the "
"database session so that you can mutate the model on an actual database. "
"Here, we'll assume your model is stored in the ``myapp.models`` package."
msgstr ""

#: ../../narr/commandline.rst:222
msgid ""
"By defining the ``setup`` callable, we will create the module "
"``myapp.lib.pshell`` containing a callable named ``setup`` that will "
"receive the global environment before it is exposed to the shell. Here we"
" mutate the environment's request as well as add a new value containing a"
" WebTest version of the application to which we can easily submit "
"requests."
msgstr ""

#: ../../narr/commandline.rst:239
msgid ""
"When this INI file is loaded, the extra variables ``m``, ``session`` and "
"``t`` will be available for use immediately. Since a ``setup`` callable "
"was also specified, it is executed and a new variable ``testapp`` is "
"exposed, and the request is configured to generate urls from the host "
"``http://www.example.com``. For example:"
msgstr ""

#: ../../narr/commandline.rst:274
msgid "Alternative Shells"
msgstr ""

#: ../../narr/commandline.rst:276
msgid ""
"The ``pshell`` command can be easily extended with alternate REPLs if the"
" default python REPL is not satisfactory. Assuming you have a binding "
"installed such as ``pyramid_ipython`` it will normally be auto-selected "
"and used. You may also specifically invoke your choice with the ``-p "
"choice`` or ``--python-shell choice`` option."
msgstr ""

#: ../../narr/commandline.rst:286
msgid "You may use the ``--list-shells`` option to see the available shells."
msgstr ""

#: ../../narr/commandline.rst:296
msgid ""
"If you want to use a shell that isn't supported out of the box, you can "
"introduce a new shell by registering an entry point in your ``setup.py``:"
msgstr ""

#: ../../narr/commandline.rst:309
msgid ""
"And then your shell factory should return a function that accepts two "
"arguments, ``env`` and ``help``, which would look like this:"
msgstr ""

#: ../../narr/commandline.rst:320
msgid ""
"User-defined shells may be registered using entry points. Prior to this "
"the only supported shells were ``ipython``, ``bpython`` and ``python``."
msgstr ""

#: ../../narr/commandline.rst:324
msgid ""
"``ipython`` and ``bpython`` have been moved into their respective "
"packages ``pyramid_ipython`` and ``pyramid_bpython``."
msgstr ""

#: ../../narr/commandline.rst:329
msgid "Setting a Default Shell"
msgstr ""

#: ../../narr/commandline.rst:331
msgid ""
"You may use the ``default_shell`` option in your ``[pshell]`` ini section"
" to specify a list of preferred shells."
msgstr ""

#: ../../narr/commandline.rst:350
msgid "Displaying All Application Routes"
msgstr ""

#: ../../narr/commandline.rst:352
msgid "See also the output of :ref:`proutes --help <proutes_script>`."
msgstr ""

#: ../../narr/commandline.rst:354
msgid ""
"You can use the ``proutes`` command in a terminal window to print a "
"summary of routes related to your application.  Much like the ``pshell`` "
"command (see :ref:`interactive_shell`), the ``proutes`` command accepts "
"one argument with the format ``config_file#section_name``.  The "
"``config_file`` is the path to your application's ``.ini`` file, and "
"``section_name`` is the ``app`` section name inside the ``.ini`` file "
"which points to your application.  By default, the ``section_name`` is "
"``main`` and can be omitted."
msgstr ""

#: ../../narr/commandline.rst:362
msgid "For example:"
msgstr ""

#: ../../narr/commandline.rst:381
msgid ""
"``proutes`` generates a table with four columns: *Name*, *Pattern*, "
"*View*, and *Method*.  The items listed in the Name column are route "
"names, the items listed in the Pattern column are route patterns, the "
"items listed in the View column are representations of the view callable "
"that will be invoked when a request matches the associated route pattern,"
" and the items listed in the Method column are the request methods that "
"are associated with the route name. The View column may show "
"``<unknown>`` if no associated view callable could be found.  The Method "
"column, for the route name, may show either ``<route mismatch>`` if the "
"view callable does not accept any of the route's request methods, or "
"``*`` if the view callable will accept any of the route's request "
"methods.  If no routes are configured within your application, nothing "
"will be printed to the console when ``proutes`` is executed."
msgstr ""

#: ../../narr/commandline.rst:394
msgid ""
"It is convenient when using the ``proutes`` command often to configure "
"which columns and the order you would like to view them. To facilitate "
"this, ``proutes`` will look for a special ``[proutes]`` section in your "
"``.ini`` file and use those as defaults."
msgstr ""

#: ../../narr/commandline.rst:399
msgid "For example you may remove the request method and place the view first:"
msgstr ""

#: ../../narr/commandline.rst:409
msgid "You can also separate the formats with commas or spaces:"
msgstr ""

#: ../../narr/commandline.rst:420
msgid ""
"If you want to temporarily configure the columns and order, there is the "
"argument ``--format``, which is a comma separated list of columns you "
"want to include. The current available formats are ``name``, ``pattern``,"
" ``view``, and ``method``."
msgstr ""

#: ../../narr/commandline.rst:433
msgid "Displaying \"Tweens\""
msgstr ""

#: ../../narr/commandline.rst:435
msgid "See also the output of :ref:`ptweens --help <ptweens_script>`."
msgstr ""

#: ../../narr/commandline.rst:437
msgid ""
"A :term:`tween` is a bit of code that sits between the main Pyramid "
"application request handler and the WSGI application which calls it.  A "
"user can get a representation of both the implicit tween ordering (the "
"ordering specified by calls to "
":meth:`pyramid.config.Configurator.add_tween`) and the explicit tween "
"ordering (specified by the ``pyramid.tweens`` configuration setting) "
"using the ``ptweens`` command.  Tween factories will show up represented "
"by their standard Python dotted name in the ``ptweens`` output."
msgstr ""

#: ../../narr/commandline.rst:445
msgid ""
"For example, here's the ``ptweens`` command run against a system "
"configured without any explicit tweens:"
msgstr ""

#: ../../narr/commandline.rst:463
msgid ""
"Here's the ``ptweens`` command run against a system configured *with* "
"explicit tweens defined in its ``development.ini`` file:"
msgstr ""

#: ../../narr/commandline.rst:491
msgid ""
"Here's the application configuration section of the ``development.ini`` "
"used by the above ``ptweens`` command which reports that the explicit "
"tween chain is used:"
msgstr ""

#: ../../narr/commandline.rst:511
msgid "See :ref:`registering_tweens` for more information about tweens."
msgstr ""

#: ../../narr/commandline.rst:521
msgid "Invoking a Request"
msgstr ""

#: ../../narr/commandline.rst:523
msgid "See also the output of :ref:`prequest --help <prequest_script>`."
msgstr ""

#: ../../narr/commandline.rst:525
msgid ""
"You can use the ``prequest`` command-line utility to send a request to "
"your application and see the response body without starting a server."
msgstr ""

#: ../../narr/commandline.rst:528
msgid "There are two required arguments to ``prequest``:"
msgstr ""

#: ../../narr/commandline.rst:530
msgid ""
"The config file/section: follows the format ``config_file#section_name``,"
" where ``config_file`` is the path to your application's ``.ini`` file "
"and ``section_name`` is the ``app`` section name inside the ``.ini`` "
"file.  The ``section_name`` is optional; it defaults to ``main``.  For "
"example: ``development.ini``."
msgstr ""

#: ../../narr/commandline.rst:536
msgid ""
"The path: this should be the non-URL-quoted path element of the URL to "
"the resource you'd like to be rendered on the server.  For example, "
"``/``."
msgstr ""

#: ../../narr/commandline.rst:539
msgid "For example::"
msgstr ""

#: ../../narr/commandline.rst:543
msgid ""
"This will print the body of the response to the console on which it was "
"invoked."
msgstr ""

#: ../../narr/commandline.rst:546
msgid ""
"Several options are supported by ``prequest``.  These should precede any "
"config file name or URL."
msgstr ""

#: ../../narr/commandline.rst:549
msgid ""
"``prequest`` has a ``-d`` (i.e., ``--display-headers``) option which "
"prints the status and headers returned by the server before the output::"
msgstr ""

#: ../../narr/commandline.rst:554
msgid ""
"This will print the status, headers, and the body of the response to the "
"console."
msgstr ""

#: ../../narr/commandline.rst:557
msgid "You can add request header values by using the ``--header`` option::"
msgstr ""

#: ../../narr/commandline.rst:561
msgid ""
"Headers are added to the WSGI environment by converting them to their "
"CGI/WSGI equivalents (e.g., ``Host=example.com`` will insert the "
"``HTTP_HOST`` header variable as the value ``example.com``).  Multiple "
"``--header`` options can be supplied.  The special header value "
"``content-type`` sets the ``CONTENT_TYPE`` in the WSGI environment."
msgstr ""

#: ../../narr/commandline.rst:567
msgid ""
"By default, ``prequest`` sends a ``GET`` request.  You can change this by"
" using the ``-m`` (aka ``--method``) option.  ``GET``, ``HEAD``, "
"``POST``, and ``DELETE`` are currently supported.  When you use ``POST``,"
" the standard input of the ``prequest`` process is used as the ``POST`` "
"body::"
msgstr ""

#: ../../narr/commandline.rst:576
msgid "Using Custom Arguments to Python when Running ``p*`` Scripts"
msgstr ""

#: ../../narr/commandline.rst:580
msgid ""
"Each of Pyramid's console scripts (``pserve``, ``pviews``, etc.) can be "
"run directly using ``python3 -m``, allowing custom arguments to be sent "
"to the Python interpreter at runtime. For example::"
msgstr ""

#: ../../narr/commandline.rst:595
msgid "Showing All Installed Distributions and Their Versions"
msgstr ""

#: ../../narr/commandline.rst:599
msgid "See also the output of :ref:`pdistreport --help <pdistreport_script>`."
msgstr ""

#: ../../narr/commandline.rst:602
msgid ""
"You can use the ``pdistreport`` command to show the :app:`Pyramid` "
"version in use, the Python version in use, and all installed versions of "
"Python distributions in your Python environment::"
msgstr ""

#: ../../narr/commandline.rst:616
msgid ""
"``pdistreport`` takes no options.  Its output is useful to paste into a "
"pastebin when you are having problems and need someone with more "
"familiarity with Python packaging and distribution than you have to look "
"at your environment."
msgstr ""

#: ../../narr/commandline.rst:625
msgid "Writing a Script"
msgstr ""

#: ../../narr/commandline.rst:627
msgid ""
"All web applications are, at their hearts, systems which accept a request"
" and return a response.  When a request is accepted by a :app:`Pyramid` "
"application, the system receives state from the request which is later "
"relied on by your application code.  For example, one :term:`view "
"callable` may assume it's working against a request that has a "
"``request.matchdict`` of a particular composition, while another assumes "
"a different composition of the matchdict."
msgstr ""

#: ../../narr/commandline.rst:634
msgid ""
"In the meantime, it's convenient to be able to write a Python script that"
" can work \"in a Pyramid environment\", for instance to update database "
"tables used by your :app:`Pyramid` application.  But a \"real\" Pyramid "
"environment doesn't have a completely static state independent of a "
"request; your application (and Pyramid itself) is almost always reliant "
"on being able to obtain information from a request.  When you run a "
"Python script that simply imports code from your application and tries to"
" run it, there just is no request data, because there isn't any real web "
"request.  Therefore some parts of your application and some Pyramid APIs "
"will not work."
msgstr ""

#: ../../narr/commandline.rst:644
msgid ""
"For this reason, :app:`Pyramid` makes it possible to run a script in an "
"environment much like the environment produced when a particular "
":term:`request` reaches your :app:`Pyramid` application.  This is "
"achieved by using the :func:`pyramid.paster.bootstrap` command in the "
"body of your script."
msgstr ""

#: ../../narr/commandline.rst:649
msgid ":func:`pyramid.paster.bootstrap`"
msgstr ""

#: ../../narr/commandline.rst:652
msgid ""
"Added the ability for ``bootstrap`` to cleanup automatically via the "
"``with`` statement."
msgstr ""

#: ../../narr/commandline.rst:656
msgid ""
"In the simplest case, :func:`pyramid.paster.bootstrap` can be used with a"
" single argument, which accepts the :term:`PasteDeploy` ``.ini`` file "
"representing your Pyramid application's configuration as a single "
"argument:"
msgstr ""

#: ../../narr/commandline.rst:667
msgid ""
":func:`pyramid.paster.bootstrap` returns a dictionary containing "
"framework-related information.  This dictionary will always contain a "
":term:`request` object as its ``request`` key."
msgstr ""

#: ../../narr/commandline.rst:671
msgid ""
"The following keys are available in the ``env`` dictionary returned by "
":func:`pyramid.paster.bootstrap`:"
msgstr ""

#: ../../narr/commandline.rst:674
msgid "request"
msgstr ""

#: ../../narr/commandline.rst:676
msgid ""
"A :class:`pyramid.request.Request` object implying the current request "
"state for your script."
msgstr ""

#: ../../narr/commandline.rst:679
msgid "app"
msgstr ""

#: ../../narr/commandline.rst:681
msgid "The :term:`WSGI` application object generated by bootstrapping."
msgstr ""

#: ../../narr/commandline.rst:683
msgid "root"
msgstr ""

#: ../../narr/commandline.rst:685
msgid ""
"The :term:`resource` root of your :app:`Pyramid` application.  This is an"
" object generated by the :term:`root factory` configured in your "
"application."
msgstr ""

#: ../../narr/commandline.rst:689
msgid "registry"
msgstr ""

#: ../../narr/commandline.rst:691
msgid "The :term:`application registry` of your :app:`Pyramid` application."
msgstr ""

#: ../../narr/commandline.rst:693
msgid "closer"
msgstr ""

#: ../../narr/commandline.rst:695
msgid ""
"A parameterless callable that can be used to pop an internal "
":app:`Pyramid` threadlocal stack (used by "
":func:`pyramid.threadlocal.get_current_registry` and "
":func:`pyramid.threadlocal.get_current_request`) when your scripting job "
"is finished."
msgstr ""

#: ../../narr/commandline.rst:700
msgid ""
"Let's assume that the ``/path/to/my/development.ini`` file used in the "
"example above looks like so:"
msgstr ""

#: ../../narr/commandline.rst:717
msgid ""
"The configuration loaded by the above bootstrap example will use the "
"configuration implied by the ``[pipeline:main]`` section of your "
"configuration file by default.  Specifying "
"``/path/to/my/development.ini`` is logically equivalent to specifying "
"``/path/to/my/development.ini#main``.  In this case, we'll be using a "
"configuration that includes an ``app`` object which is wrapped in the "
"Paste \"translogger\" :term:`middleware` (which logs requests to the "
"console)."
msgstr ""

#: ../../narr/commandline.rst:725
msgid ""
"You can also specify a particular *section* of the PasteDeploy ``.ini`` "
"file to load instead of ``main``:"
msgstr ""

#: ../../narr/commandline.rst:735
msgid ""
"The above example specifies the ``another`` ``app``, ``pipeline``, or "
"``composite`` section of your PasteDeploy configuration file. The ``app``"
" object present in the ``env`` dictionary returned by "
":func:`pyramid.paster.bootstrap` will be a :app:`Pyramid` :term:`router`."
msgstr ""

#: ../../narr/commandline.rst:742
msgid "Changing the Request"
msgstr ""

#: ../../narr/commandline.rst:744
msgid ""
"By default, Pyramid will generate a request object in the ``env`` "
"dictionary for the URL ``http://localhost:80/``. This means that any URLs"
" generated by Pyramid during the execution of your script will be "
"anchored here. This is generally not what you want."
msgstr ""

#: ../../narr/commandline.rst:749
msgid "So how do we make Pyramid generate the correct URLs?"
msgstr ""

#: ../../narr/commandline.rst:751
msgid "Assuming that you have a route configured in your application like so:"
msgstr ""

#: ../../narr/commandline.rst:757
msgid ""
"You need to inform the Pyramid environment that the WSGI application is "
"handling requests from a certain base. For example, we want to simulate "
"mounting our application at `https://example.com/prefix`, to ensure that "
"the generated URLs are correct for our deployment. This can be done by "
"either mutating the resulting request object, or more simply by "
"constructing the desired request and passing it into "
":func:`~pyramid.paster.bootstrap`:"
msgstr ""

#: ../../narr/commandline.rst:774
msgid "Now you can readily use Pyramid's APIs for generating URLs:"
msgstr ""

#: ../../narr/commandline.rst:783
msgid "Cleanup"
msgstr ""

#: ../../narr/commandline.rst:785
msgid ""
"If you're using the ``with``-statement variant then there's nothing to "
"worry about. However if you're using the returned environment directly "
"then when your scripting logic finishes, it's good manners to call the "
"``closer`` callback:"
msgstr ""

#: ../../narr/commandline.rst:801
msgid "Setting Up Logging"
msgstr ""

#: ../../narr/commandline.rst:803
msgid ""
"By default, :func:`pyramid.paster.bootstrap` does not configure logging "
"parameters present in the configuration file.  If you'd like to configure"
" logging based on ``[logger]`` and related sections in the configuration "
"file, use the following command:"
msgstr ""

#: ../../narr/commandline.rst:813
msgid ""
"See :ref:`logging_chapter` for more information on logging within "
":app:`Pyramid`."
msgstr ""

#: ../../narr/commandline.rst:823
msgid "Making Your Script into a Console Script"
msgstr ""

#: ../../narr/commandline.rst:825
msgid ""
"A \"console script\" is :term:`setuptools` terminology for a script that "
"gets installed into the ``bin`` directory of a Python :term:`virtual "
"environment` (or \"base\" Python environment) when a :term:`distribution`"
" which houses that script is installed. Because it's installed into the "
"``bin`` directory of a virtual environment when the distribution is "
"installed, it's a convenient way to package and distribute functionality "
"that you can call from the command-line. It's often more convenient to "
"create a console script than it is to create a ``.py`` script and "
"instruct people to call it with the \"right\" Python interpreter. A "
"console script generates a file that lives in ``bin``, and when it's "
"invoked it will always use the \"right\" Python environment, which means "
"it will always be invoked in an environment where all the libraries it "
"needs (such as Pyramid) are available."
msgstr ""

#: ../../narr/commandline.rst:838
msgid ""
"In general, you can make your script into a console script by doing the "
"following:"
msgstr ""

#: ../../narr/commandline.rst:841
msgid ""
"Use an existing distribution (such as one you've already created via "
"``cookiecutter``) or create a new distribution that possesses at least "
"one package or module.  It should, within any module within the "
"distribution, house a callable (usually a function) that takes no "
"arguments and which runs any of the code you wish to run."
msgstr ""

#: ../../narr/commandline.rst:847
msgid ""
"Add a ``[console_scripts]`` section to the ``entry_points`` argument of "
"the distribution which creates a mapping between a script name and a "
"dotted name representing the callable you added to your distribution."
msgstr ""

#: ../../narr/commandline.rst:851
msgid ""
"Run ``pip install -e .`` or ``pip install .`` to get your distribution "
"reinstalled. When you reinstall your distribution, a file representing "
"the script that you named in the last step will be in the ``bin`` "
"directory of the virtual environment in which you installed the "
"distribution. It will be executable. Invoking it from a terminal will "
"execute your callable."
msgstr ""

#: ../../narr/commandline.rst:857
msgid ""
"As an example, let's create some code that can be invoked by a console "
"script that prints the deployment settings of a Pyramid application.  To "
"do so, we'll pretend you have a distribution with a package in it named "
"``myproject``. Within this package, we'll pretend you've added a "
"``scripts.py`` module which contains the following code:"
msgstr ""

#: ../../narr/commandline.rst:909
msgid ""
"This script uses the Python ``optparse`` module to allow us to make sense"
" out of extra arguments passed to the script.  It uses the "
":func:`pyramid.paster.bootstrap` function to get information about the "
"application defined by a config file, and prints the deployment settings "
"defined in that config file."
msgstr ""

#: ../../narr/commandline.rst:915
msgid ""
"After adding this script to the package, you'll need to tell your "
"distribution's ``setup.py`` about its existence.  Within your "
"distribution's top-level directory, your ``setup.py`` file will look "
"something like this:"
msgstr ""

#: ../../narr/commandline.rst:967
msgid ""
"We're going to change the ``setup.py`` file to add a "
"``[console_scripts]`` section within the ``entry_points`` string. Within "
"this section, you should specify a ``scriptname = "
"dotted.path.to:yourfunction`` line.  For example:"
msgstr ""

#: ../../narr/commandline.rst:976
msgid ""
"The ``show_settings`` name will be the name of the script that is "
"installed into ``bin``.  The colon (``:``) between ``myproject.scripts`` "
"and ``settings_show`` above indicates that ``myproject.scripts`` is a "
"Python module, and ``settings_show`` is the function in that module which"
" contains the code you'd like to run as the result of someone invoking "
"the ``show_settings`` script from their command line."
msgstr ""

#: ../../narr/commandline.rst:983
msgid "The result will be something like:"
msgstr ""

#: ../../narr/commandline.rst:1036
msgid ""
"Once you've done this, invoking ``$VENV/bin/pip install -e .`` will "
"install a file named ``show_settings`` into the ``$somevenv/bin`` "
"directory with a small bit of Python code that points to your entry "
"point. It will be executable. Running it without any arguments will print"
" an error and exit. Running it with a single argument that is the path of"
" a config file will print the settings. Running it with an ``--omit=foo``"
" argument will omit the settings that have keys that start with ``foo``. "
"Running it with two \"omit\" options (e.g., ``--omit=foo --omit=bar``) "
"will omit all settings that have keys that start with either ``foo`` or "
"``bar``:"
msgstr ""

#: ../../narr/commandline.rst:1060
msgid ""
"Pyramid's ``pserve``, ``pcreate``, ``pshell``, ``prequest``, ``ptweens``,"
" and other ``p*`` scripts are implemented as console scripts.  When you "
"invoke one of those, you are using a console script."
msgstr ""

