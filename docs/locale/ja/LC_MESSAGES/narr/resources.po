# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2018, Agendaless Consulting
# This file is distributed under the same license as the The Pyramid Web
# Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Pyramid Web Framework 1.9.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-02 00:00+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../narr/resources.rst:4
msgid "Resources"
msgstr ""

#: ../../narr/resources.rst:6
msgid ""
"A :term:`resource` is an object that represents a \"place\" in a tree "
"related to your application.  Every :app:`Pyramid` application has at "
"least one resource object: the :term:`root` resource.  Even if you don't "
"define a root resource manually, a default one is created for you.  The "
"root resource is the root of a :term:`resource tree`.  A resource tree is"
" a set of nested dictionary-like objects which you can use to represent "
"your website's structure."
msgstr ""

#: ../../narr/resources.rst:13
msgid ""
"In an application which uses :term:`traversal` to map URLs to code, the "
"resource tree structure is used heavily to map each URL to a :term:`view "
"callable`.  When :term:`traversal` is used, :app:`Pyramid` will walk "
"through the resource tree by traversing through its nested dictionary "
"structure in order to find a :term:`context` resource.  Once a context "
"resource is found, the context resource and data in the request will be "
"used to find a :term:`view callable`."
msgstr ""

#: ../../narr/resources.rst:21
msgid ""
"In an application which uses :term:`URL dispatch`, the resource tree is "
"only used indirectly, and is often \"invisible\" to the developer.  In "
"URL dispatch applications, the resource \"tree\" is often composed of "
"only the root resource by itself.  This root resource sometimes has "
"security declarations attached to it, but is not required to have any.  "
"In general, the resource tree is much less important in applications that"
" use URL dispatch than applications that use traversal."
msgstr ""

#: ../../narr/resources.rst:29
msgid ""
"In \"Zope-like\" :app:`Pyramid` applications, resource objects also often"
" store data persistently, and offer methods related to mutating that "
"persistent data. In these kinds of applications, resources not only "
"represent the site structure of your website, but they become the "
":term:`domain model` of the application."
msgstr ""

#: ../../narr/resources.rst:34
msgid "Also:"
msgstr ""

#: ../../narr/resources.rst:36
msgid ""
"The ``context`` and ``containment`` predicate arguments to "
":meth:`~pyramid.config.Configurator.add_view` (or a "
":func:`~pyramid.view.view_config` decorator) reference a resource class "
"or resource :term:`interface`."
msgstr ""

#: ../../narr/resources.rst:41
msgid "A :term:`root factory` returns a resource."
msgstr ""

#: ../../narr/resources.rst:43
msgid ""
"A resource is exposed to :term:`view` code as the :term:`context` of a "
"view."
msgstr ""

#: ../../narr/resources.rst:45
msgid ""
"Various helpful :app:`Pyramid` API methods expect a resource as an "
"argument (e.g., :meth:`~pyramid.request.Request.resource_url` and "
"others)."
msgstr ""

#: ../../narr/resources.rst:56
msgid "Defining a Resource Tree"
msgstr ""

#: ../../narr/resources.rst:58
msgid ""
"When :term:`traversal` is used (as opposed to a purely :term:`URL "
"dispatch` based application), :app:`Pyramid` expects to be able to "
"traverse a tree composed of resources (the :term:`resource tree`).  "
"Traversal begins at a root resource, and descends into the tree "
"recursively, trying each resource's ``__getitem__`` method to resolve a "
"path segment to another resource object. :app:`Pyramid` imposes the "
"following policy on resource instances in the tree:"
msgstr ""

#: ../../narr/resources.rst:65
msgid ""
"A container resource (a resource which contains other resources) must "
"supply a ``__getitem__`` method which is willing to resolve a Unicode "
"name to a sub-resource.  If a sub-resource by a particular name does not "
"exist in a container resource, the ``__getitem__`` method of the "
"container resource must raise a :exc:`KeyError`.  If a sub-resource by "
"that name *does* exist, the container's ``__getitem__`` should return the"
" sub-resource."
msgstr ""

#: ../../narr/resources.rst:72
msgid ""
"Leaf resources, which do not contain other resources, must not implement "
"a ``__getitem__``, or if they do, their ``__getitem__`` method must "
"always raise a :exc:`KeyError`."
msgstr ""

#: ../../narr/resources.rst:76
msgid ""
"See :ref:`traversal_chapter` for more information about how traversal "
"works against resource instances."
msgstr ""

#: ../../narr/resources.rst:79
msgid "Here's a sample resource tree, represented by a variable named ``root``:"
msgstr ""

#: ../../narr/resources.rst:89
msgid ""
"The resource tree we've created above is represented by a dictionary-like"
" root object which has a single child named ``'a'``.  ``'a'`` has a "
"single child named ``'b'``, and ``'b'`` has a single child named ``'c'``,"
" which has no children. It is therefore possible to access the ``'c'`` "
"leaf resource like so:"
msgstr ""

#: ../../narr/resources.rst:99
msgid ""
"If you returned the above ``root`` object from a :term:`root factory`, "
"the path ``/a/b/c`` would find the ``'c'`` object in the resource tree as"
" the result of :term:`traversal`."
msgstr ""

#: ../../narr/resources.rst:103
msgid ""
"In this example, each of the resources in the tree is of the same class. "
"This is not a requirement.  Resource elements in the tree can be of any "
"type. We used a single class to represent all resources in the tree for "
"the sake of simplicity, but in a \"real\" app, the resources in the tree "
"can be arbitrary."
msgstr ""

#: ../../narr/resources.rst:108
msgid ""
"Although the example tree above can service a traversal, the resource "
"instances in the above example are not aware of :term:`location`, so "
"their utility in a \"real\" application is limited.  To make best use of "
"built-in :app:`Pyramid` API facilities, your resources should be "
"\"location-aware\". The next section details how to make resources "
"location-aware."
msgstr ""

#: ../../narr/resources.rst:120
msgid "Location-Aware Resources"
msgstr ""

#: ../../narr/resources.rst:122
msgid ""
"In order for certain :app:`Pyramid` location, security, URL-generation, "
"and traversal APIs to work properly against the resources in a resource "
"tree, all resources in the tree must be :term:`location`-aware.  This "
"means they must have two attributes: ``__parent__`` and ``__name__``."
msgstr ""

#: ../../narr/resources.rst:127
msgid ""
"The ``__parent__`` attribute of a location-aware resource should be a "
"reference to the resource's parent resource instance in the tree.  The "
"``__name__`` attribute should be the name with which a resource's parent "
"refers to the resource via ``__getitem__``."
msgstr ""

#: ../../narr/resources.rst:132
msgid ""
"The ``__parent__`` of the root resource should be ``None`` and its "
"``__name__`` should be the empty string.  For instance:"
msgstr ""

#: ../../narr/resources.rst:142
msgid ""
"A resource returned from the root resource's ``__getitem__`` method "
"should have a ``__parent__`` attribute that is a reference to the root "
"resource, and its ``__name__`` attribute should match the name by which "
"it is reachable via the root resource's ``__getitem__``.  A container "
"resource within the root resource should have a ``__getitem__`` that "
"returns resources with a ``__parent__`` attribute that points at the "
"container, and these sub-objects should have a ``__name__`` attribute "
"that matches the name by which they are retrieved from the container via "
"``__getitem__``.  This pattern continues recursively \"up\" the tree from"
" the root."
msgstr ""

#: ../../narr/resources.rst:152
msgid ""
"The ``__parent__`` attributes of each resource form a linked list that "
"points \"downwards\" toward the root. This is analogous to the ``..`` "
"entry in filesystem directories. If you follow the ``__parent__`` values "
"from any resource in the resource tree, you will eventually come to the "
"root resource, just like if you keep executing the ``cd ..`` filesystem "
"command, eventually you will reach the filesystem root directory."
msgstr ""

#: ../../narr/resources.rst:161
msgid ""
"If your root resource has a ``__name__`` argument that is not ``None`` or"
" the empty string, URLs returned by the "
":func:`~pyramid.request.Request.resource_url` function, and paths "
"generated by the :func:`~pyramid.traversal.resource_path` and "
":func:`~pyramid.traversal.resource_path_tuple` APIs, will be generated "
"improperly.  The value of ``__name__`` will be prepended to every path "
"and URL generated (as opposed to a single leading slash or empty tuple "
"element)."
msgstr ""

#: ../../narr/resources.rst:171
msgid ""
"If you'd rather not manage the ``__name__`` and ``__parent__`` attributes"
" of your resources \"by hand\", an add-on package named "
":mod:`pyramid_traversalwrapper` can help."
msgstr ""

#: ../../narr/resources.rst:175
msgid ""
"In order to use this helper feature, you must first install the "
":mod:`pyramid_traversalwrapper` package (available via PyPI), then "
"register its ``ModelGraphTraverser`` as the traversal policy, rather than"
" the default :app:`Pyramid` traverser. The package contains instructions "
"for doing so."
msgstr ""

#: ../../narr/resources.rst:180
msgid ""
"Once :app:`Pyramid` is configured with this feature, you will no longer "
"need to manage the ``__parent__`` and ``__name__`` attributes on resource"
" objects \"by hand\".  Instead, as necessary during traversal, "
":app:`Pyramid` will wrap each resource (even the root resource) in a "
"``LocationProxy``, which will dynamically assign a ``__name__`` and a "
"``__parent__`` to the traversed resource, based on the last traversed "
"resource and the name supplied to ``__getitem__``.  The root resource "
"will have a ``__name__`` attribute of ``None`` and a ``__parent__`` "
"attribute of ``None``."
msgstr ""

#: ../../narr/resources.rst:189
msgid ""
"Applications which use tree-walking :app:`Pyramid` APIs require location-"
"aware resources.  These APIs include (but are not limited to) "
":meth:`~pyramid.request.Request.resource_url`, "
":func:`~pyramid.traversal.find_resource`, "
":func:`~pyramid.traversal.find_root`, "
":func:`~pyramid.traversal.find_interface`, "
":func:`~pyramid.traversal.resource_path`, "
":func:`~pyramid.traversal.resource_path_tuple`, "
":func:`~pyramid.traversal.traverse`, "
":func:`~pyramid.traversal.virtual_root`, and (usually) "
":meth:`~pyramid.request.Request.has_permission` and "
":func:`~pyramid.security.principals_allowed_by_permission`."
msgstr ""

#: ../../narr/resources.rst:200
msgid ""
"In general, since so much :app:`Pyramid` infrastructure depends on "
"location-aware resources, it's a good idea to make each resource in your "
"tree location-aware."
msgstr ""

#: ../../narr/resources.rst:211
msgid "Generating the URL of a Resource"
msgstr ""

#: ../../narr/resources.rst:213
msgid ""
"If your resources are :term:`location`-aware, you can use the "
":meth:`pyramid.request.Request.resource_url` API to generate a URL for "
"the resource.  This URL will use the resource's position in the parent "
"tree to create a resource path, and it will prefix the path with the "
"current application URL to form a fully-qualified URL with the scheme, "
"host, port, and path.  You can also pass extra arguments to "
":meth:`~pyramid.request.Request.resource_url` to influence the generated "
"URL."
msgstr ""

#: ../../narr/resources.rst:221
msgid ""
"The simplest call to :meth:`~pyramid.request.Request.resource_url` looks "
"like this:"
msgstr ""

#: ../../narr/resources.rst:229
msgid ""
"The ``request`` in the above example is an instance of a :app:`Pyramid` "
":term:`request` object."
msgstr ""

#: ../../narr/resources.rst:232
msgid ""
"If the resource referred to as ``resource`` in the above example was the "
"root resource, and the host that was used to contact the server was "
"``example.com``, the URL generated would be ``http://example.com/``. "
"However, if the resource was a child of the root resource named ``a``, "
"the generated URL would be ``http://example.com/a/``."
msgstr ""

#: ../../narr/resources.rst:238
msgid ""
"A slash is appended to all resource URLs when "
":meth:`~pyramid.request.Request.resource_url` is used to generate them in"
" this simple manner, because resources are \"places\" in the hierarchy, "
"and URLs are meant to be clicked on to be visited.  Relative URLs that "
"you include on HTML pages rendered as the result of the default view of a"
" resource are more apt to be relative to these resources than relative to"
" their parent."
msgstr ""

#: ../../narr/resources.rst:245
msgid ""
"You can also pass extra elements to "
":meth:`~pyramid.request.Request.resource_url`:"
msgstr ""

#: ../../narr/resources.rst:253
msgid ""
"If the resource referred to as ``resource`` in the above example was the "
"root resource, and the host that was used to contact the server was "
"``example.com``, the URL generated would be "
"``http://example.com/foo/bar``. Any number of extra elements can be "
"passed to :meth:`~pyramid.request.Request.resource_url` as extra "
"positional arguments. When extra elements are passed, they are appended "
"to the resource's URL.  A slash is not appended to the final segment when"
" elements are passed."
msgstr ""

#: ../../narr/resources.rst:261
msgid "You can also pass a query string:"
msgstr ""

#: ../../narr/resources.rst:268
msgid ""
"If the resource referred to as ``resource`` in the above example was the "
"root resource, and the host that was used to contact the server was "
"``example.com``, the URL generated would be ``http://example.com/?a=1``."
msgstr ""

#: ../../narr/resources.rst:272
msgid ""
"When a :term:`virtual root` is active, the URL generated by "
":meth:`~pyramid.request.Request.resource_url` for a resource may be "
"\"shorter\" than its physical tree path.  See :ref:`virtual_root_support`"
" for more information about virtually rooting a resource."
msgstr ""

#: ../../narr/resources.rst:277
msgid ""
"For more information about generating resource URLs, see the "
"documentation for :meth:`pyramid.request.Request.resource_url`."
msgstr ""

#: ../../narr/resources.rst:286
msgid "Overriding Resource URL Generation"
msgstr ""

#: ../../narr/resources.rst:288
msgid ""
"If a resource object implements a ``__resource_url__`` method, this "
"method will be called when :meth:`~pyramid.request.Request.resource_url` "
"is called to generate a URL for the resource, overriding the default URL "
"returned for the resource by "
":meth:`~pyramid.request.Request.resource_url`."
msgstr ""

#: ../../narr/resources.rst:293
msgid ""
"The ``__resource_url__`` hook is passed two arguments: ``request`` and "
"``info``.  ``request`` is the :term:`request` object passed to "
":meth:`~pyramid.request.Request.resource_url`.  ``info`` is a dictionary "
"with the following keys:"
msgstr ""

#: ../../narr/resources.rst:301
msgid "``physical_path``"
msgstr ""

#: ../../narr/resources.rst:299
msgid ""
"A string representing the \"physical path\" computed for the resource, as"
" defined by ``pyramid.traversal.resource_path(resource)``.  It will begin"
" and end with a slash."
msgstr ""

#: ../../narr/resources.rst:307
msgid "``virtual_path``"
msgstr ""

#: ../../narr/resources.rst:304
msgid ""
"A string representing the \"virtual path\" computed for the resource, as "
"defined by :ref:`virtual_root_support`.  This will be identical to the "
"physical path if virtual rooting is not enabled.  It will begin and end "
"with a slash."
msgstr ""

#: ../../narr/resources.rst:314
msgid "``app_url``"
msgstr ""

#: ../../narr/resources.rst:310
msgid ""
"A string representing the application URL generated during "
"``request.resource_url``.  It will not end with a slash.  It represents a"
" potentially customized URL prefix, containing potentially custom scheme,"
" host and port information passed by the user to "
"``request.resource_url``.  It should be preferred over use of "
"``request.application_url``."
msgstr ""

#: ../../narr/resources.rst:316
msgid ""
"The ``__resource_url__`` method of a resource should return a string "
"representing a URL.  If it cannot override the default, it should return "
"``None``.  If it returns ``None``, the default URL will be returned."
msgstr ""

#: ../../narr/resources.rst:320
msgid "Here's an example ``__resource_url__`` method."
msgstr ""

#: ../../narr/resources.rst:329
msgid ""
"The above example actually just generates and returns the default URL, "
"which would have been what was generated by the default ``resource_url`` "
"machinery, but your code can perform arbitrary logic as necessary.  For "
"example, your code may wish to override the hostname or port number of "
"the generated URL."
msgstr ""

#: ../../narr/resources.rst:334
msgid ""
"Note that the URL generated by ``__resource_url__`` should be fully "
"qualified, should end in a slash, and should not contain any query string"
" or anchor elements (only path elements) to work with "
":meth:`~pyramid.request.Request.resource_url`."
msgstr ""

#: ../../narr/resources.rst:343
msgid "Generating the Path To a Resource"
msgstr ""

#: ../../narr/resources.rst:345
msgid ""
":func:`pyramid.traversal.resource_path` returns a string object "
"representing the absolute physical path of the resource object based on "
"its position in the resource tree.  Each segment of the path is separated"
" with a slash character."
msgstr ""

#: ../../narr/resources.rst:355
msgid ""
"If ``resource`` in the example above was accessible in the tree as "
"``root['a']['b']``, the above example would generate the string ``/a/b``."
msgstr ""

#: ../../narr/resources.rst:358
msgid ""
"Any positional arguments passed in to "
":func:`~pyramid.traversal.resource_path` will be appended as path "
"segments to the end of the resource path."
msgstr ""

#: ../../narr/resources.rst:367
msgid ""
"If ``resource`` in the example above was accessible in the tree as "
"``root['a']['b']``, the above example would generate the string "
"``/a/b/foo/bar``."
msgstr ""

#: ../../narr/resources.rst:371
msgid "The resource passed in must be :term:`location`-aware."
msgstr ""

#: ../../narr/resources.rst:373
msgid ""
"The presence or absence of a :term:`virtual root` has no impact on the "
"behavior of :func:`~pyramid.traversal.resource_path`."
msgstr ""

#: ../../narr/resources.rst:380
msgid "Finding a Resource by Path"
msgstr ""

#: ../../narr/resources.rst:382
msgid ""
"If you have a string path to a resource, you can grab the resource from "
"that place in the application's resource tree using "
":func:`pyramid.traversal.find_resource`."
msgstr ""

#: ../../narr/resources.rst:386
msgid ""
"You can resolve an absolute path by passing a string prefixed with a "
"``/`` as the ``path`` argument:"
msgstr ""

#: ../../narr/resources.rst:395
msgid ""
"Or you can resolve a path relative to the resource that you pass in to "
":func:`pyramid.traversal.find_resource` by passing a string that isn't "
"prefixed by ``/``:"
msgstr ""

#: ../../narr/resources.rst:405
msgid ""
"Often the paths you pass to :func:`~pyramid.traversal.find_resource` are "
"generated by the :func:`~pyramid.traversal.resource_path` API.  These "
"APIs are \"mirrors\" of each other."
msgstr ""

#: ../../narr/resources.rst:409
msgid ""
"If the path cannot be resolved when calling "
":func:`~pyramid.traversal.find_resource` (if the respective resource in "
"the tree does not exist), a :exc:`KeyError` will be raised."
msgstr ""

#: ../../narr/resources.rst:413
msgid ""
"See the :func:`pyramid.traversal.find_resource` documentation for more "
"information about resolving a path to a resource."
msgstr ""

#: ../../narr/resources.rst:420
msgid "Obtaining the Lineage of a Resource"
msgstr ""

#: ../../narr/resources.rst:422
msgid ""
":func:`pyramid.location.lineage` returns a generator representing the "
":term:`lineage` of the :term:`location`-aware :term:`resource` object."
msgstr ""

#: ../../narr/resources.rst:425
msgid ""
"The :func:`~pyramid.location.lineage` function returns the resource that "
"is passed into it, then each parent of the resource in order.  For "
"example, if the resource tree is composed like so:"
msgstr ""

#: ../../narr/resources.rst:438
msgid ""
"Calling ``lineage(thing2)`` will return a generator.  When we turn it "
"into a list, we will get:"
msgstr ""

#: ../../narr/resources.rst:447
msgid ""
"The generator returned by :func:`~pyramid.location.lineage` first returns"
" unconditionally the resource that was passed into it.  Then, if the "
"resource supplied a ``__parent__`` attribute, it returns the resource "
"represented by ``resource.__parent__``.  If *that* resource has a "
"``__parent__`` attribute, it will return that resource's parent, and so "
"on, until the resource being inspected either has no ``__parent__`` "
"attribute or has a ``__parent__`` attribute of ``None``."
msgstr ""

#: ../../narr/resources.rst:455
msgid ""
"See the documentation for :func:`pyramid.location.lineage` for more "
"information."
msgstr ""

#: ../../narr/resources.rst:459
msgid "Determining if a Resource is in the Lineage of Another Resource"
msgstr ""

#: ../../narr/resources.rst:461
msgid ""
"Use the :func:`pyramid.location.inside` function to determine if one "
"resource is in the :term:`lineage` of another resource."
msgstr ""

#: ../../narr/resources.rst:464 ../../narr/resources.rst:498
msgid "For example, if the resource tree is:"
msgstr ""

#: ../../narr/resources.rst:475
msgid ""
"Calling ``inside(b, a)`` will return ``True``, because ``b`` has a "
"lineage that includes ``a``.  However, calling ``inside(a, b)`` will "
"return ``False`` because ``a`` does not have a lineage that includes "
"``b``."
msgstr ""

#: ../../narr/resources.rst:479
msgid ""
"The argument list for :func:`~pyramid.location.inside` is ``(resource1, "
"resource2)``.  ``resource1`` is \"inside\" ``resource2`` if ``resource2``"
" is a :term:`lineage` ancestor of ``resource1``.  It is a lineage "
"ancestor if its parent (or one of its parent's parents, etc.) is an "
"ancestor."
msgstr ""

#: ../../narr/resources.rst:484
msgid "See :func:`pyramid.location.inside` for more information."
msgstr ""

#: ../../narr/resources.rst:490
msgid "Finding the Root Resource"
msgstr ""

#: ../../narr/resources.rst:492
msgid ""
"Use the :func:`pyramid.traversal.find_root` API to find the :term:`root` "
"resource.  The root resource is the resource at the root of the "
":term:`resource tree`. The API accepts a single argument: ``resource``.  "
"This is a resource that is :term:`location`-aware.  It can be any "
"resource in the tree for which you want to find the root."
msgstr ""

#: ../../narr/resources.rst:509
msgid "Calling ``find_root(b)`` will return ``a``."
msgstr ""

#: ../../narr/resources.rst:511
msgid ""
"The root resource is also available as ``request.root`` within "
":term:`view callable` code."
msgstr ""

#: ../../narr/resources.rst:514
msgid ""
"The presence or absence of a :term:`virtual root` has no impact on the "
"behavior of :func:`~pyramid.traversal.find_root`.  The root object "
"returned is always the *physical* root object."
msgstr ""

#: ../../narr/resources.rst:524
msgid "Resources Which Implement Interfaces"
msgstr ""

#: ../../narr/resources.rst:526
msgid ""
"Resources can optionally be made to implement an :term:`interface`.  An "
"interface is used to tag a resource object with a \"type\" that later can"
" be referred to within :term:`view configuration` and by "
":func:`pyramid.traversal.find_interface`."
msgstr ""

#: ../../narr/resources.rst:531
msgid ""
"Specifying an interface instead of a class as the ``context`` or "
"``containment`` predicate arguments within :term:`view configuration` "
"statements makes it possible to use a single view callable for more than "
"one class of resource objects.  If your application is simple enough that"
" you see no reason to want to do this, you can skip reading this section "
"of the chapter."
msgstr ""

#: ../../narr/resources.rst:537
msgid ""
"For example, here's some code which describes a blog entry which also "
"declares that the blog entry implements an :term:`interface`."
msgstr ""

#: ../../narr/resources.rst:558
msgid ""
"This resource consists of two things: the class which defines the "
"resource constructor as the class ``BlogEntry``, and an :term:`interface`"
" attached to the class via an ``implementer`` class decorator using the "
"``IBlogEntry`` interface as its sole argument."
msgstr ""

#: ../../narr/resources.rst:563
msgid ""
"The interface object used must be an instance of a class that inherits "
"from :class:`zope.interface.Interface`."
msgstr ""

#: ../../narr/resources.rst:566
msgid ""
"A resource class may implement zero or more interfaces.  You specify that"
" a resource implements an interface by using the "
":func:`zope.interface.implementer` function as a class decorator.  The "
"above ``BlogEntry`` resource implements the ``IBlogEntry`` interface."
msgstr ""

#: ../../narr/resources.rst:571
msgid ""
"You can also specify that a particular resource *instance* provides an "
"interface as opposed to its class.  When you declare that a class "
"implements an interface, all instances of that class will also provide "
"that interface. However, you can also just say that a single object "
"provides the interface. To do so, use the "
":func:`zope.interface.directlyProvides` function:"
msgstr ""

#: ../../narr/resources.rst:597
msgid ""
":func:`zope.interface.directlyProvides` will replace any existing "
"interface that was previously provided by an instance.  If a resource "
"object already has instance-level interface declarations that you don't "
"want to replace, use the :func:`zope.interface.alsoProvides` function:"
msgstr ""

#: ../../narr/resources.rst:627
msgid ""
":func:`zope.interface.alsoProvides` will augment the set of interfaces "
"directly provided by an instance instead of overwriting them like "
":func:`zope.interface.directlyProvides` does."
msgstr ""

#: ../../narr/resources.rst:631
msgid ""
"For more information about how resource interfaces can be used by view "
"configuration, see :ref:`using_resource_interfaces`."
msgstr ""

#: ../../narr/resources.rst:638
msgid "Finding a Resource with a Class or Interface in Lineage"
msgstr ""

#: ../../narr/resources.rst:640
msgid ""
"Use the :func:`~pyramid.traversal.find_interface` API to locate a parent "
"that is of a particular Python class, or which implements some "
":term:`interface`."
msgstr ""

#: ../../narr/resources.rst:643
msgid "For example, if your resource tree is composed as follows:"
msgstr ""

#: ../../narr/resources.rst:655
msgid ""
"Calling ``find_interface(a, Thing1)`` will return the ``a`` resource "
"because ``a`` is of class ``Thing1`` (the resource passed as the first "
"argument is considered first, and is returned if the class or interface "
"specification matches)."
msgstr ""

#: ../../narr/resources.rst:660
msgid ""
"Calling ``find_interface(b, Thing1)`` will return the ``a`` resource "
"because ``a`` is of class ``Thing1`` and ``a`` is the first resource in "
"``b``'s lineage of this class."
msgstr ""

#: ../../narr/resources.rst:664
msgid "Calling ``find_interface(b, Thing2)`` will return the ``b`` resource."
msgstr ""

#: ../../narr/resources.rst:666
msgid ""
"The second argument to ``find_interface`` may also be a :term:`interface`"
" instead of a class.  If it is an interface, each resource in the lineage"
" is checked to see if the resource implements the specificed interface "
"(instead of seeing if the resource is of a class)."
msgstr ""

#: ../../narr/resources.rst:673
msgid "See also :ref:`resources_which_implement_interfaces`."
msgstr ""

#: ../../narr/resources.rst:680
msgid ":app:`Pyramid` API Functions That Act Against Resources"
msgstr ""

#: ../../narr/resources.rst:682
msgid ""
"A resource object is used as the :term:`context` provided to a view.  See"
" :ref:`traversal_chapter` and :ref:`urldispatch_chapter` for more "
"information about how a resource object becomes the context."
msgstr ""

#: ../../narr/resources.rst:686
msgid ""
"The APIs provided by :ref:`traversal_module` are used against resource "
"objects. These functions can be used to find the \"path\" of a resource, "
"the root resource in a resource tree, or to generate a URL for a "
"resource."
msgstr ""

#: ../../narr/resources.rst:690
msgid ""
"The APIs provided by :ref:`location_module` are used against resources. "
"These can be used to walk down a resource tree, or conveniently locate "
"one resource \"inside\" another."
msgstr ""

#: ../../narr/resources.rst:694
msgid ""
"Some APIs on the :class:`pyramid.request.Request` accept a resource "
"object as a parameter. For example, the "
":meth:`~pyramid.request.Request.has_permission` API accepts a resource "
"object as one of its arguments; the ACL is obtained from this resource or"
" one of its ancestors.  Other security related APIs on the "
":class:`pyramid.request.Request` class also accept :term:`context` as an "
"argument, and a context is always a resource."
msgstr ""

